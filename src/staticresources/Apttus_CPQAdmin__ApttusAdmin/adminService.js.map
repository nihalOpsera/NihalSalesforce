{"version":3,"sources":["webpack:///./adminService/adminServices.module.js","webpack:///./adminService/i18nService.js","webpack:///./adminService/remoteService.js","webpack:///./adminService/utilService.js","webpack:///./adminService/objectConstantsService.js","webpack:///./adminService/actionQueueService.js","webpack:///./adminService/queueWrapperService.js"],"names":[],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;;;;;ACXD;AACA;;AAEA;AACA;AACA;AACA,qBAAoB;AACpB,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAI;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0EAAyE,IAAI,YAAY,GAAG;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAM;AACN;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA2B,+BAA+B,eAAe,6BAA6B;AACtG;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,IAAI,iBAAiB,IAAI,WAAW,IAAI;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAO;AACP;;AAEA,QAAO;AACP;;AAEA;;AAEA;AACA;;AAEA;AACA,sBAAqB,mBAAmB;AACxC;AACA;;AAEA;;AAEA,OAAM;;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA4C,IAAI,wBAAwB,IAAI,yBAAyB,IAAI;AACzG;AACA;;AAEA;;AAEA;AACA,GAAE;;;AAGF,EAAC,I;;;;;;ACpMD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAqB;AACrB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,QAAQ;AAChC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,0BAAyB,OAAO;AAChC,0BAAyB,MAAM;AAC/B;AACA,yBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAA+C,gCAAgC;AAC/E;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAqB;AACrB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,0BAAyB;AACzB;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,kBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAqB;AACrB;;AAEA;;AAEA;AACA;;AAEA;;AAEA,MAAK;;AAEL,EAAC;;;;;;;AC/OD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAoB,cAAc;AAClC,qBAAoB,cAAc;AAClC;AACA,qBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAoB,OAAO;AAC3B,qBAAoB,OAAO;AAC3B,qBAAoB,OAAO;AAC3B,qBAAoB,QAAQ;AAC5B,qBAAoB,Q;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,6BAA4B,EAAE,GAAG,EAAE;AACnC;AACA,qBAAoB,OAAO;AAC3B,qBAAoB,OAAO;AAC3B,qBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,oDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA,sCAAqC,mCAAmC;AACxE;AACA;AACA;AACA;AACA;;AAEA,kBAAiB;AACjB;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qBAAoB,OAAO;AAC3B,qBAAoB,OAAO;AAC3B,qBAAoB,OAAO;AAC3B,qBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,cAAa;AACb;AACA;;AAEA,cAAa;AACb;AACA;;AAEA,cAAa;AACb;AACA;;AAEA,cAAa;AACb;AACA;;AAEA,cAAa;AACb;AACA;;AAEA,cAAa;AACb;AACA;;AAEA,cAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,kDAAiD;AACjD;AACA;AACA;AACA;AACA;;AAEA;;AAEA,4BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mFAAkF,EAAE,GAAG;AACvF;AACA;AACA,cAAa;AACb;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD,SAAS;AAC3D;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAiB;AACjB;;AAEA,kBAAiB;AACjB;;AAEA;AACA,cAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,MAAK;AACL,EAAC;;;;;;;;AChqBAAoB,SAAS;AAC7B,qBAAoB,OAAO;AAC3B;AACA;AACA,qBAAoB,OAAO;AAC3B;AACA;AACA,qBAAoB,YAAY;AAChC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,cAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,6CAA4C;AAC5C;AACA;AACA,qBAAoB,OAAO;AAC3B,qBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA,wBAAuB,gBAAgB;AACvC;AACA,oDAAmD;;AAEnD;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,sBAAsB;AACzC,qBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,cAAa;AACb;;AAEA;AACA;AACA;AACA,kCAAiC,gCAAgC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,cAAa;AACb;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,qBAAoB,OAAO;AAC3B,qBAAoB,QAAQ;AAC5B;AACA;AACA;AACA,8BAA6B,WAAW;;AAExC;;AAEA;AACA;AACA;AACA;AACA;;AAEA,cAAa;AACb;;AAEA;;AAEA,2DAA0D;AAC1D,gCAA+B,qCAAqC;AACpE;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qBAAoB,QAAQ;AAC5B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAqC,2CAA2C;AAChF;AACA;AACA;AACA;AACA,oDAAmD;AACnD;;AAEA;AACA;AACA;AACA;AACA,2CAA0C,oCAAoC;AAC9E;AACA;AACA;AACA;AACA,kBAAiB;AACjB;AACA,2CAA0C,oCAAoC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAK;AACL,EAAC;;;;;;;ACzRD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAS;;AAET,MAAK;AACL,EAAC","file":"adminService.js","sourcesContent":["(function() {\r\n    'use strict';\r\n    require('jquery');\r\n    require('angular');\r\n    module.exports = angular.module('cpqAdmin.adminServices', [])\r\n        .provider('i18nService', require('./i18nService'))\r\n        .provider('remoteService', require('./remoteService'))\r\n        .service('UtilService', require('./utilService.js'))\r\n        .service('ObjectConstants', require('./objectConstantsService.js'))\r\n        .service('ActionQueueService', require('./actionQueueService.js'))\r\n        .config(require('./queueWrapperService.js'));\r\n})();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./adminService/adminServices.module.js\n// module id = 1\n// module chunks = 0","(function() {\r\n\tmodule.exports = [function() {\r\n\t\t\r\n\t\tvar provider = this;\r\n\t\t//Set defaults\r\n\t\tvar i18nData = {\r\n\t\t\t'CustomLabel': {},\r\n\t\t\t'CustomField': {},\r\n\t\t\t'dateFormat': 'MM/DD/YYYY',\r\n\t\t\t'dateTemplate': '12/31/1999',\r\n\t\t\t'currencyTemplate': '$1,234.00',\r\n\t\t\t'quantityTemplate': '1,234.00',\r\n\t\t\t'precision': {\r\n\t\t\t\t'currency': 2,\r\n\t\t\t\t'quantity': 2\r\n\t\t\t},\r\n\t\t\t'locale': 'en_US'\r\n\t\t};\r\n\r\n\t\tthis.$get = function() {\r\n\t\t\treturn new i18nService(i18nData);\r\n\r\n\t\t};\r\n\t\tprovider.setCustomLabel = function(newLabels) {\r\n\t\t\tangular.extend(i18nData.CustomLabel, newLabels);\r\n\t\t};\r\n\t\tprovider.setCustomField = function(newFields) {\r\n\t\t\tangular.extend(i18nData.CustomField, newFields);\r\n\t\t};\r\n\t\tprovider.setDateFormat = function(newFormat) {\r\n\t\t\tif (newFormat) {\r\n\t\t\t\ti18nData.dateFormat = newFormat;\r\n\t\t\t}\r\n\t\t};\r\n\t\tprovider.setLocale = function(newLocale) {\r\n\t\t\tif (newLocale) {\r\n\t\t\t\ti18nData.locale = newLocale;\r\n\t\t\t}\r\n\t\t};\r\n\t\tprovider.setPrecision = function(key, value) {\r\n\t\t\tif (typeof key === 'string' && angular.isDefined(value)) {\r\n\t\t\t\ti18nData.precision[key] = Number(value);\r\n\r\n\t\t\t} else if (typeof key === 'object') {\r\n\t\t\t\tangular.extend(i18nData.precision, key);\r\n\r\n\t\t\t}\r\n\t\t};\r\n\t\tprovider.setDateTemplate = function(newTemplate) {\r\n\t\t\tif (newTemplate) {\r\n\t\t\t\ti18nData.dateTemplate = newTemplate;\r\n\t\t\t}\r\n\t\t};\r\n\t\tprovider.setCurrencyTemplate = function(newTemplate) {\r\n\t\t\tif (newTemplate) {\r\n\t\t\t\ti18nData.currencyTemplate = newTemplate;\r\n\t\t\t}\r\n\t\t};\r\n\t\tprovider.setQuantityTemplate = function(newTemplate) {\r\n\t\t\tif (newTemplate) {\r\n\t\t\t\ti18nData.quantityTemplate = newTemplate;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfunction i18nService(i18nData) {\r\n\t\t\tvar service = i18nData;\r\n\t\t\tservice.currencySettings = buildNumberSettings(i18nData.currencyTemplate, i18nData.precision.currency);\r\n\t\t\tservice.quantitySettings = buildNumberSettings(i18nData.quantityTemplate, i18nData.precision.quantity);\r\n\t\t\tservice.dateSettings = buildDateSettings(i18nData.dateTemplate);\r\n\t\t\tservice.timeZoneOffset = (new Date()).getTimezoneOffset() * 60 * 1000;\r\n\t\t\treturn service;\r\n\r\n\t\t\tfunction buildNumberSettings(template, precision) {\r\n\t\t\t\tvar settings = {\r\n\t\t\t\t\tsymbol: '',\r\n\t\t\t\t\tisSymbolBefore: true,\r\n\t\t\t\t\tseparator: ',',\r\n\t\t\t\t\tgroupLength: 3,\r\n\t\t\t\t\tdecimal: '.',\r\n\t\t\t\t\tprecision: angular.isNumber(precision) ? precision : 2,\r\n\t\t\t\t\tgroupingExp: undefined\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Regex for capturing groups of number separators\r\n\t\t\t\t * Matched groups: \r\n\t\t\t\t *      0      ignore     1          2        3        4       5     ignore     6    \t\t\t \t\t\t\r\n\t\t\t\t * [Symbol(s)][spaces][digit(s)][separator][digits][decimal][digits][spaces][Symbol(s)]\r\n\t\t\t\t */\r\n\t\t\t\tvar templateRegex = /^(\\D*)(?:\\s*)([\\d\\.\\,\\'\\s\\-]+)([\\.\\,\\'\\s\\-])(\\d{3,4})(\\.|\\,)(\\d{2,})(?:\\s*)(\\D*)$/;\r\n\t\t\t\tvar matches = template.match(templateRegex);\r\n\t\t\t\tif (matches) {\r\n\t\t\t\t\t//Discard first element -- the full string match\r\n\t\t\t\t\tmatches.shift();\r\n\t\t\t\t\t//Check symbol and where it was matched\r\n\t\t\t\t\tif (matches[0]) {\r\n\t\t\t\t\t\tsettings.symbol = matches[0];\r\n\t\t\t\t\t\tsettings.isSymbolBefore = true;\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsettings.symbol = matches[6];\r\n\t\t\t\t\t\tsettings.isSymbolBefore = false;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//Get the rest of the matches\r\n\t\t\t\t\tsettings.separator = matches[2];\r\n\t\t\t\t\tsettings.groupLength = matches[3].length;\r\n\t\t\t\t\tsettings.decimal = matches[4];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Compile the grouping regexp for fast reuse\r\n\t\t\t\t * Matching groups: \r\n\t\t\t\t *        0               1         ignored         2\r\n\t\t\t\t * [leading digits][grouped digits][decimal][fraction digits]\r\n\t\t\t\t */\r\n\t\t\t\tvar regexpStr = '^(\\\\d{1,' + settings.groupLength + '})?' + '((?:\\\\d{' + settings.groupLength + '})*)' + '(?:[\\.\\,](\\\\d*))?$';\r\n\t\t\t\tsettings.groupingExp = new RegExp(regexpStr);\r\n\t\t\t\treturn settings;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t/**\r\n\t\t\t * Construct settings required for date rendering. May turn this into\r\n\t\t\t * \ta way of making salesforce date format compatible with the 'moment'\r\n\t\t\t * \tlibrary so that the date filter can take advantage of moment.\r\n\t\t\t * \t \r\n\t\t\t */\r\n\t\t\tfunction buildDateSettings(dateTemplate) {\r\n\t\t\t\tvar settings = {\r\n\t\t\t\t\tseparator: '/',\r\n\t\t\t\t\tordering: ['mm', 'dd', 'yyyy'],\r\n\t\t\t\t\tgroupingExp: undefined\r\n\t\t\t\t};\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * Regex for capturing date digits\r\n\t\t\t\t * Matched groups: \r\n\t\t\t\t *      0           1         2           ignore          3\r\n\t\t\t\t * [1-4 digits][separator][1|2 digits][same separator][2-4 digits]\r\n\t\t\t\t */\r\n\t\t\t\tvar templateRegex = /(\\d{1,4})([\\/\\s\\-\\.])(\\d{1,2})(?:\\2)(\\d{1,4})/;\r\n\t\t\t\tvar matches = dateTemplate.match(templateRegex);\r\n\t\t\t\tif (matches) {\r\n\t\t\t\t\t//Discard first element -- the full string match\r\n\t\t\t\t\tmatches.shift();\r\n\t\t\t\t\tsettings.separator = matches[1] || '/';\r\n\t\t\t\t\t[0, 2, 3].forEach(function(matchIndex, loopIndex) {\r\n\t\t\t\t\t\tvar digits = matches[matchIndex];\r\n\t\t\t\t\t\tvar component = '';\r\n\t\t\t\t\t\tvar str = '';\r\n\t\t\t\t\t\tvar numVal = Number(digits);\r\n\t\t\t\t\t\tif (numVal <= 12) {\r\n\t\t\t\t\t\t\tcomponent = 'm';\r\n\r\n\t\t\t\t\t\t} else if (numVal <= 31) {\r\n\t\t\t\t\t\t\tcomponent = 'd';\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcomponent = 'y';\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// TODO : .repeat method is part of ES6 and not compatible with IE and safari \r\n\t\t\t\t\t\t// settings.ordering[loopIndex] = component.repeat(digits.length);\r\n\r\n\t\t\t\t\t\t// put the simple logic instead of .repeat method to fix the issue\r\n\t\t\t\t\t\tfor (var i = 0; i < digits.length; i++) {\r\n\t\t\t\t\t\t\tstr += component;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tsettings.ordering[loopIndex] = str;\r\n\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * Compile the grouping regexp for fast reuse\r\n\t\t\t\t * Matching groups: \r\n\t\t\t\t *    ignored     0       ignored    1       ignored    2       ignored\r\n\t\t\t\t * [whitespace][digits][separator][digits][separator][digits][whitespace]\r\n\t\t\t\t */\r\n\t\t\t\tvar paddingExp = '\\\\s*';\r\n\t\t\t\tvar separatorExp = paddingExp + '\\\\' + settings.separator + '?' + paddingExp;\r\n\t\t\t\tvar regexpStr = ['^', paddingExp, '(\\\\d{1,4})', separatorExp, '(\\\\d{1,4})?', separatorExp, '(\\\\d{1,4})?', paddingExp, '$'].join('');\r\n\t\t\t\tsettings.groupingExp = new RegExp(regexpStr);\r\n\t\t\t\treturn settings;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}];\r\n\r\n\r\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./adminService/i18nService.js\n// module id = 6\n// module chunks = 0","(function() {\r\n    module.exports = [function() {\r\n\r\n        var provider = this;\r\n        var actionsMap = {};\r\n        var redirectOnFail = '/';\r\n        var trackAllRemoteCalls = false;\r\n\r\n        provider.setRemoteActions = function(newActions) {\r\n\r\n            angular.extend(actionsMap, newActions);\r\n            return provider;\r\n        };\r\n\r\n        provider.setRedirectLocation = function(newLocation) {\r\n            redirectOnFail = newLocation ? newLocation : false;\r\n            return provider;\r\n        };\r\n\r\n        provider.setTrackAllRemoteCalls = function(isEnabled) {\r\n            trackAllRemoteCalls = isEnabled;\r\n            return provider;\r\n        };\r\n\r\n        function RemoteServiceFactory($q, $log, $window) {\r\n            return new RemoteService($q, $log, $window, actionsMap, redirectOnFail);\r\n\r\n        }\r\n\r\n        RemoteServiceFactory.$inject = ['$q', '$log', '$window'];\r\n\r\n        this.$get = RemoteServiceFactory;\r\n\r\n        function RemoteService($q, $log, $window, RemoteActions, redirectOnFail) {\r\n            var service = {};\r\n            var lastTransaction = {};\r\n            initRemoteActionFunctions();\r\n            return service;\r\n\r\n            function initRemoteActionFunctions() {\r\n                var actionKey, actionName, isProp, isStr;\r\n                for (actionKey in RemoteActions) {\r\n                    isProp = RemoteActions.hasOwnProperty(actionKey);\r\n                    isStr = typeof actionKey === 'string';\r\n                    if (isProp && isStr) {\r\n                        actionConfig = getRemoteActionConfig(actionKey);\r\n                        service[actionKey] = createRemoteActionFunction(actionConfig);\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n            /*\r\n             * This method will check RemoteAction[key] contains action string or action config object\r\n             * according to that it will create actionConfig object and returns it \r\n             */\r\n            function getRemoteActionConfig(actionKey) {\r\n                var config = {}\r\n                if (angular.isDefined(RemoteActions[actionKey])) {\r\n                    var actionConf = RemoteActions[actionKey];\r\n                    if (angular.isString(actionConf)) {\r\n                        config.actionName = actionConf;\r\n                        config.skipLoader = false;\r\n\r\n                    } else if (angular.isObject(actionConf)) {\r\n                        config.actionName = (angular.isDefined(actionConf.actionName)) ? actionConf.actionName : null;\r\n                        config.skipLoader = (angular.isDefined(actionConf.skipLoader)) ? actionConf.skipLoader : false;\r\n\r\n                    }\r\n\r\n                }\r\n                return config;\r\n            }\r\n\r\n            /**\r\n             * Used for generating methods that can be called on the service by the name\r\n             *  declared in the RemoteActions object.\r\n             * Each method passes its fully-qualified name and its\r\n             *  arguments to invokeRemoteAction. The arguments passed\r\n             *  to this function should just match the signature of \r\n             *  the Apex method. \r\n             * @return {promise} resolves with the result of the remote action\r\n             */\r\n            function createRemoteActionFunction(actionConfig) {\r\n                var actionFunction = function() {\r\n                    return invokeRemoteAction(actionConfig, arguments);\r\n\r\n                };\r\n                return actionFunction;\r\n\r\n            }\r\n            /**\r\n             * Helper for calling visualforce remoting. \r\n             *  \r\n             * @param   {string}    actionName  the remote action to invoke\r\n             * @param   {array}     actionParams    any number of parameters to pass to remote\r\n             *                                                          action before callback \r\n             * @return {promise} a $q promise that resolves with result of remote action\r\n             *\r\n             * Example: \r\n             *      <code>\r\n             *      var thenable = invokeRemoteAction(RemoteActions.getCartLineItems, [cartRequest]);\r\n             *      thenable.then(function (result) {\r\n             *          useResult(result);\r\n             *      });\r\n             *      </code>\r\n             * Here, thenable will be a promise that gets resolved with the result of the remote action \r\n             */\r\n            function invokeRemoteAction(actionConfig, actionParams) {\r\n                // $log.debug('invokeRemoteAction-->'+actionConfig.actionName, actionParams);\r\n\r\n                //Constuct deferred object for return\r\n                var deferred, errorMessage, remoteActionWithParams, resolver, remotingParams, actionName;\r\n                deferred = $q.defer();\r\n                actionName = actionConfig.actionName;\r\n\r\n                setRemoteServiceCount(actionConfig, true);\r\n\r\n                if (!actionName || typeof actionName !== 'string') {\r\n                    errorMessage = \"Error - Could not invoke remote action: action name invalid!\";\r\n                    $log.error(errorMessage);\r\n                    deferred.reject(errorMessage);\r\n                    return deferred.promise;\r\n\r\n                }\r\n                //Construct list with aciton name and parameters to pass to invokeAction\r\n                remoteActionWithParams = [actionName];\r\n                for (var argIndex = 0, nextArg; argIndex < actionParams.length; argIndex++) {\r\n                    nextArg = actionParams[argIndex];\r\n                    /*if (!nextArg) {\r\n                        errorMessage = \"Error - Could not construct remote action parameters. Parameter #\" + argIndex + \" is undefined!\";\r\n                        $log.error(errorMessage);\r\n                        deferred.reject(errorMessage);\r\n                        return deferred.promise;\r\n\r\n                    }*/\r\n                    remoteActionWithParams.push(nextArg);\r\n\r\n                }\r\n                //Add the resolve function and remoting params to argument array\r\n                resolver = function resolveRemoteAction(result, event) {\r\n                    if (event.status) {\r\n\r\n                        if (result) {\r\n                            $log.debug('Resolved \"' + actionName + '\"' +\r\n                                ', Time taken: ' + result.timeTaken / 1000 + ' sec.' +\r\n                                ', Query count: ' + result.queryCount);\r\n\r\n                            if (result.timeDetail) {\r\n                                $log.debug('Timings for ' + actionName, result.timeDetail);\r\n                            }\r\n                        }\r\n                        deferred.resolve(result);\r\n\r\n\r\n                    } else {\r\n                        errorMessage = 'Error - Could not resolve remote action: ' + actionName;\r\n                        $log.error(errorMessage, actionParams, event.message);\r\n                        //Currently the only way to check whether request failed due to user logout\r\n                        var isLoggedOut = event.message.toLowerCase().indexOf('logged') >= 0;\r\n                        if (isLoggedOut && redirectOnFail) {\r\n                            $window.location.href = redirectOnFail;\r\n\r\n                        }\r\n\r\n                        if (event.message === \"Remoting request invalid for your session.  Refresh page and re-submit request\" || event.message.toLowerCase().indexOf('logged') >= 0) {\r\n                            $window.location = getRedirectLocation($window.location.hostname);\r\n                        } else {\r\n                            //alert(event.message);\r\n                        }\r\n\r\n                        deferred.reject(event);\r\n\r\n                    }\r\n\r\n                    setRemoteServiceCount(actionConfig, false);\r\n                };\r\n                remoteActionWithParams.push(resolver);\r\n\r\n                //Add the default parameters for remoting call\r\n                remotingParams = {\r\n                    \"buffer\": false,\r\n                    \"escape\": false,\r\n                    \"timeout\": 120000\r\n                };\r\n                remoteActionWithParams.push(remotingParams);\r\n\r\n                //Try to call visualforce remoting invokeAction with the parameters we built \r\n                try {\r\n                    Visualforce.remoting.Manager.invokeAction.apply(Visualforce.remoting.Manager, remoteActionWithParams);\r\n\r\n                } catch (ex) {\r\n                    errorMessage = 'Error - Could not invoke remote action: ' + actionName;\r\n                    $log.error(errorMessage, actionParams, ex);\r\n                    deferred.reject(errorMessage);\r\n\r\n                }\r\n                return deferred.promise;\r\n\r\n            }\r\n\r\n            function getRedirectLocation(hostName) {\r\n                var hostNameIsContainsNA = hostName.toLowerCase().indexOf('na');\r\n                var hostNameIsContainsCS = hostName.toLowerCase().indexOf('cs');\r\n                if (hostNameIsContainsNA >= 0) {\r\n                    if (!isNaN(hostName[hostNameIsContainsNA + 2])) {\r\n                        return \"https://login.salesforce.com\";\r\n                    }\r\n                } else if (hostNameIsContainsCS >= 0) {\r\n                    if (!isNaN(hostName[hostNameIsContainsCS + 2])) {\r\n                        return \"https://test.salesforce.com\";\r\n                    }\r\n                } else {\r\n\r\n                }\r\n            }\r\n\r\n            /*\r\n             * This method sets pendingRemoteServiceCount of $q service (decorrated in queueWrapperService.js) \r\n             * based on actionConfig.skip and LoggerLevel\r\n             */\r\n            function setRemoteServiceCount(actionConfig, incrementFlag) {\r\n                //$log.debug('setRemoteServiceCount-->', actionConfig, incrementFlag);\r\n                if (!actionConfig.skipLoader || trackAllRemoteCalls) {\r\n                    if (incrementFlag) {\r\n                        $q.incrementRemoteServiceCount();\r\n\r\n                    } else {\r\n                        $q.decrementRemoteServiceCount();\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    }];\r\n\r\n})();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./adminService/remoteService.js\n// module id = 7\n// module chunks = 0","(function() {\r\n    module.exports = ['lodash', function(_) {\r\n        var service = this;\r\n\r\n        service.frequencyConstants = {\r\n            FREQUENCY_HOURLY: 'Hourly',\r\n            FREQUENCY_DAILY: 'Daily',\r\n            FREQUENCY_WEEKLY: 'Weekly',\r\n            FREQUENCY_MONTHLY: 'Monthly',\r\n            FREQUENCY_QUARTERLY: 'Quarterly',\r\n            FREQUENCY_HALFYEARLY: 'Half Yearly',\r\n            FREQUENCY_YEARLY: 'Yearly'\r\n        };\r\n\r\n        service.priceTypesConstants = {\r\n            PRICETYPE_ONETIME: 'One Time',\r\n            PRICETYPE_RECURRING: 'Recurring',\r\n            PRICETYPE_USAGE: 'Usage',\r\n            PRICETYPE_INCLUDED_USAGE: 'Included Usage'\r\n        };\r\n\r\n        /**\r\n         * Use string-to-number conversion to compensate for floating point \r\n         * \terrors in standard javascript rounding.\r\n         * @param  {Number/String} value\r\n         * @param  {Number/String} precision \tthese can be numbers or strings\r\n         *                                    representing numbers\r\n         * @return {Number}\tRounded value\r\n         */\r\n        service.round = function(value, precision) {\r\n            precision = precision ? precision : 0;\r\n            var roundExpPos = \"e+\" + precision;\r\n            var roundExpNeg = \"e-\" + precision;\r\n            return Number(Math.round(value + roundExpPos) + roundExpNeg);\r\n\r\n        };\r\n\r\n        /**\r\n         * Check whether a nmber is within a min/max range. If min or max is not\r\n         * \tof type number, it the value is assumed to automatically meet the \r\n         * \tcriteria. If the value to check is not a number type, it automatically\r\n         * \tfails.\r\n         * @param  {Number}  minVal    \r\n         * @param  {Number}  maxVal    \r\n         * @param  {Number}  betweenVal\r\n         * @param  {Boolean}  strictly\t\tWhether to compare strictly. False by default.\r\n         * @return {Boolean}           \r\n         */\r\n        service.isBetween = function(minVal, maxVal, betweenVal, strictly) {\r\n            if (!angular.isNumber(betweenVal)) {\r\n                return false;\r\n\r\n            }\r\n            var minSatisfied, maxSatisfied;\r\n            if (!strictly) {\r\n                minSatisfied = angular.isNumber(minVal) ? betweenVal >= minVal : true;\r\n                maxSatisfied = angular.isNumber(maxVal) ? betweenVal <= maxVal : true;\r\n\r\n            } else {\r\n                minSatisfied = angular.isNumber(minVal) ? betweenVal > minVal : true;\r\n                maxSatisfied = angular.isNumber(maxVal) ? betweenVal < maxVal : true;\r\n\r\n            }\r\n            return minSatisfied && maxSatisfied;\r\n\r\n        };\r\n\r\n        /**\r\n         * Replicate Java string format where you can pass an string that has\r\n         * \tgroups such as {0}, {1}, ... and an array of strings to insert at\r\n         * \tthe appropriate indicies. Used for filling in custom labels.\r\n         * @param  {[type]} baseString [description]\r\n         * @param  {[type]} inserts    [description]\r\n         * @return {[type]}            [description]\r\n         */\r\n        service.stringFormat = function(baseString, inserts) {\r\n            if (!baseString) {\r\n                return '';\r\n\r\n            }\r\n            if (!angular.isArray(inserts)) {\r\n                return baseString;\r\n\r\n            }\r\n            var stringGroups = baseString.split(/\\{(\\d+)\\}/),\r\n                formattedString = '',\r\n                isInsert = false,\r\n                insertIndex = 0,\r\n                nextInsert = '';\r\n            for (var stringIndex = 0; stringIndex < stringGroups.length; stringIndex++) {\r\n                if (isInsert) {\r\n                    isInsert = false;\r\n                    insertIndex = parseInt(stringGroups[stringIndex]);\r\n                    nextInsert = insertIndex < inserts.length ? inserts[insertIndex] : '';\r\n                    formattedString += nextInsert;\r\n\r\n                } else {\r\n                    isInsert = true;\r\n                    formattedString += stringGroups[stringIndex];\r\n\r\n                }\r\n\r\n            }\r\n            return formattedString;\r\n\r\n        };\r\n\r\n        /**\r\n         * returns true when the parameter passed is undefined or null or empty array or blank string\r\n         * @param obj any kind of parameter \r\n         */\r\n        service.isEmpty = function(obj) {\r\n            if (angular.isDefined(obj) && obj !== null) {\r\n                if (angular.isArray(obj) && obj.length === 0 || obj === '') {\r\n                    return true;\r\n\r\n                }\r\n                return false;\r\n\r\n            }\r\n            return true;\r\n\r\n        };\r\n\r\n        /**\r\n         * Construct a date object in which the time is set to 12:00 AM GMT.\r\n         * This is used to match salesforce UTC milliseconds standard for dates.\r\n         * \r\n         * @param  {Number} year  year as numerical value\r\n         * @param  {Number} month month value, where January = 0\r\n         * @param  {Number} date  date as numerical value\r\n         * @return {Date}\r\n         */\r\n        service.newUTCDate = function(year, month, date) {\r\n            var newDate = new Date();\r\n            newDate.setUTCHours(0, 0, 0);\r\n            if (angular.isNumber(year)) {\r\n                newDate.setUTCFullYear(year);\r\n\r\n            }\r\n            if (angular.isNumber(month)) {\r\n                newDate.setUTCMonth(month);\r\n\r\n            }\r\n            if (angular.isNumber(date)) {\r\n                newDate.setUTCDate(date);\r\n\r\n            }\r\n            return newDate;\r\n\r\n        }\r\n\r\n        /**\r\n         * Computes the new date for adding days to the given date \r\n         * @param date current date\r\n         * @param days number of days to add\r\n         * @return the new date\r\n         */\r\n        service.addDays = function(date, days) {\r\n            return date + 86400000 * days;\r\n        }\r\n\r\n        /**\r\n         * Computes the end date for the given start date and term parameters\r\n         * @param startDate the term start date\r\n         * @param term the term \r\n         * @param frequency the frequency associated with the term\r\n         * @return the end date\r\n         */\r\n        service.computeEndDate = function(startDate, term, frequency) {\r\n            var newEndDate = new Date(startDate);\r\n\r\n            if (frequency === service.frequencyConstants.FREQUENCY_HOURLY) {\r\n                // hourly\r\n                newEndDate = newEndDate.setDate(newEndDate.getDate() + (1 / 24 * term));\r\n\r\n            } else if (frequency === service.frequencyConstants.FREQUENCY_DAILY) {\r\n                // daily\r\n                newEndDate = newEndDate.setDate(newEndDate.getDate() + term);\r\n\r\n            } else if (frequency === service.frequencyConstants.FREQUENCY_WEEKLY) {\r\n                // weekly\r\n                newEndDate = newEndDate.setDate(newEndDate.getDate() + (term * 7));;\r\n\r\n            } else if (frequency === service.frequencyConstants.FREQUENCY_MONTHLY) {\r\n                // monthly\r\n                newEndDate = service.computeEndDateByMonths(startDate, term, 1);\r\n\r\n            } else if (frequency === service.frequencyConstants.FREQUENCY_QUARTERLY) {\r\n                // quarterly\r\n                newEndDate = service.computeEndDateByMonths(startDate, term, 3);\r\n\r\n            } else if (frequency === service.frequencyConstants.FREQUENCY_HALFYEARLY) {\r\n                // half yearly\r\n                newEndDate = service.computeEndDateByMonths(startDate, term, 6);\r\n\r\n            } else if (frequency === service.frequencyConstants.FREQUENCY_YEARLY) {\r\n                // yearly\r\n                newEndDate = service.computeEndDateByMonths(startDate, term, 12);\r\n\r\n            } else {\r\n                //Added for app to not break as start date from ms is converted to date object\r\n                newEndDate = startDate;\r\n            }\r\n\r\n            return newEndDate;\r\n\r\n        };\r\n\r\n        /**\r\n         * compute end date for monthly, quartely, half-yearly or yearly term \r\n         * @param startDate line item start date\r\n         * @param term number of months plus extra days / 30 \r\n         * @param frequencyInMonths 1-monthly, 3-quarterly 6-half-yearly 12-yearly \r\n         */\r\n        service.computeEndDateByMonths = function(startDate, term, frequencyInMonths) {\r\n            var months = (term * frequencyInMonths);\r\n\r\n            var newEndDate = new Date(startDate);\r\n            newEndDate = newEndDate.setMonth(newEndDate.getMonth() + months);\r\n\r\n            var dateToFindDays = new Date(newEndDate);\r\n            dateToFindDays = dateToFindDays.setDate(dateToFindDays.getDate() + 1);\r\n\r\n            var daysInMonths = service.daysInMonth(new Date(dateToFindDays).getFullYear(), new Date(dateToFindDays).getMonth());\r\n            var remainingTerms = ((term * frequencyInMonths) - months);\r\n            var extraDays = Math.round(remainingTerms * daysInMonths);\r\n\r\n            newEndDate = new Date(newEndDate);\r\n            newEndDate = newEndDate.setDate(newEndDate.getDate() + (extraDays - 1));\r\n\r\n            return newEndDate;\r\n        };\r\n\r\n        /**\r\n         * reorder elements within an array such that when a matching key is found, the element is moved to the \r\n         * head of that array - this check is repeated for every element of the array.\r\n         * @param - source array\r\n         * @param - predicate, callback function; Must return true if element should move to the head of the array\r\n         */\r\n        service.reorderArray = function(array, callback) {\r\n            if (_.isArray(array) == false || array.length == 0 || _.isFunction(callback) == false) {\r\n                return;\r\n            }\r\n\r\n            var spliceIdx = [];\r\n\r\n            for (var i = 0; i < array.length; i++) {\r\n                // callback should return true/false\r\n                if ((i > 1) && callback(array[i])) {\r\n                    spliceIdx.push(i);\r\n                }\r\n            }\r\n\r\n            spliceIdx.forEach(function(idx) {\r\n                var culled = array.splice(idx, 1);\r\n                array.splice(0, 0, culled[0]);\r\n            });\r\n        };\r\n\r\n        /**\r\n         * compute days in given year and a month\r\n         * @param year\r\n         * @param month\r\n         * return days in month\r\n         */\r\n        service.daysInMonth = function(year, month) {\r\n            return new Date(year, month, 0).getDate();\r\n        };\r\n\r\n        service.removeTempUIAttributes = function(obj) {\r\n            Object.keys(obj).forEach(function(key) {\r\n                if (_.startsWith(key, '@@') || _.startsWith(key, '$$')) {\r\n                    delete obj[key];\r\n                } else if (angular.isObject(obj[key])) {\r\n                    service.removeTempUIAttributes(obj[key]);\r\n                }\r\n            });\r\n        }\r\n\r\n        service.validateEndDate = function(date) {\r\n            var now = new Date();\r\n            if (now.getTime() > date) {\r\n                return false;\r\n            }\r\n            return true;\r\n        };\r\n\r\n        service.validateDate = function(date) {\r\n            var date_regex = /^(0[1-9]|1[0-2])\\/(0[1-9]|1\\d|2\\d|3[01])\\/(19|20)\\d{2}$/; //Validates the format (MM/DD/YYYY), with a year between 1900 and 2099\r\n            if (angular.isUndefined(date) || date === null) {\r\n                return false;\r\n            } else if (date.toString().trim().length < 1) {\r\n                return false;\r\n            } else if (date_regex.test(date)) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        service.uniq = function(inputArray) {\r\n            var tempArray = [];\r\n            var tempObj = {};\r\n            _.forEach(inputArray, function(value, key) {\r\n                if (!tempObj[value.id]) {\r\n                    tempArray.push(value);\r\n                    tempObj[value.id] = value.id;\r\n                }\r\n            });\r\n            return tempArray;\r\n        }\r\n\r\n        service.intersection = function(inputArray) {\r\n            var tempArray = [];\r\n            _.forEach(inputArray, function(value, key) {\r\n                tempArray.push(value.actionArr);\r\n            });\r\n            return _.intersection.apply(_, tempArray);\r\n        }\r\n\r\n        /**\r\n         * Get the object corresponding to field name\r\n         * @param contextSO the \"starting\" sObject\r\n         * @param fieldAPIName the fully qualified field API name\r\n         * @return the object specified by fieldName\r\n         */\r\n        service.sObjectFromField = function(contextSO, fieldAPIName) {\r\n            //set new value\r\n            var path = fieldAPIName.split('.');\r\n            var curObject = contextSO;\r\n            for (var i = 0, max = path.length - 1; i < max; i++) {\r\n                if (typeof(curObject) !== 'undefined' && curObject != null) {\r\n                    curObject = curObject[path[i]];\r\n                }\r\n            }\r\n\r\n            return curObject;\r\n        }\r\n\r\n        /**\r\n         * create popup for Product Information list\r\n         * @param product Object\r\n         */\r\n        service.createPopup = function(product) {\r\n            var infoURL = \"\";\r\n            if (product.productInformationList.length > 0) {\r\n                if (product.productInformationList[0].InformationType__c == \"Attached File\") {\r\n                    infoURL = \"/servlet/servlet.FileDownload?file=\" + product.productInformationList[0].FileId__c;\r\n\r\n                } else if (product.productInformationList[0].InformationType__c == \"Embedded Code\") {\r\n                    infoURL = product.productInformationList[0].EmbedCode__c;\r\n\r\n                } else if (product.productInformationList[0].InformationType__c == \"URL Address\") {\r\n                    infoURL = product.productInformationList[0].ContentUrl__c;\r\n\r\n                }\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            var header = product.productInformationList.length > 0 ? product.productInformationList[0].Name : \"\";\r\n            var isEmbed = product.productInformationList[0].InformationType__c == \"Embedded Code\" ? true : false;\r\n\r\n            if (infoURL == \"\" || infoURL == null) {\r\n                return false;\r\n            }\r\n\r\n            var url = isEmbed ? '' : infoURL;\r\n\r\n            var infoModal = window.open(url, 'Product Information', 'menubar=1,resizable=1,width=712,height=500');\r\n            if (isEmbed) {\r\n                infoModal.document.write('<html><head><title>Product Information</title></head>');\r\n                infoModal.document.write('<body><center><h3>' + header + '</h3>');\r\n                infoModal.document.write(infoURL);\r\n                infoModal.document.write('</center></body></html>');\r\n            }\r\n            if (window.focus) {\r\n                infoModal.focus();\r\n            }\r\n        }\r\n\r\n        return service;\r\n\r\n    }];\r\n})();\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./adminService/utilService.js\n// module id = 8\n// module chunks = 0","(function() {\r\n    module.exports = [function() {\r\n        var service = this;\r\n\r\n        service.DisplayActions = {\r\n            ACTION_ABANDON: 'Abandon',\r\n            ACTION_FINALIZE: 'Finalize',\r\n            ACTION_MORE: 'More',\r\n            ACTION_REVALIDATE: 'Revalidate'\r\n\r\n        };\r\n\r\n        service.LineItem = {\r\n            LINETYPE_PRODUCT: 'Product/Service',\r\n            LINETYPE_OPTION: 'Option',\r\n            LINETYPE_MISC: 'Misc',\r\n\r\n            PRICETYPE_ONETIME: 'One Time',\r\n            PRICETYPE_RECURRING: 'Recurring',\r\n            PRICETYPE_USAGE: 'Usage',\r\n            PRICETYPE_INCLUDED_USAGE: 'Included Usage',\r\n\r\n            PRICEMETHOD_PERUNIT: 'Per Unit',\r\n            PRICEMETHOD_FLATPRICE: 'Flat Price',\r\n            PRICEMETHOD_PERCENTAGE: 'Percentage',\r\n            PRICEMETHOD_RELATEDPRICE: 'Related Price',\r\n            PRICEMETHOD_TIERED_RATE: 'Tiered Rate',\r\n            PRICEMETHOD_TIERPRICE: 'Tier Price',\r\n\r\n            FREQUENCY_HOURLY: 'Hourly',\r\n            FREQUENCY_DAILY: 'Daily',\r\n            FREQUENCY_WEEKLY: 'Weekly',\r\n            FREQUENCY_MONTHLY: 'Monthly',\r\n            FREQUENCY_QUARTERLY: 'Quarterly',\r\n            FREQUENCY_HALFYEARLY: 'Half Yearly',\r\n            FREQUENCY_YEARLY: 'Yearly',\r\n            FREQUENCY_ONETIME: 'One Time',\r\n\r\n            STATUS_NEW: 'New',\r\n            STATUS_EXISTING: 'Existing',\r\n            STATUS_INCREMENTED: 'Incremented',\r\n            STATUS_AMENDED: 'Amended',\r\n            STATUS_RENEWED: 'Renewed',\r\n            STATUS_UPGRADED: 'Upgraded',\r\n            STATUS_CANCELLED: 'Cancelled',\r\n            STATUS_TRANSIENT: 'Transient',\r\n\r\n            SYNC_STATUS_PENDING: 'Pending',\r\n            SYNC_STATUS_SYNCHRONIZED: 'Synchronized',\r\n\r\n            CONFIG_STATUS_NA: 'NA',\r\n            CONFIG_STATUS_DEFAULT_PENDING: 'Default Pending',\r\n            CONFIG_STATUS_PENDING: 'Pending',\r\n            CONFIG_STATUS_COMPLETE: 'Complete',\r\n\r\n            PRICING_STATUS_PENDING: 'Pending',\r\n            PRICING_STATUS_COMPLETE: 'Complete',\r\n\r\n            PRICEGROUP_PRICERAMP: 'Price Ramp',\r\n            PRICEGROUP_NONE: 'None',\r\n\r\n            COLLABORATION_STATUS_NOT_ASSIGNED: 'Not Assigned',\r\n            COLLABORATION_STATUS_SUBMITTED: 'Submitted',\r\n            COLLABORATION_STATUS_ACCEPTED: 'Accepted',\r\n            COLLABORATION_STATUS_COMPLETED: 'Completed'\r\n\r\n        };\r\n\r\n        service.assetStatusMap = {\r\n            CANCELLED: \"Pending Cancellation\",\r\n            AMENDED: \"Pending Change\",\r\n            RENEWED: \"Pending Renewal\",\r\n            DEFAULT: \"Pending Asset Action\"\r\n        };\r\n\r\n        service.ChargeType = {\r\n            // known charge types\r\n            CHARGETYPE_NONE: 'None',\r\n            CHARGETYPE_STANDARD_PRICE: 'Standard Price',\r\n            CHARGETYPE_LICENSE_FEE: 'License Fee',\r\n            CHARGETYPE_SUBSCRIPTION_FEE: 'Subscription Fee',\r\n            CHARGETYPE_IMPLEMENTATION_FEE: 'Implementation Fee',\r\n            CHARGETYPE_INSTALLATION_FEE: 'Installation Fee',\r\n            CHARGETYPE_MAINTENANCE_FEE: 'Maintenance Fee',\r\n            CHARGETYPE_ADJUSTMENT: 'Adjustment',\r\n\r\n            // miscellaneous charge types\r\n            CHARGETYPE_SALESTAX: 'Sales Tax',\r\n            CHARGETYPE_SHIPPING_HANDLING: 'Shipping & Handling'\r\n\r\n        };\r\n\r\n        service.FieldType = {\r\n            // known field types\r\n            FIELDTYPE_DATE: 'DATE',\r\n            FIELDTYPE_MULTIPICKLIST: 'MULTIPICKLIST',\r\n            FIELDTYPE_CURRENCY: 'CURRENCY',\r\n            FIELDTYPE_PERCENT: 'PERCENT',\r\n            FIELDTYPE_PICKLIST: 'PICKLIST',\r\n            FIELDTYPE_REFERENCE: 'REFERENCE',\r\n            FIELDTYPE_NUMBER: 'NUMBER'\r\n        };\r\n\r\n        // Quote Collaboration Status Constants\r\n        service.CollaborationStatus = {\r\n            NOT_ASSIGNED: 'Not Assigned',\r\n            SUBMITTED: 'Submitted',\r\n            COMPLETED: 'Completed',\r\n            ACCEPTED: 'Accepted'\r\n        };\r\n\r\n        // Quote Collaboration Priorities Constants\r\n        service.CollaborationPriorities = {\r\n            P1: 'P1',\r\n            P2: 'P2',\r\n            P3: 'P3',\r\n            P4: 'P4',\r\n            P5: 'P5'\r\n        };\r\n\r\n        // Quote Collaboration Priorities Constants\r\n        service.CollaborationConfigCols = {\r\n            PRODUCT: 'Product',\r\n            LIST_PRICE: 'List Price',\r\n            BASE_PRICE: 'Base Price',\r\n            QUANTITY: 'Quantity',\r\n            SELLING_TERM: 'Selling Term'\r\n        };\r\n\r\n        service.allowedActions = {\r\n            CANCEL: 'Cancel',\r\n            AMEND: 'Amend',\r\n            UPGRADE: 'Swap',\r\n            RENEW: 'Renew',\r\n            INCREMENT: 'Increment',\r\n            DECREMENT: 'Decrement'\r\n        }\r\n\r\n        service.PackageNamespace = {\r\n            QPCONFIG: 'Apttus_QPConfig',\r\n            CMCONFIG: 'Apttus_CMConfig'\r\n        }\r\n\r\n        service.ProductConfiguration = {\r\n            ROBJECT_NAME_PROPOSAL: 'Proposald__r',\r\n            ROBJECT_NAME_AGREEMENT: 'AgreementId__r',\r\n            ROBJECT_NAME_ORDER: 'OrderId__r',\r\n\r\n            BOTYPE_PROPOSAL: 'Proposal',\r\n            BOTYPE_AGREEMENT: 'Agreement',\r\n            BOTYPE_ORDER: 'Order',\r\n\r\n            STATUS_APPROVAL_REQUIRED: 'Approval Required',\r\n            STATUS_PENDING_APPROVAL: 'Pending Approval',\r\n            STATUS_READY_FOR_APPROVALS: 'Ready For Approvals'\r\n        }\r\n\r\n        service.ApprovalStatusField = {\r\n            PROPOSAL_APPROVAL_STAGE: 'Apttus_Proposal__Approval_Stage__c',\r\n            AGREEMENT_STATUS: 'Apttus__Status__c',\r\n            ORDER_STATUS: 'Status__c'\r\n        }\r\n\r\n        service.RenewalDateTypes = {\r\n            PROPOSAL_END_DATE: 'PROPOSALENDDATE',\r\n            CURRENT_ASSET_END_DATE: 'CURRENTASSETENDDATE',\r\n            FARTHEST_ASSET_END_DATE: 'FARTHESTASSETENDDATE',\r\n            USER_RENEWAL_DATE: 'RENEWALDATE'\r\n        };\r\n\r\n        service.CollaborationIconClass = {\r\n            ASSIGNED_CLASS: 'fa-plus-circle',\r\n            SUBMITTED_CLASS: 'fa-arrow-circle-right',\r\n            ACCEPTED_CLASS: 'fa-check-circle',\r\n            COMPLETED_CLASS: 'fa-exclamation-circle'\r\n        };\r\n\r\n        service.BusinessObjectType = {\r\n            COLLABORATION_REQUEST: 'Collaboration Request'\r\n        };\r\n\r\n        service.RevalidationStatus = {\r\n            STATUS_REVALIDATION_PENDING: 'Pending',\r\n            STATUS_REVALIDATION_NOT_APPLICABLE: 'NA'\r\n        };\r\n\r\n        return service;\r\n    }];\r\n})();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./adminService/objectConstantsService.js\n// module id = 9\n// module chunks = 0","(function() {\r\n    module.exports = ['$q', '$log', function($q, $log) {\r\n\r\n        var service = this;\r\n        var isScheduled = false;\r\n        var processingActions = false;\r\n        var tail = $q.when(true);\r\n        var actionQueue = [];\r\n        var scheduledActionQueue = [];\r\n        var hashedActionsMap = {};\r\n        var settings = {\r\n            logTime: true,\r\n            maxPrecedence: 1024\r\n        };\r\n\r\n        /* -- Public methods -- */\r\n\r\n        //Used to register indiviudal actions and schedule them seperately\r\n        service.registerAction = registerAction;\r\n        service.scheduleAction = scheduleAction;\r\n        service.isProcessingActions = isProcessingActions;\r\n\r\n        /* -- Method Declarations -- */\r\n\r\n\r\n        /**\r\n         * Register a function in the action queue, optionally assignign it a \r\n         * \tprecedence in execution and a actionKey with which to hash. If the function\r\n         * \tparameter is not valid, does nothing. \r\n         *\r\n         * @param  {function}\tfunctionObject \tA function that can be executed by the queue.\r\n         * @param  {number}\t\tprecedence     \tPrecedence with which to execute function. \r\n         *                                   \tHigher = execute sooner\r\n         *                                   \tUndefined = Max (first)\r\n         * @param  {string} \tactionKey       Key with which to hash the function. If provided,\r\n         *                                   \tthe function is to be queued by this key instead\r\n         *                                   \tof by passing it as an object. Defaults to funciton.toString\r\n         * @return {actionQueue}              Reference to this service to allow chainging.\r\n         */\r\n        function registerAction(functionObject, precedence, actionKey) {\r\n            var hashVal, existed;\r\n            var max = settings.maxPrecedence;\r\n            if (!(functionObject instanceof Function)) {\r\n                return service;\r\n\r\n            }\r\n            //Calculate values\r\n            if (!angular.isNumber(precedence)) {\r\n                precedence = max;\r\n\r\n            } else {\r\n                precedence = Math.min(precedence, max);\r\n\r\n            }\r\n            hashVal = actionKey ? hashObject(actionKey) : hashObject(functionObject);\r\n            //Store information\r\n            //existed = hashedActionsMap[hashVal];\r\n            hashedActionsMap[hashVal] = {\r\n                \"action\": functionObject,\r\n                \"precedence\": precedence,\r\n                \"isScheduled\": false\r\n            };\r\n\r\n            return service;\r\n\r\n        }\r\n\r\n        /**\r\n         * Adapted from ActionFunctionQueue; converts any object into a string\r\n         * \tthat has a toString method then hashes that string to an integer value.\r\n         * \t\r\n         * @param  {object} \tobjectToHash\r\n         * @return {integer}  hashed integer value\r\n         */\r\n        function hashObject(objectToHash) {\r\n            var str = objectToHash.toString();\r\n            var hash = 5381;\r\n            for (i = 0; i < str.length; i++) {\r\n                char = str.charCodeAt(i);\r\n                hash = ((hash << 5) + hash) + char; /* hash * 33 + c */\r\n\r\n            }\r\n            return hash;\r\n\r\n        }\r\n\r\n\r\n        /**\r\n         * Schedule a particular action or array of actions. Actions should be \r\n         * \tin scheudled using the same function object or prototype with\r\n         * \twhich they were registered. \r\n         *\r\n         * Note: if parameter is an array, the order of actions does not influence\r\n         * \tthe order in which actions will be enqueued. Instead, the registered\r\n         * \tprecedence will be respected.\r\n         * \t\r\n         * @param {String|Function|Array} actionKey  action or collection of actions\r\n         * @return {promise} Resolves with the result of the action. Resolve waits until the queue finishes running.\r\n         */\r\n        function scheduleAction(actionKey) {\r\n            if (angular.isUndefined(actionKey) || actionKey === null) {\r\n                return tail;\r\n\r\n            }\r\n            var actionArr = [];\r\n            if (angular.isArray(actionKey)) {\r\n                actionArr = actionKey;\r\n\r\n            } else {\r\n                actionArr.push(actionKey);\r\n\r\n            }\r\n            var actionIndex, nextActionKey, newSchedule;\r\n            var resultPromises = [];\r\n            for (actionIndex = 0; actionIndex < actionArr.length; actionIndex += 1) {\r\n                nextActionKey = actionArr[actionIndex];\r\n                queuedResult = queueByPrecedence(nextActionKey);\r\n                if (queuedResult) {\r\n                    resultPromises.push(queuedResult);\r\n                }\r\n                if (!isScheduled) {\r\n                    isScheduled = true;\r\n                    tail = tail.then(fireSync);\r\n\r\n                }\r\n\r\n            }\r\n            if (resultPromises.length == 1) {\r\n                return resultPromises[0];\r\n\r\n            } else if (resultPromises.length > 1) {\r\n                return $q.all(resultPromises);\r\n\r\n            }\r\n            return tail;\r\n\r\n        }\r\n\r\n        /**\r\n         * Put a particular action's info into the queue.\r\n         * @param  {object} actionKey \tKey used to reference object\r\n         * @return {Boolean}           \tTrue if action becomes scheduled, else False.\r\n         */\r\n        function queueByPrecedence(actionKey) {\r\n            if (!actionKey) {\r\n                return false; //Invalid; do nothing.\r\n\r\n            }\r\n\r\n            var hashVal = hashObject(actionKey);\r\n            var actionInfo = hashedActionsMap[hashVal];\r\n            //Invalid or already scheduled.\r\n            if (!actionInfo) {\r\n                return false;\r\n\r\n            } else if (actionInfo.isScheduled) {\r\n                return actionInfo.deferred.promise;\r\n\r\n            }\r\n\r\n            var actionIndex = scheduledActionQueue.length; //add at the end for the least precendence action\r\n            for (var index = 0; index < scheduledActionQueue.length; ++index) {\r\n                var nextActionInfo = scheduledActionQueue[index];\r\n                if (actionInfo.precedence > nextActionInfo.precedence) {\r\n                    actionIndex = index;\r\n                    break;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            scheduledActionQueue.splice(actionIndex, 0, actionInfo);\r\n            actionInfo.isScheduled = true;\r\n            actionInfo.deferred = $q.defer();\r\n            return actionInfo.deferred.promise;\r\n\r\n        }\r\n\r\n        /**\r\n         * Returns true when the action function queue has begun processing actions, false when\r\n         * the queue has completed and is idle.\r\n         * @return {Boolean} True when actions are processing, false otherwise.\r\n         */\r\n        function isProcessingActions() {\r\n            return processingActions;\r\n\r\n        }\r\n\r\n        /**\r\n         * Fires a sync event. The new event is chained onto the tail of the\r\n         *  previous event, meaning events will run sequentially.\r\n         * If the actions in the queue are rejected, i.e. throw errors,\r\n         * \tthe tail of schedlued sync is reset, the rejection is returned.\r\n         * Optionally logs the information about how long the process took.\r\n         * \r\n         * @return {Promise} tail of scheduled queue\r\n         */\r\n        function fireSync() {\r\n            isScheduled = false;\r\n            processingActions = true;\r\n            var sentTime = new Date();\r\n            if (settings.logTime) {\r\n                $log.info(\"Action Queue Submitted: \" + sentTime.toGMTString());\r\n\r\n            }\r\n            //Build and run queue of actions\r\n            return fireScheduledActionQueue().then(\r\n                function onQueueResolve(result) {\r\n                    if (settings.logTime) {\r\n                        var receivedTime = new Date();\r\n                        var delta = Number(receivedTime - sentTime) / 1000;\r\n                        $log.info(\"Sync Transaction Time: \" + delta + \" seconds.\");\r\n\r\n                    }\r\n                    processingActions = false;\r\n                    return result;\r\n\r\n                },\r\n                function onQueueReject(reason) {\r\n                    $log.error('Action Queue was Rejected');\r\n                    isScheduled = false;\r\n                    tail = $q.when(true);\r\n                    processingActions = false;\r\n                    return $q.reject(reason);\r\n\r\n                }\r\n            );\r\n\r\n        }\r\n\r\n        /**\r\n         * New variant of fireActionQueue that uses the queue of action infos,\r\n         * \twhich are in order of decreasing precedence.\r\n         * Creates a chain of primises: start with an empty defer, and add each\r\n         *  function as a \"then\" to execute when the previous promise completes.\r\n         * The whole chain is constructed, then the head of the chain is resolved, \r\n         * \tletting the execution begin.\r\n         * \t\r\n         * @return {promise} the last promise in the chain\r\n         */\r\n        function fireScheduledActionQueue() {\r\n            var queue = $q.defer(),\r\n                pendingDeferreds = [],\r\n                pendingPromises = [],\r\n                nextActionInfo,\r\n                nextPromise;\r\n\r\n            nextPromise = queue.promise;\r\n            for (var actionIndex = 0; actionIndex < scheduledActionQueue.length; actionIndex++) {\r\n                nextActionInfo = scheduledActionQueue[actionIndex];\r\n                nextPromise = nextPromise.then(nextActionInfo.action);\r\n                pendingDeferreds.push(nextActionInfo.deferred);\r\n                pendingPromises.push(nextPromise);\r\n                nextActionInfo.isScheduled = false; //Allow future scheduling\r\n                nextActionInfo.deferred = null;\r\n\r\n            }\r\n            // Resolve all promises created during enqueue.\r\n            $q.all(pendingPromises).then(\r\n                function resolvePending(allResults) {\r\n                    for (var dfdIndex = 0; dfdIndex < pendingDeferreds.length; dfdIndex++) {\r\n                        if (pendingDeferreds[dfdIndex]) {\r\n                            pendingDeferreds[dfdIndex].resolve(allResults[dfdIndex]);\r\n                        }\r\n                    }\r\n                },\r\n                function rejectPending(reason) {\r\n                    for (var dfdIndex = 0; dfdIndex < pendingDeferreds.length; dfdIndex++) {\r\n                        if (pendingDeferreds[dfdIndex]) {\r\n                            pendingDeferreds[dfdIndex].reject(reason);\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n            scheduledActionQueue = [];\r\n            queue.resolve();\r\n            return nextPromise;\r\n\r\n        }\r\n        return service;\r\n    }];\r\n})();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./adminService/actionQueueService.js\n// module id = 10\n// module chunks = 0","(function() {\r\n    module.exports = ['$provide', function($provide) {\r\n        /*\r\n         * This decorator intercepts the creation $q service to add pendingPromissesCount & pendingRemoteServiceCount.\r\n         */\r\n        $provide.decorator('$q', ['$delegate', '$rootScope', '$log', function($delegate, $rootScope, $log) {\r\n\r\n            /*\r\n             *\tTotal pending Prmosses Count\r\n             * Count is maintained through Overloaded Defered method and Finally handller.\r\n             */\r\n            var pendingPromisses = 0;\r\n\r\n            /*\r\n             *\tTotal pending Remote Services Count \r\n             * Count will be maintained through incremental and decrimental methods\r\n             * Incremental and Decrimental methods are consumed in RemoteService.js\r\n             */\r\n            var pendingRemoteServiceCount = 0;\r\n\r\n            var $q = $delegate;\r\n\r\n            /*\r\n             * Defer Method over loading for maintaining pendingPromissesCount\r\n             * It returns same promise ($q.defer()) object with finally handler to maintain pendingPromissesCount\r\n             */\r\n            var origDefer = $q.defer;\r\n\r\n            $q.defer = function() {\r\n                var defer = origDefer();\r\n                pendingPromisses++;\r\n\r\n                defer.promise.finally(function() {\r\n                    pendingPromisses--;\r\n                });\r\n\r\n                return defer;\r\n            };\r\n\r\n            $q.incrementRemoteServiceCount = function() {\r\n                pendingRemoteServiceCount++;\r\n            };\r\n\r\n            $q.decrementRemoteServiceCount = function() {\r\n                pendingRemoteServiceCount--;\r\n            };\r\n\r\n            $q.getPendingRemoteServiceCount = function() {\r\n                return pendingRemoteServiceCount;\r\n            };\r\n\r\n            $q.getPendingPromisses = function() {\r\n                return pendingPromisses;\r\n            };\r\n\r\n            return $q;\r\n        }]);\r\n\r\n    }];\r\n})();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./adminService/queueWrapperService.js\n// module id = 11\n// module chunks = 0"],"sourceRoot":""}
webpackJsonp([1],[
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(12);
	module.exports = __webpack_require__(14);


/***/ }),
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*globals window __webpack_hash__ */
	if(true) {
		var lastData;
		var upToDate = function upToDate() {
			return lastData.indexOf(__webpack_require__.h()) >= 0;
		};
		var check = function check() {
			module.hot.check(true, function(err, updatedModules) {
				if(err) {
					if(module.hot.status() in {
							abort: 1,
							fail: 1
						}) {
						console.warn("[HMR] Cannot apply update. Need to do a full reload!");
						console.warn("[HMR] " + err.stack || err.message);
						window.location.reload();
					} else {
						console.warn("[HMR] Update failed: " + err.stack || err.message);
					}
					return;
				}
	
				if(!updatedModules) {
					console.warn("[HMR] Cannot find update. Need to do a full reload!");
					console.warn("[HMR] (Probably because of restarting the webpack-dev-server)");
					window.location.reload();
					return;
				}
	
				if(!upToDate()) {
					check();
				}
	
				__webpack_require__(13)(updatedModules, updatedModules);
	
				if(upToDate()) {
					console.log("[HMR] App is up to date.");
				}
	
			});
		};
		var addEventListener = window.addEventListener ? function(eventName, listener) {
			window.addEventListener(eventName, listener, false);
		} : function(eventName, listener) {
			window.attachEvent("on" + eventName, listener);
		};
		addEventListener("message", function(event) {
			if(typeof event.data === "string" && event.data.indexOf("webpackHotUpdate") === 0) {
				lastData = event.data;
				if(!upToDate() && module.hot.status() === "idle") {
					console.log("[HMR] Checking for updates on the server...");
					check();
				}
			}
		});
		console.log("[HMR] Waiting for update signal from WDS...");
	} else {
		throw new Error("[HMR] Hot Module Replacement is disabled.");
	}


/***/ }),
/* 13 */
/***/ (function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(updatedModules, renewedModules) {
		var unacceptedModules = updatedModules.filter(function(moduleId) {
			return renewedModules && renewedModules.indexOf(moduleId) < 0;
		});
	
		if(unacceptedModules.length > 0) {
			console.warn("[HMR] The following modules couldn't be hot updated: (They would need a full reload!)");
			unacceptedModules.forEach(function(moduleId) {
				console.warn("[HMR]  - " + moduleId);
			});
		}
	
		if(!renewedModules || renewedModules.length === 0) {
			console.log("[HMR] Nothing hot updated.");
		} else {
			console.log("[HMR] Updated modules:");
			renewedModules.forEach(function(moduleId) {
				console.log("[HMR]  - " + moduleId);
			});
		}
	};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    __webpack_require__(15)();
	    __webpack_require__(294);
	    __webpack_require__(333);
	    __webpack_require__(345);
	    __webpack_require__(351);
	    __webpack_require__(482);
	    __webpack_require__(517);
	    __webpack_require__(520);
	    __webpack_require__(564);
	    __webpack_require__(597);
	    __webpack_require__(644);
	    __webpack_require__(662);
	    __webpack_require__(677);
	    __webpack_require__(684);
	    __webpack_require__(690);
	    __webpack_require__(702);
	    __webpack_require__(734);
	    __webpack_require__(755);
	    __webpack_require__(780);
	    __webpack_require__(812);
	    __webpack_require__(835);
	    __webpack_require__(852);
	    __webpack_require__(869);
	    __webpack_require__(889);
	
	    module.exports = angular.module('cpqAdmin', [
	            'CPQAdminSetting',
	            'cpqAdmin.adminServices',
	            'ui.router',
	            'ui.bootstrap',
	            'ngLodash',
	            'ngMessages',
	            'ngAnimate',
	            'ngMaterial',
	            'angularMoment',
	            'ngSanitize',
	            'ngProgress',
	            'ngIdle',
	            'ngVis',
	            'cpqAdmin.common.directives',
	            'cpqAdmin.common.services',
	            'cpqAdmin.common.filters',
	            'cpqAdmin.product',
	            'cpqAdmin.catalog',
	            'cpqAdmin.customSettingsMaintenanceModal',
	            'cpqAdmin.productGroups',
	            'cpqAdmin.priceList',
	            'cpqAdmin.priceListItem',
	            'cpqAdmin.applicationManagement',
	            'cpqAdmin.smartSearchSettings',
	            'cpqAdmin.objectSummarySettings',
	            'cpqAdmin.favoritesSettings',
	            'cpqAdmin.lookupFieldSettings',
	            'cpqAdmin.priceRuleset',
	            'cpqAdmin.priceDimension',
	            'cpqAdmin.pricePipeline',
	            'cpqAdmin.pricePipelineRuleset',
	            'cpqAdmin.visibilityRules',
	            'cpqAdmin.promotionsExclusionList',
	            'cpqAdmin.formulaField',
	            'cpqAdmin.expression',
	            'cpqAdmin.currencyExchangeRate',
	        ])
	        .config(__webpack_require__(895))
	        .constant('moment', __webpack_require__(897))
	        .constant('cpqAdminConstants', __webpack_require__(900));
	
	})();

/***/ }),
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.common.directives', ['cpqAdmin.common.services'])
			//.directive('dynamicField', require('./dynamic-fields/dynamicFieldDirective.js'))
	        .directive('materialFormField', __webpack_require__(295))
			.directive('adminHeader', __webpack_require__(307))
			.directive('preloader', __webpack_require__(309))
			.directive('modalDialog', __webpack_require__(311))
			.directive('loadingIndicator', __webpack_require__(313))
			.directive('ngTableResizableColumns', __webpack_require__(314))
			.directive('angularTableResize', __webpack_require__(315))
			.directive('imageCarousel', __webpack_require__(316))
			.directive('rightPanel', __webpack_require__(318))
			.directive('multimediaTag', __webpack_require__(320))
	        .directive('dropDisable', __webpack_require__(321))
	        .directive('advancedSearch', __webpack_require__(322))
	        .directive('activityLog', __webpack_require__(324))
	        .directive('applicationFeatureSideMenu', __webpack_require__(326))
			.directive('multiSelect', __webpack_require__(328))
			.directive('handleIeEvents', __webpack_require__(330))
			.directive('searchBox', __webpack_require__(331));
	})();


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Directive: dynamicField
	 * 
	 */
	(function() {
	    'use strict';
	    module.exports = ['$sce', '$templateCache', function($sce, $templateCache) {
	        $templateCache.put('material-dynamicInclude.html', __webpack_require__(296));
	        $templateCache.put('material-textarea.html', __webpack_require__(297));
	        $templateCache.put('material-date.html', __webpack_require__(298));
	        $templateCache.put('material-checkbox.html', __webpack_require__(299));
	        $templateCache.put('material-switch.html', __webpack_require__(300));
	        $templateCache.put('material-picklist.html', __webpack_require__(301));
	        $templateCache.put('material-multiPicklist.html', __webpack_require__(302));
	        $templateCache.put('material-input.html', __webpack_require__(303));
	        $templateCache.put('material-autocomplete.html', __webpack_require__(304));
	        $templateCache.put('material-multiselect-autocomplete.html', __webpack_require__(305));
	        $templateCache.put('material-password.html', __webpack_require__(306));
	
	        /**
	         * An input or read-only field directive. Editable value is bound to 
	         *  the model property. The properties determine how the field is rendered
	         *  and how it is edited. Note that the property names were chosen to match
	         *  the column medatadata information generated by mainCartDirective:
	         *  
	         *  properties.FieldType
	         *          What kind of value to display and store.
	         *          Default: string.
	         *  properties.IsEditable
	         *          Whether to allow editing on the field.
	         *          Default: false.
	         *  properties.IsDisabled
	         *          Whether to to disable an editable field.
	         *          Default: false.
	         *  properties.TrueValue
	         *          Key for what kind of value is equivalent to true for a boolean type.
	         *          Default: "true"
	         *  properties.FalseValue
	         *          Key for what kind of value is equivalent to falsefor a boolean type.
	         *          Default: "false"
	         *  properties.Precision
	         *          Custom number of digits of precision for a double field.
	         *          Default: System quantity-field precision.
	         *  properties.PicklistValues
	         *          The picklist entry schema definition
	         *          
	         * @return {object} directive object
	         */
	        var initializedProps = false;
	
	
	        function materialFieldController($scope, $log, $filter, systemConstants, i18nService, $templateCache) {
	
	            var vm = this,
	                customPrecision = 5,
	                precision;
	            var nsPrefix = systemConstants.nsPrefix;
	            vm.labels = i18nService.CustomLabel;
	
	            if (vm.properties && (vm.properties.Scale || vm.properties.Scale === 0)) {
	                precision = vm.properties.Scale;
	            } else if (vm.scale) {
	                precision = +vm.scale;
	            }
	            if (precision === 0 || precision) {
	                customPrecision = precision;
	            }
	
	            /** Check if this control is a calculated read only value
	             * @return true if this is a caluclated formula, false otherwise
	             */
	            function getIsReadOnlyFormula() {
	                return !vm.IsEditable && getIsStringTypeFormula();
	            }
	
	            /**
	             * Check if this control should be displayed as read only text
	             * @return true if control should be displayed as read only text,
	             *          false otherwise
	             */
	            function getIsReadOnlyPlainText() {
	                return (!vm.IsEditable || vm.isReadOnlyMode) &&
	                    !getIsBooleanType() &&
	                    !getIsStringTypeFormula();
	            }
	
	            vm.getIsReadOnlyPlainText = getIsReadOnlyPlainText;
	            vm.getIsReadOnlyFormula = getIsReadOnlyFormula;
	
	
	            /**
	             * initialize lookup list type 
	             */
	            function initReferenceType() {
	                vm.getSetModel = getSetReference;
	                // setup selectable values
	                if (!angular.isArray(vm.properties.PicklistValues)) {
	                    return;
	                }
	                vm.entries = vm.properties.PicklistValues;
	
	                //set default value for model
	                var modelVal = getModel();
	                if (!angular.isDefined(modelVal) || modelVal === null) {
	                    getSetReference(getPickListDefault());
	                }
	
	                //set "selected" object
	                modelVal = getSetReference();
	
	                vm.selected = !vm.IsEditable ? modelVal : modelVal.selected;
	            }
	
	
	            /**
	             * Check if this control is a string type
	             * @return true if this is either a string type false otherwise
	             */
	            function getIsBooleanType() {
	                return vm.FieldType.toLowerCase() == 'boolean' || vm.FieldType.toLowerCase() == 'checkbox';
	
	            }
	
	            /**
	             * Check if this control is a string type formula
	             * @return true if this is a string type formula, false otherwise
	             */
	            function getIsStringTypeFormula() {
	                return vm.IsCalculated && getIsStringType();
	
	            }
	
	            /**
	             * Check if this control is a string type
	             * @return true if this is either a string type false otherwise
	             */
	            function getIsStringType() {
	                return vm.FieldType.toLowerCase() == 'string';
	
	            }
	
	            /**
	             * Check if this control is a picklist or multi-picklist type
	             * @return true if this is either a picklist 
	                       or multi-picklist type, false otherwise
	             */
	            function getIsPicklistType() {
	                return getIsMultiPicklist() || getIsPicklist();
	
	            }
	
	            /**
	             * Check if this control is a picklist type
	             * @return true if picklist type, false otherwise
	             */
	            function getIsPicklist() {
	                if (angular.isDefined(vm.FieldType)) {
	                    return vm.FieldType.toLowerCase() == 'picklist';
	
	                }
	
	                return false;
	            }
	
	            /**
	             * Check if this control is a multi-picklist type
	             * @return true if multi-picklist type, false otherwise
	             */
	            function getIsMultiPicklist() {
	                if (angular.isDefined(vm.FieldType)) {
	                    return vm.FieldType.toLowerCase() == 'multipicklist';
	
	                }
	
	                return false;
	            }
	
	            /**
	             * Get the default value from the picklist entries
	             * @return the default value selection as a string
	             */
	            function getPickListDefault() {
	                var nextPick,
	                    defaultValues = [];
	                for (var pickIndex = vm.entries.length - 1; pickIndex >= 0; pickIndex--) {
	                    nextPick = vm.entries[pickIndex];
	                    if (nextPick.defaultValue) {
	                        defaultValues.push(nextPick.value);
	                    }
	                }
	
	                return defaultValues.length ? defaultValues.join(';') : null;
	            }
	
	            /**
	             * Get the model value 
	             * @return the model value
	             */
	            function getModel() {
	                if (angular.isFunction(vm.model)) {
	                    return vm.model();
	
	                } else {
	                    if (vm.displayType === 'checkbox') {
	                        if (vm.model === "true" || vm.model === "false") {
	                            vm.model = (vm.model === "true");
	                        }
	                    }
	                    return vm.model;
	                }
	            }
	
	            /**
	             * Set the model value 
	             * @param newVal the new value
	             * @return the current model value
	             */
	            function setModel(newVal) {
	                if (angular.isFunction(vm.model)) {
	                    return vm.model(newVal);
	
	                } else {
	                    vm.model = newVal;
	                    return vm.model;
	                }
	            }
	
	
	            /**
	             * Get/Set model as a string
	             * @param inputStr the new value, undefined will be ignored
	             * @return the current model value
	             */
	            function getSetString(inputStr) {
	                if (angular.isDefined(inputStr)) {
	                    var strVal = inputStr === null ? '' : String(inputStr);
	                    setModel(inputStr);
	                }
	                return getModel();
	
	            }
	
	            /**
	             * Get/Set model as a boolean
	             * @param boolVal the new value, undefined will be ignored
	             * @return the current model value
	             */
	            function getSetBoolean(boolVal) {
	                if (angular.isDefined(boolVal)) {
	                    if (vm.displayType === 'checkbox') {
	                        modelVal = boolVal;
	                    } else {
	                        var modelVal = (trueValue() === boolVal) ? true : ((falseValue() === boolVal) ? false : null);
	                    }
	                    setModel(modelVal);
	                }
	
	                return getModel();
	            }
	
	            /**
	             * Get/Set model as a percentage
	             * @param inputStr the new value, undefined will be ignored
	             * @return the current model value
	             */
	            function getSetPercent(inputStr) {
	                //var precision = vm.systemProperties.PercentageFieldPrecision;
	                if (angular.isDefined(inputStr)) {
	                    if (inputStr === null || inputStr === '') {
	                        setModel(null);
	                    } else {
	                        var inputAsNum = $filter('aptQuantityToNumber')(inputStr, customPrecision);
	                        if (angular.isNumber(inputAsNum)) {
	                            setModel(inputAsNum);
	                        }
	                    }
	                }
	                var modelVal = getModel();
	                return angular.isNumber(+modelVal) ? $filter('aptNumberToQuantity')(modelVal, customPrecision) + '%' : '';
	            }
	
	            /**
	             * Get/Set model as a quantity
	             * @param inputStr the new value, undefined will be ignored
	             * @return the current model value
	             */
	            function getSetQuantity(inputStr) {
	                if (angular.isDefined(inputStr)) {
	                    if (inputStr === null || inputStr === '') {
	                        setModel(null);
	                    } else {
	                        var inputAsNum = $filter('aptQuantityToNumber')(inputStr, customPrecision);
	                        if (angular.isNumber(inputAsNum)) {
	                            setModel(inputAsNum);
	                        }
	                    }
	                }
	                var modelVal = getModel();
	                return angular.isNumber(modelVal) ? $filter('aptNumberToQuantity')(modelVal, customPrecision) : '';
	            }
	
	            /**
	             * Get/Set model as a a double
	             * @param inputStr the new value, undefined will be ignored
	             * @return the current model value
	             */
	            function getSetDouble(inputStr) {
	                //var precision = vm.properties.Scale;
	                if (angular.isDefined(inputStr)) {
	                    if (inputStr === null || inputStr === '') {
	                        setModel(null);
	                    } else {
	                        var inputAsNum = $filter('aptQuantityToNumber')(inputStr, customPrecision);
	                        if (!isNaN(inputAsNum)) {
	                            setModel(inputAsNum);
	                        }
	                    }
	                }
	                var modelVal = getModel();
	                return angular.isNumber(+modelVal) ? $filter('aptNumberToQuantity')(modelVal, customPrecision) : '';
	            }
	
	            /**
	             * Get/Set model as a currency
	             * @param inputStr the new value, undefined will be ignored
	             * @return the current model value
	             */
	            function getSetCurrency(inputStr) {
	                //If change
	                if (angular.isDefined(inputStr)) {
	                    if (inputStr === null || inputStr === '') {
	                        setModel(null);
	                    } else {
	                        setModel($filter('aptCurrencyToNumber')(inputStr, customPrecision));
	                    }
	                }
	                return $filter('aptNumberToCurrency')(getModel(), customPrecision);
	            }
	
	
	            /**
	             * Get/Set model for pickList derived for reference type objects
	             * @param newValue the new value to be set, undefined will be ignored
	             * @return the current model value
	             */
	            function getSetReference(newValue) {
	                var modelVal = null;
	                if (!vm.IsEditable) {
	                    modelVal = getModel();
	                    var entry;
	                    for (entry in vm.entries) {
	                        if (vm.entries[entry].hasOwnProperty('value') &&
	                            modelVal == vm.entries[entry].value) {
	                            return (vm.entries[entry].hasOwnProperty('label') ? vm.entries[entry].label : "");
	                        }
	                    }
	                    return modelVal;
	                }
	
	                if (angular.isDefined(newValue)) {
	                    modelVal = newValue;
	                    setModel(modelVal, false); // 'false': not multiPicklist  
	                }
	
	                modelVal = getModel();
	                var displayModel = {};
	                displayModel.selected = modelVal;
	                return displayModel;
	            }
	
	            /**
				 * Get/Set model as a date
				 * @param dateVal the new value, undefined will be ignored
				 * @return the current model value
				 */
				function getSetDate(dateVal) {
					var enteredDate;
					if (angular.isDefined(dateVal)) {
						if (dateVal === null || dateVal === '') {
							enteredDate = null;
							setModel(0);
	
						} else if (angular.isString(dateVal)) {
							enteredDate = $filter('aptStringToDate')(dateVal);
							var utcMillis = enteredDate.getTime();
							setModel(utcMillis);
							updateTempDate(utcMillis);
	
						} else {
							setModel(dateVal.getTime() + Math.abs((60000 * dateVal.getTimezoneOffset())));
	
						}
	
					}
					var modelVal = getModel();
					/*
					 * $filter('aptDateToString') filter formats a date value to mm/dd/yyyy.
					 * It doesnt have the ability to include hh:m:ss format to mm/dd/yyyy.
					 * A new filter should be inplace which will have the capability.
					 * getFormattedDate() makes the desired format
					 */
					return modelVal ? $filter('aptDateToString')(modelVal) : null;
	
	            }
	
	            function updateTempDate(utcMillis) {
	                // Update Pikaday object in view with offset date.
	
	                utcMillis = utcMillis || getModel();
	                if (utcMillis) {
	                    var newDate = new Date();
	                    var offsetDate = new Date(+utcMillis + (60 * 1000 * newDate.getTimezoneOffset()));
	                    vm.tempDate = offsetDate;
	                }
	            }
	
	            function calculateMaxLengthAllowedForNumberFields(typeOfField) {
	                var maxLength;
	                if (vm.maxLength) {
	                    maxLength = vm.maxLength;
	                } else if (vm.properties && vm.properties.Precision && (vm.properties.Scale || vm.properties.Scale === 0)) {
	                    maxLength = vm.properties.Precision + (Math.floor((vm.properties.Precision - vm.properties.Scale) / 3));
	                    if (vm.properties.Scale !== 0) {
	                        ++maxLength;
	                    }
	                } else if ((+vm.scale || +vm.scale === 0) && (+vm.precision || +vm.precision === 0)) {
	                    maxLength = +vm.precision + (Math.floor((+vm.precision - +vm.scale) / 3));
	                    if (+vm.scale !== 0) {
	                        ++maxLength;
	                    }
	                } else {
	                    maxLength = 255;
	                }
	
	                if (typeOfField === 'currency' || typeOfField === 'percent') {
	                    ++maxLength;
	                }
	
	                return maxLength;
	            }
	
	            /**
	             * Establish which get/set functions to use based on what type of field
	             * the directive is to use. Supported field types:
	             *      'string'        - 
	             *      'double'        - 
	             *      'percent'       - uses custom precision
	             *      'quantity'      - uses custom precision
	             *      'currency'      - uses custom precision & template
	             *      'date'          - uses custom date template
	             *      'picklist'      - uses custom child directive
	             *      'multipicklist' - uses custom child directive
	             *      'boolean'       - uses custom template
	             */
	            function initByFieldType(fieldType) {
	
	                var fieldTypeInitMap = {
	                    'password': function() {
	                        vm.templateUrl = 'material-password.html';
	                        vm.maxLength = vm.properties && vm.properties.Length || vm.maxLength || 255;
	                    },
	
	                    'string': function() {
	                        vm.maxLength = vm.properties && vm.properties.Length || vm.maxLength || 255;
	                        vm.modelOptions.allowInvalid = angular.isDefined(vm.allowInvalid) && vm.allowInvalid === 'true' ? true : false;
	                    },
	
	                    'textarea': function() {
	                        vm.templateUrl = 'material-textarea.html';
	                    },
	
	                    'percent': function() {
	                        vm.getSetModel = getSetPercent;
	                        vm.maxLength = calculateMaxLengthAllowedForNumberFields('percent');
	                    },
	
	                    'date': function() {
	                        vm.templateUrl = 'material-date.html';
	                        vm.getSetModel = getSetDate;
	                        vm.updateTempDate = updateTempDate;
	                        if (vm.model && angular.isNumber(vm.model)) {
	                            updateTempDate();
	                        } else {
	                            initDateWatch();
	                        }
	                    },
	
	                    'datetime': function() {
	                        vm.templateUrl = 'material-date.html';
	                        vm.getSetModel = getSetDate;
	                        vm.updateTempDate = updateTempDate;
	                        if (vm.model && angular.isNumber(vm.model)) {
	                            updateTempDate();
	                        } else {
	                            initDateWatch();
	                        }
	                    },
	
	                    'boolean': function() {
	                        vm.templateUrl = 'material-switch.html';
	                        //vm.displayType = 'checkbox';
	                    },
	
	                    'checkbox': function() {
	                        vm.templateUrl = 'material-checkbox.html';
	                        //change ng-model options
	                        vm.modelOptions.updateOn = 'default';
	                        //setup getter
	                        vm.getSetBoolean = getSetBoolean;
	                        vm.getSetModel = getSetBoolean;
	                        //override display type
	                        vm.displayType = 'checkbox';
	                        //setup true/false values
	                        vm.trueValue = vm.trueValue ? vm.trueValue : vm.properties.TrueValue;
	                        vm.trueValue = vm.trueValue ? vm.trueValue : 'true';
	                        vm.falseValue = vm.falseValue ? vm.falseValue : 'false';
	                    },
	
	                    'double': function() {
	                        vm.getSetModel = getSetDouble;
	                        vm.maxLength = calculateMaxLengthAllowedForNumberFields();
	                    },
	
	                    'quantity': function() {
	                        vm.getSetModel = getSetQuantity;
	                        vm.maxLength = calculateMaxLengthAllowedForNumberFields();
	                    },
	
	                    'currency': function() {
	                        vm.getSetModel = getSetCurrency;
	                        vm.maxLength = calculateMaxLengthAllowedForNumberFields('currency');
	                    },
	
	                    'incentive': function() {
	                        vm.getSetModel = getSetCurrency;
	                        vm.maxLength = calculateMaxLengthAllowedForNumberFields();
	                    },
	
	                    'picklist': function() {
	                        vm.templateUrl = 'material-picklist.html';
	                    },
	
	                    'multipicklist': function() {
	                        vm.templateUrl = 'material-multiPicklist.html';
	                    },
	
	                    'reference': function() {
	                        vm.templateUrl = 'material-picklist.html';
	                        //initReferenceType();
	                        //initPicklistWatch();
	                    },
	
	                    'autocomplete': function() {
	                        vm.templateUrl = 'material-autocomplete.html';
	                    },
	
	                    'multiselect-autocomplete': function() {
	                        vm.templateUrl = 'material-multiselect-autocomplete.html';
	                        vm.addChip = function() {};
	                        vm.removeChip = function() {
	                            vm.showSelectedPanel = vm.model.length > 1 ? true : false;
	                        };
	                        vm.removeItem = function(index) {
	                            vm.model.splice(index, 1);
	                            vm.showSelectedPanel = vm.model.length > 1 ? true : false;
	                        };
	                    }
	                };
	                if (fieldType == 'ID')
	                    fieldType = 'string';
	                fieldType = fieldType ? fieldType.toLowerCase() : 'string';
	                var fieldTypeInitFn = fieldTypeInitMap[fieldType];
	                if (fieldTypeInitFn === undefined) {
	                    $log.error('Unsupported Field Type:', fieldType);
	                    return;
	                }
	                fieldTypeInitFn.call(vm);
	            }
	
	
	            /**
	             * Initialize the overrideable properties for this display control.
	             * This method will attach a default getter/setter which will look
	             * for an attribute override and then a "property" value. Property object
	             * is built from the Schema Definition of a field.
	             * @param propertyName name of the property in proper case
	             * @param castResultToBool flag indicating whether to cast the property to
	             *                         a boolean
	             * @param undefinedValue default value when propertyName is not defined as
	             *                       either an override attribute or a schema property
	             */
	            function initProperty(propertyName, castResultToBool, undefinedValue) {
	                var camelCase = propertyName[0].toLowerCase() + propertyName.substring(1);
	                var getter = function() {
	                    var result;
	                    if (angular.isDefined(this[camelCase])) {
	                        result = this[camelCase];
	                    } else if (this.properties) {
	                        result = this.properties[propertyName];
	                    }
	
	                    if (angular.isUndefined(result)) {
	                        result = undefinedValue;
	                    }
	
	                    if (castResultToBool) {
	                        return String(result).toLowerCase() === 'true';
	                    }
	
	                    return result;
	                };
	
	                var setter = function(val) {
	                    this[camelCase] = val;
	                };
	
	                //setup the property
	                Object.defineProperty(materialFieldController.prototype, propertyName, {
	                    get: getter,
	                    set: setter
	                });
	            }
	
	            /**
	             * Initialize defaults for the view model (vm), then execute additional
	             *  init blocks depending on the field type which may override defaulting:
	             *  - Get the template url for ng-include
	             *  - Define which "applyChange" function to use for field validation
	             * @return {[type]} [description]
	             */
	            function init() {
	                vm.modelOptions = {
	                    getterSetter: true,
	                    updateOn: 'blur',
	                    debounce: 0
	                };
	                vm.getSetModel = getSetString;
	                //Determine whether to use element attributes or properties object
	                if (!angular.isDefined(vm.properties)) {
	                    vm.properties = {};
	                }
	                //set field type
	                vm.fieldType = vm.fieldType ? vm.fieldType : vm.properties.FieldType;
	                //setup the default display type
	                vm.displayType = vm.displayType ? vm.displayType : vm.properties.DisplayType;
	                vm.displayType = vm.displayType ? String(vm.displayType).toLowerCase() : 'text';
	
	                //Get the custom settings and init using them
	                //vm.systemProperties = systemConstants.customSettings.systemProperties;
	                vm.templateUrl = 'material-input.html';
	                //vm.isReadOnlyMode = !!systemConstants.pageParams.mode;
	                vm.isReadOnlyMode = false;
	
	                //setup overridable properties
	                if (!initializedProps) {
	                    initProperty('FieldType', false, 'string');
	                    initProperty('DisplayType', false, 'text');
	                    initProperty('IsCalculated', true, false);
	                    initProperty('IsDisabled', true, false);
	                    initProperty('IsVisible', true, true);
	                    initProperty('IsEditable', true, true);
	                    initProperty('TrueValue', false, 'true');
	                    initProperty('FalseValue', false, 'false');
	                    // initProperty('IsRequired', false, true);
	                    initializedProps = true;
	                }
	                if (vm.isReadOnlyMode === true) {
	                    vm.isEditable = false;
	                }
	
	                /* Check if read-only */
	                // if () {
	                //  vm.getSetModel = getSetString;
	                // }
	
	                //setup getter/setters, templates, etc.
	                initByFieldType(vm.fieldType);
	            }
	
	            function initDateWatch() {
	                if (angular.isString(vm.model)) {
	                    getSetDate(new Date(vm.model + ' 00:00:00'));
	                    updateTempDate();
	                }
	                var deregisterWatch1 = $scope.$watch(
						function() {
							return getModel();
						},
						function(newValue, oldValue) {
							if (newValue !== oldValue && !angular.isDefined(oldValue)) {
	                            updateTempDate(newValue);
	                        }
	                    }
	                );
	                $scope.$on('$destroy', function() {
	                    deregisterWatch1();
	                });
	            }
	
	            init();
	
	        }
	        materialFieldController.$inject = ['$scope',
	            '$log',
	            '$filter',
	            'systemConstants',
	            'i18nService',
	            '$templateCache'
	        ];
	        var directive;
	        directive = {
	            restrict: 'E',
	            scope: {
	                model: '=',
	                fieldType: '@', //override input field type
	                isEditable: '@', //override is editable (same as read only)
	                isDisabled: '@', //override disable input
	                displayType: '@', //override display type
	                trueValue: '@', //truthy value for display type checkbox
	                falseValue: '@', //falsy value for display type checkbox
	                properties: '=?',
	                name: '@',
	                formName: '=',
	                rowNo: '=',
	                fieldLabel: '=',
	                showInline: '@',
	                isRichtext: '=',
	                isRequired: '@',
	                elementId: '@',
	                onFocus: '&',
	                onBlur: '&',
	                onClick: '&',
	                maxLength: '@',
	                precision: '@',
	                scale: '@',
	                allowInvalid: '@',
	                valueChange: '&'
	            },
	            templateUrl: 'material-dynamicInclude.html',
	            controller: materialFieldController,
	            controllerAs: 'vm',
	            bindToController: true,
	            link: function(scope) {
	                scope.trustAsHtml = function(value) {
	                    return $sce.trustAsHtml(value);
	                };
	            }
	        };
	
	        return directive;
	
	
	    }];
	
	
	})();


/***/ }),
/* 296 */
/***/ (function(module, exports) {

	module.exports = "<!-- For editable form field types  -->\n<div data-ng-if=\"!vm.getIsReadOnlyFormula() && !vm.getIsReadOnlyPlainText()\" data-ng-include=\"vm.templateUrl\">\n</div>\n<!-- For editable form field types  -->\n<!-- All form fields in read-only mode -->\n<div data-ng-if=\"vm.getIsReadOnlyPlainText()\" class=\"{{vm.properties.StyleClass}}\" style=\"{{vm.properties.Style}}\">\n    <!-- All read-only form fields -->\n    <div data-ng-if=\"vm.isRichtext === false || vm.properties.IsRichText === false\" class=\"detail\">\n        <span class=\"detail-label\">\n            {{vm.label || vm.properties.FieldLabel}}\n        </span>\n        <span>{{vm.getSetModel()}}</span>\n    </div>\n    <!-- For Rich-Text-Editor -->\n    <div data-ng-bind-html=\"trustAsHtml(vm.model)\" data-ng-if=\"vm.properties.IsRichText === true\" />\n    <div data-ng-include=\"vm.templateUrl\" data-ng-if=\"((vm.fieldType === 'string') && (vm.IsDisabled || !vm.IsEditable))\" />\n</div>\n<!-- All form fields in read-only mode -->\n<!-- For read-only calculated fields -->\n<div data-ng-if=\"vm.getIsReadOnlyFormula()\" class=\"{{vm.properties.StyleClass}}\" style=\"{{vm.properties.Style}}\">\n    <div data-ng-bind-html=\"trustAsHtml(vm.getSetModel())\" />\n</div>\n<!-- For read-only calculated fields -->\n"

/***/ }),
/* 297 */
/***/ (function(module, exports) {

	module.exports = "<md-input-container class=\"md-block\" flex-gt-sm>\n    <label>{{vm.fieldLabel || vm.properties.FieldLabel}}</label>\n    <textarea\n        class=\"slds-textarea\"\n        data-ng-model=\"vm.model\" \n        id=\"{{vm.properties.ElementId}}\" \n        data-ng-class=\"{'dyanmic-field-disabled-input': vm.IsDisabled}\" \n        data-ng-required=\"{{vm.properties.IsRequired || vm.isRequired}}\" \n        data-ng-disabled=\"vm.IsDisabled\"\n        name=\"{{vm.name || vm.properties.FieldName}}\" \n        rows=\"{{vm.rowNo || 2}}\"\n        maxlength=\"{{vm.properties.Length || vm.maxLength || 50000}}\"\n        md-no-autogrow\n        drop-disable\n        handle-ie-events>\n    </textarea>\n</md-input-container>\n"

/***/ }),
/* 298 */
/***/ (function(module, exports) {

	module.exports = "<label class=\"date-font-label\">{{vm.fieldLabel || vm.properties.FieldLabel}}</label>\n<md-datepicker \n\tng-model=\"vm.tempDate\" \n\tmd-placeholder=\"{{vm.fieldLabel || vm.properties.FieldLabel}}\"\n\tname=\"{{vm.name || vm.properties.FieldName}}\" \n\tdata-ng-disabled=\"vm.IsDisabled || !vm.IsEditable\" \n\tdata-ng-required=\"{{vm.properties.IsRequired}}\"\n\tng-change=\"vm.getSetModel(vm.tempDate)\">\n</md-datepicker>"

/***/ }),
/* 299 */
/***/ (function(module, exports) {

	module.exports = "<div>\n    <label class=\"checkbox-label\">\n        <input type=\"checkbox\" class=\"checkbox\" ng-model=\"vm.getSetModel\" aria-label=\"{{vm.fieldLabel || vm.properties.FieldLabel}}\" ng-model-options=\"vm.modelOptions\" id=\"{{vm.properties.ElementId}}\" ng-true-value=\"{{vm.TrueValue}}\" ng-false-value=\"{{vm.FalseValue}}\" ng-disabled=\"vm.IsDisabled || !vm.IsEditable\" name=\"{{vm.name || vm.properties.FieldName}}\" data-ng-click=\"vm.onClick()\" md-prevent-menu-close=\"md-prevent-menu-close\">\n        {{vm.fieldLabel || vm.properties.FieldLabel}}\n    </label>\n</div>\n\n"

/***/ }),
/* 300 */
/***/ (function(module, exports) {

	module.exports = "<!-- <div class=\"field-switch detail\">\n    <span class=\"detail-label\">{{vm.fieldLabel || vm.properties.FieldLabel}}</span>\n    <input type=\"checkbox\" id=\"{{vm.elementId || vm.properties.ElementId}}\" class=\"toggle\" ng-model=\"vm.model\" aria-label=\"{{vm.fieldLabel || vm.properties.FieldLabel}}\" ng-disabled=\"vm.IsDisabled || !vm.IsEditable\">\n    <label for=\"{{vm.elementId || vm.properties.ElementId}}\" class=\"toggle-label\"></label>\n</div> -->\n\n<div class=\"slds-form-element fieldSwitch\">\n    <label class=\"slds-checkbox_toggle slds-grid detail\">\n        <span class=\"slds-form-element__label slds-m-bottom_none detail-label\">{{vm.fieldLabel || vm.properties.FieldLabel}}</span>\n        <input ng-model=\"vm.model\" ng-change=\"vm.valueChange()\" ng-disabled=\"vm.IsDisabled || !vm.IsEditable\" type=\"checkbox\" id=\"{{vm.elementId || vm.properties.ElementId}}\" name=\"{{vm.elementId || vm.properties.ElementId}}\" aria-describedby=\"{{vm.elementId || vm.properties.ElementId}}\" aria-label=\"{{vm.fieldLabel || vm.properties.FieldLabel}}\"/>\n        <span class=\"slds-checkbox_faux_container\" aria-live=\"assertive\">\n            <span class=\"slds-checkbox_faux\"></span>\n        </span>\n    </label>\n</div>"

/***/ }),
/* 301 */
/***/ (function(module, exports) {

	module.exports = "<md-input-container class=\"md-block noMargin-vert noPadding noPadding-vert\" flex-gt-sm>\n    <label>{{vm.fieldLabel || vm.properties.FieldLabel}}</label>\n    <md-select ng-model=\"vm.model\" \n        class=\"slds-input md-picklist-override\"\n    \tng-required=\"{{vm.properties.IsRequired || vm.isRequired}}\" \n    \tname=\"{{vm.name || vm.properties.FieldName}}\" \n        aria-label=\"{{vm.fieldLabel || vm.properties.FieldLabel || 'Picklist'}}\"\n        data-ng-disabled=\"(vm.IsDisabled || isDisabled) || (!vm.IsEditable || !vm.isEditable)\"\n        ng-change=\"vm.properties.methodToCallInController(vm.model)\">\n        <md-option \n            ng-repeat=\"item in vm.properties.PicklistValues  | orderBy : 'label'\"\n            value=\"{{item.value}}\" \n            ng-disabled=\"item.isOptionDisable\">\n            {{item.label}}\n        </md-option>\n    </md-select>\n</md-input-container>\n"

/***/ }),
/* 302 */
/***/ (function(module, exports) {

	module.exports = "<md-input-container class=\"md-block md-multipicklist-override\" flex-gt-sm>\n\t<label>{{vm.fieldLabel || vm.properties.FieldLabel}}</label>\n\t<md-select multiple \n\t\tng-model=\"vm.model\" \n\t\tplaceholder=\"{{vm.fieldLabel || vm.properties.FieldLabel}}\" \n\t\tmd-no-asterisk=\"true\"\n\t\taria-label=\"{{vm.fieldLabel || vm.properties.FieldLabel || 'Multi-Picklist'}}\"\n\t\tdata-ng-required=\"{{vm.properties.IsRequired}}\">\n\t\t\t<md-option ng-repeat=\"item in vm.properties.PicklistValues\" \n\t\t\tvalue=\"{{item.value}}\" \n\t\t\tname=\"{{vm.properties.FieldName}}\">{{item.label}}</md-option>\n\t</md-select>\n</md-input-container>\n"

/***/ }),
/* 303 */
/***/ (function(module, exports) {

	module.exports = "<!-- fieldType: QUANTITY, PERCENTAGE, CURRENCY, DOUBLE -->\n<div class=\"input-group\">\n    <input type=\"text\"\n      class=\"slds-input\"\n      data-ng-model=\"vm.getSetModel\" \n      data-ng-model-options=\"vm.modelOptions\" \n      id=\"{{vm.properties.ElementId}}\" \n      data-ng-true-value=\"{{vm.TrueValue}}\" \n      data-ng-false-value=\"{{vm.FalseValue}}\" \n      data-ng-disabled=\"vm.IsDisabled || !vm.IsEditable\" \n      data-ng-required=\"{{vm.properties.IsRequired || vm.isRequired}}\" \n      name=\"{{vm.name || vm.properties.FieldName}}\" \n      data-ng-focus=\"vm.onFocus()\" \n      data-ng-blur=\"vm.onBlur()\" \n      maxlength=\"{{::vm.maxLength}}\"\n      drop-disable\n      handle-ie-events/>\n    <label>{{vm.fieldLabel || vm.properties.FieldLabel}}\n      <span class=\"input-field-mandatory-asterisk\" data-ng-if=\"vm.properties.IsRequired || vm.isRequired\">*</span>\n    </label>\n</div>\n\n"

/***/ }),
/* 304 */
/***/ (function(module, exports) {

	module.exports = "<md-autocomplete flex  \n  md-input-name=\"{{vm.name || vm.properties.FieldName}}\" \n  md-input-minlength=\"{{vm.properties.minLength || 1}}\" \n  md-input-maxlength=\"{{vm.properties.maxLength || 100}}\" \n  md-no-cache=\"true\" \n  md-search-text=\"vm.searchText\"\n  md-search-text-change=\"vm.properties.autocomplete.searchTextChange(vm.searchText)\"\n  md-selected-item=\"vm.properties.autocomplete.selectedItem\" \n  md-items=\"item in vm.properties.autocomplete.querySearch(vm.searchText,vm.properties)\" \n  md-selected-item-change=\"vm.properties.autocomplete.selectedItemChange(item, vm.properties); vm.valueChange()\"\n  md-item-text=\"item[vm.properties.autocomplete.displayName] || ''\" \n  md-floating-label=\"{{vm.fieldLabel || vm.properties.fieldLabel }}\"\n  md-min-length=\"(vm.properties.autocomplete && vm.properties.autocomplete.minLength != null) ? vm.properties.autocomplete.minLength : 2\"\n  data-ng-required=\"{{vm.properties.IsRequired || vm.isRequired}}\" md-menu-class=\"material-field-autocomplete\">\n    <md-item-template>\n        <span class=\"item-metadata\">\n          <span md-highlight-text=\"vm.searchText\" title=\"{{item[vm.properties.autocomplete.displayName]}}\">{{item[vm.properties.autocomplete.displayName]}}</span>\n        </span>\n        <span class=\"item-label\" data-ng-if=\"item[vm.properties.autocomplete.displayLabel]\">\n            <span data-ng-bind-html=\"item[vm.properties.autocomplete.displayLabel]\"></span>\n        </span>\n    </md-item-template>\n    <md-not-found ng-if=\"vm.properties.autocomplete.showNoResults\">\n      <span class=\"item-label\">\n        {{::vm.properties.autocomplete.noResultsText || 'No Matching Results'}}\n      </span>\n    </md-not-found>\n</md-autocomplete>\n\n\n"

/***/ }),
/* 305 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"custom-container\">\n    <label class=\"label\">{{vm.fieldLabel || vm.properties.filedLabel }}\n    </label>\n    <md-chips ng-model=\"vm.model\" md-on-add=\"vm.addChip($chip)\" md-on-remove=\"vm.removeChip($chip)\">\n        <md-autocomplete  md-min-length =\"2\" md-selected-item=\"vm.properties.autocomplete.selectedItem\" md-search-text=\"vm.searchText\" md-items=\"item in vm.properties.autocomplete.querySearch(vm.searchText,vm.properties)\" md-item-text=\"item[vm.properties.autocomplete.displayName] || ''\">\n            <span md-highlight-text=\"vm.searchText\" title=\"{{item[vm.properties.autocomplete.displayName]}}\">{{item[vm.properties.autocomplete.displayName]}}</span>\n        </md-autocomplete>\n        <md-chip-template>\n            <span>{{$chip[vm.properties.autocomplete.displayName]}}</span>\n        </md-chip-template>\n    </md-chips>\n    <div class=\"button-container\" data-ng-if=\"vm.model.length > 1\">\n        <md-button class=\"md-raised\" data-ng-click=\"vm.showSelectedPanel = !vm.showSelectedPanel;\">{{vm.model.length - 1}} More\n            <i class=\"fa\" ng-class=\"vm.showSelectedPanel === true ? 'fa-caret-up' : 'fa-caret-down'\"></i>\n        </md-button>\n    </div>\n    <div class=\"selected-container\" data-ng-if=\"(vm.showSelectedPanel === true )\">\n        <ul>\n            <li data-ng-repeat=\"item in vm.model\" ng-if=\"$index > 0\">\n                <span class=\"item-text\">{{item[vm.properties.autocomplete.displayName]}}</span>\n                <i class=\"material-icons\" style=\"float:right\" data-ng-click=\"vm.removeItem($index);\">clear</i>\n            </li>\n        </ul>\n    </div>\n</div>\n"

/***/ }),
/* 306 */
/***/ (function(module, exports) {

	module.exports = "<!-- fieldType: QUANTITY, PERCENTAGE, CURRENCY, DOUBLE -->\n<div class=\"input-group\">\n    <input type=\"password\"\n      class=\"slds-input\"\n      data-ng-model=\"vm.getSetModel\" \n      data-ng-model-options=\"vm.modelOptions\" \n      id=\"{{vm.properties.ElementId}}\" \n      data-ng-true-value=\"{{vm.TrueValue}}\" \n      data-ng-false-value=\"{{vm.FalseValue}}\" \n      data-ng-disabled=\"vm.IsDisabled || !vm.IsEditable\" \n      data-ng-required=\"{{vm.properties.IsRequired || vm.isRequired}}\" \n      name=\"{{vm.name || vm.properties.FieldName}}\" \n      data-ng-focus=\"vm.onFocus()\" \n      data-ng-blur=\"vm.onBlur()\" \n      maxlength=\"{{::vm.maxLength}}\"\n      drop-disable/>\n    <label>{{vm.fieldLabel || vm.properties.FieldLabel}}\n      <span class=\"input-field-mandatory-asterisk\" data-ng-if=\"vm.properties.IsRequired || vm.isRequired\">*</span>\n    </label>\n</div>\n\n"

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    module.exports = [function() {
	
	        var pageHeaderController;
	
	        pageHeaderController = function($scope, $state, applicationService, i18nService, $mdDialog, systemConstants, $timeout) {
	            //Extracts only menu related infos from all modules config
	            var vm = this;
	            vm.labels = i18nService.CustomLabel;
	            vm.hostName = systemConstants.salesforceUrl;
	            vm.isAdmin = false;
	
	            vm.extractMenuOptions = function(stateData) {
	                var menuOptions = [];
	                if (stateData && angular.isArray(stateData)) {
	                    var parentMenu = [];
	                    angular.forEach(stateData, function(index) {
	                        if (angular.isUndefined(index.abstract)) {
	                            var temp = {};
	                            if (index.parent) {
	                                var parent = index.parent.split('.')[1];
	                                //check if already present else add it.
	                                if (parentMenu.indexOf(parent) <= -1) {
	                                    parentMenu.push(parent);
	                                    temp.state = parent;
	                                    temp.url = index.url;
	                                    if (index.data && index.data.menuConfig) {
	                                        for (var key in index.data.menuConfig) {
	                                            temp[key] = index.data.menuConfig[key];
	                                        }
	                                    }
	                                    menuOptions.push(temp);
	                                } else {
	
	                                }
	
	                            }
	
	                        }
	
	                    });
	                }
	                return menuOptions;
	            };
	
	            //Gets all state infos defined across modules config methods
	            var stateData = applicationService.getStateList();
	
	            vm.menus = vm.extractMenuOptions(stateData);
	            vm.cancel = function() {
	                $mdDialog.hide();
	            };
	            vm.openMaintenanceJobsModal = function(ev, type) {
	                var prefix = systemConstants.nsPrefix || '';
	                switch (type.toLowerCase()) {
	                    case 'category':
	                        {
	                            vm.maintenanceJobsURL = systemConstants.salesforceUrl + '/apex/' + prefix + 'HierarchyViewUpdate2?isdtp=nv';
	                            vm.modalTitle = vm.labels.CategoryMaintenance;
	                            break;
	                        }
	                    case 'criteria':
	                        {
	                            vm.maintenanceJobsURL = systemConstants.salesforceUrl + '/apex/' + prefix + 'CriteriaUpdate?isdtp=nv';
	                            vm.modalTitle = vm.labels.CriteriaMaintenance;
	                            break;
	                        }
	                    default:
	                        {
	                            vm.maintenanceJobsURL = '';
	                            vm.modalTitle = '';
	                            break;
	                        }
	                }
	                if (vm.maintenanceJobsURL) {
	                    vm.showLoader = true;
	                    $mdDialog.show({
	                        contentElement: '#dialog-maintenance',
	                        parent: angular.element(document.body),
	                        targetEvent: ev,
	                        fullscreen: true
	                    });
	                }
	            };
	
	            var jobModal = document.getElementById('modal-object-id');
	            jobModal.onload = function() {
	                $timeout(function() { vm.showLoader = false; }, 0);
	            };
	
	            //Checking logged-in user profile type
	            applicationService.isAdminProfile().then(function(response) {
	                applicationService.setIsAdmin(response);
	                vm.isAdmin = response;
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        };
	
	        pageHeaderController.$inject = [
	            '$scope',
	            '$state',
	            'applicationService',
	            'i18nService',
	            '$mdDialog',
	            'systemConstants',
	            '$timeout'
	        ];
	
	        return {
	            restrict: 'E',
	            controller: pageHeaderController,
	            controllerAs: 'vm',
	            scope: {},
	            bindToController: {},
	            template: __webpack_require__(308)
	        };
	
	    }];
	})();


/***/ }),
/* 308 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"row header no-row\">\n    <nav>\n        <div class=\"container-fluid headerButtons\">\n            <md-menu>\n                <button class=\"slds-button slds-button_reset\" ng-click=\"$mdOpenMenu($event)\" aria-label=\"Product\">\n                    <i class=\"fa fa-cube\"></i>\n                    <span class=\"menu-text\" ng-bind=\"vm.labels.Products\"></span>\n                </button>\n                <md-menu-content>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.list\" aria-label=\"Manage Products\" ng-bind=\"vm.labels.ManageProducts\">\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.productGroups.details.form({'id': null, 'productId': null, 'productName': null})\" aria-label=\"Manage Product Groups\" ui-sref-opts=\"{reload: true}\" ng-bind=\"vm.labels.ManageProductGroups\">\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.optionGroup.manageOptionGroupsList\" aria-label=\"{{::vm.labels.ManageOptionGroups}}\" ng-bind=\"vm.labels.ManageOptionGroups\">\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.product.manageRules\" aria-label=\"Manage Rules\" ng-bind=\"vm.labels.ManageRules\">\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.expression.field-list\" aria-label=\"{{::vm.labels.ManageFieldExpressions}}\" ng-bind=\"vm.labels.ManageFieldExpressions\"></md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.expression.rollup-list\" aria-label=\"{{::vm.labels.ManageRollups}}\" ng-bind=\"vm.labels.ManageRollups\"></md-button>\n                    </md-menu-item>\n                </md-menu-content>\n            </md-menu>\n            <md-menu>\n                <button class=\"slds-button slds-button_reset\" ng-click=\"$mdOpenMenu($event)\" aria-label=\"{{vm.labels.Catalog}}\">\n                    <i class=\"fa fa-table\"></i>\n                    <span class=\"menu-text\" ng-bind=\"vm.labels.Catalog\"></span>\n                </button>\n                <md-menu-content>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.catalog.manageCatalogList\" aria-label=\"{{::vm.labels.ManageCatalog}}\" ng-bind=\"vm.labels.ManageCatalog\">\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.visibilityRules.list\" aria-label=\"{{::vm.labels.ManageVisibilityRules}}\" ng-bind=\"vm.labels.ManageVisibilityRules\">\n                        </md-button>\n                    </md-menu-item>\n                </md-menu-content>\n            </md-menu>\n            <md-menu>\n                <button class=\"slds-button slds-button_reset\" ng-click=\"$mdOpenMenu($event)\" aria-label=\"Product\">\n                    <i class=\"fa fa-tags\"></i>\n                    <span class=\"menu-text\" ng-bind=\"vm.labels.PricingMenuName\"></span>\n                </button>\n                <md-menu-content>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.priceList.list\" aria-label=\"Manage Price Lists\" ng-bind=\"vm.labels.PricingManagePriceLists\">\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.priceRuleset.list\" aria-label=\"Manage Price Ruleset\" ng-bind=\"vm.labels.PricingManagePriceRuleset\">\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.priceDimension.list\" aria-label=\"Manage Price Dimension\" ng-bind=\"vm.labels.ManagePriceDimension\">\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.pricePipeline.list\" aria-label=\"Manage Price Pipeline\" ng-bind=\"vm.labels.ManagePricePipeline\">\n                        </md-button>\n                    </md-menu-item>\n                    <!-- <md-menu-item>\n                        <md-button data-ui-sref=\"app.pricePipelineRuleset.list\" aria-label=\"Manage Price Pipeline\" ng-bind=\"vm.labels.ManagePricePipelineRuleset\">\n                        </md-button>\n                    </md-menu-item> -->\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.formulaField.list\" aria-label=\"Manage CPQ Formula Fields\" ng-bind=\"vm.labels.ManageCPQFormulaFields\">\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.currencyExchangeRate\" aria-label=\"Manage Currency Conversion\" ng-bind=\"vm.labels.ManageCurrencyConversion\">\n                        </md-button>\n                    </md-menu-item>\n                </md-menu-content>\n            </md-menu>\n            <md-menu>\n                <button class=\"slds-button slds-button_reset\" ng-click=\"$mdOpenMenu($event)\" aria-label=\"Product\">\n                    <i class=\"fa fa-gift\"></i>\n                    <span class=\"menu-text\" ng-bind=\"vm.labels.Promotions\"></span>\n                </button>\n                <md-menu-content>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.promotionsExclusionList.list\" aria-label=\"Manage Exclusion Lists\" ng-bind=\"vm.labels.ManageExclusionLists\">\n                        </md-button>\n                    </md-menu-item>\n                </md-menu-content>\n            </md-menu>\n            <md-menu>\n                <button class=\"slds-button slds-button--icon iconDropdown\" ng-click=\"$mdOpenMenu($event)\" aria-label=\"Product\">\n                    <i class=\"material-icons\">more_vert</i>\n                </button>\n                <md-menu-content>\n                    <md-menu-item>\n                        <md-button href=\"{{javascript.void(0)}}\" ng-click=\"vm.openMaintenanceJobsModal($event, 'Category')\" aria-label=\"Category Maintenance\" ng-bind=\"vm.labels.CategoryMaintenance\">\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button href=\"{{javascript.void(0)}}\" ng-click=\"vm.openMaintenanceJobsModal($event, 'Criteria')\" aria-label=\"Criteria Maintenance\" ng-bind=\"vm.labels.CriteriaMaintenance\">\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ui-sref=\"app.applicationManagement.settingGroup({'id': null})\" aria-label=\"Application Management\" ng-bind=\"vm.labels.ApplicationManagement\">\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button href=\"{{vm.hostName}}\" aria-label=\"Back to Salesforce Home\" ng-bind=\"vm.labels.BackToSalesforceHome\">\n                        </md-button>\n                    </md-menu-item>\n                </md-menu-content>\n            </md-menu>\n        </div>\n    </nav>\n</div>\n<div style=\"visibility: hidden\">\n    <div class=\"md-dialog-container\" id=\"dialog-maintenance\">\n        <md-dialog layout-padding class=\"jobs-dialog\">\n            <md-toolbar>\n                <div class=\"md-toolbar-tools\">\n                    <h2>{{vm.modalTitle}}</h2>\n                    <span flex></span>\n                    <button class=\"slds-button slds-button--icon\" ng-click=\"vm.cancel()\">\n                        <i class=\"material-icons\">clear</i>\n                    </button>\n                </div>\n            </md-toolbar>\n            <object data=\"{{vm.maintenanceJobsURL}}\" width=\"100%\" height=\"100%\" id=\"modal-object-id\"></object>\n            <div preloader add-to-element=\"true\" loading-text=\"vm.labels.LoadingText\" data-ng-if=\"vm.showLoader\"></div>\n        </md-dialog>\n    </div>\n</div>\n"

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = [function() {
	        var loaderController = function() {
	            var vm = this;
	        };
	
	        return {
	            restrict: 'EA',
	            scope: {},
	            controller: loaderController,
	            controllerAs: 'vm',
	            bindToController: {
	                addToElement:'=',
	                loadingText:'=',
	                showBackground: '&'
	            },
	            template: __webpack_require__(310)
	        };
	    }];
	
	})();


/***/ }),
/* 310 */
/***/ (function(module, exports) {

	module.exports = "<div id=\"overlay\" data-ng-class=\"vm.showBackground ? 'noBackground' : vm.addToElement ? 'add-to-element' : 'add-to-body'\">\r\n    <div role=\"status\" class=\"slds-spinner slds-spinner_large slds-spinner_brand\">\r\n        <span class=\"slds-assistive-text\">Loading</span>\r\n        <div class=\"slds-spinner__dot-a\"></div>\r\n        <div class=\"slds-spinner__dot-b\"></div>\r\n    </div>\r\n</div>\r\n"

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = [function() {
	        var modalController = function($state, $rootScope) {
	            var vm = this;
	            vm.showModalpopup = true;
	            vm.ok = function() {
	                vm.showModalpopup = false;
	                $rootScope.showModalPop = false;
	                //$state.go('app.list');
	            }
	            vm.cancel = function() {
	                vm.showModalpopup = false;
	                $rootScope.showModalPop = false;
	            }
	        };
	        modalController.$inject = ['$state', '$rootScope'];
	        return {
	            restrict: 'EA',
	            scope: {},
	            controller: modalController,
	            controllerAs: 'vm',
	            bindToController: {
	                config: '='
	            },
	            template: __webpack_require__(312)
	        };
	    }];
	
	})();

/***/ }),
/* 312 */
/***/ (function(module, exports) {

	module.exports = "<div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.showModalpopup\">\r\n</div>\r\n<div class=\"modalBody\" ng-show=\"vm.showModalpopup\">\r\n    <div class=\"modalOverlay\">\r\n        <div class=\"modalHeaderBody\">\r\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancel()\"></i>\r\n            <span class=\"modal-Title\">{{vm.config.messageTitle}}</span>\r\n            <span class=\"modal-BodyText\">{{vm.config.messageBody}}</span>\r\n        </div>\r\n        <div class=\"modal-Footer text-right\">\r\n            <button class=\"slds-button slds-button--icon-more\" data-ng-if=\"vm.config.cancelButton\" ng-click=\"vm.cancel()\">\r\n                <span class=\"modal-TextColor\">Cancel</span>\r\n            </button>\r\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.ok()\">\r\n                <span class=\"modal-TextColor\">Ok</span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),
/* 313 */
/***/ (function(module, exports) {

	/**
	 * Directive: loadingIndicator
	 */
	
	(function() {
		'use strict';
	
		module.exports = ['ngProgressFactory', function(ngProgressFactory) {
	
			/*
			 * use following method to add logic for Loader Initialisation and Setup
			 */
			var initLoader = function(scope, containerEle) {
				scope.contained_progressbar = ngProgressFactory.createInstance();
				scope.contained_progressbar.setParent(containerEle[0]);
				scope.contained_progressbar.setAbsolute();
				scope.contained_progressbar.setHeight('0.2rem');
				scope.contained_progressbar.setColor('#FFF');
			}
	
			/*
			 * use following method to add logic of show, start and hide loader
			 */
			var initWatch = function(scope, ctrl) {
				var deregisterWatch = scope.$watch(
					function() {
						return ctrl.getPendingRemoteServiceCount();
					},
					function(newPendingCount, oldPendingCount) {
						if (newPendingCount == 0) {
							scope.contained_progressbar.complete();
						} else if (oldPendingCount == 0 || newPendingCount == oldPendingCount) {
							scope.contained_progressbar.start();
						}
					}
				);
	
				scope.$on('$destroy', function() {
					deregisterWatch();
				});
			}
	
			/**
			 * Loading Indicator controller, used by the directive
			 */
			function LoadingIndicatorCtrl($q, $log) {
				var vm = this;
	
				vm.isLoading = function() {
					return ($q.getPendingRemoteServiceCount() > 0);
				}
	
				vm.getPendingRemoteServiceCount = function() {
					return $q.getPendingRemoteServiceCount();
				}
	
			};
	
			LoadingIndicatorCtrl.$inject = ['$q', '$log'];
	
			return {
				restrict: 'EA',
				scope: {},
				controller: LoadingIndicatorCtrl,
				controllerAs: 'vm',
				bindToController: true,
				link: function(scope, ele, attribute, ctrl) {
					initLoader(scope, ele);
					initWatch(scope, ctrl);
				}
			};
		}];
	
	})();

/***/ }),
/* 314 */
/***/ (function(module, exports) {

	(function() {
	    module.exports = [function() {
	        var parseWidth = function(node) {
	                return parseFloat(node.style.width.replace('%', ''));
	            },
	            setWidth = function(node, width) {
	                return node.style.width = "" + width.toFixed(2) + "%";
	            },
	            pointerX = function(e) {
	                return (e.type.indexOf('touch') === 0) ? (e.originalEvent.touches[0] || e.originalEvent.changedTouches[0]).pageX : e.pageX;
	            };
	
	        function ResizableColumns($table) {
	            var __bind = function(fn, me) {
	                return function() {
	                    return fn.apply(me, arguments);
	                };
	            };
	
	            this.pointerdown = __bind(this.pointerdown, this);
	            var _this = this;
	            this.options = {
	                store: window.store,
	                rigidSizing: false,
	                resizeFromBody: true
	            };
	            this.$table = $table;
	            this.setHeaders();
	            this.restoreColumnWidths();
	            this.syncHandleWidths();
	            $(window).on('resize.rc', (function() {
	                return _this.syncHandleWidths();
	            }));
	        }
	
	        ResizableColumns.prototype.getColumnId = function($el) {
	            return this.$table.data('resizable-columns-id') + '-' + $el.data('resizable-column-id');
	        };
	
	        ResizableColumns.prototype.setHeaders = function() {
	            this.$tableHeaders = this.$table.find('thead tr:first th:visible');
	            this.assignPercentageWidths();
	            return this.createHandles();
	        };
	
	        ResizableColumns.prototype.destroy = function() {
	            this.$handleContainer.remove();
	            this.$table.removeData('resizableColumns');
	            return $(window).off('.rc');
	        };
	
	        ResizableColumns.prototype.assignPercentageWidths = function() {
	            var _this = this;
	            return this.$tableHeaders.each(function(_, el) {
	                var $el;
	                $el = $(el);
	                return setWidth($el[0], $el.outerWidth() / _this.$table.width() * 100);
	            });
	        };
	
	        ResizableColumns.prototype.createHandles = function() {
	            var _ref,
	                _this = this;
	            if ((_ref = this.$handleContainer) != null) {
	                _ref.remove();
	            }
	            this.$table.before((this.$handleContainer = $("<div class='rc-handle-container' />")));
	            this.$tableHeaders.each(function(i, el) {
	                var $handle;
	                if (_this.$tableHeaders.eq(i + 1).length === 0 || (_this.$tableHeaders.eq(i).attr('data-noresize') != null) || (_this.$tableHeaders.eq(i + 1).attr('data-noresize') != null)) {
	                    return;
	                }
	                $handle = $("<div class='rc-handle' />");
	                $handle.data('th', $(el));
	                return $handle.appendTo(_this.$handleContainer);
	            });
	            return this.$handleContainer.on('mousedown touchstart', '.rc-handle', this.pointerdown);
	        };
	
	        ResizableColumns.prototype.syncHandleWidths = function() {
	            var _this = this;
	            this.setHeaders();
	            return this.$handleContainer.width(this.$table.width()).find('.rc-handle').each(function(_, el) {
	                var $el;
	                $el = $(el);
	                return $el.css({
	                    left: $el.data('th').outerWidth() + ($el.data('th').offset().left - _this.$handleContainer.offset().left),
	                    height: _this.options.resizeFromBody ? _this.$table.height() : _this.$table.find('thead').height()
	                });
	            });
	        };
	
	        ResizableColumns.prototype.saveColumnWidths = function() {
	            var _this = this;
	            return this.$tableHeaders.each(function(_, el) {
	                var $el;
	                $el = $(el);
	                if ($el.attr('data-noresize') == null) {
	                    if (_this.options.store != null) {
	                        return _this.options.store.set(_this.getColumnId($el), parseWidth($el[0]));
	                    }
	                }
	            });
	        };
	
	        ResizableColumns.prototype.restoreColumnWidths = function() {
	            var _this = this;
	            return this.$tableHeaders.each(function(_, el) {
	                var $el, width;
	                $el = $(el);
	                if ((_this.options.store != null) && (width = _this.options.store.get(_this.getColumnId($el)))) {
	                    return setWidth($el[0], width);
	                }
	            });
	        };
	
	        ResizableColumns.prototype.totalColumnWidths = function() {
	            var total,
	                _this = this;
	            total = 0;
	            this.$tableHeaders.each(function(_, el) {
	                return total += parseFloat($(el)[0].style.width.replace('%', ''));
	            });
	            return total;
	        };
	
	        ResizableColumns.prototype.pointerdown = function(e) {
	            var $currentGrip, $leftColumn, $rightColumn, startPosition, widths,
	                _this = this;
	            e.preventDefault();
	            startPosition = pointerX(e);
	            $currentGrip = $(e.currentTarget);
	            $leftColumn = $currentGrip.data('th');
	            $rightColumn = this.$tableHeaders.eq(this.$tableHeaders.index($leftColumn) + 1);
	            widths = {
	                left: parseWidth($leftColumn[0]),
	                right: parseWidth($rightColumn[0])
	            };
	            this.$table.addClass('rc-table-resizing');
	            $(document).on('mousemove.rc touchmove.rc', function(e) {
	                var difference;
	                difference = (pointerX(e) - startPosition) / _this.$table.width() * 100;
	                setWidth($rightColumn[0], widths.right - difference);
	                return setWidth($leftColumn[0], widths.left + difference);
	            });
	            return $(document).one('mouseup touchend', function() {
	                $(document).off('mousemove.rc touchmove.rc');
	                _this.$table.removeClass('rc-table-resizing');
	                _this.syncHandleWidths();
	                return _this.saveColumnWidths();
	            });
	        };
	
	
	        return {
	            restrict: 'AC',
	            priority: 999,
	            require: 'ngTable',
	            link: function(scope, element, args, ngTable) {
	                var data;
	                scope.$watch('$data', function() {
	                    data.destroy();
	                    data = new ResizableColumns(element);
	                });
	                data = new ResizableColumns(element);
	            }
	        };
	
	    }];
	})();


/***/ }),
/* 315 */
/***/ (function(module, exports) {

	(function() {
	    module.exports = [function() {
	
	        var table = null,
	            container = null,
	            columns = null,
	            resizer = null,
	            cache = null,
	            resizer = null,
	            isFirstDrag = null,
	            defaultWidth = 100;
	
	        function ResizerModel(table, columns, container) {
	            this.minWidth = 100;
	
	            this.table = table;
	            this.columns = columns;
	            this.container = container;
	
	            this.handleColumns = this.handles();
	            this.ctrlColumns = this.ctrlColumns();
	        }
	
	        ResizerModel.prototype.setup = function() {
	            // Hide overflow by default
	            $(this.container).css({
	                overflowX: 'hidden'
	            })
	
	            // First column is auto to compensate for 100% table width
	            $(this.columns).first().css({
	                width: 'auto'
	            });
	        }
	
	        ResizerModel.prototype.onTableReady = function() {
	            // Table is by default 100% width
	            $(this.table).outerWidth('100%');
	        };
	
	        ResizerModel.prototype.handles = function() {
	            // By default all columns should be assigned a handle
	            return this.columns;
	        };
	
	        ResizerModel.prototype.ctrlColumns = function() {
	            // By default all columns assigned a handle are resized
	            return this.handleColumns;
	        };
	
	        ResizerModel.prototype.onFirstDrag = function() {
	            // By default, set all columns to absolute widths
	            $(this.ctrlColumns).each(function(index, column) {
	                $(column).width($(column).width());
	            })
	        };
	
	        ResizerModel.prototype.handleMiddleware = function(handle, column) {
	            // By default, every handle controls the column it is placed in
	            return column;
	        };
	
	        ResizerModel.prototype.restrict = function(newWidth) {
	            // By default, the new width must not be smaller that min width
	            return newWidth < this.minWidth;
	        };
	
	        ResizerModel.prototype.calculate = function(orgWidth, diffX) {
	            // By default, simply add the width difference to the original
	            return orgWidth + diffX;
	        };
	
	        ResizerModel.prototype.onEndDrag = function() {
	            // By default, do nothing when dragging a column ends
	            return;
	        };
	
	        ResizerModel.prototype.saveAttr = function(column) {
	            return $(column).outerWidth();
	        };
	
	        ResizerModel.prototype.setup = function() {
	            // Allow overflow in this mode
	            $(this.container).css({
	                overflow: 'auto'
	            });
	        };
	
	        ResizerModel.prototype.onTableReady = function() {
	            // For mode overflow, make table as small as possible
	            $(this.table).width("100%");
	        };
	
	        function bindUtilityFunctions(table, attr, scope) {
	            if (scope.bind === undefined) return;
	            scope.bind = {
	                update: function() {
	                    cleanUpAll(table);
	                    initialiseAll(table, attr, scope);
	                }
	            }
	        }
	
	        function cleanUpAll(table) {
	            isFirstDrag = true;
	            deleteHandles(table);
	        }
	
	        function resetTable(table) {
	            $(table).outerWidth('100%');
	            if ($(table).find('th').width() < defaultWidth)
	                $(table).find('th').width(defaultWidth);
	            else
	                $(table).find('th').width('auto');
	        }
	
	        function deleteHandles(table) {
	            $(table).find('th').find('.handle').remove();
	        }
	
	        function initialiseAll(table, attr, scope) {
	            // Get all column headers
	            columns = $(table).find('th');
	
	            resizer = new ResizerModel(table, columns, container);
	
	
	            // Decide which columns should have a handler attached
	            handleColumns = resizer.handles(columns);
	
	            // Decide which columns are controlled and resized
	            ctrlColumns = resizer.ctrlColumns;
	
	            // Execute setup function for the given resizer mode
	            resizer.setup();
	
	            // Set column sizes from cache
	            setColumnSizes(cache);
	
	            // Initialise all handlers for every column
	            handleColumns.each(function(index, column) {
	                initHandle(table, column);
	            })
	
	        }
	
	        function setColumnSizes(cache) {
	            if (!cache) {
	                resetTable(table);
	                return;
	            }
	
	            $(table).width('auto');
	
	            ctrlColumns.each(function(index, column) {
	                var id = $(column).attr('id');
	                var cacheWidth = cache[id];
	                $(column).css({ width: cacheWidth });
	            })
	
	            resizer.onTableReady();
	        }
	
	        function initHandle(table, column) {
	            // Prepend a new handle div to the column
	            var handle = $('<div>', {
	                class: 'handle'
	            });
	
	            $(column).prepend(handle);
	
	            // Make handle as tall as the table
	            //$(handle).height($(table).height())
	
	            // Use the middleware to decide which columns this handle controls
	            var controlledColumn = resizer.handleMiddleware(handle, column)
	
	            // Bind mousedown, mousemove & mouseup events
	            bindEventToHandle(table, handle, controlledColumn);
	        }
	
	        function bindEventToHandle(table, handle, column) {
	
	            // This event starts the dragging
	            $(handle).mousedown(function(event) {
	                if (isFirstDrag) {
	                    resizer.onFirstDrag(column, handle);
	                    resizer.onTableReady();
	                    isFirstDrag = false;
	                }
	
	                var optional = {}
	                if (resizer.intervene) {
	                    optional = resizer.intervene.selector(column);
	                    optional.column = optional;
	                    optional.orgWidth = $(optional).width();
	                }
	
	                // Prevent text-selection, object dragging ect.
	                event.preventDefault();
	
	                // Change css styles for the handle
	                $(handle).addClass('active');
	
	                // Show the resize cursor globally
	                $('body').addClass('table-resize');
	
	                // Get mouse and column origin measurements
	                var orgX = event.clientX;
	                var orgWidth = $(column).width();
	
	                // On every mouse move, calculate the new width
	                $(window).mousemove(calculateWidthEvent(column, orgX, orgWidth, optional))
	
	                // Stop dragging as soon as the mouse is released
	                $(window).one('mouseup', unbindEvent(handle))
	
	            })
	        }
	
	        function calculateWidthEvent(column, orgX, orgWidth, optional) {
	            return function(event) {
	                // Get current mouse position
	                var newX = event.clientX;
	
	                // Use calculator function to calculate new width
	                var diffX = newX - orgX;
	                var newWidth = resizer.calculate(orgWidth, diffX);
	
	                // Use restric function to abort potential restriction
	                if (resizer.restrict(newWidth)) return;
	
	                // Extra optional column
	                if (resizer.intervene) {
	                    var optWidth = resizer.intervene.calculator(optional.orgWidth, diffX);
	                    if (resizer.intervene.restrict(optWidth)) return;
	                    $(optional).width(optWidth)
	                }
	
	                // Set size
	                $(column).width(newWidth);
	            }
	        }
	
	        function unbindEvent(handle) {
	            // Event called at end of drag
	            return function( /*event*/ ) {
	                $(handle).removeClass('active');
	                $(window).unbind('mousemove');
	                $('body').removeClass('table-resize');
	
	                resizer.onEndDrag();
	
	                saveColumnSizes();
	
	            }
	        }
	
	        function saveColumnSizes() {
	            if (!cache) cache = {};
	            $(columns).each(function(index, column) {
	                var id = $(column).attr('id');
	                if (!id) return;
	                cache[id] = resizer.saveAttr(column);
	            })
	        }
	
	        return {
	            restrict: 'AC',
	            require: 'ngTable',
	            link: function(scope, element, attr, ngTable) {
	                // Set global reference to table
	                table = element;
	
	                // Set global reference to container
	                container = scope.container ? $(scope.container) : $(table).parent();
	
	                // Add css styling/properties to table
	                $(table).addClass('resize');
	
	                // Initialise handlers, bindings and modes
	                initialiseAll(table, attr, scope);
	
	                // Bind utility functions to scope object
	                bindUtilityFunctions(table, attr, scope);
	
	                // Watch for mode changes and update all
	                scope.$watch('$data', function() {
	                    cleanUpAll(table);
	                    initialiseAll(table, attr, scope);
	                });
	            }
	        };
	
	    }];
	})();

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = [function() {
	        var productImageController = function($scope) {
	            var vm = this;
	
	            vm.disableRightButton = false;
	            //This should be true by default
	            vm.disableLeftButton = true;
	
	            vm.activeImageIndex = 0;
	            //var numberOfImage = vm.imageList.length;
	            var numberOfImage;
	
	            vm.activateImage = function(index) {
	                vm.activeImageIndex = parseInt(index, 10);
	                //Enable / Disable left button code
	                if (vm.activeImageIndex <= 0) {
	                    vm.disableLeftButton = true;
	                } else {
	                    vm.disableLeftButton = false;
	                }
	                //Enable / Disable right button code
	                if (vm.activeImageIndex !== (numberOfImage - 1)) {
	                    vm.disableRightButton = false;
	                } else {
	                    vm.disableRightButton = true;
	                }
	
	            };
	
	            //var ip = document.getElementById('adjustImagePanel');
	            vm.nextImage = function() {
	                numberOfImage = vm.imageList.length;
	                var imagePanel = document.getElementById('imageContainer');
	                vm.disableLeftButton = false;
	                vm.activeImageIndex = (vm.activeImageIndex !== numberOfImage) ? vm.activeImageIndex + 1 : 0;
	                if (vm.activeImageIndex >= 4) {
	                    imagePanel.style.left = ((vm.activeImageIndex + 1) - 4) * (-54) + 'px';
	                    if (vm.activeImageIndex === (numberOfImage - 1)) {
	                        vm.disableRightButton = true;
	                    }
	
	                }
	            };
	
	            vm.prevImage = function() {
	                numberOfImage = vm.imageList.length;
	                var imagePanel = document.getElementById('imageContainer');
	                vm.disableRightButton = false;
	                vm.activeImageIndex = (vm.activeImageIndex !== 0) ? vm.activeImageIndex - 1 : numberOfImage;
	                if (vm.activeImageIndex <= (numberOfImage - 5)) {
	                    imagePanel.style.left = ((vm.activeImageIndex + 1) - 1) * (-54) + 'px';
	                    if (vm.activeImageIndex === 0) {
	                        vm.disableLeftButton = true;
	                    }
	
	                }
	            };
	
	            var deRegisterFunc = $scope.$watch('vm.imageList', function(newValue, oldValue) {
	                if (newValue && oldValue && newValue !== oldValue) {
	                    vm.disableRightButton = false;
	                    vm.disableLeftButton = true;
	                    vm.activeImageIndex = 0;
	                }
	            });
	
	            $scope.$on('destroy', function() {
	                deRegisterFunc();
	                vm = null;
	            });
	
	        };
	
	        productImageController.$inject = ['$scope'];
	
	        return {
	            restrict: 'E',
	            scope: {},
	            controller: productImageController,
	            controllerAs: 'vm',
	            bindToController: {
	                imageList: '='
	            },
	            template: __webpack_require__(317),
	            link: function(scope, element, attrs) {
	
	                var mainContainer = document.querySelector('.sub-page-container');
	                var detailContainer = document.querySelector('.detail-container');
	                var scroller = angular.element(mainContainer);
	                var imageContainer = angular.element(document.querySelector('.product-details'));
	
	                scroller.bind('scroll', function() {
	                    var imgContainerHeight = Number(imageContainer.css('height').split('px')[0]);
	                    var mainContainerHeight = Number(angular.element(detailContainer).css('height').split('px')[0]);
	                    var sTop = Number(mainContainer.scrollTop);
	                    var mTop = imgContainerHeight + sTop;
	
	                    if (mTop <= mainContainerHeight) {
	                        imageContainer.css('margin-top', sTop + 'px');
	                    }
	                });
	
	            }
	        };
	    }];
	
	})();

/***/ }),
/* 317 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"product-details\">\r\n    <span ng-if=\"vm.imageList.length == 0\" class=\"fa fa-image\"></span>\r\n    <div class=\"inherit\" ng-if=\"vm.imageList.length > 0\">\r\n        <div class=\"product-body\">\r\n            <div class=\"product-image\">\r\n                <img data-ng-src=\"{{vm.imageList[vm.activeImageIndex].source}}\" data-ng-attr-alt=\"{{vm.imageList[0].alt}}\">\r\n            </div>\r\n        </div>\r\n        <div class=\"product-images\">\r\n            <div class=\"adjustImagePanel\" id=\"adjustImagePanel\">\r\n                <div class=\"adjustInnerImagePanel\">\r\n                    <div class=\"imageContainer\" id=\"imageContainer\">\r\n                        <img height=\"50\" class=\"image\" data-ng-repeat=\"img in vm.imageList\" data-ng-src=\"{{img.source}}\" data-ng-attr-alt=\"{{img.alt}}\" data-ng-click=\"vm.activateImage($index)\" data-ng-class=\"{'active': '{{$index}}' == vm.activeImageIndex, '': '{{$index}}' != vm.activeImageIndex}\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"clearfix\"></div>\r\n        <div class=\"product-pager text-right\">\r\n            <button class=\"slds-button prev pager-item\" data-ng-disabled=\"vm.disableLeftButton\" data-ng-click=\"vm.prevImage()\" ng-if=\"vm.imageList.length > 4\"><i class=\"fa fa-angle-left\"></i></button>\r\n            <button class=\"slds-button next pager-item\" data-ng-disabled=\"vm.disableRightButton\" data-ng-click=\"vm.nextImage()\" ng-if=\"vm.imageList.length > 4\"><i class=\"fa fa-angle-right\"></i></button>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = [function() {
	        var rightPanelController = function($state) {
	
	            var vm = this;
	            vm.slideTreePanelToHide = function() {
	                vm.expandCollapse()();
	            }
	            vm.loadProductDetails = function() {
	                $state.go('app.product.details', {
	                    id: vm.productId
	                });
	            };
	
	            vm.getFormattedContent = function(isActive) {
	                var modifiedValue = '';
	                
	                if (isActive) {
	                            modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	                        } else {
	                            modifiedValue = "<i class='material-icons show'>check_circle</i>";
	                        }
	                return modifiedValue;
	            };
	        };
	
	        return {
	            restrict: 'EA',
	            scope: {},
	            controller: rightPanelController,
	            controllerAs: 'vm',
	            bindToController: {
	                expandCollapse: '&',
	                config: '=',
	                productId: '=',
	                imageList: '=',
	                activeImageIndex: '='
	            },
	            template: __webpack_require__(319)
	        };
	    }];
	
	})();


/***/ }),
/* 319 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"list-right-panel\">\n    <div class=\"panel-header text-right\">\n        <i class=\"material-icons\" data-ng-click=\"vm.loadProductDetails()\" aria-hidden=\"true\">mode_edit</i>\n        <i class=\"material-icons\" data-ng-click=\"vm.slideTreePanelToHide()\" aria-hidden=\"true\">clear</i>\n    </div>\n    <div class=\"panel-Container\">\n        <div class=\"panel-image\">\n            <image-carousel image-list=\"vm.imageList\" class=\"fixed-block\" active-image-index=\"vm.activeImageIndex\"></image-carousel>\n        </div>\n        <div data-ng-repeat=\"column in vm.config\">\n            <div class=\"col-xs-12\" data-ng-class=\"column.Type == 'TEXTAREA' && column.IsRichText==true?'col-lg-12':'col-lg-5'\">\n                <div class=\"form-group \">\n                    <material-form-field model=\"column.Value\" field-type=\"{{column.Type}}\" is-editable=\"false\" properties=\"column\" data-ng-if=\"column.Type !== 'DATE' && column.Type !== 'DATETIME' && column.Type !== 'BOOLEAN' \">\n                    </material-form-field>\n                    <material-form-field model=\"column.Value\" field-type=\"{{column.Type}}\" is-editable=\"false\" properties=\"column\" data-ng-if=\"column.Type === 'DATE' || column.Type === 'DATETIME'\">\n                    </material-form-field>\n                    <div data-ng-if=\"column.Type === 'BOOLEAN'\" class=\"detail\">\n                        <span class=\"detail-label\">{{column.FieldLabel}}</span>\n                        <span class=\"active-icon-list\" ng-bind-html=\"vm.getFormattedContent(column.Value)\"></span>\n                    </div>\n                    <label class=\"detail\" data-ng-if=\"column.Value==='' && column.IsEditable===false \"><span> ---- </span></label>\n                </div>\n            </div>\n            <div class=\"col-xs-12 col-lg-2 \" ng-if=\"$index % 2==0 \"></div>\n            <div class=\"clearfix \" ng-if=\"$index % 2==1 \"></div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 320 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    module.exports = [function() {
	        return {
	            restrict: 'E',
	            scope: {
	                srcUrl: '=',
	                itemType: '='
	            },
	            link: function(scope, ele, attr) {
	                scope.$watch('srcUrl', function(oldVal, newVal) {
	                    if (angular.isDefined(oldVal)) {
	                        if (validateImage(oldVal) || scope.itemType === 'image') {
	                            ele.html('<img src=' + oldVal + ' class="multimedia-tag-image">');
	                        } else {
	                            ele.html('<embed src=' + oldVal + ' width="600" height="450" scale="tofit">');
	                        }
	                    }
	                });
	
	                function validateImage(url) {
	                    /**
	                     * For validate the data url /^\s*data:([a-z]+\/[a-z0-9\-\+]+(;[a-z\-]+\=[a-z0-9\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i
	                     * For validate the image /\.(gif|jpg|jpeg|tiff|png)$/i
	                     * Applied the or condition image | dataurl
	                     */
	                    var regExp = /\.(gif|jpg|jpeg|tiff|png)$|^\s*data:([a-z]+\/[a-z0-9\-\+]+(;[a-z\-]+\=[a-z0-9\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i;
	                    return regExp.test(url);
	                }
	            }
	        }
	    }];
	
	})();


/***/ }),
/* 321 */
/***/ (function(module, exports) {

	(function () {
	    'use strict';
	
	    module.exports = [function () {
	        return {
	            restrict: 'A',
	            link: function (scope, element, attrs) {
	                var handler = function (event) {
	                    event.preventDefault();
	                    return false;
	                }
	                element.on('dragenter', handler);
	                element.on('dragover', handler);
	                element.on('drop', handler);
	            }
	        };
	    }];
	
	})();


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = [function() {
	        var productViewController = function(i18nService, searchService, _, applicationService, systemConstants, cpqAdminConstants, listService, $state, productConstants,
	            $scope, apiCallsService, moment) {
	            var vm = this,
	                selectedRowIndex,
	                action;
	            vm.labels = i18nService.CustomLabel;
	            vm.prefix = systemConstants.nsPrefix || '';
	            
	            function onLoad() {
	                searchService.getSavedSearch('Product Search').then(function(response) {
	                    response.unshift({ label: vm.labels.ViewAll, value: '' });
	                    vm.savedSearchList = {
	                        PicklistValues: response,
	                        methodToCallInController: updateSearchParameters,
	                        value: ''
	                    };
	
	                    var filterObj = listService.getFilters();
	                    if (filterObj && filterObj.SavedSearchId) {
	                        vm.savedSearchList.value = filterObj.SavedSearchId;
	                    }
	                });
	                
	                searchService.getSObjectPicklistFields(vm.contextObject, null).then(function(response) {
	                    if (response) {
	                        for (var i = 0; i < response.length; i++) {
	                            response[i].label = response[i].FieldLabel;
	                            response[i].value = response[i].FieldName;
	                        }
	                    }
	                    vm.fields = {
	                        PicklistValues: response,
	                        methodToCallInController: showPicklistValues
	                    };
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	
	                vm.trackSelectedRowIndex = function(index) {
	                    selectedRowIndex = index;
	                };
	                vm.shareTypePicklistEntries = [];
	                vm.selectedSearch = getSampleSearch();
	
	                vm.alerts = [];
	
	                apiCallsService.getSObjectPicklistFields('SavedSearch__c', ['ShareType__c']).then(function(response) {
	                    if (response.length) {
	                        vm.shareTypePicklistEntries = response[0].PicklistValues;
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            };
	
	            function getSampleSearch() {
	                var sampleObj = {
	                    Name: '',
	                    Filters: [{
	                        'field': '',
	                        'function': 'equal to',
	                        'value': '',
	                        'operator': '',
	                        'ElementId': 'element0'
	                    }]
	                };
	                if (vm.shareTypePicklistEntries.length > 0) {
	                    sampleObj[vm.prefix + 'ShareType__c'] = vm.shareTypePicklistEntries[0].value;
	                }
	                return sampleObj;
	            }
	
	            vm.callByAction = function(selected) {
	                action = selected;
	                if (selected === 'edit') {
	                    vm.headerTitle = 'Edit View';
	                    vm.popoverIsVisible = true;
	                } else if (selected === 'save') {
	                    vm.headerTitle = 'Save View As';
	                    vm.popoverIsVisible = true;
	                    vm.blSaveSearch = true;
	                }
	                if (selected !== '') {
	                    var index = _.findIndex(vm.savedSearchList.PicklistValues, function(field) {
	                        return field.value === vm.savedSearchList.value;
	                    });
	                    if (selected !== 'remove') {
	                        vm.selectedSearch = angular.copy(vm.savedSearchList.PicklistValues[index]);
	                        if(!vm.selectedSearch.Filters) {
	                            vm.selectedSearch.Filters = JSON.parse(vm.selectedSearch[vm.prefix + 'SearchCriteria__c']);
	                        } 
	                        for (var i = 0; i < vm.selectedSearch.Filters.length; i++) {
	                            index = _.findIndex(vm.fields.PicklistValues, function(field) {
	                                return field.value === vm.selectedSearch.Filters[i].field;
	                            });
	                            if (index > -1) {
	                                vm.selectedSearch.Filters[i].PicklistValues = vm.fields.PicklistValues[index].PicklistValues;
	                                vm.selectedSearch.Filters[i].Type = vm.fields.PicklistValues[index].Type;
	                                vm.selectedSearch.Filters[i].ElementId = 'element' + i;
	                                if (vm.selectedSearch.Filters[i].Type === 'DATETIME') {
	                                    vm.selectedSearch.Filters[i].value = new Date(vm.selectedSearch.Filters[i].value);
	                                } else if (vm.selectedSearch.Filters[i].Type === 'MULTIPICKLIST' && !Array.isArray(vm.selectedSearch.Filters[i].value)) {
	                                    vm.selectedSearch.Filters[i].value = vm.selectedSearch.Filters[i].value.split(';');
	                                }
	                                vm.selectedSearch.Filters[i].operatorList = { PicklistValues : searchService.getValidOperatorList(vm.selectedSearch.Filters[i].Type) };
	                            }
	                        }
	                        if (vm.selectedSearch.Filters && vm.selectedSearch.Filters.length > 0 && vm.selectedSearch.Filters[0].evalCriteria) {
	                            vm.showAdvancedPanel = true;
	                            vm.condExpression = vm.selectedSearch.Filters[0].evalCriteria.split(/{|}/).join('');
	                        } else {
	                            vm.showAdvancedPanel = false;
	                        }
	                    } else {
	                        searchService.deleteSavedSearch(vm.savedSearchList.value).then(function(response) {
	                            if (response) {
	                                vm.savedSearchList.PicklistValues.splice(index, 1);
	                                vm.savedSearchList.value = '';
	                                updateSearchParameters('');
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                    }
	                }
	            };
	
	            function updateSearchParameters(selected) {
	                action = null;
	                if (selected === 'new') {
	                    vm.condExpression = '';
	                    if (vm.selectedSearch.Id || vm.selectedSearch.Filters.length === 0) {
	                        vm.selectedSearch = getSampleSearch();
	                    }
	                    vm.popoverIsVisible = true;
	                    vm.showAdvancedPanel = false;
	                } else if (selected != '') {
	                    vm.searchString = '';
	                    vm.applySearch(selected);
	                    vm.popoverIsVisible = false;
	                } else {
	                    vm.selectedSearch.Filters = [];
	                    vm.applySearch(selected);
	                }
	            }
	
	            vm.addFilter = function(operator, index) {
	                var length = vm.selectedSearch.Filters.length;
	                if (index === vm.selectedSearch.Filters.length - 1) {
	                    if (validateFilters()) {
	                        if (!vm.selectedSearch.Filters[length - 1].operator) {
	                            vm.selectedSearch.Filters[length - 1].operator = operator;
	                        }
	                        vm.selectedSearch.Filters.push({
	                            'field': '',
	                            'function': 'equal to',
	                            'value': '',
	                            'operator': '',
	                            'ElementId': 'element' + length
	                        });
	                        updateAdvancedCondition(index + 1, operator);
	                    }
	                } else {
	                    vm.selectedSearch.Filters[index].operator = operator;
	                    updateAdvancedConditionOnRemove();
	                }
	            };
	
	            function showPicklistValues(selected) {
	                var index = _.findIndex(vm.fields.PicklistValues, function(field) {
	                    return field.value === selected;
	                });
	                var selectedField = vm.fields.PicklistValues[index];
	                var selectedFieldType = selectedField.Type;
	                vm.selectedSearch.Filters[selectedRowIndex] = {
	                    'field': selectedField.FieldName,
	                    'function': vm.selectedSearch.Filters[selectedRowIndex].function,
	                    'value': vm.selectedSearch.Filters[selectedRowIndex].value || '',
	                    'PicklistValues': vm.fields.PicklistValues[index].PicklistValues,
	                    'Type': selectedFieldType,
	                    'ElementId': vm.selectedSearch.Filters[selectedRowIndex].ElementId,
	                    'operator': vm.selectedSearch.Filters[selectedRowIndex].operator,
	                    'operatorList': { PicklistValues : searchService.getValidOperatorList(selectedFieldType) }
	                };
	
	            }
	
	            vm.saveAndApply = function(blOnlySave) {
	                var type = action;
	                if (vm.frmSearch && vm.frmSearch.$valid && validateFilters()) {
	                    var payload = {
	                        Name: vm.selectedSearch.Name
	                    };
	                    if (vm.selectedSearch.Id && type === 'edit') {
	                        payload.Id = vm.selectedSearch.Id;
	                    }
	                    payload[getPrefixedField('Description__c')] = vm.selectedSearch[getPrefixedField('Description__c')];
	                    payload[getPrefixedField('SearchContext__c')] = 'Product Search';
	                    payload[getPrefixedField('ShareType__c')] = vm.selectedSearch[getPrefixedField('ShareType__c')];
	                    var filters = angular.copy(vm.selectedSearch.Filters);
	                    delete filters[filters.length - 1].operator;
	                    filters.forEach(function(v, index) {
	                        if (v.Type === 'MULTIPICKLIST' && v.value && v.value.length > 0) {
	                            v.value = v.value.join(';')
	                        }
	                        if (v.Type === 'BOOLEAN' && v.value !== true) {
	                            v.value = false;
	                        }
	                        delete v.PicklistValues;
	                        delete v.Type;
	                        delete v.ElementId;
	                        delete v.operatorList;
	                        v.sequence = index + 1;
	                        if (index === 0 && vm.condExpression && vm.showAdvancedPanel) {
	                            v.evalCriteria = createSFCompatibleCondition();
	                        } else {
	                            delete v.evalCriteria;
	                        }
	                    });
	                    payload[getPrefixedField('SearchCriteria__c')] = JSON.stringify(filters);
	                    searchService.upsertSavedSearch(payload).then(function(response) {
	                        if (response) {
	                            callbackAfterSave(type, response);
	                            if (!blOnlySave) {
	                                if (payload.Id) {
	                                    vm.applySearch();
	                                } else {
	                                    vm.applySearch(response[0].Id);
	                                }
	                            }
	                        }
	                    }, function(reason) {
	                        applicationService.showErrorMessage(reason);
	                    });
	                } else {
	                    vm.frmSearch.$setSubmitted();
	                }
	            };
	
	            function getPrefixedField(field) {
	                return vm.prefix + field;
	            }
	
	            vm.applySearch = function(SavedSearchId) {
	                if (validateFilters()) {
	                    var filterObj = {};
	                    if (SavedSearchId !== '') {
	                        filterObj = {
	                            SavedSearchId: SavedSearchId || vm.savedSearchList.value,
	                            ProductsRequestDO: {
	                                ChunkNumber: 1,
	                                ViewName: getPrefixedField(productConstants.fieldsetProductList)
	                            }
	                        };
	                    } else {
	                        filterObj = {
	                            'ViewName': getPrefixedField(productConstants.fieldsetProductList),
	                            'SearchString': '',
	                            'ChunkNumber': 1,
	                            'NumberOfProductsPerChunk': productConstants.numberOfProductsPerChunk || 50
	                        };
	                        if (vm.selectedSearch && vm.selectedSearch.Filters.length > 0) {
	                            var filters;
	                            if (!isFilterSetToBlank()) {
	                                filters = angular.copy(vm.selectedSearch.Filters);
	                                delete filters[filters.length - 1].operator;
	                                filters.forEach(function(v, index) {
	                                    if (v.Type === 'MULTIPICKLIST' && v.value && v.value.length > 0) {
	                                        v.value = v.value.join(';')
	                                    }
	                                    if (v.Type === 'DATETIME' && v.value != '' && v.value != null) {
	                                        v.value = moment(new Date(v.value)).format();
	                                    }
	                                    if (v.Type === 'BOOLEAN' && v.value !== true) {
	                                        v.value = false;
	                                    }
	                                    delete v.PicklistValues;
	                                    delete v.Type;
	                                    delete v.ElementId;
	                                    delete v.operatorList;
	                                    if (index === 0 && vm.condExpression && vm.showAdvancedPanel) {
	                                        v.evalCriteria = createSFCompatibleCondition();
	                                    } else {
	                                        delete v.evalCriteria;
	                                    }
	                                });
	                            }
	                            filterObj.SearchRowDOs = filters;
	                        }
	                    }
	
	                    var filter = listService.getFilters();
	                    if (!filterObj.ProductsRequestDO) {
	                        filterObj.SortField = filter.SortField || (filter.ProductsRequestDO && filter.ProductsRequestDO.SortField) || 'LastModifiedDate';
	                        filterObj.SortDirection = filter.SortDirection || (filter.ProductsRequestDO && filter.ProductsRequestDO.SortDirection) || cpqAdminConstants.DESCENDING;
	                    } else {
	                        filterObj.ProductsRequestDO.SortField = filter.SortField || (filter.ProductsRequestDO && filter.ProductsRequestDO.SortField) || 'LastModifiedDate';
	                        filterObj.ProductsRequestDO.SortDirection = filter.SortDirection || (filter.ProductsRequestDO && filter.ProductsRequestDO.SortDirection) || cpqAdminConstants.DESCENDING;
	                    }
	
	                    listService.setFilters(filterObj);
	                    if ($state.$current.name === 'app.list') {
	                        vm.updateList()(filterObj);
	                        vm.cancel();
	                    }
	                }
	            };
	
	            function callbackAfterSave(type, response) {
	                if (type === 'save' || type === null || vm.savedSearchList.value === 'new') {
	                    var length = vm.savedSearchList.PicklistValues.length;
	                    var objSavedSearch = response[0];
	                    objSavedSearch.value = response[0].Id;
	                    objSavedSearch.label = response[0].Name;
	                    vm.savedSearchList.PicklistValues.splice(length, 0, objSavedSearch);
	                    vm.savedSearchList.value = objSavedSearch.Id;
	                    objSavedSearch.Filters = JSON.parse(objSavedSearch[getPrefixedField('SearchCriteria__c')]);
	                    vm.selectedSearch = objSavedSearch;
	                    action = 'edit';
	                } else {
	                    var index = _.findIndex(vm.savedSearchList.PicklistValues, function(field) {
	                        return field.value === vm.selectedSearch.Id;
	                    });
	                    vm.selectedSearch[getPrefixedField('SearchCriteria__c')] = JSON.stringify(vm.selectedSearch.Filters);
	                    vm.savedSearchList.PicklistValues[index] = vm.selectedSearch;
	                    vm.savedSearchList.PicklistValues[index].label = vm.selectedSearch.Name;
	                    if (vm.selectedSearch.Filters && vm.selectedSearch.Filters.length > 0 && vm.condExpression) {
	                        vm.savedSearchList.PicklistValues[index][vm.prefix + 'SearchCriteria__c'] = vm.condExpression;
	                    }
	                }
	                vm.savedSearchList.PicklistValues.shift();
	                sortArrayObjects(vm.savedSearchList.PicklistValues, "Name");
	                vm.savedSearchList.PicklistValues.unshift({ label: vm.labels.ViewAll, value: '' });
	            }
	
	            function sortArrayObjects(array, field) {
	                array.sort(function(a, b) {
	                    var objField1 = a[field].toLowerCase(),
	                        objField2 = b[field].toLowerCase();
	                    if (objField1 && objField2) {
	                        if (objField1 > objField2) {
	                            return 1;
	                        }
	                        if (objField1 < objField2) {
	                            return -1;
	                        }
	                        // a must be equal to b
	                        return 0;
	                    }
	                });
	            }
	
	            vm.removeFilter = function(index) {
	                if (vm.selectedSearch.Filters.length === 1) {
	                    vm.selectedSearch.Filters[0] = {
	                        'field': '',
	                        'function': 'equal to',
	                        'value': '',
	                        'operator': '',
	                        'ElementId': 'element' + length
	                    };
	                } else {
	                    vm.selectedSearch.Filters.splice(index, 1);
	                }
	                updateAdvancedConditionOnRemove();
	            };
	
	            vm.cancel = function() {
	                vm.popoverIsVisible = false;
	                vm.blSaveSearch = false;
	                action = null;
	            };
	
	            function isFilterSetToBlank() {
	                if (vm.selectedSearch.Filters.length === 1) {
	                    if (vm.selectedSearch.Filters[0].field === '') {
	                        return true;
	                    }
	                }
	
	                return false;
	            }
	
	            function validateFilters() {
	                if (vm.popoverIsVisible) {
	                    var length = vm.selectedSearch.Filters.length;
	
	                    if (length === 1) {
	                        if (vm.selectedSearch.Filters[length - 1].field === '' && vm.selectedSearch.Filters[length - 1].value !== '' ) {
	                            addAlert(vm.labels.SaveSearchValidation, 'danger');
	                            return false;
	                        }
	                    } else if (length > 1) {
	                        for(var index = 1; index<length ; index++) {
	                            if (vm.selectedSearch.Filters[index].field === '') {
	                                addAlert(vm.labels.SaveSearchValidation, 'danger');
	                                return false;       
	                            }
	                        }
	                    }
	                }
	                return true;
	            }
	
	            function addAlert(message, type) {
	                vm.alerts = [];
	                vm.alerts.push({
	                    msg: message,
	                    type: type
	                });
	            }
	
	            vm.closeAlert = function(index) {
	                vm.alerts.splice(index, 1);
	            };
	
	            vm.newSavedSearch = function() {
	                updateSearchParameters('new');
	            };
	
	            var deRegisterFunc = $scope.$watch('vm.selectedView', function(newValue, oldValue) {
	                if (newValue === 'View All') {
	                    vm.savedSearchList.value = '';
	                    vm.selectedView = '';
	                }
	            });
	
	            $scope.$on('destroy', function() {
	                deRegisterFunc();
	                vm = null;
	            });
	
	            function updateAdvancedCondition(nextRowNumber, operator) {
	                var expr = vm.condExpression,
	                    finalExpression = '';
	                if (expr) {
	                    finalExpression = expr + ' ' + operator + ' ' + (nextRowNumber + 1);
	                } else {
	                    finalExpression = nextRowNumber + ' ' + operator + ' ' + (nextRowNumber + 1);
	                }
	                vm.condExpression = finalExpression;
	
	            }
	
	            function updateAdvancedConditionOnRemove() {
	                var expr = '';
	                var predicates = vm.selectedSearch.Filters;
	
	                for (var i = 0; i < predicates.length; i++) {
	                    if (i === (predicates.length - 1)) {
	                        expr += (i + 1);
	                    } else {
	                        expr += (i + 1) + ' ' + predicates[i].operator + ' ';
	                    }
	                }
	                vm.condExpression = expr;
	            };
	
	            function createSFCompatibleCondition() {
	                var str = '';
	                if (vm.condExpression) {
	                    // Adding a space to the brackets and splitting into an array
	                    var condExprArr = vm.condExpression.toString().replace(/\(/g, '( ').replace(/\)/g, ' )').split(' ');
	                    for (var i = 0; i < condExprArr.length; i++) {
	                        if (!isNaN(+condExprArr[i])) {
	                            var value = +condExprArr[i];
	                            if (value !== 0) {
	                                str += '{' + (value) + '} ';
	                            }
	                        } else {
	                            str += condExprArr[i] + ' ';
	                        }
	                    }
	                }
	                return str;
	            }
	
	            vm.hideAdvancedPanel = function(){
	                vm.showAdvancedPanel = false;
	                if(vm.selectedSearch && vm.selectedSearch.Filters){
	                    for(var i=0;i<vm.selectedSearch.Filters.length - 1; i++){
	                        vm.selectedSearch.Filters[i].operator = 'And';
	                    }
	                }
	            };
	
	            onLoad();
	        };
	
	        productViewController.$inject = [
	            'i18nService',
	            'searchService',
	            'lodash',
	            'applicationService',
	            'systemConstants',
	            'cpqAdminConstants',
	            'listService',
	            '$state',
	            'productConstants',
	            '$scope',
	            'apiCallsService',
	            'moment'
	        ];
	
	        return {
	            restrict: 'E',
	            scope: {},
	            controller: productViewController,
	            controllerAs: 'vm',
	            bindToController: {
	                updateList: '&',
	                contextObject: '=',
	                isEditable: '@',
	                searchString: '=',
	                selectedView: '='
	            },
	            template: __webpack_require__(323),
	        };
	    }];
	
	})();

/***/ }),
/* 323 */
/***/ (function(module, exports) {

	module.exports = "<div layout=\"row\" class=\"searchInput\">\n    <div flex=\"{{vm.isEditable === 'true' ? 65:100}}\">\n        <material-form-field model=\"vm.savedSearchList.value\" field-type=\"PICKLIST\" is-editable=\"true\" field-label=\"''\" properties=\"vm.savedSearchList\">\n        </material-form-field>\n    </div>\n    <div flex=\"35\" ng-if=\"vm.isEditable === 'true'\" class=\"text-center action-btn\">\n        <button class=\"slds-button slds-button_neutral\" ng-click=\"vm.newSavedSearch();\">{{vm.labels.NewSearch}}</button>\n        <div class=\"drop drop-menu\" ng-if=\"vm.isEditable === 'true' && vm.savedSearchList.value!=''\">\n            <md-menu md-offset=\"50 50\">\n                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                    <i class=\"material-icons\">more_vert</i>\n                </button>\n                <md-menu-content class=\"advanced-search-menu\">\n                    <md-menu-item>\n                        <md-button data-ng-click=\"vm.callByAction('edit')\">\n                            <div layout=\"row\" flex>\n                                <p flex>{{vm.labels.EditView}}</p>\n                            </div>\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ng-click=\"vm.callByAction('save')\">\n                            <div layout=\"row\" flex>\n                                <p flex>{{vm.labels.SaveViewAs}}</p>\n                            </div>\n                        </md-button>\n                    </md-menu-item>\n                    <md-menu-item>\n                        <md-button data-ng-click=\"vm.callByAction('remove')\">\n                            <div layout=\"row\" flex>\n                                <p flex>{{vm.labels.RemoveView}}</p>\n                            </div>\n                        </md-button>\n                    </md-menu-item>\n                </md-menu-content>\n            </md-menu>\n        </div>\n    </div>\n</div>\n<div class=\"search-parameters\" ng-show=\"vm.popoverIsVisible\">\n    <form role=\"form\" name=\"vm.frmSearch\" novalidate>\n        <h4>{{vm.headerTitle}}</h4>\n        <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n        <div ng-if=\"vm.actionList.value!=='save'\">\n            <div layout=\"row\">\n                <div flex=\"10\">{{vm.labels.Action}}</div>\n                <div flex=\"10\">{{vm.labels.Sequence}}</div>\n                <div flex=\"25\">{{vm.labels.Field}}</div>\n                <div flex=\"25\">{{vm.labels.Operator}}</div>\n                <div flex=\"25\">{{vm.labels.Value}}</div>\n                <div flex=\"5\" ng-if=\"!vm.showAdvancedPanel\"></div>\n            </div>\n            <div layout=\"row\" layout-wrap ng-repeat=\"item in vm.selectedSearch.Filters\" class=\"filter\">\n                <div flex=\"10\">\n                    <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                        <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                            <i class=\"material-icons\">more_vert</i>\n                        </button>\n                        <ul class=\"dropdown-menu\">\n                            <li data-ng-click=\"vm.removeFilter($index)\" class=\"action-Menu\">\n                                <i class=\"material-icons\">clear</i>\n                                <span class=\"remove-label\">{{::vm.labels.Remove}}</span>\n                            </li>\n                            <li class=\"action-Menu\" data-ng-click=\"vm.addFilter('And', $index);\">\n                                <i class=\"material-icons\">add</i>\n                                <span class=\"add-label\">Add</span>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <div flex=\"10\" class=\"text-center sequence\">\n                    {{$index + 1}}\n                </div>\n                <div flex=\"25\">\n                    <material-form-field model=\"item.field\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"vm.fields\" data-ng-click=\"vm.trackSelectedRowIndex($index)\">\n                    </material-form-field>\n                </div>\n                <div flex=\"25\">\n                    <material-form-field model=\"item.function\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"item.operatorList\">\n                    </material-form-field>\n                </div>\n                <div flex=\"25\">\n                    <material-form-field model=\"item.value\" field-type=\"{{item.Type}}\" is-editable=\"true\" properties=\"item\" attr-css=\"advanced-search\">\n                    </material-form-field>\n                </div>\n                <div class=\"text-right\" flex=\"5\" ng-if=\"!vm.showAdvancedPanel\">\n                    AND\n                </div>\n            </div>\n            <div class=\"advance-filter-container\">\n                <button class=\"slds-button slds-button_neutral\" ng-click=\"vm.showAdvancedPanel = true;\" data-ng-if=\"vm.showAdvancedPanel !== true\">Advanced Options</button>\n                <button class=\"slds-button slds-button_neutral\" ng-click=\"vm.hideAdvancedPanel();\" data-ng-if=\"vm.showAdvancedPanel === true\">Clear Advanced Options</button>\n                <div class=\"value\" data-ng-if=\"vm.showAdvancedPanel === true\">\n                    <material-form-field model=\"vm.condExpression\" field-type=\"string\" is-editable=\"true\" field-label=\"vm.labels.AdvancedFilterCondition\" name=\"value\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\" layout-align=\"end center\" class=\"footer filter\">\n                <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancel();\">{{vm.labels.Cancel}}</button>\n                <button class=\"slds-button slds-button_brand\" ng-click=\"vm.blSaveSearch = true;\">{{vm.labels.SaveAs}}</button>\n                <button class=\"slds-button slds-button_brand\" ng-click=\"vm.applySearch('');\">{{vm.labels.Apply}}</button>\n            </div>\n        </div>\n        <div layout=\"row\" ng-if=\"vm.blSaveSearch\" layout-wrap>\n            <div flex=\"100\" class=\"min-height filter\">\n                <material-form-field model=\"vm.selectedSearch.Name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.Name\" is-required=\"true\" name=\"name\">\n                </material-form-field>\n                <div ng-messages=\"vm.frmSearch.name.$error\" ng-if=\"vm.frmSearch.name.$touched || vm.frmSearch.$submitted\">\n                    <p ng-message=\"required\" class=\"formError\">\n                        {{vm.labels.MandatoryField}}\n                    </p>\n                </div>\n            </div>\n            <div flex=\"100\">\n                <material-form-field model=\"vm.selectedSearch[vm.prefix + 'Description__c']\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.Description\" name=\"Description\">\n                </material-form-field>\n            </div>\n            <div flex=\"100\">\n                <md-radio-group ng-model=\"vm.selectedSearch[vm.prefix + 'ShareType__c']\" layout=\"row\">\n                    <md-radio-button value=\"{{item.value}}\" flex=\"30\" ng-repeat=\"item in vm.shareTypePicklistEntries\">{{item.label}}</md-radio-button>\n                </md-radio-group>\n            </div>\n            <div flex=\"100\">\n                <div class=\"footer\" layout=\"row\" layout-align=\"end center\">\n                    <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancel();\">{{vm.labels.Cancel}}</button>\n                    <button class=\"slds-button slds-button_brand\" ng-click=\"vm.saveAndApply(true);\">{{vm.labels.SaveButton}}</button>\n                    <button class=\"slds-button slds-button_brand\" ng-click=\"vm.saveAndApply();\">{{vm.labels.SaveButton + ' & '+ vm.labels.Apply}}</button>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>"

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = [function() {
	        var activityLogController = function() {
	            var vm = this;
	        };
	
	        activityLogController.$inject = [
	
	        ];
	
	        return {
	            restrict: 'E',
	            scope: {
	                fieldLabel: '=',
	                fieldEditBy: '=',
	                fieldEditDate: '=',
	            },
	            controller: activityLogController,
	            controllerAs: 'vm',
	            bindToController: true,
	            template: __webpack_require__(325),
	        };
	    }];
	
	})();


/***/ }),
/* 325 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"activity-log-group\">\n    <div>{{vm.fieldLabel}}</div>\n    <div>\n        <div class=\"pull-left edit-by\">{{vm.fieldEditBy + ' - ' }}&nbsp;</div>\n        <div class=\"pull-left edit-date\">{{vm.fieldEditDate | date:'MM/dd/yyyy'}}</div>\n    </div>\n</div>\n"

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    module.exports = [function() {
	
	        var applicationFeatureSideMenuController;
	
	        applicationFeatureSideMenuController = function($scope, $state, i18nService, applicationService) {
	            var vm = this;
	            vm.labels = i18nService.CustomLabel;
	            var configSettings = [{
	                Name: vm.labels.SmartSearchSettings,
	                toState: 'app.smartSearchSettings.searchConnectionSettings'
	            }, {
	                Name: vm.labels.ObjectSummarySettings,
	                toState: 'app.objectSummarySettings'
	            }, {
	                Name: vm.labels.FavoritesSettings,
	                toState: 'app.favoritesSettings'
	            }, {
	                Name: vm.labels.LookupFieldSettings,
	                toState: 'app.lookupFieldSettings'
	            }];
	
	            vm.applicationFeaturesList = configSettings.concat(vm.applicationFeaturesList);
	
	            /**
	-             * This method call while user click the application feature from the left panel
	-             */
	            vm.goToApplicationManagament = function(settingGroupId) {
	                //  For identify this application feature contains setting group or not
	                if (settingGroupId) {
	                    $state.go('app.applicationManagement.settingGroup', { 'id': settingGroupId });
	                } else {
	                    var errorDetails = {
	                        message: vm.labels.NoRecordsToDisplay
	                    };
	                    applicationService.showErrorMessage(errorDetails);
	                }
	            };
	        };
	
	        applicationFeatureSideMenuController.$inject = [
	            '$scope',
	            '$state',
	            'i18nService',
	            'applicationService'
	        ];
	
	        return {
	            restrict: 'E',
	            controller: applicationFeatureSideMenuController,
	            controllerAs: 'vm',
	            scope: {},
	            bindToController: {
	                applicationFeaturesList: '=',
	                selectedApplicationFeatureName: '='
	            },
	            template: __webpack_require__(327)
	        };
	
	    }];
	})();

/***/ }),
/* 327 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"list-table application-feature-side-menu\">\n    <table>\n        <tbody>\n            <tr data-ng-repeat=\"item in vm.applicationFeaturesList track by $index\" data-ng-class=\"{'active': item.Name === vm.selectedApplicationFeatureName}\">\n                <td data-ng-if=\"!item.Id\">\n                    <a ui-sref=\"{{item.toState}}\">{{::item.Name}}</a>\n                </td> \n                <td data-ng-click=\"vm.goToApplicationManagament(item.settingGroupId)\" data-ng-if=\"item.Id\">\n                    <a data-ui-sref=\"app.applicationManagement.settingGroup({'id':item.settingGroupId})\" data-ng-if=\"item.settingGroupId\">{{item.Name}}</a>\n                    <p data-ng-if=\"!item.settingGroupId\">{{item.Name}}</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n"

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var multiSelectController = function() {
	        var vm = this;
	        /**
	        * Move arrow functions for choosen
	        */
	        vm.moveLeft = function() {
	            vm.selectedValuesSelected.forEach(function(val) {
	                removeArrayValues(vm.optionValuesSelected, val.Id);
	            });
	            vm.selectedValuesSelected = [];
	        };
	        function removeArrayValues(arr, val) {
	            arr.forEach(function(item,i) {
	                if(item.Id === val) {
	                    arr.splice(i, 1);    
	                }
	            });
	        }
	    };
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: multiSelectController,
	        controllerAs: 'vm',
	        bindToController: {
	            optionValuesAll: '=',
	            optionValuesSelected: '=',
	            labelForAll: '=',
	            labelForSelected: '='
	        },
	        template: __webpack_require__(329),
	    };
	};


/***/ }),
/* 329 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"chosen \">\n    <div class=\"flex\" flex=\"20\">\n        <label>{{vm.labelForAll}}</label>\n        <material-form-field model=\"vm.optionValuesSelected\" field-type=\"multiselect-autocomplete\" field-label=\"\" properties=\"vm.optionValuesAll\">\n        </material-form-field>\n    </div>\n    <div class=\"flex\" flex=\"5\">\n        <div class=\"cell\">\n            <i class=\"material-icons arrow-icons\" ng-click=\"vm.moveLeft()\">arrow_back</i>        \n        </div>\n    </div>\n    <div class=\"flex\" flex=\"20\">\n        <label>{{vm.labelForSelected}}</label>\n        <select ng-model=\"vm.selectedValuesSelected\" ng-options=\"option.Name for option in vm.optionValuesSelected track by option.Id\" multiple>\n        </select>\n    </div>\n</div>\n"

/***/ }),
/* 330 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    module.exports = [function() {
	        return {
	            restrict: 'A',
	            link: function(scope, element, attrs) {
	                var ua = window.navigator.userAgent;
	                if (ua.indexOf('MSIE ') > -1 || ua.indexOf('Trident/') > -1 || ua.indexOf('Edge/') > -1) {
	                    element.on('mousedown', function(e) {
	                        var element = e.target;
	                        element.focus();
	                    });
	                }
	            }
	        };
	    }];
	
	})();

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

	(function () {
	  'use strict';
	
	  module.exports = [function () {
	      var searchboxController = function () {
	          var vm = this;
	      };
	
	      return {
	          restrict: 'EA',
	          scope: {},
	          controller: searchboxController,
	          controllerAs: 'vm',
	          bindToController: {
	              searchPlaceholder: '@',
	              searchInput: '=',
	              performSearch: '&',
	              clearSearch: '&'
	          },
	          template: __webpack_require__(332)
	      };
	  }];
	
	})();

/***/ }),
/* 332 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"row noMargin search-container title-bar\">\n  <div class=\"product-search\" layout=\"row\">\n      <div class=\"search-panel\" flex=\"35\" flex-offset=\"1\">\n          <div class=\"search-box-container\">\n              <i class=\"search-icon material-icons\" data-ng-click=\"vm.performSearch()\">search</i>\n              <form ng-submit=\"vm.performSearch()\">\n                  <input type=\"text\" placeholder=\"{{vm.searchPlaceholder}}\" class=\"search-box\" data-ng-model=\"vm.searchInput\">\n                  <i class=\"clear-icon material-icons\" data-ng-if=\"vm.searchInput\" data-ng-click=\"vm.clearSearch()\">clear</i>\n              </form>\n          </div>\n      </div>\n  </div>\n</div>"

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.common.filters', ['cpqAdmin.common.services'])
			.filter('dollarValue', __webpack_require__(334))
			.filter('aptCurrencyToNumber', __webpack_require__(335))
			.filter('aptDateToString', __webpack_require__(336))
			.filter('aptNumberToCurrency', __webpack_require__(337))
			.filter('aptNumberToPercent', __webpack_require__(338))
			.filter('aptNumberToQuantity', __webpack_require__(339))
			.filter('aptQuantityToNumber', __webpack_require__(340))
			.filter('aptStringToDate', __webpack_require__(341))
			.filter('truncateText', __webpack_require__(342))
			.filter('leftPadding', __webpack_require__(343))
			.filter('mergeMessage', __webpack_require__(344));
	
	})();

/***/ }),
/* 334 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
		module.exports = ['cpqAccounting', function(accounting) {
			var DollarValue;
	
			DollarValue = function() {
				return function(amount) {
					return accounting.formatMoney(amount);
				};
			};
			return DollarValue;
		}];
	})();

/***/ }),
/* 335 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    module.exports = ['i18nService', 'utilService', function(i18nService, utilService) {
	
	
	        /**
	         * Take a string value that looks like a currency and convert it into
	         * 	an number. All non-digit, non-decimal-separator characters are stripped
	         * 	out before number construction. If the decimal-separator character 
	         * 	appears more than once, all instances beyond the first are discarded.
	         * 	
	         * @param  {[type]} input [description]
	         * @return {[type]}       [description]
	         */
	        function currencyToNumber(input, customPrecision) {
	            var currencySettings = i18nService.currencySettings;
	            if (typeof input !== 'string') {
	                return input;
	
	            }
	            input = input.trim();
	            if (input === '') {
	                return 0;
	            }
	            var precision = 5;
	            precision = angular.isNumber(customPrecision) ? customPrecision :
	                (angular.isNumber(currencySettings.precision) ? currencySettings.precision : 2);
	
	            var isNegative = input[0] === '(' && input[input.length - 1] === ')';
	            var nonDigitRegex = /\D/g;
	            var foundDecimal = false;
	            var digitsOnly = input.replace(nonDigitRegex, function(match) {
	                //Return '.' in place of the first instance of decimal separator.
	                if (!foundDecimal && match === currencySettings.decimal) {
	                    foundDecimal = true;
	                    return '.';
	
	                } else if (!foundDecimal && match === '-') {
	                    isNegative = true;
	
	                }
	                return '';
	
	            });
	
	            var inputAsNumber = utilService.round(digitsOnly, precision);
	
	
	            inputAsNumber *= (1 - 2 * isNegative);
	            return inputAsNumber;
	
	        }
	        return currencyToNumber;
	    }];
	
	
	})();


/***/ }),
/* 336 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
		module.exports = ['i18nService', function(i18nService) {
	
			function dateToString(input) {
				var dateSettings = i18nService.dateSettings;
				//Create an example of an invalid date.
				var invalidDateStr = new Date('Invalid Date Example').toString();
				var inputAsDate = new Date(input);
				if (inputAsDate.toString() === invalidDateStr) {
					return input;
	
				}
				var inputOrdering = [];
				dateSettings.ordering.forEach(function(dateCode, index) {
					var letterCode = dateCode[0];
					//Default to day value
					var dateVal = inputAsDate.getUTCDate().toString();
					if (letterCode === 'm') {
						dateVal = (1 + inputAsDate.getUTCMonth()).toString();
	
					} else if (letterCode === 'y') {
						dateVal = inputAsDate.getUTCFullYear().toString();
	
					}
					//Shorten or pad with zeroes
					if (dateVal.length > dateCode.length) {
						dateVal = dateVal.slice(dateVal.length - dateCode.length, dateVal.length);
	
					} else if (dateVal.length < dateCode.length) {
						dateVal = ('000' + dateVal).slice(-dateCode.length);
	
					}
					inputOrdering[index] = dateVal;
	
				});
				return inputOrdering.join(dateSettings.separator);
	
			}
			return dateToString;
		}];
	
	})();

/***/ }),
/* 337 */
/***/ (function(module, exports) {

	 (function() {
	     'use strict';
	     module.exports = ['i18nService', 'utilService', function(i18nService, utilService) {
	
	         /**
	          * Take a value that can be coerced into a number and return the
	          * 	corresponding currency string.
	          * 	
	          * @param  {[type]} input [description]
	          * @return {[type]}       [description]
	          */
	         function numberToCurrency(input, customPrecision) {
	             var currencySettings = i18nService.currencySettings;
	             //For now, just ignoring anything that can't be parsed as number
	             var inputAsNumber = Number(input);
	             if (isNaN(inputAsNumber)) {
	                 return input;
	
	             }
	             //Handle negative value
	             var isNegative = inputAsNumber < 0;
	             inputAsNumber *= (1 - 2 * isNegative);
	             var precision = 5;
	             if (angular.isNumber(customPrecision)) {
	                 precision = customPrecision;
	
	             } else if (angular.isNumber(currencySettings.precision)) {
	                 precision = currencySettings.precision;
	
	             }
	
	             //Use toFixed to get string representation with correct padding & rounding
	             var inputAsFixed = utilService.round(inputAsNumber, precision).toFixed(precision);
	             //Create regexp that matches group lengths based on template
	             var matches = inputAsFixed.match(currencySettings.groupingExp);
	             var inputFormatted = '';
	             if (matches) {
	                 matches.shift();
	                 //Always take initial group of digits
	                 inputFormatted += matches[0];
	                 //Insert separators for interior numbers if they exist
	                 var toGroup = matches[1];
	                 if (toGroup) {
	                     for (var i = 0; i < toGroup.length; i++) {
	                         if (i % currencySettings.groupLength === 0) {
	                             inputFormatted += currencySettings.separator;
	
	                         }
	                         inputFormatted += toGroup[i];
	                     }
	
	                 }
	                 //If decimal exists, add decimal point and decimal
	                 if (matches[2]) {
	                     inputFormatted += currencySettings.decimal + matches[2];
	
	                 }
	                 //Prepend or append currency symbol
	                 if (currencySettings.isSymbolBefore) {
	                     inputFormatted = currencySettings.symbol + inputFormatted;
	
	                 } else {
	                     inputFormatted += currencySettings.symbol;
	
	                 }
	
	             }
	             if (isNegative) {
	                 inputFormatted = '(' + inputFormatted + ')';
	
	             }
	             return inputFormatted;
	
	         }
	         return numberToCurrency;
	     }];
	
	 })();


/***/ }),
/* 338 */
/***/ (function(module, exports) {

	 (function() {
	 	'use strict';
	 	module.exports = ['$filter', function($filter) {
	
	 		/**
	 		 * Take a value that can be coerced into a number and return the
	 		 * 	corresponding percentage-formatted string.
	 		 * 	
	 		 * @param  {[type]} input [inputValue]
	 		 * @param  {[type]} customPrecision [systemProperties.precision]
	 		 * @return {[type]} [percentage-formatted string]
	 		 */
	 		function numberToPercent(input, customPrecision) {
	 			if (angular.isNumber(input)) {
	 				return $filter('aptNumberToQuantity')(input, customPrecision) + '%';
	 			} else {
	 				return '';
	 			}
	 		}
	 		return numberToPercent;
	 	}];
	
	 })();

/***/ }),
/* 339 */
/***/ (function(module, exports) {

	 (function() {
	     'use strict';
	     module.exports = ['i18nService', 'utilService', function(i18nService, utilService) {
	
	         /**
	          * Take a value that can be coerced into a number and return the
	          * 	corresponding quantity-formatted string.
	          * 	
	          * @param  {[type]} input [description]
	          * @return {[type]}       [description]
	          */
	         function numberToQuantity(input, customPrecision) {
	             var quantitySettings = i18nService.quantitySettings;
	             //For now, just ignoring anything that can't be parsed as number
	             var inputAsNumber = Number(input);
	             if (isNaN(inputAsNumber)) {
	                 return input;
	
	             }
	             //Handle negative value
	             var isNegative = inputAsNumber < 0;
	             inputAsNumber *= (1 - 2 * isNegative);
	             var precision = 5;
	             if (angular.isNumber(customPrecision)) {
	                 precision = customPrecision;
	
	             } else if (angular.isNumber(quantitySettings.precision)) {
	                 precision = quantitySettings.precision;
	
	             }
	
	             //Use toFixed to get string representation with correct padding & rounding
	             var inputAsFixed = utilService.round(inputAsNumber, precision).toFixed(precision);
	             //Create regexp that matches group lengths based on template
	             var matches = inputAsFixed.match(quantitySettings.groupingExp);
	             var inputFormatted = '';
	             if (matches) {
	                 matches.shift();
	                 //Always take initial group of digits
	                 inputFormatted += matches[0];
	                 //Insert separators for interior numbers if they exist
	                 var toGroup = matches[1];
	                 if (toGroup) {
	                     for (var i = 0; i < toGroup.length; i++) {
	                         if (i % quantitySettings.groupLength === 0) {
	                             inputFormatted += quantitySettings.separator;
	
	                         }
	                         inputFormatted += toGroup[i];
	                     }
	
	                 }
	                 //If decimal exists, add decimal point and decimal
	                 if (matches[2]) {
	                     inputFormatted += quantitySettings.decimal + matches[2];
	
	                 }
	
	             }
	             if (isNegative) {
	                 inputFormatted = '-' + inputFormatted;
	
	             }
	             return inputFormatted;
	
	         }
	         return numberToQuantity;
	     }];
	
	 })();


/***/ }),
/* 340 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
		module.exports = ['i18nService','utilService', function(i18nService, utilService) {
	
			/**
			 * Take a string value that looks like a quantity and convert it into
			 * 	an number. All non-digit, non-decimal-separator characters are stripped
			 * 	out before number construction. If the decimal-separator character 
			 * 	appears more than once, all instances beyond the first are discarded.
			 * 	
			 * @param  {[type]} input [description]
			 * @return {[type]}       [description]
			 */
			function quantityToNumber(input, customPrecision) {
				var quantitySettings = i18nService.quantitySettings;
				if (typeof input !== 'string') {
					return input;
	
				}
				input = input.trim();
				var isNegative = input[0] === '-';
				var nonDigitRegex = /\D/g;
				var foundDecimal = false;
				var digitsOnly = input.replace(nonDigitRegex, function(match) {
					//Return '.' in place of the first instance of decimal separator.
					if (!foundDecimal && match === quantitySettings.decimal) {
						foundDecimal = true;
						return '.';
	
					} else if (!foundDecimal && match === '-') {
						isNegative = true;
	
					}
					return '';
	
				});
				var precision = 5;
				if (angular.isNumber(customPrecision)) {
					precision = customPrecision;
	
				} else if (angular.isNumber(quantitySettings.precision)) {
					precision = quantitySettings.precision;
	
				}
	
				var inputAsNumber = utilService.round(digitsOnly, precision);
				inputAsNumber *= (1 - 2 * isNegative);
				return inputAsNumber;
	
			}
			return quantityToNumber;
		}];
	
	})();

/***/ }),
/* 341 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
		module.exports = ['lodash', 'i18nService', 'UtilService', function(_, i18nService, UtilService) {
	
	
			function stringToDate(input) {
				if (typeof input !== 'string') {
					return input;
	
				}
				var dateSettings = i18nService.dateSettings;
				var digitGroups = input.match(dateSettings.groupingExp);
				// Return input if string cannot be matched to date format
				if (!digitGroups) {
					return input;
	
				}
				// Discard first element which is the full string match
				digitGroups.shift();
				digitGroups = _.map(digitGroups, _.parseInt);
				var year, month, day;
				_.forEach(dateSettings.ordering, function(ymdSymbol, symbolIndex) {
					var foundIndex;
					ymdSymbol = ymdSymbol[0].toLowerCase();
					if (ymdSymbol === 'y') {
						foundIndex = _.findIndex(digitGroups, function(numVal) {
							return numVal === undefined ? false : numVal > 31 || (symbolIndex === 2);
	
						});
						year = digitGroups[foundIndex];
	
					} else if (ymdSymbol === 'm') {
						foundIndex = _.findIndex(digitGroups, function(numVal) {
							return numVal === undefined ? false : numVal <= 12;
	
						});
						month = digitGroups[foundIndex];
	
					} else if (ymdSymbol === 'd') {
						foundIndex = _.findIndex(digitGroups, function(numVal) {
							return numVal === undefined ? false : numVal <= 31;
	
						});
						day = digitGroups[foundIndex];
	
					}
					digitGroups[foundIndex] = undefined;
	
				});
				year = year ? (year < 100 ? 2000 + year : year) : 2000;
				month = month || 1;
				day = day || 1;
				// Note that are zero-indexed with with January = 0, December = 11
				var dateVal = UtilService.newUTCDate(year, month - 1, day);
				return dateVal;
	
			}
			return stringToDate;
		}];
	
	})();

/***/ }),
/* 342 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
		module.exports = ['$filter', function($filter) {
	
			/**
			 * Take an input string and truncate it to the desired limit 
			 * (number of characters) and append an ellipsis to it (3 extra 
			 * characters)
			 * 
			 * @param  {[type]} input [description]
			 * @param  {[type]} limit [description]
			 * @return {[type]}       [description]
			 */
			function truncateString(input, limit) {
				return input.length > limit ? $filter('limitTo')(input, limit) + '...' : input;
			}
			return truncateString;
		}];
	
	})();

/***/ }),
/* 343 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
		module.exports = [function(accounting) {
			var leftPAdding;
	
			leftPAdding = function(number) {
				if (number < 10) {
					return '0' + number;
				} else {
					return number;
				}
			};
			return leftPAdding;
		}];
	})();

/***/ }),
/* 344 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
		module.exports = [function() {
			var mergeMessage;
			mergeMessage = function(msg, option) {
				return msg.replace('{}', option);
			};
			return mergeMessage;
		}];
	})();

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.common.services', [])
	        .service('applicationService', __webpack_require__(346))
	        /* We are using the same service from adminService module */
	        //.provider('i18nService', require('./i18nService'))
	        .service('utilService', __webpack_require__(347))
	        .service('apiCallsService', __webpack_require__(348))
	        .service('searchService', __webpack_require__(349))
	        .service('chargeTypeCriteriaService', __webpack_require__(350));
	})();


/***/ }),
/* 346 */
/***/ (function(module, exports) {

	(function () {
	    'use strict';
	
	    var appService = function ($state, $rootScope, systemConstants, remoteService) {
	        var prefix = systemConstants.nsPrefix || '',
	            isAdmin;
	        function fnGetStateList() {
	            return $state.get();
	        }
	
	        function showErrorMessage(object) {
	            $rootScope.showModalPop = true;
	            var errorDetails = "";
	            if (object == undefined) {
	                errorDetails = {
	                    messageTitle: 'session Time over',
	                    messageBody: 'please go list Page'
	                };
	            } else {
	                errorDetails = {
	                    messageTitle: object.type,
	                    messageBody: object.message
	                };
	                $rootScope.showIdleError = errorDetails;
	            }
	        }
	
	        function updateExpression(isGet, expression) {
	            var preExp = null;
	            if (expression) {
	                if (isGet) {
	                    preExp = expression.replaceAll(`$.${prefix}ProductId__r.`, `Product2.`);
	                    preExp = preExp.replaceAll(`$.${prefix}AttributeValueId__r.`, `${prefix}ProductAttributeValue__c.`);
	                    preExp = preExp.replaceAll(`$.`, `${prefix}LineItem__c.`);
	                }   else {
	                    var product2 = `Product2.`,
	                        lineItem = `${prefix}LineItem__c.`,
	                        productAttributeValue = `${prefix}ProductAttributeValue__c.`,
	                        product2RegExp = new RegExp(product2, 'g'),
	                        lineItemRegExp = new RegExp(lineItem, 'g'),
	                        productAttributeValueRegExp = new RegExp(productAttributeValue, 'g');
	                    preExp = expression.replace(product2RegExp, `$.${prefix}ProductId__r.`);
	                    preExp = preExp.replace(lineItemRegExp, `$.`);
	                    preExp = preExp.replace(productAttributeValueRegExp, `$.${prefix}AttributeValueId__r.`);
	                }
	            }
	            return preExp;
	        }
	
	        // To check logged-in user profile type
	        function isAdminProfile() {
	            return remoteService.isAdminProfile();
	        }
	
	        // Setting isAdmin value
	        function setIsAdmin(value) {
	            isAdmin = value;
	        }
	
	        // Getting isAdmin value
	        function getIsAdmin() {
	            return isAdmin;
	        }
	
	        var applicationService = {
	            getStateList: fnGetStateList,
	            showErrorMessage: showErrorMessage,
	            updateExpression: updateExpression,
	            isAdminProfile: isAdminProfile,
	            setIsAdmin: setIsAdmin,
	            getIsAdmin: getIsAdmin
	        };
	
	        return applicationService;
	    }
	
	    appService.$inject = [
	        '$state',
	        '$rootScope',
	        'systemConstants',
	        'remoteService'
	    ];
	
	    module.exports = appService;
	})();

/***/ }),
/* 347 */
/***/ (function(module, exports) {

	(function() {
	
		'use strict';
	
		module.exports = ['lodash', function(_) {
			var service = this;
	
			service.frequencyConstants = {
				FREQUENCY_HOURLY: 'Hourly',
				FREQUENCY_DAILY: 'Daily',
				FREQUENCY_WEEKLY: 'Weekly',
				FREQUENCY_MONTHLY: 'Monthly',
				FREQUENCY_QUARTERLY: 'Quarterly',
				FREQUENCY_HALFYEARLY: 'Half Yearly',
				FREQUENCY_YEARLY: 'Yearly'
			};
	
			service.priceTypesConstants = {
				PRICETYPE_ONETIME: 'One Time',
				PRICETYPE_RECURRING: 'Recurring',
				PRICETYPE_USAGE: 'Usage',
				PRICETYPE_INCLUDED_USAGE: 'Included Usage'
			};
	
			/**
			 * Use string-to-number conversion to compensate for floating point 
			 * 	errors in standard javascript rounding.
			 * @param  {Number/String} value
			 * @param  {Number/String} precision 	these can be numbers or strings
			 *                                    representing numbers
			 * @return {Number}	Rounded value
			 */
			service.round = function(value, precision) {
				precision = precision ? Number(precision) : 0;
				var roundExpPos = "e+" + precision;
				var roundExpNeg = "e-" + precision;
				if((value.toString().length + precision) > 21) {
					value = Number(value.toString().substring(0, (21 - precision)));
				}
				return Number(Math.round(value + roundExpPos) + roundExpNeg);
	
			};
	
			/**
			 * Check whether a nmber is within a min/max range. If min or max is not
			 * 	of type number, it the value is assumed to automatically meet the 
			 * 	criteria. If the value to check is not a number type, it automatically
			 * 	fails.
			 * @param  {Number}  minVal    
			 * @param  {Number}  maxVal    
			 * @param  {Number}  betweenVal
			 * @param  {Boolean}  strictly		Whether to compare strictly. False by default.
			 * @return {Boolean}           
			 */
			service.isBetween = function(minVal, maxVal, betweenVal, strictly) {
				if (!angular.isNumber(betweenVal)) {
					return false;
	
				}
				var minSatisfied, maxSatisfied;
				if (!strictly) {
					minSatisfied = angular.isNumber(minVal) ? betweenVal >= minVal : true;
					maxSatisfied = angular.isNumber(maxVal) ? betweenVal <= maxVal : true;
	
				} else {
					minSatisfied = angular.isNumber(minVal) ? betweenVal > minVal : true;
					maxSatisfied = angular.isNumber(maxVal) ? betweenVal < maxVal : true;
	
				}
				return minSatisfied && maxSatisfied;
	
			};
	
			/**
			 * Replicate Java string format where you can pass an string that has
			 * 	groups such as {0}, {1}, ... and an array of strings to insert at
			 * 	the appropriate indicies. Used for filling in custom labels.
			 * @param  {[type]} baseString [description]
			 * @param  {[type]} inserts    [description]
			 * @return {[type]}            [description]
			 */
			service.stringFormat = function(baseString, inserts) {
				if (!baseString) {
					return '';
	
				}
				if (!angular.isArray(inserts)) {
					return baseString;
	
				}
				var stringGroups = baseString.split(/\{(\d+)\}/),
					formattedString = '',
					isInsert = false,
					insertIndex = 0,
					nextInsert = '';
				for (var stringIndex = 0; stringIndex < stringGroups.length; stringIndex++) {
					if (isInsert) {
						isInsert = false;
						insertIndex = parseInt(stringGroups[stringIndex]);
						nextInsert = insertIndex < inserts.length ? inserts[insertIndex] : '';
						formattedString += nextInsert;
	
					} else {
						isInsert = true;
						formattedString += stringGroups[stringIndex];
	
					}
	
				}
				return formattedString;
	
			};
	
			/**
			 * returns true when the parameter passed is undefined or null or empty array or blank string
			 * @param obj any kind of parameter 
			 */
			service.isEmpty = function(obj) {
				if (angular.isDefined(obj) && obj !== null) {
					if (angular.isArray(obj) && obj.length === 0 || obj === '') {
						return true;
	
					}
					return false;
	
				}
				return true;
	
			};
	
			/**
			 * Construct a date object in which the time is set to 12:00 AM GMT.
			 * This is used to match salesforce UTC milliseconds standard for dates.
			 * 
			 * @param  {Number} year  year as numerical value
			 * @param  {Number} month month value, where January = 0
			 * @param  {Number} date  date as numerical value
			 * @return {Date}
			 */
			service.newUTCDate = function(year, month, date) {
				var newDate = new Date();
				newDate.setUTCHours(0, 0, 0);
				if (angular.isNumber(year)) {
					newDate.setUTCFullYear(year);
	
				}
				if (angular.isNumber(month)) {
					newDate.setUTCMonth(month);
	
				}
				if (angular.isNumber(date)) {
					newDate.setUTCDate(date);
	
				}
				return newDate;
	
			};
	
			/**
			 * Computes the new date for adding days to the given date 
			 * @param date current date
			 * @param days number of days to add
			 * @return the new date
			 */
			service.addDays = function(date, days) {
				return date + 86400000 * days;
			};
	
			/**
			 * Computes the end date for the given start date and term parameters
			 * @param startDate the term start date
			 * @param term the term 
			 * @param frequency the frequency associated with the term
			 * @return the end date
			 */
			service.computeEndDate = function(startDate, term, frequency) {
				var newEndDate = new Date(startDate);
	
				if (frequency === service.frequencyConstants.FREQUENCY_HOURLY) {
					// hourly
					newEndDate = newEndDate.setDate(newEndDate.getDate() + (1 / 24 * term));
	
				} else if (frequency === service.frequencyConstants.FREQUENCY_DAILY) {
					// daily
					newEndDate = newEndDate.setDate(newEndDate.getDate() + term);
	
				} else if (frequency === service.frequencyConstants.FREQUENCY_WEEKLY) {
					// weekly
					newEndDate = newEndDate.setDate(newEndDate.getDate() + (term * 7));
	
				} else if (frequency === service.frequencyConstants.FREQUENCY_MONTHLY) {
					// monthly
					newEndDate = service.computeEndDateByMonths(startDate, term, 1);
	
				} else if (frequency === service.frequencyConstants.FREQUENCY_QUARTERLY) {
					// quarterly
					newEndDate = service.computeEndDateByMonths(startDate, term, 3);
	
				} else if (frequency === service.frequencyConstants.FREQUENCY_HALFYEARLY) {
					// half yearly
					newEndDate = service.computeEndDateByMonths(startDate, term, 6);
	
				} else if (frequency === service.frequencyConstants.FREQUENCY_YEARLY) {
					// yearly
					newEndDate = service.computeEndDateByMonths(startDate, term, 12);
	
				}
	
				return newEndDate;
	
			};
	
			/**
			 * compute end date for monthly, quartely, half-yearly or yearly term 
			 * @param startDate line item start date
			 * @param term number of months plus extra days / 30 
			 * @param frequencyInMonths 1-monthly, 3-quarterly 6-half-yearly 12-yearly 
			 */
			service.computeEndDateByMonths = function(startDate, term, frequencyInMonths) {
				var months = (term * frequencyInMonths);
	
				var newEndDate = new Date(startDate);
				newEndDate = newEndDate.setMonth(newEndDate.getMonth() + months);
	
				var dateToFindDays = new Date(newEndDate);
				dateToFindDays = dateToFindDays.setDate(dateToFindDays.getDate() + 1);
	
				var daysInMonths = service.daysInMonth(new Date(dateToFindDays).getFullYear(), new Date(dateToFindDays).getMonth());
				var remainingTerms = ((term * frequencyInMonths) - months);
				var extraDays = Math.round(remainingTerms * daysInMonths);
	
				newEndDate = new Date(newEndDate);
				newEndDate = newEndDate.setDate(newEndDate.getDate() + (extraDays - 1));
	
				return newEndDate;
			};
	
			/**
			 * reorder elements within an array such that when a matching key is found, the element is moved to the 
			 * head of that array - this check is repeated for every element of the array.
			 * @param - source array
			 * @param - predicate, callback function; Must return true if element should move to the head of the array
			 */
			service.reorderArray = function(array, callback) {
				if (_.isArray(array) === false || array.length === 0 || _.isFunction(callback) === false) {
					return;
				}
	
				var spliceIdx = [];
	
				for (var i = 0; i < array.length; i++) {
					// callback should return true/false
					if ((i > 1) && callback(array[i])) {
						spliceIdx.push(i);
					}
				}
	
				spliceIdx.forEach(function(idx) {
					var culled = array.splice(idx, 1);
					array.splice(0, 0, culled[0]);
				});
			};
	
			/**
			 * compute days in given year and a month
			 * @param year
			 * @param month
			 * return days in month
			 */
			service.daysInMonth = function(year, month) {
				return new Date(year, month, 0).getDate();
			};
	
			service.removeTempUIAttributes = function(obj) {
				Object.keys(obj).forEach(function(key) {
					if (_.startsWith(key, '@@') || _.startsWith(key, '$$')) {
						delete obj[key];
					} else if (angular.isObject(obj[key])) {
						service.removeTempUIAttributes(obj[key]);
					}
				});
			};
	
			service.validateEndDate = function(date) {
				var now = new Date();
				if (now.getTime() > date) {
					return false;
				}
				return true;
			};
	
			service.validateDate = function(date) {
				var date_regex = /^(0[1-9]|1[0-2])\/(0[1-9]|1\d|2\d|3[01])\/(19|20)\d{2}$/; //Validates the format (MM/DD/YYYY), with a year between 1900 and 2099
				if (angular.isUndefined(date) || date === null) {
					return false;
				} else if (date.toString().trim().length < 1) {
					return false;
				} else if (date_regex.test(date)) {
					return false;
				}
				return true;
			};
	
			service.uniq = function(inputArray) {
				var tempArray = [];
				var tempObj = {};
				_.forEach(inputArray, function(value, key) {
					if (!tempObj[value.id]) {
						tempArray.push(value);
						tempObj[value.id] = value.id;
					}
				});
				return tempArray;
			};
	
			service.intersection = function(inputArray) {
				var tempArray = [];
				_.forEach(inputArray, function(value, key) {
					tempArray.push(value.actionArr);
				});
				return _.intersection.apply(_, tempArray);
			};
	
			/**
			 * Get the object corresponding to field name
			 * @param contextSO the "starting" sObject
			 * @param fieldAPIName the fully qualified field API name
			 * @return the object specified by fieldName
			 */
			service.sObjectFromField = function(contextSO, fieldAPIName) {
				//set new value
				var path = fieldAPIName.split('.');
				var curObject = contextSO;
				for (var i = 0, max = path.length - 1; i < max; i++) {
					if (typeof(curObject) !== 'undefined' && curObject !== null) {
						curObject = curObject[path[i]];
					}
				}
	
				return curObject;
			};
	
			/**
			 * create popup for Product Information list
			 * @param product Object
			 */
			service.createPopup = function(product) {
				var infoURL = "";
				if (product.productInformationList.length > 0) {
					if (product.productInformationList[0].InformationType__c == "Attached File") {
						infoURL = "/servlet/servlet.FileDownload?file=" + product.productInformationList[0].FileId__c;
	
					} else if (product.productInformationList[0].InformationType__c == "Embedded Code") {
						infoURL = product.productInformationList[0].EmbedCode__c;
	
					} else if (product.productInformationList[0].InformationType__c == "URL Address") {
						infoURL = product.productInformationList[0].ContentUrl__c;
	
					}
				} else {
					return;
				}
	
				var header = product.productInformationList.length > 0 ? product.productInformationList[0].Name : "";
				var isEmbed = product.productInformationList[0].InformationType__c == "Embedded Code" ? true : false;
	
				if (infoURL === "" || infoURL === null) {
					return false;
				}
	
				var url = isEmbed ? '' : infoURL;
	
				var infoModal = window.open(url, 'Product Information', 'menubar=1,resizable=1,width=712,height=500');
				if (isEmbed) {
					infoModal.document.write('<html><head><title>Product Information</title></head>');
					infoModal.document.write('<body><center><h3>' + header + '</h3>');
					infoModal.document.write(infoURL);
					infoModal.document.write('</center></body></html>');
				}
				if (window.focus) {
					infoModal.focus();
				}
			};
	
			//return service;
		}];
	
	})();

/***/ }),
/* 348 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		module.exports = ['remoteService', 'systemConstants', '$q', 'applicationService', function (remoteService, systemConstants, $q, applicationService) {
	
		    var prefix = systemConstants.nsPrefix || '';
	
		    /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
		    function getPrefixedAttribute(attribute) {
		        prefix = systemConstants.nsPrefix || '';
		        /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
		        return (prefix + attribute).trim();
		    }
	
		    function getSObjectPicklistFields(sObjectName, field) {
		        (sObjectName.indexOf('__c') >= 0) ? sObjectName = getPrefixedAttribute(sObjectName): sObjectName;
	            if (field && field.length)
	                (field[0].indexOf('__c') >= 0) ? field[0] = getPrefixedAttribute(field[0]) : field[0];
		        return remoteService.getSObjectPicklistFields(sObjectName, field)
		    }
			
		    function searchSObjectRecords(searchText, properties) {
		        var request = {
		            "SObjectName": properties.autocomplete.sObjectName,
		            "SearchString": searchText,
		            "SortField": properties.sortField || 'Name',
		            "SortDirection": properties.sortDirection || 'ASC',
		            "ChunkNumber": properties.chunkNumber || 1,
		            "NumberOfRecordsPerChunk": properties.numberOfRecordsPerChunk || 20,
		            "OtherFields": properties.otherFields
		        };
		        var deferQ = $q.defer();
		        remoteService.searchSObjectRecords(request).then(function (response) {
		            deferQ.resolve(JSON.parse(response.SObjectRecordsJsonString));
		        }, function (reason) {
		            applicationService.showErrorMessage(reason);
		            deferQ.reject(reason);
		        });
		        return deferQ.promise;
		    }
	
		    function getFieldsForSObjectName(sObjectName, includeTextAreaFields, getExtraReferenceDotNameFields) {
		    	var requestOb = {
	  				SObjectName: getPrefixedAttribute(sObjectName),
	  				IncludeTextAreaFields: includeTextAreaFields, 
	  				GetExtraReferenceDotNameFields: getExtraReferenceDotNameFields
				};
	            return remoteService.getFieldsForSObjectName(requestOb);
		    }
	
			var apiCallsService = {
			    getSObjectPicklistFields: getSObjectPicklistFields,
			    searchSObjectRecords: searchSObjectRecords,
			    getFieldsForSObjectName: getFieldsForSObjectName
			};
	
			return apiCallsService;
		}];
	})();

/***/ }),
/* 349 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var searchService = function (remoteService, productService, $q, systemConstants, cpqAdminConstants, apiCallsService) {
	        var prefix = systemConstants.nsPrefix || '';
	
	        function getSavedSearch(contextObject) {
	            var request = {
	                SearchContext: contextObject
	            };
	            var deferQ = $q.defer();
	            remoteService.getAllSavedSearchForContext(request).then(function(response) {
	                deferQ.resolve(convertToPicklistEntries(response.SavedSearchSOs));
	            }, function(reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	       
	
	        function getSavedSearchForDM(contextObject) {
	            var request = {
	                SearchContext: contextObject
	            };
	            var deferQ = $q.defer();
	            remoteService.getAllSavedSearchForContext(request).then(function(response) {
	                deferQ.resolve(response.SavedSearchSOs);
	            }, function(reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        function convertToPicklistEntries(data) {
	            for (var i = 0; i < data.length; i++) {
	                data[i].label = data[i].Name;
	                data[i].value = data[i].Id;
	            }
	            return data;
	        }
	
	        function getEqualityOperatorsList() {
	            return [{
	                label: 'equal to',
	                value: 'equal to'
	            }, {
	                label: 'not equal to',
	                value: 'not equal to'
	            }];
	        }
	
	        function getComparisonOperatorsList() {
	            return [{
	                label: 'less than',
	                value: 'less than'
	            }, {
	                label: 'greater than',
	                value: 'greater than'
	            }, {
	                label: 'less than or equal to',
	                value: 'less than or equal to'
	            }, {
	                label: 'greater than or equal to',
	                value: 'greater than or equal to'
	            }];
	        }
	
	        function getStringOperatorsList() {
	            return [{
	                label: 'starts with',
	                value: 'starts with'
	            }, {
	                label: 'contains',
	                value: 'contains'
	            }, {
	                label: 'does not contain',
	                value: 'does not contain'
	            }];
	        }
	
	        function getArrayOperatorsList() {
	            return [{
	                label: 'includes',
	                value: 'includes'
	            }, {
	                label: 'excludes',
	                value: 'excludes'
	            }]; 
	        }
	
	        function getSObjectPicklistFields(sObjectName, field) {
	            if (sObjectName === 'Product2') {
	                var deferQ = $q.defer();
	                remoteService.getProductDetails('', prefix + 'ProductDetailFields').then(function (result) {
	                    deferQ.resolve(filterProductFields(result.ProductFields));
	                });
	                return deferQ.promise;
	            } else {
	                return remoteService.getSObjectPicklistFields(sObjectName, field);
	            }
	        }
	
	        function upsertSavedSearch(request) {
	            if (request.Id)
	                return remoteService.updateSavedSearch([request]);
	            else
	                return remoteService.createSavedSearch([request]);
	        }
	
	        function updateSavedSearch(request) {
	            return remoteService.updateSavedSearch([request]);
	        }
	
	        function applySavedSearch(SavedSearchId, payload) {
	            var request = {
	                SavedSearchId: SavedSearchId,
	                ProductsRequestDO: payload
	            };
	            return remoteService.getSavedSearch(request);
	        }
	
	        function deleteSavedSearch(SavedSearchId) {
	            return remoteService.deleteSavedSearch([SavedSearchId]);
	        }
	
	        function filterProductFields(finalListOfFields) {
	            for (var item = 0; item < finalListOfFields.length; item++) {
	                if (finalListOfFields[item].Type === 'ID' || 
	                    finalListOfFields[item].IsRichText || 
	                    finalListOfFields[item].Type === cpqAdminConstants.reference || 
	                    finalListOfFields[item].Type === cpqAdminConstants.textarea) {
	                    
	                    finalListOfFields.splice(item, 1);
	                    item--;
	                }
	            }
	            return finalListOfFields;
	        }
	
	        function getValidOperatorList(operatorType) {
	            var operatorList;
	            switch (operatorType) {
	                case cpqAdminConstants.double:
	                case cpqAdminConstants.currency:
	                case cpqAdminConstants.datetime:
	                case cpqAdminConstants.date:
	                case cpqAdminConstants.percent:
	                    operatorList = getEqualityOperatorsList().concat(getComparisonOperatorsList());
	                    break;
	                case cpqAdminConstants.boolean:
	                case cpqAdminConstants.picklist:
	                    operatorList = getEqualityOperatorsList();
	                    break;    
	                case cpqAdminConstants.string:
	                case cpqAdminConstants.textarea:
	                case cpqAdminConstants.url:
	                    operatorList = getEqualityOperatorsList().concat(getStringOperatorsList());
	                    break;    
	                case cpqAdminConstants.multipicklist:
	                    operatorList = getEqualityOperatorsList().concat(getArrayOperatorsList());
	                    break;                            
	                default:
	                    operatorList = getEqualityOperatorsList().concat(getComparisonOperatorsList(), getStringOperatorsList(), getArrayOperatorsList());
	                    break;    
	            }
	            return operatorList;
	        }
	
	        function prepareExpressionString(label, value, operator) {
	            var str = '';
	            switch (operator) {
	                case 'equal to':
	                    {
	                        str = '(' + label + ' = ' + value + ') ';
	                        break;
	                    }
	                case 'not equal to':
	                    {
	                        str = '(' + label + ' != ' + value + ') ';
	                        break;
	                    }
	                case 'starts with':
	                    {
	                        str = '(' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case 'contains':
	                    {
	                        str = '(' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case 'does not contain':
	                    {
	                        str = '(NOT ' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case 'less than':
	                    {
	                        str = '(' + label + ' < ' + value + ') ';
	                        break;
	                    }
	                case 'greater than':
	                    {
	                        str = '(' + label + ' > ' + value + ') ';
	                        break;
	                    }
	                case 'less than or equal to':
	                    {
	                        str = '(' + label + ' <= ' + value + ') ';
	                        break;
	                    }
	                case 'greater than or equal to':
	                    {
	                        str = '(' + label + ' >= ' + value + ') ';
	                        break;
	                    }
	                case 'in':
	                    {
	                        str = '(' + label + ' IN ' + value + ') ';
	                        break;
	                    }
	                case 'not in':
	                    {
	                        str = '(' + label + ' NOT IN ' + value + ') ';
	                        break;
	                    }
	            }
	            return str;
	        }
	
	        var objSearchService = {
	            getSavedSearch: getSavedSearch,
	            getSObjectPicklistFields: getSObjectPicklistFields,
	            upsertSavedSearch: upsertSavedSearch,
	            updateSavedSearch: updateSavedSearch,
	            applySavedSearch: applySavedSearch,
	            deleteSavedSearch: deleteSavedSearch,
	            getSavedSearchForDM: getSavedSearchForDM,
	            getValidOperatorList: getValidOperatorList,
	            prepareExpressionString: prepareExpressionString
	        };
	
	        return objSearchService;
	    };
	
	    searchService.$inject = [
	        'remoteService',
	        'productService',
	        '$q',
	        'systemConstants',
	        'cpqAdminConstants',
	        'apiCallsService'
	    ];
	
	    module.exports = searchService;
	})();


/***/ }),
/* 350 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var chargeTypeCriteriaServices = function($stateParams, systemConstants, remoteService, $q, productConstants, cpqAdminConstants, listService, applicationService, priceListItemConstants) {
	
	        var selectedPli = {},
	            prefix = systemConstants.nsPrefix || '';
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function getSelectedPLI() {
	            return selectedPli;
	        }
	
	        function setSelectedPLI(item) {
	            selectedPli = item;
	        }
	
	        function getInitials(str) {
	            var response = '';
	            if (str && str.length > 0) {
	                var words = str.split(' ');
	                for (var j = 0; j < words.length; j++) {
	                    response += words[j].charAt(0);
	                }
	            }
	            return response === '' ? str : response;
	        }
	
	        function getPriceListItemDetails(pliId) {
	            var defered = $q.defer(),
	                requestObj = [pliId];
	
	            remoteService.getPriceListItemDetails(requestObj)
	                .then(function(response) {
	                    setSelectedPLI(response[0]);
	                    defered.resolve(response[0]);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function truncateNames(obj) {
	            var sampleLabel, str;
	            if (obj && obj.length > 0) {
	                for (var i = 0; i < obj.length; i++) {
	                    var temp = obj[i].label,
	                        leftSide = temp.split(' : ')[0],
	                        rightSide = temp.split(' : ')[1];
	                    if (leftSide !== sampleLabel) {
	                        str = getInitials(leftSide);
	                        sampleLabel = leftSide;
	                    }
	                    //obj[i].label = str + ' : ' + rightSide;
	                    obj[i].label = rightSide;
	                }
	            }
	            return obj;
	        }
	
	        function searchTargetAttributesForLineItems(searchText) {
	            var deferQ = $q.defer();
	            remoteService.searchTargetAttributes(searchText)
	                .then(function(response) {
	                    deferQ.resolve(truncateNames(getItems(response, getPrefixedAttribute('LineItem__c'))));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function getMatchingPicklistValues(obj, searchText) {
	            var response = [];
	            if (obj && obj.length > 0) {
	                for (var i = 0; i < obj.length; i++) {
	                    var temp = obj[i],
	                        label = temp.label;
	                    if (label === searchText) {
	                        response = temp.picklistValues || [];
	                        break;
	                    }
	
	                }
	            }
	            return response;
	        }
	
	
	        function getChargeTypeFilterLabel(sObjectLabel, fieldName, fieldLabel) {
	            var response = '';
	            /* Check if the name contains any extra pre tag */
	            if (fieldName.split('.').length > 1) {
	                var firstName = fieldName.split('.')[0];
	                if (firstName === getPrefixedAttribute('AttributeValueId__r')) {
	                    //response = 'PAV : ' + fieldLabel;
	                    response = fieldLabel;
	                } else {
	                    //response = getInitials(sObjectLabel) + ' : ' + fieldLabel;
	                    response = fieldLabel;
	                }
	            } else {
	                //response = getInitials(sObjectLabel) + ' : ' + fieldLabel;
	                response = fieldLabel;
	            }
	            return response;
	        }
	
	        function getItems(data, type) {
	            var response = [];
	            if (data && data.length) {
	                for (var i = 0; i < data.length; i++) {
	                    if (data[i].sObjectName === type) {
	                        response.push(data[i]);
	                    }
	                }
	            }
	            return response || [];
	        }
	
	        function searchTargetAttributesForProductAttributes(searchText) {
	            var deferQ = $q.defer();
	            remoteService.searchTargetAttributes(searchText)
	                .then(function(response) {
	                    deferQ.resolve(truncateNames(getItems(response, getPrefixedAttribute('ProductAttributeValue__c'))));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function preparePF(arr) {
	            var response = [];
	            if (arr) {
	                for (var i = 0; i < arr.length; i++) {
	                    response.push({
	                        Name: arr[i],
	                        Id: arr[i]
	                    });
	                }
	            }
	            return response;
	        }
	
	        function productFamilySearch(searchText) {
	            var deferQ = $q.defer();
	            remoteService.searchProductFamily(searchText)
	                .then(function(response) {
	                    deferQ.resolve(preparePF(JSON.parse(response)));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        /*
	         * Returns search result for auto-complete product group component.
	         */
	        function productGroupSearch(searchText) {
	            var defer = $q.defer();
	
	            remoteService.searchProductGroups(searchText)
	                .then(function(response) {
	                    defer.resolve(JSON.parse(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return defer.promise;
	
	        }
	
	        function getAssociatedPriceListItems(plId, searchText, chunkNumber) {
	            var defered = $q.defer(),
	                requestObj = {
	                    "SearchString": searchText || null,
	                    "PriceListId": plId,
	                    "NumberOfRecordsPerChunk": priceListItemConstants.numberOfProductsPerChunk,
	                    "ChunkNumber": chunkNumber || 1
	                };
	            remoteService.getPriceListItemsForPriceList(requestObj)
	                .then(function(response) {
	                    defered.resolve(response.PriceListItemDOs);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function processPliAutocompleteData(data) {
	            var response = [];
	            for (var i = 0; i < data.length; i++) {
	                response.push({
	                    Name: data[i].PriceListItemSO[getPrefixedAttribute('ProductId__r')].Name + ' - ' + data[i].PriceListItemSO[getPrefixedAttribute('ChargeType__c')],
	                    Id: data[i].PriceListItemSO.Id
	                });
	            }
	            return response;
	        }
	
	        function pliSearch(searchText) {
	            var defer = $q.defer();
	            getAssociatedPriceListItems(selectedPli.PriceListItemSO[getPrefixedAttribute('PriceListId__c')], searchText, 1)
	                .then(function(response) {
	                    defer.resolve(processPliAutocompleteData(response));
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function productSearch(searchText, item) {
	            var defer = $q.defer();
	
	            if (item.relationTo === 'Product') {
	                return productSearchByName(searchText);
	            } else if (item.relationTo === 'Product Group') {
	                return productGroupSearch(searchText);
	            } else if (item.relationTo === 'Product Family') {
	                return productFamilySearch(searchText);
	            } else if (item.relationTo === 'Price List Item') {
	                return pliSearch(searchText);
	            } else {
	                defer.resolve([]);
	            }
	
	            return defer.promise;
	        }
	
	        function productSearchByName(searchText) {
	            var defer = $q.defer();
	            var requestObj = {
	                'ViewName': prefix + productConstants.fieldsetProductList,
	                "SortField": 'LastModifiedDate',
	                "SortDirection": cpqAdminConstants.DESCENDING,
	                'SearchString': searchText || '',
	                'ChunkNumber': 1,
	                'NumberOfProductsPerChunk': productConstants.numberOfProductsPerChunk,
	                'ConfigType': ''
	            };
	            listService.getProductListBySelectedView(requestObj, false)
	                .then(function(response) {
	                    defer.resolve(response.ProductSOs);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            return defer.promise;
	        }
	
	
	
	        function getSObjectPicklistFields(sObjectName, fields) {
	            var defer = $q.defer(),
	                picklistFieldNames;
	            sObjectName = getPrefixedAttribute(sObjectName);
	            if (fields && fields.length) {
	                for (var i = 0; i < fields.length; i++) {
	                    fields[i] = getPrefixedAttribute(fields[i]);
	                }
	                picklistFieldNames = fields;
	            } else {
	                picklistFieldNames = null;
	            }
	            remoteService.getSObjectPicklistFields(sObjectName, picklistFieldNames)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function prepareCriteria(item) {
	            var criteria = item.PriceListItemSO.chargeTypeCriteria;
	            if (criteria) {
	                var linepredicates = criteria.filter.predicates;
	                if (linepredicates.length > 0) {
	                    for (var i = 0; i < linepredicates.length; i++) {
	                        var temp = linepredicates[i];
	                        delete temp.hasError;
	                        delete temp.targetField;
	                        delete temp.picklistValues;
	                        delete temp.statementProduct;
	                    }
	                }
	                var productAttributePredicates = criteria.filter.childFilter.predicates;
	                if (productAttributePredicates.length > 0) {
	                    for (var i = 0; i < productAttributePredicates.length; i++) {
	                        var temp = productAttributePredicates[i];
	                        delete temp.hasError;
	                        delete temp.targetField;
	                        delete temp.picklistValues;
	                        delete temp.statementProduct;
	                    }
	                }
	                if (linepredicates.length > 0 || productAttributePredicates.length > 0) {
	                    item.PriceListItemSO[getPrefixedAttribute('Criteria__c')] = JSON.stringify(criteria, null, ' ');
	                } else {
	                    item.PriceListItemSO[getPrefixedAttribute('Criteria__c')] = '';
	                }
	
	            } else {
	                item.PriceListItemSO[getPrefixedAttribute('Criteria__c')] = '';
	            }
	
	            return item;
	        }
	        var service = {
	            getSelectedPLI: getSelectedPLI,
	            setSelectedPLI: setSelectedPLI,
	            getPriceListItemDetails: getPriceListItemDetails,
	            searchTargetAttributesForLineItems: searchTargetAttributesForLineItems,
	            getMatchingPicklistValues: getMatchingPicklistValues,
	            getChargeTypeFilterLabel: getChargeTypeFilterLabel,
	            searchTargetAttributesForProductAttributes: searchTargetAttributesForProductAttributes,
	            productSearch: productSearch,
	            getSObjectPicklistFields: getSObjectPicklistFields,
	            prepareCriteria: prepareCriteria
	        };
	        return service;
	    };
	
	    chargeTypeCriteriaServices.$inject = [
	        '$stateParams',
	        'systemConstants',
	        'remoteService',
	        '$q',
	        'productConstants',
	        'cpqAdminConstants',
	        'listService',
	        'applicationService',
	        'priceListItemConstants'
	    ];
	
	    module.exports = chargeTypeCriteriaServices;
	})();


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		/* product module's modules */
		__webpack_require__(352);
		__webpack_require__(368);
		__webpack_require__(370);
		__webpack_require__(377);
		__webpack_require__(381);
		__webpack_require__(396);
		__webpack_require__(420);
		__webpack_require__(426);
		__webpack_require__(438);
		__webpack_require__(464);
		__webpack_require__(475);
		module.exports = angular.module('cpqAdmin.product', [
	
				// treeControl for right side tree component.
				// Nodes / leaf nodes can be dragged from right pane to center pane
				'treeControl',
				//Attributes, Options and Categories page use this module
				'dndLists',
				//Used in Rich Text Editor
				'colorpicker.module',
				//Rich Text Editor
				'wysiwyg.module',
				//Smart table used in List page
				'ngTable',
				'smart-table',
				'smart-table-improved',
				'cpqAdmin.product.list',
				'cpqAdmin.product.detail',
				'cpqAdmin.product.association',
				'cpqAdmin.product.option',
				'cpqAdmin.product.pricing',
				'cpqAdmin.product.attribute',
				'cpqAdmin.product.rule',
				'cpqAdmin.product.multimedia',
				'cpqAdmin.product.graph',
				'cpqAdmin.product.common.directives',
				'cpqAdmin.product.common.services',
				'angularResizable'
			])
			.controller('productController', __webpack_require__(479))
			/* 
			 * value service could have been used instead of constant, but that won't be available till 
			 * the application is bootstrapped. So we are using constant service.
			 * 
			 * Product module wise constants are defined in the product.constant.js file
			 */
			.constant('productConstants', __webpack_require__(480))
			.config(['$stateProvider', function($stateProvider) {
				$stateProvider.state('app.product', {
					url: '/product',
					views: {
						'pageContent@': {
							template: __webpack_require__(481),
							controller: 'productController',
							controllerAs: 'vm'
						}
					},
					data: {
						//This config is used for primary menu generation
						// ui-router provides $state.get() to access all 'data' objects across all states.
						menuConfig: {
							'title': 'Product',
							'iconCls': 'cube'
						}
	
					}
				});
	
	
			}]);
	})();

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.product.common.directives', [])
			.directive('viewList', __webpack_require__(353))
			/* Product page sub-menus goes her. Its not a real-time directive. Just a view made as directive */
			.directive('subMenu', __webpack_require__(355))
			.directive('treeContainer', __webpack_require__(357))
			.directive('fileDropZone', __webpack_require__(364))
			.directive('treeSearch', __webpack_require__(365))
	        .directive('filterProductList', __webpack_require__(366));
	})();


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = [function() {
	        var productViewController = function(listService, i18nService, $state, cpqAdminConstants) {
	            var vm = this;
	            vm.labels = i18nService.CustomLabel;
	
	            vm.views = [{
	                FieldLabel: vm.labels.RecentlyModifiedProducts,
	                FieldName: 'LastModifiedDate',
	                IsEditable: true,
	                isSelected: false,
	                ElementId: 'elem-1'
	            }, {
	                FieldLabel: vm.labels.AllBundles,
	                FieldName: 'Bundle',
	                IsEditable: true,
	                isSelected: false,
	                ElementId: 'elem-2'
	            }, {
	                FieldLabel: vm.labels.AllStandaloneProducts,
	                FieldName: 'Standalone',
	                IsEditable: true,
	                isSelected: false,
	                ElementId: 'elem-3'
	            }, {
	                FieldLabel: vm.labels.AllOptions,
	                FieldName: 'Option',
	                IsEditable: true,
	                isSelected: false,
	                ElementId: 'elem-4'
	            }];
	
	            var filter = listService.getFilters();
	            if (filter) {
	                if (filter.SortField === 'LastModifiedDate') {
	                    vm.views[0].isSelected = true;
	                }
	                if (filter.ConfigTypes.indexOf('Bundle') > -1) {
	                    vm.views[1].isSelected = true;
	                }
	                if (filter.ConfigTypes.indexOf('Standalone') > -1) {
	                    vm.views[2].isSelected = true;
	                }
	                if (filter.ConfigTypes.indexOf('Option') > -1) {
	                    vm.views[3].isSelected = true;
	                }
	            }
	
	            vm.loadProducts = function() {
	                var configTypes = [];
	                var filterObj = {};
	                for (var i = 0; i < vm.views.length; i++) {
	                    if (vm.views[i].isSelected) {
	                        if (vm.views[i].FieldName !== 'LastModifiedDate') {
	                            configTypes.push(vm.views[i].FieldName);
	                        }
	                    }
	                }
	                //vm.selected = view.name;
	
	                if (configTypes.length === 0) {
	                    filterObj.SortField = 'LastModifiedDate';
	                    filterObj.SortDirection = cpqAdminConstants.DESCENDING;
	                }
	                filterObj.ConfigTypes = configTypes;
	                filterObj.ChunkNumber = 1;
	                listService.setFilters(filterObj);
	                if ($state.$current.name === 'app.list') {
	                    vm.loadViewProducts()(configTypes);
	                }
	            };
	            vm.reset = function() {
	                for (var i = 0; i < vm.views.length; i++) {
	                    vm.views[i].isSelected = false;
	                }
	                var configTypes = [],
	                    filterObj = {};
	                filterObj.SortField = 'LastModifiedDate';
	                filterObj.SortDirection = cpqAdminConstants.DESCENDING;
	                filterObj.ConfigTypes = configTypes;
	                filterObj.ChunkNumber = 1;
	                listService.setFilters(filterObj);
	                if ($state.$current.name === 'app.list') {
	                    vm.loadViewProducts()('');
	                }
	            };
	        };
	
	        productViewController.$inject = ['listService', 'i18nService', '$state', 'cpqAdminConstants'];
	
	        return {
	            restrict: 'E',
	            scope: {},
	            controller: productViewController,
	            controllerAs: 'vm',
	            bindToController: {
	                views: '=',
	                loadViewProducts: '&',
	                selected: '=',
	                toggleProductView: '='
	            },
	            template: __webpack_require__(354),
	        };
	    }];
	
	})();

/***/ }),
/* 354 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"product-views\">\n    <div class=\"main-header\">\n        <span class=\"title\">{{vm.labels.Filters}}</span>\n        <i class=\"material-icons close-icon\" data-ng-click=\"vm.toggleProductView()\" aria-hidden=\"true\" role=\"button\">clear</i>\n    </div>\n    <div class=\"list-header\">\n        <span class=\"subheader\">{{vm.labels.ProductType}}</span>\n        <!-- <span class=\"toggleView fa a3 fa-angle-up pull-right\"></span> -->\n    </div>\n    <md-list ng-cloak>\n        <md-list-item ng-repeat=\"view in vm.views\">\n            <material-form-field model=\"view.isSelected\" field-type=\"CHECKBOX\" is-editable=\"{{view.IsEditable}}\" properties=\"view\" class=\"checkboxWithLabel\" show-inline=\"true\">\n            </material-form-field>\n            <md-divider></md-divider>\n        </md-list-item>\n    </md-list>\n    <div class=\"footer\">\n        <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.reset();\">{{vm.labels.Reset}}</button>\n        <button class=\"slds-button slds-button_brand\" ng-click=\"vm.loadProducts();\">{{vm.labels.Apply}}</button>\n    </div>\n</div>\n"

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
		'use strict';
	
		var productMenuController = function($state, $scope, $rootScope, $stateParams, i18nService) {
			var vm = this;
	
			vm.$stateParams = $stateParams;
			vm.labels = i18nService.CustomLabel;
	
			function convertToCamelCase(str) {
				if (str && str.length > 1) {
					return str.charAt(0).toUpperCase() + str.substring(1, str.length);
				}
			}
	
			function updateMenuStatus(forMenu, status, disabled) {
				var modelName = 'errorIn' + convertToCamelCase(forMenu) + 'Page';
				var disabledState = 'is' + convertToCamelCase(forMenu) + 'Disabled';
				vm[modelName] = status;
				vm[disabledState] = disabled ? disabled : false;
	
			}
	
			$rootScope.$on('menuStatus', function(evt, args) {
				var forMenu = args.menu,
					status = args.status,
					disabled = args.disabled;
				updateMenuStatus(forMenu, status, disabled);
			});
	
		};
	
		productMenuController.$inject = ['$state', '$scope', '$rootScope', '$stateParams', 'i18nService'];
	
		return {
			restrict: 'E',
			scope: {},
			controller: productMenuController,
			controllerAs: 'vm',
			bindToController: true,
			template: __webpack_require__(356),
		};
	};

/***/ }),
/* 356 */
/***/ (function(module, exports) {

	module.exports = "<!-- Header Menu Starting -->\n<ul class=\"nav navbar-nav list-group\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.product.details({id:vm.$stateParams.id})\">{{vm.labels.Details}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.product.associations({id:vm.$stateParams.id})\">{{vm.labels.Associations}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.product.pricing({id:vm.$stateParams.id})\">{{vm.labels.Pricing}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\" data-ng-hide=\"vm.isOptionsDisabled === true ? true : false \">\n        <a data-ui-sref=\"app.product.options({id:vm.$stateParams.id})\">{{vm.labels.Structure}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.product.attributes({id:vm.$stateParams.id})\">{{vm.labels.Attributes}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.product.rules({id:vm.$stateParams.id})\">{{vm.labels.Rules}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.product.multimedia({id:vm.$stateParams.id})\">{{vm.labels.Collateral}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.product.graph({id:vm.$stateParams.id})\">{{vm.labels.Graph}}</a>\n    </li>\n</ul>\n<!--/.nav-collapse -->\n<!-- Header Menu Closed -->\n"

/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = [
	
	        function() {
	            var treeContainerController = function ($state, $scope, $templateCache, _, systemConstants, productConstants, NgTableParams, applicationService, $stateParams, attributesService) {
	                var vm = this,
	                    isPageChanged = false;
	                vm.totalRecords = 0;
	                vm.currentPage = 1;
	                vm.pageSize = productConstants.treePanelItemsPerChunk;
	                vm.prefix = systemConstants.nsPrefix || '';
	                vm.showPagination = true;
	                vm.selectedNodes = [];
	                vm.$stateParams = $stateParams;
	                //Show / hide the search component in primary view
	                vm.toggleSearch = function() {
	                    vm.searchText = '';
	                    if (vm.pageType == 'categories') {
	                        vm.searchTree(1);
	                    } else {
	                        var searchBar = document.querySelector('.main-treeview .search-leaf');
	                        angular.element(searchBar).toggleClass('hidden');
	                        if (angular.element(searchBar).hasClass('hidden')) {
	                            vm.searchTree(1);
	                        }
	                    }
	                };
	                //Show / hide the search component in secondary view
	                vm.toggleInnerSearch = function() {
	                    var searchBar = document.querySelector('.sub-treeview .search-leaf');
	                    angular.element(searchBar).toggleClass('hidden');
	                };
	
	                vm.setWidthCent = true;
	
	                vm.slideTreePanelToHide = function() {
	                    vm.expandCollapse()();
	                };
	                //Shows primary panel by default 
	                vm.showPrimaryPanel = true;
	
	                // Calls search method of the parent controller, who is using this directive
	                vm.searchTree = function(pageNo) {
	                    isPageChanged = true;
	                    vm.currentPage = pageNo || 1;
	                    vm.selectedNodes = [];
	                    if (vm.pageType === 'options') {
	                        vm.search()(vm.options[0].value, vm.searchText, vm.currentPage || 1);
	                    } else if (vm.pageType === 'categories') {
	                        vm.search()(null, vm.searchText, vm.currentPage || 1);
	                    } else if (vm.pageType === 'association-categories') {
	                        vm.search()(null, vm.searchText, vm.currentPage || 1);
	                    } else if (vm.pageType === 'rules') {
	                        vm.search()(null, vm.searchText, vm.currentPage || 1);
	                    } else if (vm.pageType === 'attributes') {
	                        vm.search()(vm.options.value, vm.searchText, vm.currentPage || 1);
	                    }
	                    else {
	                        vm.search()(null, vm.searchText, vm.currentPage || 1);
	                    }
	                    if (vm.pageType === 'association-categories') {
	                        document.querySelector('.tree').scrollTop = 0;
	                    } else {
	                        document.querySelector('.tree-wrapper').scrollTop = 0;
	                    }
	                };
	
	                switch (vm.pageType) {
	                    case 'categories':
	                        $templateCache.put('template.html', __webpack_require__(358));
	                        vm.showPagination = false;
	                        searchCallback();
	                        break;
	                    case 'association-categories':
	                        $templateCache.put('template.html', __webpack_require__(359));
	                        vm.showPagination = false;
	                        searchCallback();
	                        break;    
	                    case 'options':
	                        $templateCache.put('template.html', __webpack_require__(360));
	                        vm.searchTree(1);
	                        break;
	                    case 'create-optiongroup':
	                        $templateCache.put('template.html', __webpack_require__(360));
	                        break;
	                    case 'attributes':
	                        $templateCache.put('template.html', __webpack_require__(361));
	                        vm.searchTree(1);
	                        break;
	                    case 'rules':
	                        $templateCache.put('template.html', __webpack_require__(362));
	                        vm.searchTree(1);
	                        break;
	                    default:
	                        $templateCache.put('template.html', __webpack_require__(358));
	                        vm.showPagination = false;
	                        vm.searchTree(1);
	                        break;
	                }
	                vm.treeOptions = {
	                    nodeChildren: vm.nodeChildren,
	                    choosable: vm.isChoosable,
	                    dirSelectable: true,
	                    injectClasses: {
	                        ul: 'a1 ' + vm.pageType + '-list',
	                        li: 'a2',
	                        liSelected: 'a7',
	                        iExpanded: 'a3 fa fa-caret-down',
	                        iCollapsed: 'a4 fa fa-caret-right',
	                        iLeaf: 'a5',
	                        label: 'a6',
	                        labelSelected: 'a8'
	                    },
	                    templateUrl: 'template.html',
	                    //Executes when a node is double clicked in tree component
	                    nodeDblClicked: function(node) {
	                        vm.selectedNodes = node;
	                        if (vm.pageType === 'rules') {
	                            if (vm.enableDetailPanel) {
	                                vm.tableParams = new NgTableParams({
	                                    count: 10,
	                                    paginationMaxBlocks: 3,
	                                    paginationMinBlocks: 2,
	                                    filter: {
	                                        Name: ''
	                                    }
	                                }, {
	                                    dataset: node.ProductSOs,
	                                    counts: []
	                                });
	                                vm.showPrimaryPanel = false;
	                            }
	                            vm.setWidthCent = false;
	                        } else {
	                            if (vm.enableDetailPanel) {
	                                vm.getNodeDetails()(node.ClsHierarchySO.Id).then(function(result) {
	                                        if (result) {
	                                            vm.tableParams = new NgTableParams({
	                                                count: 10,
	                                                paginationMaxBlocks: 3,
	                                                paginationMinBlocks: 2,
	                                                filter: {
	                                                    Name: ''
	                                                }
	                                            }, {
	                                                dataset: result,
	                                                counts: []
	                                            });
	                                        }
	                                    },
	                                    function(reason) {
	                                        applicationService.showErrorMessage(reason);
	                                    });
	                                vm.showPrimaryPanel = false;
	                            }
	                            vm.setWidthCent = false;
	
	                        }
	
	                    },
	                    isSelectable: function(node) {
	                        if (vm.pageType === 'attributes') {
	                            return (node.nodeType !== 'picklistValues' && node.isSelected !== true);
	                        } else {
	                            return node.isSelected !== true;
	                        }
	                    },
	                    getHierarchy: function(node) {
	                        if (node.nodeType == undefined && (node[vm.nodeChildren] == undefined || angular.equals(node[vm.nodeChildren][0], {}))) {
	                            vm.getProductStructure(node);
	                        }
	                    },
	                    prefix: vm.prefix,
	                    getDraggableItems: getDraggableItems,
	                    multiSelection: true
	                };
	
	                /* TODO : This has to be removed */
	                function getProducts(obj) {
	                    var response = [];
	                    if (angular.isDefined(obj)) {
	                        for (var i = 0; i < obj.length; i++) {
	                            response.push({
	                                Name: obj[i]
	                            });
	                        }
	
	                    }
	                    return response;
	                }
	
	                function expandAll(array) {
	                    _.each(array, function(node) {
	                        if (node[vm.nodeChildren] && node[vm.nodeChildren].length > 0) {
	                            if (vm.expandedNodes.indexOf(node) === -1) {
	                                vm.expandedNodes.push(node);
	                            }
	                            expandAll(node[vm.nodeChildren]);
	                        }
	                    });
	                }
	
	                //Expand / Collapse tree nodes
	                vm.isExpand = false;
	                vm.expandCollpaseTree = function(isExpand) {
	                    //vm.isExpand = !vm.isExpand;
	                    if (isExpand) {
	                        expandAll(vm.data);
	                    } else {
	                        vm.expandedNodes = [];
	                    }
	                };
	
	                vm.dragoverCallback = function() {
	                    return false;
	                };
	
	                function searchCallback() {
	                    if (vm.data.length < vm.pageSize) {
	                        vm.totalRecords = vm.currentPage * vm.pageSize;
	                    } else if (vm.data.length >= vm.pageSize) {
	                        if (vm.totalRecords < vm.currentPage * vm.pageSize + 1)
	                            vm.totalRecords = vm.currentPage * vm.pageSize + 1;
	                        else
	                            vm.totalRecords = vm.currentPage * vm.pageSize;
	                    } else if (vm.data.length == 0) {
	                        vm.currentPage--;
	                        vm.totalRecords = vm.currentPage * vm.pageSize;
	                        vm.search()(null, vm.searchText, vm.currentPage || 1);
	                    }
	                }
	
	                // Search for secondary view in detail view
	                vm.searchItemInDetailView = function() {
	                    vm.search()(vm.innerSearchText, vm.selectedNodes);
	                };
	
	                vm.pageChanged = function() {
	                    console.log('Page changed to: ' + vm.currentPage);
	                    vm.search()(vm.searchText, vm.currentPage || 1);
	                };
	
	                $scope.$watch('vm.data', function(newValue, oldValue) {
	                    if (newValue && newValue !== oldValue) {
	                        vm.totalRecords = vm.currentPage * vm.pageSize;
	                        if (isPageChanged) {
	                            searchCallback();
	                            isPageChanged = false;
	                        } else {
	                            searchCallback();
	                            isPageChanged = false;
	                        }
	                    }
	                });
	
	                // // Get Selected Node
	                vm.showSelected = function(sel) {
	                    if (vm.pageType === 'catalogDetail') {
	                        vm.selectedNodes = [];
	                        $state.go($state.current.name, {
	                            id: sel.ClsHierarchySO.Id
	                        });
	                    }
	                    else if (vm.pageType === 'attributes' && sel.nodeType === 'loadMore') {
	                        vm.getAttributesForAttributeGroup(sel);
	                    }
	                };
	                $scope.$watch('vm.options[0].value', function(newValue, oldValue) {
	                    if (newValue && newValue !== oldValue) {
	                        //Reset pagination first and more page specific action can be executed here
	                        if (vm.pageType === 'rules') {
	                            isPageChanged = true;
	                            vm.currentPage = 1;
	                        }
	                    }
	                });
	
	                vm.getAttributesForAttributeGroup = function (item) {
	                    var request = {
	                        "NumberOfRecordsPerChunk": productConstants.MaxNumberOfAttributesPerGroup,
	                        "ChunkNumber": ++item.ChunkNumber,
	                        "AttributeGroupId": item.AttributeGroupId
	                    };
	                    attributesService.getAttributesForAttributeGroup(request).then(function (response) {
	                        var index = _.findIndex(vm.data, function (field) {
	                            return (field.AttributeGroupSO.Id === request.AttributeGroupId);
	                        });
	                        if (response && response.length > 0) {
	                            if (index > -1) {
	                                vm.data[index].ProductAttributeDOs.pop();
	                                vm.data[index].ProductAttributeDOs = vm.data[index].ProductAttributeDOs.concat(response);                                
	                            }
	                        }
	                        else {
	                            vm.data[index].ProductAttributeDOs.pop();
	                        }
	                    }, function (reason) {
	                        applicationService.showErrorMessage(reason);
	                    });
	                };
	
	                function getDraggableItems(item) {
	                    if (vm.selectedNodes.indexOf(item) === -1) {
	                        vm.selectedNodes.push(item);    
	                    }
	                    return vm.selectedNodes;
	                }
	            };
	            treeContainerController.$inject = [
	                '$state',
	                '$scope',
	                '$templateCache',
	                'lodash',
	                'systemConstants',
	                'productConstants',
	                'NgTableParams',
	                'applicationService',
	                '$stateParams',
	                'attributesService'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {
	                    onTreeNodeLabelClick: '&'
	                },
	                controller: treeContainerController,
	                controllerAs: 'vm',
	                bindToController: {
	                    //To show the text as header on the panel
	                    headerText: '=',
	                    //Data source for the tree component
	                    data: '=',
	                    //Specify which page is using this directive. Based on this right template will be loaded.
	                    pageType: '=',
	                    //Calls the method getNodeDetails of the parent controller, who is using this directive.
	                    getNodeDetails: '&',
	                    //Contains the list of details of the selected node
	                    detailOfSelectedNode: '=',
	                    //Invokes the search method of parent controller
	                    search: '&',
	                    //Keeps the dbl clicked node info
	                    selectedNodes: '=',
	                    //Specifies whether a detail panel is needed or not.
	                    enableDetailPanel: '=',
	                    nodeChildren: '=',
	                    // Field to show as the visible label text
	                    nodeLabel: '=',
	                    // Field to show as the title text on hover
	                    tooltipField: '=',
	                    //Pass any other extra parameters with 'options', if needed
	                    options: '=',
	                    getProductStructure: '=',
	                    expandCollapse: '&',
	                    isChoosable: '=',
	                    searchText: '=',
	                    currentPage: '='
	                },
	                template: __webpack_require__(363),
	            };
	        }
	    ];
	
	})();

/***/ }),
/* 358 */
/***/ (function(module, exports) {

	module.exports = "<ul {{options.ulClass}} dnd-dragover=\"dragoverCallback()\">\r\n    <li ng-repeat=\"node in node.{{options.nodeChildren}} | filter:filterExpression:filterComparator {{options.orderBy}}\" ng-class=\"headClass(node)\" {{options.liClass}} \r\n        set-node-to-data dnd-draggable=\"options.getDraggableItems(node)\" dnd-disable-if=\"node.ClsHierarchySO[options.prefix + 'IsLeaf__c'] === 'No' || node.isSelected\" dnd-effect-allowed=\"copy\">\r\n        <i class=\"tree-branch-head\" ng-class=\"iBranchClass()\" ng-click=\"selectNodeHead(node)\"></i>\r\n        <i class=\"tree-leaf-head {{options.iLeafClass}}\"></i>\r\n        <i ng-if=\"!options.choosable\">\r\n            <div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" tree-transclude ng-click=\"selectNodeLabel(node)\"></div>\r\n        </i>\r\n        <span ng-if=\"options.choosable\">\r\n            \r\n            <!-- <md-checkbox ng-model=\"node.isChosen\" class=\"md-primary\" ng-disabled=\"!options.isSelectable(node)\">\r\n            </md-checkbox>\r\n            <div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" tree-transclude></div> -->\r\n\r\n            <material-form-field model=\"node.isChosen\" field-type=\"checkbox\" is-disabled=\"!options.isSelectable(node)\" class=\"tree-checkbox\"></material-form-field> \r\n            <div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" tree-transclude></div>\r\n\r\n        </span>\r\n        <treeitem ng-show=\"nodeExpanded()\" dnd-disable-if=\"node.isSelected\"></treeitem>\r\n    </li>\r\n</ul>\r\n"

/***/ }),
/* 359 */
/***/ (function(module, exports) {

	module.exports = "<ul {{options.ulClass}} dnd-dragover=\"dragoverCallback()\">\n    <li ng-repeat=\"node in node.{{options.nodeChildren}} | filter:filterExpression:filterComparator {{options.orderBy}}\" \n        ng-class=\"headClass(node)\" {{options.liClass}} set-node-to-data dnd-draggable=\"node\" \n        dnd-disable-if=\"node.ClsHierarchySO[options.prefix + 'IsLeaf__c'] === 'No' || node.isSelected\" dnd-effect-allowed=\"copy\">\n        <i class=\"tree-branch-head\" ng-class=\"iBranchClass()\" ng-click=\"selectNodeHead(node)\"></i>\n        <i class=\"tree-leaf-head {{options.iLeafClass}}\"></i>\n        <i ng-if=\"!options.choosable\">\n            <div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" tree-transclude ng-click=\"selectNodeLabel(node)\"></div>\n        </i>\n        <span ng-if=\"options.choosable\">\n            \n            <!-- <md-checkbox ng-model=\"node.isChosen\" class=\"md-primary\" ng-disabled=\"!options.isSelectable(node)\">\n            </md-checkbox>\n            <div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" tree-transclude></div> -->\n\n            <material-form-field model=\"node.isChosen\" field-type=\"checkbox\" is-disabled=\"!options.isSelectable(node)\" class=\"tree-checkbox\"></material-form-field> \n            <div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" tree-transclude></div>\n\n        </span>\n        <treeitem ng-show=\"nodeExpanded()\" dnd-disable-if=\"node.isSelected\"></treeitem>\n    </li>\n</ul>\n"

/***/ }),
/* 360 */
/***/ (function(module, exports) {

	module.exports = "<ul {{options.ulClass}} dnd-dragover=\"vm.dragoverCallback()\">\r\n    <li ng-repeat=\"node in node.{{options.nodeChildren}} | filter:filterExpression:filterComparator {{options.orderBy}}\" ng-class=\"headClass(node)\" {{options.liClass}} \r\n        set-node-to-data dnd-draggable=\"node\" dnd-disable-if=\"node.isSelected\" dnd-effect-allowed=\"copy\" dnd-type=\"node.nodeType\" \r\n        class=\"{{node.selected ? 'selected': ''}}\" dnd-selected=\"options.onSelect(node)\">\r\n        <i class=\"tree-branch-head\" ng-class=\"iBranchClass()\" ng-click=\"selectNodeHead(node); options.getHierarchy(node);\"></i>\r\n        <i class=\"tree-leaf-head {{options.iLeafClass}}\"></i>\r\n        <i ng-if=\"!options.choosable\">\r\n            <div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" tree-transclude></div>\r\n        </i>\r\n        <span ng-if=\"options.choosable\">\r\n            <material-form-field model=\"node.isChosen\" field-type=\"checkbox\" is-editable=\"true\" class=\"tree-checkbox\">\r\n            </material-form-field>\r\n            <div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" tree-transclude></div>\r\n        </span>\r\n        <treeitem ng-show=\"nodeExpanded()\" dnd-disable-if=\"node.isSelected\"></treeitem>\r\n    </li>\r\n</ul>"

/***/ }),
/* 361 */
/***/ (function(module, exports) {

	module.exports = "<ul {{options.ulClass}} dnd-dragover=\"vm.dragoverCallback()\">\r\n    <li ng-repeat=\"node in node.{{options.nodeChildren}} | filter:filterExpression:filterComparator {{options.orderBy}}\" ng-class=\"headClass(node)\" {{options.liClass}} \r\n        set-node-to-data dnd-draggable=\"options.getDraggableItems(node)\" dnd-disable-if=\"node.isSelected || node.nodeType === 'picklistValues'\"\r\n        dnd-effect-allowed=\"copy\" dnd-type=\"node.nodeType\">\r\n        <i class=\"tree-branch-head\" ng-class=\"iBranchClass()\" ng-click=\"selectNodeHead(node)\"></i>\r\n        <i class=\"tree-leaf-head {{options.iLeafClass}}\"></i>\r\n        <i class=\"attribute-label\">\r\n            <div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" tree-transclude ng-click=\"selectNodeLabel(node)\"></div>\r\n        </i>\r\n        <treeitem ng-show=\"nodeExpanded()\" dnd-disable-if=\"node.isSelected\"></treeitem>\r\n    </li>\r\n</ul>\r\n"

/***/ }),
/* 362 */
/***/ (function(module, exports) {

	module.exports = "<ul {{options.ulClass}} dnd-dragover=\"vm.dragoverCallback()\">\n    <li ng-repeat=\"node in node.{{options.nodeChildren}} | filter:filterExpression:filterComparator {{options.orderBy}}\" ng-class=\"headClass(node)\" {{options.liClass}} set-node-to-data dnd-draggable=\"node\" dnd-disable-if=\"node.children.length > 0 || node.isSelected\" dnd-effect-allowed=\"copy\">\n        <i class=\"tree-branch-head\" ng-class=\"iBranchClass()\" ng-click=\"selectNodeHead(node)\"></i>\n        <i class=\"tree-leaf-head {{options.iLeafClass}}\"></i>\n        <div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" tree-transclude></div>\n        <treeitem ng-show=\"nodeExpanded()\" dnd-disable-if=\"node.isSelected\"></treeitem>\n    </li>\n</ul>\n"

/***/ }),
/* 363 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"pull-right treeview-panel\" ng-class=\"vm.setWidthCent?'setWithCent':''\">\n    <div class=\"treeview-animate-panel\" ng-class=\"{'move':!vm.showPrimaryPanel}\">\n        <div class=\"main-treeview\">\n            <!-- For Categories page and Attributes page -->\n            <!-- It has local filtering and no pagination-->\n            <div class=\"tree-wrapper\">\n                <treecontrol class=\"tree-light\" tree-model=\"vm.data\" options=\"vm.treeOptions\" expanded-nodes='vm.expandedNodes' data-ng-if=\"vm.pageType !== 'options' && vm.pageType !== 'categories' && vm.pageType !== 'rules' && vm.pageType !== 'association-categories' \" selected-nodes=\"vm.selectedNodes\" on-selection=\"vm.showSelected(node)\">\n                    <i class=\"material-icons\" ng-if=\"node.nodeType==='loadMore'\">refresh</i>\n                    <span title=\"{{node.ClsHierarchySO[vm.tooltipField] || node[vm.tooltipField]}}\" ng-class=\"[{selectedNode : node.ClsHierarchySO.Id === vm.$stateParams.id}]\">{{(node.ClsHierarchySO[vm.nodeLabel] || node[vm.nodeLabel]) + (node.ClsHierarchySO[vm.prefix + 'ProductCount__c'] ? ' ('+node.ClsHierarchySO[vm.prefix + 'ProductCount__c'] +')' : '')}}</span>\n                    <i class=\"fa fa-angle-right\" ng-click=\"vm.treeOptions.nodeDblClicked(node)\" ng-if=\"node.ChildCategoryDOs.length==0 && node.ClsHierarchySO[vm.prefix + 'ProductCount__c']>0 && vm.pageType=='categories'\"></i>\n                </treecontrol>\n                <!-- For Categories page -->\n                <!-- For Options page -->\n                <!-- It needs server side filtering and server side pagination -->\n                <treecontrol class=\"tree-light\" tree-model=\"vm.data\" options=\"vm.treeOptions\" expanded-nodes='vm.expandedNodes' data-ng-if=\"vm.pageType === 'options' || vm.pageType === 'categories'\">\n                    <span\n                        ng-if=\"node.nodeType !== 'optionGroup'\n                                && node.nodeType !== 'bundle'\n                                && node.nodeType !== 'option'\n                                && node.nodeType !== 'attribute-group'\n                                && node.nodeType !== 'attribute'\"\n                        title=\"{{(node.ClsHierarchySO[vm.tooltipField] || node[vm.tooltipField])}}\"\n                        class=\"tree-node-label\"\n                    >{{(node.ClsHierarchySO[vm.nodeLabel] || node[vm.nodeLabel])}}</span>\n                    <span\n                        ng-if=\"node.nodeType === 'optionGroup'\"\n                        class=\"tree-node-label\"\n                        title=\"{{node.ClsHierarchySO.Name + (node.ClsHierarchySO['Apttus_Config2__Description__c'] ? '\\n\\n' + node.ClsHierarchySO['Apttus_Config2__Description__c'] : '') || node[vm.nodeLabel]}}\"\n                    >{{(node.ClsHierarchySO[vm.nodeLabel] || node[vm.nodeLabel])}}</span>\n                    <span\n                        ng-if=\"node.nodeType === 'bundle' || node.nodeType === 'option'\"\n                        class=\"tree-node-label\"\n                        title=\"{{node.Name + (node.Description ? '\\n\\n' + node.Description : '')}}\"\n                    >{{node[vm.nodeLabel]}}</span>\n                    <span\n                        ng-if=\"node.nodeType === 'attribute-group'\"\n                        class=\"tree-node-label\"\n                        title=\"{{node.Name + (node.AttributeGroupSO.Apttus_Config2__Description__c ? '\\n\\n' + node.AttributeGroupSO.Apttus_Config2__Description__c : '')}}\"\n                    >{{node[vm.nodeLabel]}}</span>\n                    <span\n                        ng-if=\"node.nodeType === 'attribute'\"\n                        title=\"{{node[vm.tooltipField]}}\"\n                        class=\"tree-node-label\"\n                    >{{node[vm.nodeLabel]}}</span>\n                    <span class=\"tree-node-child-count\">{{(node.ClsHierarchySO[vm.prefix + 'ProductCount__c'] ? ' ('+node.ClsHierarchySO[vm.prefix + 'ProductCount__c'] +')' : '')}}</span>\n                    <i class=\"fa fa-angle-right tree-node-label-angle-right\" ng-click=\"vm.treeOptions.nodeDblClicked(node)\" ng-if=\"node.ChildCategoryDOs.length==0 && node.ClsHierarchySO[vm.prefix + 'ProductCount__c']>0 && vm.pageType=='categories' && !vm.isChoosable\" class=\"tree-node-child-label\"></i>\n\n                </treecontrol>\n                <!-- For Options page -->\n                <!-- For Association Page -->\n                <treecontrol class=\"tree-light\" tree-model=\"vm.data\" options=\"vm.treeOptions\" expanded-nodes='vm.expandedNodes' data-ng-if=\"vm.pageType === 'association-categories'\">\n                    <span title=\"{{(node.ClsHierarchySO[vm.tooltipField] || node[vm.tooltipField])}}\" class=\"tree-node-label\" data-ng-click=\"onTreeNodeLabelClick({ categoryId: node.ClsHierarchySO.Id, hierarchyId: node.ClsHierarchySO[ vm.prefix + 'HierarchyId__c'] })\">{{(node.ClsHierarchySO[vm.nodeLabel] || node[vm.nodeLabel])}}</span>\n                </treecontrol>\n                <!-- For Association Page -->                \n                <!-- For Rules page -->\n                <treecontrol class=\"tree-light\" tree-model=\"vm.data\" options=\"vm.treeOptions\" expanded-nodes='vm.expandedNodes' data-ng-if=\"vm.pageType === 'rules'\">\n                    <span title=\"{{node[vm.tooltipField]}}\" data-ng-if=\"vm.nodeLabel !== ''\" style=\"text-overflow: ellipsis;overflow: hidden;width: 90%;display:inline-block;position: absolute;\">{{(node[vm.nodeLabel])}}</span>\n                    <!-- Don't remove this below commented code. Its going to be part in the next release -->\n                    <!--  + (node['ProductSOs'].length ? '('+node['ProductSOs'].length+')' : '') -->\n                    <span title=\"{{node['ProductGroupSO']['Name']}}\" data-ng-if=\"vm.nodeLabel == ''\" >{{node['ProductGroupSO']['Name']}}</span>\n                    <!-- <i class=\"fa fa-angle-right\" ng-click=\"vm.treeOptions.nodeDblClicked(node)\" ng-if=\"node['ProductIds'].length > 0 \"></i> -->\n                </treecontrol>\n                <!-- For Rules page -->\n            </div>\n        </div>\n        <!-- <div class=\"clearfix\"></div> -->\n        <uib-pager class=\"tree-pager\" total-items=\"vm.totalRecords\" ng-model=\"vm.currentPage\" ng-change=\"vm.searchTree(vm.currentPage)\" items-per-page=\"vm.pageSize\" previous-text=\"<\" next-text=\">\"></uib-pager>\n        <div class=\"sub-treeview\">\n            <div ng-if=\"vm.enableDetailPanel === true && vm.showPrimaryPanel === false\">\n                <table ng-table=\"vm.tableParams\" class=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th>\n                                <div class=\"treeview-header\">\n                                    <i class=\"fa fa-arrow-left\" ng-click=\"vm.showPrimaryPanel=true;vm.setWidthCent=true;\"></i> {{vm.headerText}}\n                                    <i class=\"fa fa-search\" data-ng-click=\"vm.toggleInnerSearch()\"></i>\n                                    <div class=\"search-leaf hidden\">\n                                        <i class=\"fa fa-search\"></i>\n                                        <form>\n                                            <input type=\"text\" ng-model=\"vm.tableParams.filter().Name\" placeholder=\"Search...\" />\n                                        </form>\n                                        <i class=\"fa fa-times\" data-ng-click=\"vm.toggleInnerSearch()\"></i>\n                                    </div>\n                                </div>\n                            </th>\n                        </tr>\n                        <tr>\n                            <th>{{vm.selectedNodes.ClsHierarchySO[vm.prefix + 'Label__c']}}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"product in $data\">\n                            <td data-title=\"'Name'\" filter=\"{ Name: 'text' }\">{{product.Name}}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 364 */
/***/ (function(module, exports) {

	module.exports = function() {
	    'use strict';
	
	    var dropZone = {
	        restrict: 'A',
	        scope: {
	            uploadImage: "=",
	        },
	        link: dropZoneLink
	    };
	
	    function dropZoneLink(scope, elem, attr) {
	        elem.bind('dragover', function(event) {
	            angular.element(elem).addClass('over');
	            event.stopPropagation();
	            event.preventDefault();
	        });
	        elem.bind('dragenter', function(event) {
	            event.stopPropagation();
	            event.preventDefault();
	            scope.$apply(function() {
	                scope.divClass = 'on-drag-enter';
	            });
	        });
	        elem.bind('dragleave', function(event) {
	            angular.element(elem).removeClass('over');
	            event.stopPropagation();
	            event.preventDefault();
	            scope.$apply(function() {
	                scope.divClass = '';
	            });
	        });
	        elem.bind('drop', function(event) {
	            angular.element(elem).removeClass('over');
	            event.stopPropagation();
	            event.preventDefault();
	            scope.uploadImage(event);
	        });
	    }
	    return dropZone;
	};


/***/ }),
/* 365 */
/***/ (function(module, exports) {

	module.exports = function() {
	    'use strict';
	
	    function functionController($scope, $filter) {
	        var vm = this;
	        vm.inputArray = [];
	        vm.outputArray = [];
	        vm.escapeRegExp = escapeRegExp;
	        vm.inputArray = vm.searchInputData;
	        $scope.searchFunction = function() {
	            vm.outputArray = [];
	            if (vm.searchTextBoxInput && vm.searchTextBoxInput !== '') {
	                $scope.$apply(function() {
	                    vm.searchOutputData = findParentNode(vm.inputArray);
	                });
	            } else if (vm.searchTextBoxInput && vm.searchTextBoxInput === '') {
	                $scope.$apply(function() {
	                    vm.searchOutputData = vm.inputArray;
	                });
	            } else {
	                vm.searchOutputData = vm.inputArray;
	            }
	        };
	
	        function findParentNode(searchInputData) {
	            angular.forEach(searchInputData, function(item, key) {
	                vm.filterResult = matchExpression(item.AttributeFieldLabel || item.Name);
	                if (vm.filterResult) {
	                    vm.outputArray.push(item);
	                } else if (item[vm.nodeChildren].length >= 1) {
	                    vm.getParentNode = angular.copy(item);
	                    vm.resultChildNode = findChildNode(item[vm.nodeChildren]);
	                    if (vm.resultChildNode.length) {
	                        vm.getParentNode[vm.nodeChildren] = vm.resultChildNode;
	                        vm.outputArray.push(vm.getParentNode);
	                    }
	                }
	            });
	            return vm.outputArray;
	        }
	
	        function matchExpression(nodeName) {
	            return new RegExp(vm.escapeRegExp(vm.searchTextBoxInput), "gi").test(nodeName);
	        }
	
	        function escapeRegExp(searchTextBoxInput) {
	        	//To escape special characters from search like $, otherwise it will break the search
	            return searchTextBoxInput.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
	        }
	
	        function findChildNode(childObj) {
	            var childNodeResult = [];
	            angular.forEach(childObj, function(item, key) {
	                var filterResult = matchExpression(item.AttributeFieldLabel || item.Name);
	                if (filterResult) {
	                    childNodeResult.push(item);
	                } else if (!item[vm.nodeChildren] || item[vm.nodeChildren].length === 0) {
	                    var leafNodeFilterResult = matchExpression(item.AttributeFieldLabel || item.Name);
	                    if (leafNodeFilterResult) {
	                        childNodeResult.push(item);
	                    }
	                } else if (item[vm.nodeChildren].length >= 1) {
	
	                    var getChildParentNode = angular.copy(item);
	                    var childNode = findChildNode(item[vm.nodeChildren]);
	                    if (childNode.length) {
	                        getChildParentNode[vm.nodeChildren] = childNode;
	                        childNodeResult.push(getChildParentNode);
	                    }
	                }
	            });
	            return childNodeResult;
	        }
	    }
	
	    functionController.$inject = ['$scope', '$filter'];
	    var treeSearch = {
	        restrict: 'A',
	        scope: {},
	        controller: functionController,
	        controllerAs: 'vm',
	        bindToController: {
	            'searchOutputData': '=',
	            'searchInputData': '=',
	            'searchTextBoxInput': '=',
	            'nodeChildren': '='
	        },
	        link: function(scope, element, attr) {
	            element.bind("keyup", function(event) {
	                if (this.value === '') {
	                    scope.searchFunction();
	                } else {
	                    var keyCode = event.which || event.keyCode;
	                    // If enter key is pressed
	                    if (keyCode === 13) {
	                        scope.searchFunction();
	                    }
	                }
	            });
	        }
	    };
	
	    return treeSearch;
	};


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    module.exports = [
	
	        function() {
	
	            var productListController = function($scope, listService, productConstants, cpqAdminConstants, applicationService, systemConstants, $state, $stateParams, i18nService) {
	                var vm = this,
	                    prefix = systemConstants.nsPrefix || '',
	                    filter;
	                vm.labels = i18nService.CustomLabel;
	                vm.disableLeftBtn = true;
	                vm.searchedStr = '';
	                vm.isMaxSQLSizeExceed = false;
	                vm.reloadGrid = false; //To reload left panel whenever product name is changed
	
	                vm.searchProducts = function() {
	                    var requestObj = {};
	                    filter = listService.getFilters();
	                    if (filter) {
	                        requestObj = filter;
	                    } else {
	                        requestObj = {
	                            'ViewName': prefix + productConstants.fieldsetProductList,
	                            "SortField": 'LastModifiedDate',
	                            "SortDirection": cpqAdminConstants.DESCENDING,
	                            'SearchString': vm.searchText || '',
	                            'ChunkNumber': 1,
	                            'NumberOfProductsPerChunk': productConstants.numberOfProductsPerChunk,
	                            'ConfigTypes': []
	                        };
	                    }
	                    loadProductList(requestObj);
	                };
	
	                /* On Page load while there are no filters applied */
	                vm.searchProducts();
	
	                vm.getProduct = function(type) {
	                    if (type === 'next') {
	                        if (filter.SavedSearchId) {
	                            filter.ProductsRequestDO.ChunkNumber++;
	                            if (filter.ProductsRequestDO.ChunkNumber !== 1) {
	                                vm.disableLeftBtn = false;
	                            }
	                        } else {
	                            filter.ChunkNumber++;
	                            if (filter.ChunkNumber !== 1) {
	                                vm.disableLeftBtn = false;
	                            }
	                        }
	                        loadProductList(filter);
	                    } else {
	                        if (filter.SavedSearchId) {
	                            filter.ProductsRequestDO.ChunkNumber--;
	                            if (filter.ProductsRequestDO.ChunkNumber === 1) {
	                                vm.disableLeftBtn = true;
	                            }
	                        } else {
	                            filter.ChunkNumber--;
	                            if (filter.ChunkNumber === 1) {
	                                vm.disableLeftBtn = true;
	                            }
	                        }
	                        loadProductList(filter);
	                    }
	                };
	
	                function loadProductList(requestObj) {
	                    filter = requestObj;
	                    listService.getProductListBySelectedView(requestObj, true)
	                        .then(function(response) {
	                            vm.productList = response.ProductSOs || response.ProductsResponseDO.ProductSOs;
	                            vm.isMaxSQLSizeExceed = false;
	                            /**
	                             * - Get the list of column names just once per page load
	                             * - But the response will always have this columns list.
	                             * - We dont need to consider the columns list always from the response
	                             */
	
	                            vm.tableColumnConfig = listService.getColumnList(response.ProductSOs || response.ProductsResponseDO.ProductSOs);
	                            if (requestObj.SavedSearchId) {
	                                requestObj = requestObj.ProductsRequestDO;
	                                requestObj.NumberOfProductsPerChunk = requestObj.NumberOfProductsPerChunk || productConstants.numberOfProductsPerChunk;
	                            }
	                            if (vm.productList.length < requestObj.NumberOfProductsPerChunk) {
	                                vm.disableRightBtn = true;
	                                if (requestObj.ChunkNumber === 1) {
	                                    vm.disableLeftBtn = true;
	                                }
	                                updateCenterBtnText(requestObj, vm.productList.length);
	                            } else {
	                                vm.disableRightBtn = false;
	                                updateCenterBtnText(requestObj);
	                            }
	
	                            if (vm.productList.length === 0) {
	                                vm.searchedStr = requestObj.SearchString;
	                                if (vm.pageNumber === 0) {
	                                    vm.showPagination = false;
	                                }
	                            }
	                            document.querySelector('.list-table').scrollTop = 0;
	                        }, function(reason) {
	                            if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                                //reason.message = vm.labels.MaxSQLSizeExceedMessage;
	                                vm.isMaxSQLSizeExceed = true;
	                                vm.productList = [];
	                                vm.tableColumnConfig = [];
	                            }
	                            vm.disableRightBtn = true;
	                            //applicationService.showErrorMessage(reason);
	                        });
	                }
	
	                function updateCenterBtnText(requestObj, endCount) {
	                    /* 
	                     * - Search result might return lesser number of records than current pagination count.
	                     * e.g. current pagination is : 1-150, but search returned only 20 records.
	                     * - Then pagination should be updated to 1-20 instead of 1-150.
	                     * - endCount variable contains the exact number of records and will only be defined, if
	                     * search count is lesser than current pagination sequence.
	                     */
	                    if (endCount) {
	                        vm.paginationCenterText = '(' + ((requestObj.ChunkNumber - 1) * requestObj.NumberOfProductsPerChunk + 1) + '-' + ((requestObj.ChunkNumber - 1) * requestObj.NumberOfProductsPerChunk + endCount) + ')';
	                    } else {
	                        vm.paginationCenterText = '(' + ((requestObj.ChunkNumber - 1) * requestObj.NumberOfProductsPerChunk + 1) + '-' + (requestObj.ChunkNumber * requestObj.NumberOfProductsPerChunk) + ')';
	                    }
	                }
	
	                vm.goToDetailsPage = function(Id) {
	                    $state.go('app.product.details', {
	                        id: Id
	                    });
	                };
	                vm.getActiveClass = function(Id) {
	                    if ($stateParams.id == Id) {
	                        return true;
	                    } else {
	                        return false;
	                    }
	                };
	
	                /* On change of filters */
	                var deRegisterFunc = $scope.$watch(function() {
	                    return listService.getFilters()
	                }, function(newValue, oldValue) {
	                    if (newValue && newValue !== oldValue) {
	                        loadProductList(newValue);
	                    }
	                }, true);
	
	                var deRegisterFuncForReload = $scope.$watch(function() {
	                    return vm.reloadGrid; 
	                }, function(newValue, oldValue) {
	                    if (newValue && newValue !== oldValue) {
	                        loadProductList(listService.getFilters());
	                        vm.reloadGrid = false;
	                    }
	                });
	
	                $scope.$on('destroy', function() {
	                    deRegisterFunc();
	                    deRegisterFuncForReload();
	                    vm = null;
	                });
	            };
	
	            productListController.$inject = [
	                '$scope',
	                'listService',
	                'productConstants',
	                'cpqAdminConstants',
	                'applicationService',
	                'systemConstants',
	                '$state',
	                '$stateParams',
	                'i18nService'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {},
	                controller: productListController,
	                controllerAs: 'vm',
	                bindToController: {
	                    loadViewProducts: '&',
	                    searchText: '=',
	                    reloadGrid: '='
	                },
	                template: __webpack_require__(367),
	            };
	        }
	    ];
	})();


/***/ }),
/* 367 */
/***/ (function(module, exports) {

	module.exports = "<div data-ng-if=\"vm.productList.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n    {{vm.labels.NoMatchingRecords}} <span><b>{{vm.searchedStr}}</b></span>\n</div>\n<div data-ng-if=\"vm.productList.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n    {{vm.labels.MaxSQLSizeExceedMessage}}\n</div>\n<div class=\"list-table\">\n    <table>\n        <tbody>\n            <tr ng-repeat=\"item in vm.tableColumnConfig track by item.Id\" ng-click=\"vm.goToDetailsPage(item.Id)\" ng-class=\"{active: vm.getActiveClass(item.Id) == true}\">\n                <td>\n                    {{ item.Name }}\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<div class=\"pagination product-details-list-pagination\">\n    <div class=\"place product-details-list-place\">\n        {{vm.paginationCenterText}}\n    </div>\n    <div class=\"next-prev\">\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProduct('previous')\">\n            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n        </button>\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProduct('next')\">\n            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n        </button>\n    </div>\n</div>\n"

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.product.common.services', [])
			.service('productService', __webpack_require__(369));
		//Add product module common services here 
	})();

/***/ }),
/* 369 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    module.exports = ['$q', '$sce', '$rootScope', 'remoteService', 'applicationService', 'lodash', 'systemConstants', 'cpqAdminConstants', 'apiCallsService', 'i18nService',
	        function($q, $sce, $rootScope, remoteService, applicationService, _, systemConstants, cpqAdminConstants, apiCallsService, i18nService) {
	            var selectedProduct,
	                prefix = systemConstants.nsPrefix || '',
	                label = i18nService.CustomLabel;
	
	            function getSelectedProduct() {
	                return selectedProduct;
	            }
	
	            function getSelectedProductCode() {
	                var selectedProduct = getSelectedProduct(),
	                    productCode = '';
	                if (selectedProduct) {
	                    for (var config in selectedProduct) {
	                        if (config === 'ProductCode') {
	                            productCode = selectedProduct[config];
	                        }
	                    }
	                }
	                return productCode;
	            }
	
	            function getSelectedProductName() {
	                var selectedProduct = getSelectedProduct(),
	                    productName = '';
	                if (selectedProduct) {
	                    for (var config in selectedProduct) {
	                        if (config === 'ProductName') {
	                            productName = selectedProduct[config];
	                        }
	                    }
	                }
	                return productName;
	            }
	
	            function getProductGraph(productId) {
	                var productGraphRequest = {};
	                productGraphRequest.ProductId = productId;
	                var deferQ = $q.defer();
	                remoteService.getProductGraph(productGraphRequest)
	                    .then(function (result) {
	                        deferQ.resolve(result);
	                    }, function (reason) { });
	
	                return deferQ.promise;
	            }
	
	            function setSelectedProduct(product) {
	                selectedProduct = product;
	
	            }
	
	
	            function get(obj, fieldName) {
	                var value = '';
	                for (var item in obj) {
	                    if (obj[item].FieldName === fieldName) {
	                        value = obj[item].Value;
	                    }
	                    if (obj[item].FieldName === prefix + "HasAttributes__c" || obj[item].FieldName === prefix + "HasOptions__c") {
	                        obj[item].IsEditable = true;
	                    }
	                }
	                return value;
	            }
	
	            function addElementIdToEachField(fields) {
	                for (var item in fields) {
	                    fields[item].ElementId = 'dynamic-field-' + item;
	                    fields[item].Value = fields[item].Value ? fields[item].Value : '';
	                }
	                return fields;
	            }
	
	            function preparePicklistValues(picklistObj, productId) {
	                var picklist = {},
	                    picklistValues = [],
	                    type;
	                if (angular.isDefined(picklistObj)) {
	                    picklist = picklistObj;
	                    type = picklistObj.Type;
	                    var tempList = picklistObj.PicklistValues;
	                    for (var item in tempList) {
	                        if (tempList[item].active) {
	                            picklistValues.push(tempList[item]);
	                        }
	                        if (tempList[item].defaultValue && !picklistObj.Value && productId === '') {
	                            if (type === cpqAdminConstants.picklist) {
	                                picklist.Value = tempList[item].value;
	                            } else if (type === cpqAdminConstants.multipicklist) {
	                                picklist.Value = [tempList[item].value];
	                            }
	                        }
	                    }
	
	                    picklist.PicklistValues = picklistValues;
	                }
	                return picklist;
	            }
	
	            function getFieldsSequence(response, productId) {
	                var displayFields, productFields, finalListOfFields = [],
	                    updatedByPicklistValues = []
	                if (response) {
	                    displayFields = response.DisplayFields,
	                        productFields = response.ProductFields;
	                    for (var i = 0; i < displayFields.length; i++) {
	                        for (var product = 0; product < productFields.length; product++) {
	                            if (productFields[product].FieldName === displayFields[i].FieldName) {
	                                productFields[product].IsRequired = displayFields[i].IsRequired;
	                                finalListOfFields.push(productFields[product]);
	                            }
	                        }
	                    }
	                }
	                for (var item = 0; item < finalListOfFields.length; item++) {
	
	                    if (finalListOfFields[item].Type === cpqAdminConstants.picklist || finalListOfFields[item].Type === cpqAdminConstants.multipicklist) {
	                        var updatedPicklist = preparePicklistValues(finalListOfFields[item], productId);
	                        finalListOfFields[item].PicklistValues = updatedPicklist.PicklistValues;
	                        finalListOfFields[item].Value = updatedPicklist.Value;
	                    } else if (finalListOfFields[item].Type === cpqAdminConstants.reference) {
	                        //this block is to show the lookup field as non-editable in product details tab
	                        if (finalListOfFields[item].IsEditable) {
	                            finalListOfFields[item].autocomplete = {
	                                'querySearch': apiCallsService.searchSObjectRecords,
	                                'displayName': 'Name',
	                                'selectedItem': null,
	                                'sObjectName': finalListOfFields[item].ReferenceTo
	                            }
	                            if (response.ProductSO && response.ProductSO[finalListOfFields[item].RelationshipFieldName]) {
	                                finalListOfFields[item].autocomplete.selectedItem = {
	                                    Id: finalListOfFields[item].Value,
	                                    Name: response.ProductSO[finalListOfFields[item].RelationshipFieldName].Name
	                                };
	                            }
	                        } else {
	                            if (response.ProductSO && response.ProductSO[finalListOfFields[item].RelationshipFieldName])
	                                finalListOfFields[item].Value = response.ProductSO[finalListOfFields[item].RelationshipFieldName].Name;
	                            else
	                                finalListOfFields[item].Value = '';
	                        }
	                    } else if (productId && (finalListOfFields[item].Type === cpqAdminConstants.datetime || finalListOfFields[item].Type === cpqAdminConstants.date)) {
	                        finalListOfFields[item].Value = response.ProductSO[finalListOfFields[item].FieldName];
	                    }
	                }
	                return finalListOfFields;
	            }
	            //Getter method
	            function getProductDetailsByCode(productId) {
	                var deferQ = $q.defer();
	                if (productId === 'new') {
	                    /* API service needs productId to be '' instead of 'new'. So making the check here*/
	                    productId = '';
	                }
	                remoteService.getProductDetails(productId, prefix + 'ProductDetailFields')
	                    .then(function(result) {
	                        var response = result.ProductFields;
	                        var iconId = get(response, prefix + 'IconId__c');
	                        var temp = {
	                            ProductName: get(response, 'Name'),
	                            ProductCode: get(response, 'Id'),
	                            configType: get(response, prefix + 'ConfigurationType__c'),
	                            icon: (iconId ? systemConstants.baseFileUrl + iconId : ''),
	                            iconId: iconId,
	                            hasAttributes: get(response, prefix + 'HasAttributes__c'),
	                            hasOptions: get(response, prefix + 'HasOptions__c'),
	                            needsBundleMaintenance: result.IsBundleMaintenanceNeeded
	                        };
	                        setSelectedProduct(temp);
	                        /* Honor the fields sequence that is coming from the response.*/
	                        var sequenceList = getFieldsSequence(result, productId);
	                        deferQ.resolve(prepareDataSet(sequenceList));
	                    }, function(reason) {});
	
	                return deferQ.promise;
	            }
	
	            function updateOptionsMenuStatus(product) {
	                if (!product.configType || product.configType === 'Option' || product.configType === 'Standalone') {
	                    $rootScope.$broadcast('menuStatus', {
	                        menu: 'options',
	                        status: '',
	                        disabled: true
	                    });
	                } else {
	                    $rootScope.$broadcast('menuStatus', {
	                        menu: 'options',
	                        status: '',
	                        disabled: false
	                    });
	                }
	            }
	
	            function updateState(stateId) {
	                //This should have been saving the entire product info. But lets put only few details as of now
	                if (stateId !== 'new') {
	                    var selected = getSelectedProductCode();
	                    if (!selected || selected !== stateId) {
	                        //Get it through service call and set it as selected
	                        getProductDetailsByCode(stateId).then(function(product) {
	                            var product = getSelectedProduct();
	                            if (product) {
	                                updateOptionsMenuStatus(product);
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                            console.log(reason);
	                        });
	                    } else {
	                        var product = getSelectedProduct();
	                        if (product) {
	                            updateOptionsMenuStatus(product);
	                        }
	                    }
	                } else {
	                    setSelectedProduct(null);
	                    updateOptionsMenuStatus({
	                        configType: 'Option'
	                    });
	                }
	            }
	
	            function cloneProduct(request) {
	                return remoteService.cloneProduct(request);
	            }
	
	            function prepareDataSet(fields) {
	                for (var item in fields) {
	                    if (fields[item].Type === cpqAdminConstants.multipicklist) {
	                        var value = fields[item].Value ? fields[item].Value : '';
	                        if (angular.isDefined(value)) {
	                            if (value === null || value === '') {
	                                value = [];
	                            } else if (angular.isString(value)) {
	                                value = value.split(';')
	                            }
	                        }
	                        fields[item].Value = value;
	                    } else if (fields[item].Type === cpqAdminConstants.picklist && fields[item].IsRequired === false) {
	                        fields[item].PicklistValues.unshift({
	                            active: true,
	                            defaultValue: false,
	                            label: label.NoneAsPickListValue,
	                            value: ''
	                        });
	                    } else if (fields[item].Type === cpqAdminConstants.boolean) {
	                        var value = fields[item].Value ? fields[item].Value : '';
	                        if (angular.isDefined(value)) {
	                            if (value === null || value === '') {
	                                value = false;
	                            } else if (value === true || value === 'true') {
	                                value = true;
	                            } else {
	                                value = false;
	                            }
	                        }
	                        fields[item].Value = value;
	                    } else {
	                        var value = fields[item].Value ? fields[item].Value : '';
	                        fields[item].Value = value;
	                    }
	                }
	                return fields;
	            }
	            /** 
	             * Change the format of ContentUrl
	             */
	            function formatContentUrl(item) {
	                var itemContentUrl = (item[prefix + 'ContentUrl__c']).toString();
	                if (validateYouTubeUrl(itemContentUrl)) {
	                    var embedCode = formatYouTubeUrl(itemContentUrl);
	                    item[prefix + 'ContentUrl__c'] = $sce.trustAsResourceUrl("https://www.youtube.com/embed/" + embedCode);
	                    item.imgUrl = $sce.trustAsResourceUrl("https://img.youtube.com/vi/" + embedCode + "/0.jpg");
	                    item.urlType = "youTube";
	                } else {
	                    item.urlType = getUrlType(itemContentUrl);
	                    item.contentUrl = $sce.trustAsResourceUrl(itemContentUrl);
	                    item.imgUrl = $sce.trustAsResourceUrl(itemContentUrl);
	                }
	                return item;
	            }
	
	            /** 
	             * Change the format of EmbedCode
	             */
	            function formatEmbedCode(item) {
	                try {
	                    var getUrl = getUrlFromIframe(item[prefix + 'EmbedCode__c']);
	                    item[prefix + 'EmbedCode__c'] = $sce.trustAsHtml(item[prefix + 'EmbedCode__c'].toString());
	                    if (validateYouTubeUrl(getUrl)) {
	                        var embedCode = formatYouTubeUrl(getUrl);
	                        item.imgUrl = $sce.trustAsResourceUrl("https://img.youtube.com/vi/" + embedCode + "/0.jpg");
	                        item.urlType = "youTube";
	                        item.Name = getUrl;
	                    } else {
	                        item.urlType = getUrlType(getUrl);
	                        item.imgUrl = $sce.trustAsResourceUrl(getUrl);
	                        item.Name = getUrl;
	                    }
	                    return item;
	                } catch (e) {
	                    return false;
	                }
	
	            }
	
	            /** 
	             * get url type based on the format
	             */
	            function getUrlType(url) {
	                if (validateImage(url)) {
	                    return "image";
	                } else if (validateVideo(url)) {
	                    return "video";
	                } else if (validateAudio(url)) {
	                    return "audio";
	                } else if (validateYouTubeUrl(url)) {
	                    return "youtube";
	                } else if (validatePDFUrl(url)) {
	                    return "pdf";
	                } else if (validateDocUrl(url)) {
	                    return "doc";
	                } else {
	                    return 'unknown';
	                }
	            }
	
	            function getTypeFromExtension(extension) {
	                if (validateImageExtension(extension)) {
	                    return "image";
	                } else if (validateVideoExtension(extension)) {
	                    return "video";
	                } else if (validateAudioExtension(extension)) {
	                    return "audio";
	                } else if (validateDocExtension(extension)) {
	                    return "doc";
	                } else if (extension === 'pdf') {
	                    return true;
	                } else {
	                    return 'unknown';
	                }
	            }
	
	            function validatePDFUrl(url) {
	                var regExp = (/\.(pdf)$/i);
	                return regExp.test(url);
	            }
	
	            function validateDocUrl(url) {
	                var regExp = (/\.(doc|docx|ppt|pptx|xls|xlsx)$/i);
	                return regExp.test(url);
	            }
	
	            function validateUrl(url) {
	                var regExp = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/;
	                return regExp.test(url);
	            }
	
	            /**
	             * Validate url is a image format
	             */
	            function validateImage(url) {
	
	                /**
	                 * For validate the data url /^\s*data:([a-z]+\/[a-z0-9\-\+]+(;[a-z\-]+\=[a-z0-9\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i
	                 * For validate the image /\.(gif|jpg|jpeg|tiff|png)$/i
	                 * Applied the or condition image | dataurl
	                 */
	                var regExp = /\.(gif|jpg|jpeg|tiff|png)$|^\s*data:([a-z]+\/[a-z0-9\-\+]+(;[a-z\-]+\=[a-z0-9\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i;
	                return regExp.test(url);
	            }
	
	            function validateImageExtension(extension) {
	
	                /**
	                 * For validate the data url /^\s*data:([a-z]+\/[a-z0-9\-\+]+(;[a-z\-]+\=[a-z0-9\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i
	                 * For validate the image /\.(gif|jpg|jpeg|tiff|png)$/i
	                 * Applied the or condition image | dataurl
	                 */
	                var imageTypes = ['gif', 'jpg', 'jpeg', 'tiff', 'png'];
	                return imageTypes.indexOf(extension.toLowerCase()) <= -1 ? false : true;
	            }
	
	            /**
	             * Validate url is a video fomat
	             */
	            function validateVideo(url) {
	                var regExp = (/\.(mp4|webm|Ogg)$/i);
	                return regExp.test(url);
	            }
	
	            function validateVideoExtension(extension) {
	                var videoTypes = ['mp4', 'webm', 'Ogg', 'mkv', 'wmv'];
	                return videoTypes.indexOf(extension) <= -1 ? false : true;
	            }
	
	            /**
	             * Validate url is a audio format
	             */
	            function validateAudio(url) {
	                var regExp = (/\.(MP3|Wav)$/i);
	                return regExp.test(url);
	            }
	
	            function validateAudioExtension(extension) {
	                var audioTypes = ['MP3', 'Wav'];
	                return audioTypes.indexOf(extension) <= -1 ? false : true;
	            }
	
	            function validateDocExtension(extension) {
	                var docTypes = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'];
	                return docTypes.indexOf(extension.toLowerCase()) <= -1 ? false : true;
	            }
	
	            /**
	             * Get url from iframe
	             */
	            function getUrlFromIframe(iframe) {
	                var regExp = /<iframe.*?src=['"](.*?)['"]/;
	                return regExp.exec(iframe)[1];
	            }
	
	            /**
	             * Make the youtube url to embed code
	             */
	            function formatYouTubeUrl(url) {
	                var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
	                var match = url.match(regExp);
	
	                if (match && match[2].length == 11) {
	                    return match[2];
	                } else {
	                    return 'error';
	                }
	            }
	
	            /** 
	             * Validate if youtube url or not
	             */
	            function validateYouTubeUrl(url) {
	                var youTubePatern = /^((http:|https:)?\/\/(www\.)?(youtube.com|youtu.be)\/(watch)?(\?v=)?(\S+)?)$/;
	                return youTubePatern.test(url);
	            }
	
	            /**
	             * Get the file name from a url
	             */
	            function getFileNameFromUrl(url) {
	                // check the url image or video or audio
	                if (validateImage(url) || validateVideo(url) || validateAudio(url))
	                    return url.substring(url.lastIndexOf('/') + 1);
	                else return '';
	            }
	
	            function getContentType(obj) {
	                var type;
	                if (obj) {
	                    var informationType = obj[prefix + 'InformationType__c'];
	                    if (informationType === 'URL Address') {
	                        var url = obj[prefix + 'ContentUrl__c'];
	                        type = getUrlType(url);
	                    } else if (informationType === 'Attached File') {
	                        var name = obj['Name'],
	                            extension = name.substr(name.lastIndexOf('.') + 1);
	                        type = getTypeFromExtension(extension);
	                    } else if (informationType === 'Embedded Code') {
	                        var getUrl = getUrlFromIframe(obj[prefix + 'EmbedCode__c']);
	                        type = getUrlType(getUrl);
	                    }
	                }
	                return type ? type : 'unknown';
	            }
	
	            function formatURLAddress(item) {
	                if (item[prefix + 'ContentUrl__c'] !== '') {
	                    var contentUrlToString = (item[prefix + 'ContentUrl__c']).toString();
	                    item[prefix + 'ContentUrl__c'] = $sce.trustAsResourceUrl(contentUrlToString);
	                }
	                return item;
	            }
	
	            function getValueFromSce(contentUrl) {
	                return $sce.valueOf(contentUrl);
	            }
	
	            function getUniqueRequiredFieldsForSObject() {
	                return remoteService.getUniqueRequiredFieldsForSObject({});
	            }
	
	            function getExternalIds() {
	                return remoteService.getProductDetails('', prefix + 'ProductDetailFields');
	            }
	
	            var productService = {
	                getSelectedProduct: getSelectedProduct,
	                setSelectedProduct: setSelectedProduct,
	                updateState: updateState,
	                getProductDetailsByCode: getProductDetailsByCode,
	                getSelectedProductName: getSelectedProductName,
	                updateOptionsMenuStatus: updateOptionsMenuStatus,
	                cloneProduct: cloneProduct,
	                /* Utility methods */
	                formatContentUrl: formatContentUrl,
	                getFileNameFromUrl: getFileNameFromUrl,
	                formatEmbedCode: formatEmbedCode,
	                validateImage: validateImage,
	                getUrlType: getUrlType,
	                getTypeFromExtension: getTypeFromExtension,
	                formatYouTubeUrl: formatYouTubeUrl,
	                validateUrl: validateUrl,
	                getContentType: getContentType,
	                formatURLAddress: formatURLAddress,
	                getValueFromSce: getValueFromSce,
	                getUniqueRequiredFieldsForSObject: getUniqueRequiredFieldsForSObject,
	                getFieldsSequence: getFieldsSequence,
	                getExternalIds: getExternalIds,
	                getProductGraph: getProductGraph
	            };
	            return productService;
	        }
	    ];
	})();


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		module.exports = angular.module('cpqAdmin.product.list', [])
			.service('listService', __webpack_require__(371))
			.filter('userMessage', __webpack_require__(372))
			.config(['$stateProvider', function($stateProvider) {
				$stateProvider.state('app.list', {
					parent: 'app',
					url: '/list',
					views: {
						'pageContent@': {
							template: __webpack_require__(373),
							controller: __webpack_require__(374),
							controllerAs: 'vm'
						}
					}
				});
			}]);
	})();

/***/ }),
/* 371 */
/***/ (function(module, exports) {

	(function () {
	    'use strict';
	
	    var productListService = function (remoteService, $filter) {
	        var filter;
	        function fnGetProductListBySelectedView(requestObj, blsaveFilter) {
	            if (blsaveFilter) {
	                filter = requestObj;
	            }
	            if (requestObj.SavedSearchId) {
	                return remoteService.getSavedSearch(requestObj);
	            }
	            else {
	                return remoteService.getAllProducts(requestObj);
	            }
	        }
	
	        function fnGetColumnList(columnsObj) {
	            return $filter('orderBy')(columnsObj, 'Sequence');
	        }
	
	        function getFilters() {
	            return filter;
	        }
	
	        function setFilters(filterObj) {
	            if (filterObj.SavedSearchId) {
	                filter = filterObj;
	            }
	            else if (!filter.SavedSearchId) {
	                if (filterObj.SearchString !== undefined) {
	                    filter.SearchString = filterObj.SearchString;
	                }
	                if (filterObj.ChunkNumber) {
	                    filter.ChunkNumber = filterObj.ChunkNumber;
	                }
	            }
	            else {
	                filter = filterObj;
	            }
	        }
	
	        function resetColumnSearchFilter() {
	            if (filter && filter.SearchRowDOs) {
	                delete filter.SearchRowDOs;
	            }
	        }
	
	        var listViewService = {
	            getProductListBySelectedView: fnGetProductListBySelectedView,
	            getColumnList: fnGetColumnList,
	            getFilters: getFilters,
	            setFilters: setFilters,
	            resetColumnSearchFilter: resetColumnSearchFilter
	        };
	
	        return listViewService;
	    };
	    productListService.$inject = ['remoteService', '$filter'];
	
	    module.exports = productListService;
	})();


/***/ }),
/* 372 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
		module.exports = [function() {
			var userMessage;
			userMessage = function(msg, option) {
				return msg.replace('{}', option);
			};
			return userMessage;
		}];
	})();

/***/ }),
/* 373 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"list-container\">\n    <div class=\"two-col-layout auto-height\">\n        <div class=\"auto-height col-lg-12 noPadding list-table-container\">\n            <div class=\"list-header\">\n                <!-- Search Bar starts -->\n                <div class=\"row noMargin search-container title-bar\">\n                    <div class=\"product-search\" layout=\"row\">\n                        <div flex=\"30\">\n                            <advanced-search context-object=\"'Product2'\" update-list=\"vm.onSearchTypeSelection\" is-editable=\"true\" search-string=\"vm.searchString\"\n                                             selected-view=\"vm.savedSearchValue\"></advanced-search>\n                        </div>\n                        <div class=\"search-panel\" flex=\"35\" flex-offset=\"5\">\n                            <form ng-submit=\"vm.resetPagination(true)\">\n                                <div class=\"slds-form-element\">\n                                    <div class=\"slds-form-element__control slds-input-has-icon slds-input-has-icon_right\">\n                                        <svg class=\"slds-icon slds-input__icon slds-input__icon_right slds-icon-text-default\" aria-hidden=\"true\">\n                                            <use xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"/apexpages/slds/latest/assets/icons/utility-sprite/svg/symbols.svg#search\"></use>\n                                        </svg>\n                                        <input type=\"text\" id=\"text-input-id-1\" placeholder=\"Search Products\" class=\"slds-input\" data-ng-model=\"vm.searchString\" />\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                        <div class=\"listProduct-btn-group\" flex=\"25\" flex-offset=\"5\">\n                            <button class=\"slds-button slds-button_brand\" data-ng-click=\"vm.createNewProduct()\">{{vm.labels.NewProductButton}}</button>\n                            <div class=\"drop drop-menu\">\n                                <md-menu md-position-mode=\"target-right target\" md-offset=\"100 50\">\n                                    <button aria-label=\"Open demo menu\" class=\"slds-button slds-button_icon-border-filled\" ng-click=\"$mdOpenMenu($event)\">\n                                        <svg class=\"slds-icon slds-input__icon slds-input__icon_right slds-icon-text-default slds-icon--xx-small\" aria-hidden=\"true\">\n                                            <use xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"/apexpages/slds/latest/assets/icons/utility-sprite/svg/symbols.svg#down\"></use>\n                                        </svg>\n                                    </button>\n                                    <md-menu-content width=\"3\">\n                                        <md-menu-item>\n                                            <md-button data-ng-click=\"vm.openClonePopup()\">\n                                                <div layout=\"row\" flex>\n                                                    <p flex>{{vm.labels.CloneProductButton}}</p>\n                                                </div>\n                                            </md-button>\n                                        </md-menu-item>\n                                    </md-menu-content>\n                                </md-menu>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div data-ng-if=\"vm.productsList.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{vm.labels.NoMatchingRecords}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.productsList.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"list-table\">\n                <div preloader no-background=\"true\" loading-text=\"vm.labels.LoadingText\" data-ng-if=\"vm.showLoader === true\"></div>\n                <table ng-table=\"vm.tableParams\" class=\"table angular-table-resize\" id=\"product-list\">\n                    <thead>\n                        <tr>\n                            <th ng-repeat=\"column in vm.tableColumnConfig\" class=\"column--{{column.Type}}\" id=\"product-column-{{$index}}\">\n                                <span ng-click=\"vm.tableHeaderClick(column);\">\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-descent'\">arrow_downward</i>\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-ascent'\">arrow_upward</i> \n                                    {{column.FieldLabel}}\n                                </span>\n                                <form ng-submit=\"vm.filter();\" ng-if=\"column.Type!=='REFERENCE'\">\n                                    <material-form-field model=\"column.filter\" field-type=\"STRING\" is-editable=\"true\">\n                                    </material-form-field>\n                                </form>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"product in vm.productsList track by product.Id\" data-ng-click=\"vm.rightSidePanel(product)\">\n                            <td data-ng-repeat=\"column in vm.tableColumnConfig\" class=\"column--{{column.Type}}\">\n                                <span data-ng-if=\"column.FieldName === 'Name'\">\n                                    <a data-ng-click=\"vm.loadProductDetails(product, $event)\" ng-bind-html=\"product[column.FieldName]\" href=\"{{vm.getDetailsPageUrl(product.Id)}}\" \n                                       target=\"_blank\" class=\"clickable-item\"></a>\n                                </span>\n                                <span data-ng-if=\"column.FieldName !== 'Name'\" ng-bind-html=\"vm.getFormattedContent(product,column)\"></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"pagination-container text-center\" data-ng-if=\"vm.showPagination === true\">\n                <div class=\"btn-group dropup text-right\" role=\"group\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        {{vm.labels.RecordsPerPage | userMessage:vm.numberOfProductsPerChunk}}\n                        <span class=\"caret\"></span>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li><a href=\"#\" data-ng-click=\"vm.numberOfProductsPerChunk = 50\">50</a></li>\n                        <li><a href=\"#\" data-ng-click=\"vm.numberOfProductsPerChunk = 100\">100</a></li>\n                        <li><a href=\"#\" data-ng-click=\"vm.numberOfProductsPerChunk = 150\">150</a></li>\n                        <li><a href=\"#\" data-ng-click=\"vm.numberOfProductsPerChunk = 200\">200</a></li>\n                    </ul>\n                </div>\n                <div class=\"navigation-control\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProduct('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                    <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProduct('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"rightContainerPanel\" ng-class=\"vm.showPanel?'showRightPanel':''\" right-panel product-id=\"vm.productId\" image-list=\"vm.imageList\" active-image-index=\"vm.activeImageIndex\" config=\"vm.config\" expand-collapse=\"vm.expandCollapse\"></div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var productListController = function ($scope, $state, $rootScope, listService, $filter, NgTableParams, $timeout, i18nService, applicationService, systemConstants, productConstants,
	        cpqAdminConstants, productService, productDetailService, $uibModal, $templateCache, $mdDialog, $location) {
	        var vm = this, savedSearchObject;
	        var prefix = systemConstants.nsPrefix || '';
	        var productAttachments = [];
	        var productInformation2Attachments = [];
	        var primaryImageIconId = null;
	
	        vm.rightSidePanel = function(product) {
	            vm.imageList = [];
	            productAttachments = [];
	            productInformation2Attachments = [];
	            primaryImageIconId = product[prefix + 'IconId__c'];
	            productService.getProductDetailsByCode(product.Id)
	                .then(function(response) {
	                    vm.config = response;
	                    vm.productId = product.Id;
	                });
	            productDetailService.getProductInformation2Attachments(product.Id)
	                .then(function(response) {
	                    if (response.length > 0) {
	                        for (var i = 0; i < response.length; i++) {
	                            productAttachments.push(response[i]);
	                        }
	                        getAttachments(product.Id);
	                    } else {
	                        getAttachments(product.Id);
	                    }
	                });
	            vm.showPanel = true;
	
	        };
	
	        function getAttachments(productId) {
	            productDetailService.getAttachments(productId).then(function(response) {
	                if (response && response.length > 0) {
	                    var attachments = response;
	                    for (var i = 0; i < attachments.length; i++) {
	                        var fileType = attachments[i].Name.substr(attachments[i].Name.lastIndexOf('.') + 1);
	                        var objImage = {
	                            name: attachments[i].Name,
	                            source: systemConstants.salesforceUrl + '/servlet/servlet.FileDownload?file=' + attachments[i].Id,
	                            type: fileType,
	                            icon: fileType.toLowerCase() == cpqAdminConstants.PDF ? 'fa-file-pdf-o' : '',
	                            Id: attachments[i].Id
	                        };
	                        if (fileType.toLowerCase() != cpqAdminConstants.PDF)
	                            productInformation2Attachments.push(objImage);
	                        vm.activeImageIndex = 0;
	                    }
	                    findPrimaryImageList();
	                }
	                if (response.length === 0) {
	                    findPrimaryImageList();
	                }
	            });
	        }
	
	        function findPrimaryImageList() {
	            if (productInformation2Attachments.length > 0) {
	                for (var i = 0; i < productInformation2Attachments.length; i++) {
	                    if (productInformation2Attachments[i].Id === primaryImageIconId) {
	                        vm.imageList.unshift(productInformation2Attachments[i]);
	                    } else {
	                        vm.imageList.push(productInformation2Attachments[i]);
	                    }
	                }
	            }
	            if (productAttachments.length > 0) {
	                for (var i = 0; i < productAttachments.length; i++) {
	                    if (productAttachments[i].fileId === primaryImageIconId) {
	                        vm.imageList.unshift(productAttachments[i]);
	                    } else {
	                        vm.imageList.push(productAttachments[i]);
	                    }
	
	                }
	            }
	        }
	
	        vm.expandCollapse = function() {
	            vm.showPanel = false;
	        };
	
	        vm.labels = i18nService.CustomLabel;
	        vm.selectedView = prefix + productConstants.fieldsetProductList;
	        /*
	         * - vm.searchString : is the value present in the search field at any point of time.
	         * - vm.searchedStr : is the value user has entered and either clicked on search icon or hit
	         * enter / return  key.
	         */
	        vm.searchedStr = '';
	        vm.tableColumnConfig = [];
	        vm.numberOfProductsPerChunk = productConstants.numberOfProductsPerChunk;
	
	        vm.pageNumber = 0;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = false;
	        vm.showLoader = false;
	        vm.loadingText = vm.labels.LoadingText;
	        vm.isMaxSQLSizeExceed = false;
	        vm.showPagination = true;
	        updateCenterBtnText();
	        resetColumnSearchFilter();
	        var sortField, sortDirection, pageNumber = 1,
	            configType = '';
	        vm.getProduct = function(type) {
	            if (type === 'next') {
	                pageNumber = pageNumber + 1;
	                vm.pageNumber++;
	                if (vm.pageNumber !== 0) {
	                    vm.disableLeftBtn = false;
	                }
	                if (savedSearchObject) {
	                    if (savedSearchObject.ProductsRequestDO)
	                        savedSearchObject.ProductsRequestDO.ChunkNumber++;
	                    else
	                        savedSearchObject.ChunkNumber++;
	                }
	                loadProductList();
	            } else {
	                pageNumber = pageNumber - 1;
	                vm.pageNumber--;
	                if (vm.pageNumber === 0) {
	                    vm.disableLeftBtn = true;
	                }
	                if (savedSearchObject) {
	                    if (savedSearchObject.ProductsRequestDO)
	                        savedSearchObject.ProductsRequestDO.ChunkNumber--;
	                    else
	                        savedSearchObject.ChunkNumber--;
	                }
	                loadProductList();
	            }
	        };
	
	        function updateCenterBtnText(endCount) {
	            /*
	             * - Search result might return lesser number of records than current pagination count.
	             * e.g. current pagination is : 1-150, but search returned only 20 records.
	             * - Then pagination should be updated to 1-20 instead of 1-150.
	             * - endCount variable contains the exact number of records and will only be defined, if
	             * search count is lesser than current pagination sequence.
	             */
	            if (endCount) {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfProductsPerChunk + 1) + '-' + (vm.pageNumber * vm.numberOfProductsPerChunk + endCount) + ')';
	            } else {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfProductsPerChunk + 1) + '-' + ((vm.pageNumber + 1) * vm.numberOfProductsPerChunk) + ')';
	            }
	        };
	
	        vm.resetPagination = function(fromTopSearchBox) {
	            vm.showPanel = false;
	            vm.pageNumber = 0;
	            pageNumber = 1;
	            vm.disableLeftBtn = true;
	            updateCenterBtnText();
	            if (fromTopSearchBox) {
	                savedSearchObject = null;
	                vm.savedSearchValue = 'View All';
	            }
	            else {
	                if (savedSearchObject) {
	                    if (savedSearchObject.ProductsRequestDO)
	                        savedSearchObject.ProductsRequestDO.ChunkNumber = 1;
	                    else
	                        savedSearchObject.ChunkNumber = 1;
	                }
	            }
	            loadProductList();
	        };
	
	        var deRegisterFunc = $scope.$watch('vm.numberOfProductsPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                if (savedSearchObject) {
	                    if (savedSearchObject.ProductsRequestDO)
	                        savedSearchObject.ProductsRequestDO.NumberOfProductsPerChunk = newValue;
	                    else
	                        savedSearchObject.NumberOfProductsPerChunk = newValue;
	                }
	                vm.resetPagination();
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            vm = null;
	        });
	
	        /**
	         * - Create a new product definition.
	         * - Takes user to the product details page with id as 'new'
	         */
	        vm.createNewProduct = function() {
	            $state.go('app.product.details', {
	                id: 'new'
	            });
	        };
	
	        vm.getFormattedContent = function(product, column) {
	            var modifiedValue, precision,
	                fieldType = column.Type,
	                value = product[column.FieldName];
	
	            if (vm.systemProperties && vm.systemProperties.PercentageFieldPrecision) {
	                precision = vm.systemProperties.PercentageFieldPrecision;
	            } else if (vm.properties && vm.properties.Precision) {
	                precision = vm.properties.Precision;
	            } else {
	                precision = 5;
	            }
	
	            /* TODO : case values will be taken from constants service soon.*/
	            switch (fieldType) {
	                case cpqAdminConstants.datetime:
	                case cpqAdminConstants.date:
	                    {
	                        modifiedValue = $filter('aptDateToString')(value);
	                        break;
	                    }
	                case cpqAdminConstants.currency:
	                    {
	                        modifiedValue = $filter('aptNumberToCurrency')(value, precision);
	                        break;
	                    }
	                case cpqAdminConstants.percent:
	                    {
	                        modifiedValue = $filter('aptNumberToPercent')(value, precision);
	                        break;
	                    }
	                case cpqAdminConstants.double:
	                    {
	                        modifiedValue = $filter('aptNumberToQuantity')(value, precision);
	                        break;
	                    }
	                case cpqAdminConstants.boolean:
	                    {
	                        if (value) {
	                            modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	                        } else {
	                            modifiedValue = "<i class='material-icons show'>check_circle</i>";
	                        }
	                        break;
	                    }
	                case cpqAdminConstants.string:
	                case cpqAdminConstants.textarea:
	                case cpqAdminConstants.url:
	                case cpqAdminConstants.multipicklist:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	                case cpqAdminConstants.reference:
	                    {
	                        if (value && value !== '') {
	                            modifiedValue = product[column.FieldName.replace('__c', '__r')].Name || value;
	                        }
	                        break;
	                    }
	                default:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	            }
	            return modifiedValue;
	        };
	
	        function createNgTable(data, numberOfProductsPerChunk) {
	            var initialParams = {
	                count: numberOfProductsPerChunk
	            };
	            var initialSettings = {
	                counts: [],
	                paginationMaxBlocks: 0,
	                paginationMinBlocks: 0,
	                dataset: data
	            };
	            return new NgTableParams(initialParams, initialSettings);
	        }
	
	        function setDefaultSortedColumn(requestObj) {
	            var activeSortField = requestObj.SortField || requestObj.ProductsRequestDO.SortField;
	            var activeSortDirection = requestObj.SortDirection || requestObj.ProductsRequestDO.SortDirection;
	            if (vm.tableColumnConfig.length > 0) {
	                for (var item in vm.tableColumnConfig) {
	                    if (vm.tableColumnConfig[item].FieldName === activeSortField) {
	                        (activeSortDirection === cpqAdminConstants.DESCENDING) ? vm.tableColumnConfig[item].sortIconCls = 'st-sort-descent': vm.tableColumnConfig[item].sortIconCls = 'st-sort-ascent';
	                        vm.tableColumnConfig[item].showSortIcon = true;
	                    }
	                }
	            }
	        }
	
	        /**
	         * - When user enters search string and hits enter, this method gets called
	         * - Updates the smart-table pagination object.
	         * - Table header click
	         */
	        function loadProductList(blCheckFilters) {
	            /* Show the loader on start of service call */
	            vm.showLoader = true;
	
	            var requestObj = {
	                'ViewName': vm.selectedView,
	                "SortField": sortField || 'Name' || 'LastModifiedDate',
	                "SortDirection": sortDirection || cpqAdminConstants.ASCENDING,
	                'SearchString': vm.searchString || '',
	                'ChunkNumber': pageNumber || 1,
	                'NumberOfProductsPerChunk': vm.numberOfProductsPerChunk || 50
	            };
	            if (savedSearchObject) {
	                if(savedSearchObject.ProductsRequestDO) {
	                    savedSearchObject.ProductsRequestDO.SortField = requestObj.SortField;
	                    savedSearchObject.ProductsRequestDO.SortDirection = requestObj.SortDirection;
	                } else {
	                    savedSearchObject.SortField = requestObj.SortField;
	                    savedSearchObject.SortDirection = requestObj.SortDirection;
	                }
	                requestObj = savedSearchObject;
	                listService.setFilters(requestObj);
	            }
	            else {
	                if (blCheckFilters) {
	                    var filter = listService.getFilters();
	                    if (filter) {
	                        requestObj = filter;
	                        vm.pageNumber = (filter.ChunkNumber || filter.ProductsRequestDO.ChunkNumber || 1) - 1;
	                        vm.searchString = filter.SearchString;
	                        if (vm.pageNumber !== 0) {
	                            vm.disableLeftBtn = false;
	                        }
	                    }
	                }
	            }
	            listService.getProductListBySelectedView(requestObj, true).then(function (response) {
	                /* Used to bind to table body */
	                vm.productsList = response.ProductSOs || response.ProductsResponseDO.ProductSOs;
	                vm.isMaxSQLSizeExceed = false;
	                /**
	                 * - Get the list of column names just once per page load
	                 * - But the response will always have this columns list.
	                 * - We dont need to consider the columns list always from the response
	                 */
	                if (vm.tableColumnConfig && vm.tableColumnConfig.length === 0) {
	                    vm.tableColumnConfig = listService.getColumnList(response.DisplayColumns || response.ProductsResponseDO.DisplayColumns);
	                    setDefaultSortedColumn(requestObj);
	                }
	                if (!vm.tableParams) {
	                    vm.tableParams = createNgTable(vm.productsList, response.NumberOfProductsPerChunk || (response.ProductsResponseDO && response.ProductsResponseDO.NumberOfProductsInChunk));
	                }
	
	                /*
	                 * - Show 'No matching products are found for the search entry XXX', when no return
	                 * return result set is empty.
	                 * - Keep the user messages, until user makes a fresh search which has atleast more
	                 * than 1 result item.
	                 */
	                vm.showPagination = true;
	                if (vm.productsList.length === 0) {
	                    vm.searchedStr = vm.searchString;
	                    if (vm.pageNumber === 0) {
	                        vm.showPagination = false;
	                    }
	                }
	                /**
	                 * - Check if the response size is less than the current chunk size.
	                 * - If less, disable the next button
	                 * - else keep it enabled
	                 */
	
	
	                if (vm.productsList.length < vm.numberOfProductsPerChunk) {
	                    vm.disableRightBtn = true;
	                    updateCenterBtnText(vm.productsList.length);
	                } else {
	                    vm.disableRightBtn = false;
	                    updateCenterBtnText();
	                }
	
	                /* Hide the loader on success of service call */
	                vm.showLoader = false;
	
	                $timeout(function () {
	                    angular.element(window).resize();
	                }, 1000);
	                document.querySelector('.list-table').scrollTop = 0;
	            }, function (reason) {
	                vm.showLoader = false;
	                /*
	                 * - If exception is of type 'Maximum SOQL offset allowed is 2000', then show a message to
	                 * user 'Please refine your search criteria to find your product'.
	                 * - Else show the exception message to the user as it is.
	                 */
	                if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                    vm.productsList = [];
	                    vm.isMaxSQLSizeExceed = true;
	                }
	                vm.disableRightBtn = true;
	
	            });
	        }
	
	        loadProductList(true);
	        /**
	         * - Clears searc input box
	         * - Makes a service call to reload the table
	         */
	        vm.clearSearchInput = function() {
	            vm.searchString = '';
	            vm.currentPage = 1;
	            vm.showPanel = false;
	            loadProductList();
	        };
	
	
	        /**
	         * Load product details when user clicks on any product name from smart table
	         * Take user to the details state and loads its information.
	         */
	        vm.loadProductDetails = function(product, event) {
	            $state.go('app.product.details', {
	                id: product.Id
	            });
	            event.preventDefault();
	        };
	
	
	        /**
	         * - Show / Hide ascending or descending icon next to the column header when user clicks on header.
	         * - We are not using the default feature of the ngTable. It's doing local sorting and to
	         * bind to its server side sorting, configs are not available as of now.
	         */
	        vm.tableHeaderClick = function (column) {
	            if (column.Type !== cpqAdminConstants.reference) {
	                sortField = column.FieldName;
	                if (!column.sortIconCls) {
	                    column.sortIconCls = 'st-sort-ascent';
	                }
	                sortDirection = (column.sortIconCls === 'st-sort-ascent' ? cpqAdminConstants.DESCENDING : cpqAdminConstants.ASCENDING);
	                var columnsList = vm.tableColumnConfig;
	                for (var item in columnsList) {
	                    if (column.FieldName === columnsList[item].FieldName) {
	                        columnsList[item].showSortIcon = true;
	                        columnsList[item].sortIconCls = column.sortIconCls ? (column.sortIconCls === 'st-sort-ascent' ? 'st-sort-descent' : 'st-sort-ascent') : 'st-sort-descent';
	                    } else {
	                        columnsList[item].showSortIcon = false;
	                        columnsList[item].sortIconCls = false;
	                    }
	                }
	                vm.resetPagination();
	            }
	        };
	        $rootScope.showModalPop = false;
	
	        vm.onSearchTypeSelection = function (requestObj) {
	            if (requestObj.SavedSearchId) {
	                requestObj.ProductsRequestDO.ViewName = vm.selectedView;
	                requestObj.ProductsRequestDO.NumberOfProductsPerChunk = vm.numberOfProductsPerChunk || 50;
	                savedSearchObject = requestObj;
	            }
	            else if (requestObj.SearchRowDOs) {
	                requestObj.NumberOfProductsPerChunk = vm.numberOfProductsPerChunk || 50;
	                savedSearchObject = requestObj;
	            }
	            else {
	                savedSearchObject = null;
	            }
	            vm.resetPagination();
	        };
	
	        vm.openClonePopup = function($event) {
	            $mdDialog.show({
	                controller: __webpack_require__(375),
	                controllerAs: 'vm',
	                template: __webpack_require__(376),
	                parent: angular.element(document.body),
	                clickOutsideToClose: false
	            });
	        };
	
	        vm.goToDetailsView = function() {
	            if (vm.productsList && vm.productsList.length > 0) {
	                var product = vm.productsList[0];
	                vm.loadProductDetails(product);
	            }
	        };
	
	        vm.getDetailsPageUrl = function (Id) {
	            var absUrl = $location.absUrl();
	            return absUrl.replace('/list', '/product/' + Id + '/details');
	        };
	
	        function resetColumnSearchFilter() {
	            listService.resetColumnSearchFilter();
	        }
	
	        function loadProductListFromSavedSearch() {
	            vm.showPanel = false;
	            vm.pageNumber = 0;
	            pageNumber = 1;
	            vm.disableLeftBtn = true;
	            updateCenterBtnText();
	            /* Show the loader on start of service call */
	            vm.showLoader = true;
	
	            var filter = listService.getFilters();
	            var requestObj = {};
	            if (filter) {
	                requestObj = filter;
	                requestObj.ProductsRequestDO.ViewName = vm.selectedView;
	                requestObj.ProductsRequestDO.NumberOfProductsPerChunk = vm.numberOfProductsPerChunk || 50;
	                vm.pageNumber = filter.ProductsRequestDO.ChunkNumber - 1;
	                if (vm.pageNumber !== 0) {
	                    vm.disableLeftBtn = false;
	                }
	            }
	            listService.getProductListBySelectedView(requestObj, true).then(function (response) {
	
	                    /* Used to bind to table body */
	                vm.productsList = response.ProductsResponseDO.ProductSOs;
	                    vm.isMaxSQLSizeExceed = false;
	                    /**
	                     * - Get the list of column names just once per page load
	                     * - But the response will always have this columns list.
	                     * - We dont need to consider the columns list always from the response
	                     */
	                    if (vm.tableColumnConfig && vm.tableColumnConfig.length === 0) {
	                        vm.tableColumnConfig = listService.getColumnList(response.ProductsResponseDO.DisplayColumns);
	                        setDefaultSortedColumn(requestObj);
	                    }
	                    if (!vm.tableParams) {
	                        vm.tableParams = createNgTable(response.ProductsResponseDO.ProductSOs, response.ProductsResponseDO.NumberOfProductsInChunk);
	                    }
	
	                    /*
	                     * - Show 'No matching products are found for the search entry XXX', when no return
	                     * return result set is empty.
	                     * - Keep the user messages, until user makes a fresh search which has atleast more
	                     * than 1 result item.
	                     */
	                    vm.showPagination = true;
	                    if (response.ProductsResponseDO.ProductSOs.length === 0) {
	                        vm.searchedStr = vm.searchString;
	                        if (vm.pageNumber === 0) {
	                            vm.showPagination = false;
	                        }
	                    }
	                    /**
	                     * - Check if the response size is less than the current chunk size.
	                     * - If less, disable the next button
	                     * - else keep it enabled
	                     */
	
	                    if (response.ProductsResponseDO.ProductSOs.length < vm.numberOfProductsPerChunk) {
	                        vm.disableRightBtn = true;
	                        updateCenterBtnText(response.ProductsResponseDO.ProductSOs.length);
	                    } else {
	                        vm.disableRightBtn = false;
	                        updateCenterBtnText();
	                    }
	
	                    /* Hide the loader on success of service call */
	                    vm.showLoader = false;
	
	                    $timeout(function () {
	                        angular.element(window).resize();
	                    }, 1000);
	
	
	            }, function (reason) {
	                vm.showLoader = false;
	                /*
	                 * - If exception is of type 'Maximum SOQL offset allowed is 2000', then show a message to
	                 * user 'Please refine your search criteria to find your product'.
	                 * - Else show the exception message to the user as it is.
	                 */
	                if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                    vm.productsList = [];
	                    vm.isMaxSQLSizeExceed = true;
	                }
	                vm.disableRightBtn = true;
	            });
	        }
	
	        vm.filter = function () {
	            var requestObj = {
	                'ViewName': vm.selectedView,
	                "SortField": sortField || 'Name' || 'LastModifiedDate',
	                "SortDirection": sortDirection || cpqAdminConstants.ASCENDING,
	                'SearchString': vm.searchString || '',
	                'ChunkNumber': 1,
	                'NumberOfProductsPerChunk': vm.numberOfProductsPerChunk || 50,
	                'SearchRowDOs': []
	            };
	            for (var i = 0; i < vm.tableColumnConfig.length; i++) {
	                if (vm.tableColumnConfig[i].filter && vm.tableColumnConfig[i].filter !== '') {
	                    var objFilter = {
	                        'field': vm.tableColumnConfig[i].FieldName,
	                        'function': 'contains',
	                        'value': vm.tableColumnConfig[i].filter,
	                        'operator': 'AND'
	                    };
	                    if (vm.tableColumnConfig[i].Type === 'BOOLEAN' || vm.tableColumnConfig[i].Type === 'REFERENCE') {
	                        objFilter.function = 'equal to';
	                    }
	                    requestObj.SearchRowDOs.push(objFilter);
	                }
	            }
	            if (requestObj.SearchRowDOs.length > 0) {
	                delete requestObj.SearchRowDOs[requestObj.SearchRowDOs.length - 1].operator;
	                savedSearchObject = requestObj;
	                vm.resetPagination();
	            }
	            else {
	                vm.resetPagination(true);
	            }
	        };
	    };
	
	    productListController.$inject = [
	        '$scope',
	        '$state',
	        '$rootScope',
	        'listService',
	        '$filter',
	        'NgTableParams',
	        '$timeout',
	        'i18nService',
	        'applicationService',
	        'systemConstants',
	        'productConstants',
	        'cpqAdminConstants',
	        'productService',
	        'productDetailService',
	        '$uibModal',
	        '$templateCache',
	        '$mdDialog',
	        '$location'
	    ];
	
	    module.exports = productListController;
	
	})();

/***/ }),
/* 375 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var productCloneController = function($scope, i18nService, productService, systemConstants, applicationService, $state, $q, $mdDialog, listService, productConstants, cpqAdminConstants, _) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '';
	
	        //Getting external id values
	        productService.getExternalIds().then(function(response) {
	            vm.productExternalIdValues = prepareExternalIdPicklist(response.ProductFields);    
	        }, function(reason) {
	            applicationService.showErrorMessage(reason);
	        });
	        vm.cloneProduct = function() {
	            if (vm.frmCloneProduct.$valid && vm.selectedProduct) {
	                var payload = {
	                    ProductName: vm.NewProduct.Name,
	                    ProductId: vm.selectedProduct.Id,
	                    PricingFlag: false,
	                    DetailsFlag: false,
	                    CategoriesFlag: false,
	                    AttributesFlag: false,
	                    OptionsFlag: false,
	                    CollateralFlag: false,
	                    ProductGroupsFlag: false,
	                    RulesFlag: false,
	                    ExternalID: vm.NewProduct.ExternalID
	                };
	                if (vm.uniqueFields && vm.uniqueFields.length > 0) {
	                    payload.ProductSO = {};
	                    for (var i = 0; i < vm.uniqueFields.length; i++) {
	                        payload.ProductSO[vm.uniqueFields[i].FieldName] = vm.uniqueFields[i].Value;
	                    }
	                }
	                for (var i = 0; i < vm.itemsToClone.length; i++) {
	
	                    switch (vm.itemsToClone[i].ElementId) {
	                        case 'DetailsFlag':
	                            {
	                                if (vm.itemsToClone[i].isSelected === true) {
	                                    payload.DetailsFlag = true;
	                                }
	                                break;
	                            }
	                        case 'CategoriesFlag':
	                            {
	                                if (vm.itemsToClone[i].isSelected === true) {
	                                    payload.CategoriesFlag = true;
	                                }
	                                break;
	                            }
	                        case 'AttributesFlag':
	                            {
	                                if (vm.itemsToClone[i].isSelected === true) {
	                                    payload.AttributesFlag = true;
	                                }
	                                break;
	                            }
	                        case 'PricingFlag':
	                            {
	                                if (vm.itemsToClone[i].isSelected === true) {
	                                    payload.PricingFlag = true;
	                                }
	                                break;
	                            }
	                        case 'OptionsFlag':
	                            {
	                                if (vm.itemsToClone[i].isSelected === true) {
	                                    payload.OptionsFlag = true;
	                                }
	                                break;
	                            }
	                        case 'CollateralFlag':
	                            {
	                                if (vm.itemsToClone[i].isSelected === true) {
	                                    payload.CollateralFlag = true;
	                                }
	                                break;
	                            }
	                        case 'ProductGroupsFlag':
	                            {
	                                if (vm.itemsToClone[i].isSelected === true) {
	                                    payload.ProductGroupsFlag = true;
	                                }
	                                break;
	                            }
	                        case 'RulesFlag':
	                            {
	                                if (vm.itemsToClone[i].isSelected === true) {
	                                    payload.RulesFlag = true;
	                                } else if (vm.itemsToClone[i].children && vm.itemsToClone[i].children.length > 0) {
	                                    var ruleTypes = vm.itemsToClone[i].children;
	                                    for (var j = 0; j < ruleTypes.length; j++) {
	                                        if (ruleTypes[j].isSelected)
	                                            payload[ruleTypes[j].ElementId] = true;
	                                    }
	                                }
	                                break;
	                            }
	                    }
	
	                }
	                productService.cloneProduct(payload).then(
	                    function(response) {
	                        $mdDialog.hide();
	                        $state.go('app.product.details', {
	                            id: response.Id
	                        });
	                    },
	                    function(reason) {
	                        applicationService.showErrorMessage(reason);
	                    }
	                );
	            } else {
	                vm.frmCloneProduct.$setSubmitted();
	            }
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        vm.searchProducts = function(searchText) {
	            var defer = $q.defer();
	            var requestObj = {
	                'ViewName': prefix + productConstants.fieldsetProductList,
	                "SortField": 'LastModifiedDate',
	                "SortDirection": cpqAdminConstants.DESCENDING,
	                'SearchString': searchText || '',
	                'ChunkNumber': 1,
	                'NumberOfProductsPerChunk': productConstants.numberOfProductsPerChunk,
	                'ConfigTypes': []
	            };
	            listService.getProductListBySelectedView(requestObj, false)
	                .then(function(response) {
	                    defer.resolve(response.ProductSOs);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            return defer.promise;
	        };
	
	        vm.onCloneProductCheckboxFieldClick = function(index, newValue) {
	
	            var value = newValue;
	
	            if (index === 0) {
	                vm.itemsToClone.forEach(function(item) {
	                    if (item.IsEditable) {
	                        item.isSelected = value;
	                        if(value)
	                            item.showChildren = false;
	                    }
	                });
	            } else {
	                // Validate all checkbox value is true for set selectAll checkbox value true when current checkbox is true
	                var count = 1;
	                vm.itemsToClone[index].isSelected = value;
	                if (vm.itemsToClone[index].ElementId === 'RulesFlag') {
	                    vm.itemsToClone[index].showChildren = value;
	                    vm.itemsToClone[index].children.forEach(function(v) {
	                        v.isSelected = value;
	                    });
	                }
	
	                for (var key = 1; key < vm.itemsToClone.length; key++) {
	                    if (vm.itemsToClone[key].isSelected) {
	                        count++;
	                    }
	                }
	
	                if (count === vm.itemsToClone.length) {
	                    vm.itemsToClone[0].isSelected = true;
	                } else {
	                    vm.itemsToClone[0].isSelected = false;
	                }
	            }
	        };
	
	        $scope.$on('destroy', function() {
	            vm = null;
	        });
	
	        function onLoad() {
	            vm.labels = i18nService.CustomLabel;
	            vm.NewProduct = {
	                Name: '',
	                IsRequired: true,
	                Id: '',
	                FieldName: 'newProductName',
	                FieldLabel: vm.labels.NewProductName
	            };
	            vm.cloneFrom = {
	                autocomplete: {
	                    'querySearch': vm.searchProducts,
	                    'displayName': 'Name',
	                    'selectedItem': {
	                        Name: '',
	                        Id: ''
	                    }
	                }
	            };
	            vm.itemsToClone = [{
	                ElementId: 'EntireProduct',
	                FieldLabel: vm.labels.EntireProduct,
	                IsEditable: true,
	                isSelected: false
	            }, {
	                ElementId: 'DetailsFlag',
	                FieldLabel: vm.labels.ProductDetails,
	                IsEditable: false,
	                isSelected: true
	            }, {
	                ElementId: 'CategoriesFlag',
	                FieldLabel: vm.labels.chkCategories,
	                IsEditable: true,
	                isSelected: false
	            }, {
	                ElementId: 'AttributesFlag',
	                FieldLabel: vm.labels.chkAttributes,
	                IsEditable: true,
	                isSelected: false
	            }, {
	                ElementId: 'PricingFlag',
	                FieldLabel: vm.labels.chkPricing,
	                IsEditable: true,
	                isSelected: false
	            }, {
	                ElementId: 'OptionsFlag',
	                FieldLabel: vm.labels.chkOptions,
	                IsEditable: true,
	                isSelected: false
	            }, {
	                ElementId: 'CollateralFlag',
	                FieldLabel: vm.labels.chkCollateral,
	                IsEditable: true,
	                isSelected: false
	            }, {
	                ElementId: 'ProductGroupsFlag',
	                FieldLabel: 'Product Group',
	                IsEditable: true,
	                isSelected: false
	            }, {
	                ElementId: 'RulesFlag',
	                FieldLabel: 'Rules',
	                IsEditable: true,
	                isSelected: false,
	                showChildren: false,
	                children: [{
	                    ElementId: 'ConstraintRulesFlag',
	                    FieldLabel: 'Constraint Rules',
	                    IsEditable: true,
	                    isSelected: false
	                }, {
	                    ElementId: 'ProductAttributeRulesFlag',
	                    FieldLabel: 'Product Attribute Rules',
	                    IsEditable: true,
	                    isSelected: false
	                }, {
	                    ElementId: 'AttributeValueMatricesFlag',
	                    FieldLabel: 'Attribute Value Matrix',
	                    IsEditable: true,
	                    isSelected: false
	                }]
	            }];
	            getUniqueFields();
	        }
	
	        function getUniqueFields() {
	            productService.getUniqueRequiredFieldsForSObject().then(function(response) {
	                if (response) {
	                    vm.uniqueFields = response;
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        vm.onRulesCheckboxFieldClick = function(index, newValue) {
	            var value = newValue;
	            var rules = vm.itemsToClone.filter(function(item) {
	                return item.ElementId === 'RulesFlag'
	            })[0];
	
	            // Validate all checkbox value is true for set selectAll checkbox value true when current checkbox is true
	            var count = 0;
	            rules.children[index].isSelected = value;
	            for (var key = 0; key < rules.children.length; key++) {
	                if (rules.children[key].isSelected) {
	                    count++;
	                }
	            }
	
	            if (count === rules.children.length) {
	                rules.isSelected = true;
	            } else {
	                rules.isSelected = false;
	            }
	            if(!value){
	                vm.itemsToClone[0].isSelected = false;
	            }
	        };
	
	        //For preparing picklist for external id values
	        function prepareExternalIdPicklist(fields) {
	            if (!_.isEmpty(fields)) {
	                var picklistValues = [],
	                    index, fieldsLength = fields.length;
	                for (index = 0; index < fieldsLength; index++) {
	                    if (fields[index].IsExternalID) {
	                        var picklist = {
	                            label: fields[index].FieldLabel,
	                            value: fields[index].FieldName
	                        };
	                        picklistValues.push(picklist);
	                    }
	                }
	            }
	            return {
	                'PicklistValues': picklistValues
	            };
	        }
	
	        onLoad();
	    };
	
	    productCloneController.$inject = [
	        '$scope',
	        'i18nService',
	        'productService',
	        'systemConstants',
	        'applicationService',
	        '$state',
	        '$q',
	        '$mdDialog',
	        'listService',
	        'productConstants',
	        'cpqAdminConstants',
	        'lodash'
	    ];
	
	    module.exports = productCloneController;
	})();


/***/ }),
/* 376 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog aria-label=\"Autocomplete Dialog Example\" ng-cloak flex=\"45\" class=\"clone-product-modal\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>{{vm.labels.CloneProduct}}</h2>\n            <span flex></span>\n            <button class=\"slds-button slds-button--icon\" ng-click=\"vm.cancel()\">\n                <i class=\"material-icons\">clear</i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content>\n        <div class=\"md-dialog-content\">\n            <form role=\"form\" name=\"vm.frmCloneProduct\">\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.NewProduct.Name\" field-type=\"string\" is-editable=\"true\" properties=\"vm.NewProduct\" is-required=\"true\" field-label=\"::vm.labels.NewProductName\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.frmCloneProduct[vm.NewProduct.FieldName].$error\" ng-if=\"vm.frmCloneProduct[vm.NewProduct.FieldName].$touched || vm.frmCloneProduct.$submitted\">\n                            <p ng-message=\"required\" class=\"formError\">\n                                {{vm.labels.ErrorRequiredProductName}}\n                            </p>\n                        </div>\n                    </div>\n                    <div flex=\"10\"></div>\n                    <div flex=\"45\">\n                        <md-autocomplete required md-input-name=\"existingProduct\" md-input-minlength=\"3\" md-no-cache=\"false\" md-selected-item=\"vm.selectedProduct\" md-search-text=\"vm.searchText\" md-items=\"product in vm.searchProducts(vm.searchText)\" md-item-text=\"product.Name\" md-floating-label=\"{{vm.labels.ProductToClone}}:\">\n                            <md-item-template>\n                                <span md-highlight-text=\"vm.searchText\">{{product.Name}}</span>\n                            </md-item-template>\n                            <div ng-messages=\"vm.frmCloneProduct.existingProduct.$error\" ng-if=\"vm.frmCloneProduct.existingProduct.$touched || vm.frmCloneProduct.$submitted\">\n                                <p ng-message=\"required\" class=\"formError\">\n                                    {{vm.labels.ErrorProductToClone}}\n                                </p>\n                            </div>\n                        </md-autocomplete>\n                    </div>\n                </div>\n                <div layout=\"row\" layout-wrap>\n                    <div flex=\"45\" flex-offset=\"{{$index%2===0?0: 10}}\" data-ng-repeat=\"column in vm.uniqueFields track by $index\" class=\"unique-field-margin\">\n                        <material-form-field model=\"column.Value\" field-type=\"{{column.Type}}\" is-editable=\"{{column.IsEditable}}\" properties=\"column\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.frmCloneProduct[column.FieldName].$error\" ng-if=\"vm.frmCloneProduct[column.FieldName].$touched || vm.frmCloneProduct.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">\n                                {{column.FieldLabel}} value must be entered\n                            </p>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\" layout-wrap>\n                    <div flex=\"45\">\n                        <material-form-field model=\"vm.NewProduct.ExternalID\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.productExternalIdValues\" name=\"externalID\" field-label=\"::vm.labels.ExternalID\"></material-form-field>\n                    </div>\n                </div>\n                <h4 class=\"items-to-clone\">\n                    {{vm.labels.ItemsToClone}}\n                </h4>\n                <div layout=\"row\" layout-wrap flex>\n                    <div flex=\"33\" ng-repeat=\"item in vm.itemsToClone\">\n                        <material-form-field model=\"item.isSelected\" field-type=\"checkbox\" is-editable=\"{{item.IsEditable}}\" properties=\"item\" class=\"selectionCheckBox\" show-inline=\"true\" on-click=\"vm.onCloneProductCheckboxFieldClick($index, item.isSelected)\">\n                        </material-form-field>\n                        <div layout=\"column\" ng-if=\"item.showChildren\">\n                            <div flex-offset=\"10\" flex ng-repeat=\"child in item.children\">\n                                <material-form-field model=\"child.isSelected\" field-type=\"checkbox\" is-editable=\"{{child.IsEditable}}\" properties=\"child\" class=\"selectionCheckBox\" show-inline=\"true\" on-click=\"vm.onRulesCheckboxFieldClick($index, child.isSelected)\">\n                                </material-form-field>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions>\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.ProductCancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.cloneProduct()\">{{vm.labels.CloneButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.product.detail', [])
			.service('productDetailService', __webpack_require__(378))
			.config(['$stateProvider', function($stateProvider) {
				$stateProvider.state('app.product.details', {
					parent: 'app.product',
					url: '/:id/details',
					views: {
						'productContainer': {
							template: __webpack_require__(379),
							controller: __webpack_require__(380),
							controllerAs: 'vm'
						}
					},
					resolve: {
						formFields: ['productService', '$stateParams', function(productService, $stateParams) {
							return productService.getProductDetailsByCode($stateParams.id);
						}],
						productInformation2Attachments: ['productDetailService', '$stateParams', function(productDetailService, $stateParams) {
							return productDetailService.getProductInformation2Attachments($stateParams.id);
						}],
						productAttachments: ['productDetailService', '$stateParams', function(productDetailService, $stateParams) {
							return productDetailService.getAttachments($stateParams.id);
						}]
					}
				});
			}]);
	})();

/***/ }),
/* 378 */
/***/ (function(module, exports) {

	(function () {
	    'use strict';
	
	    var productDetailService = function ($q, $sce, remoteService, productService, cpqAdminConstants, systemConstants) {
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function createPayload(productDetailObj, type) {
	            var finalPayload = {};
	            if (type === 'new') {
	                /* Create a new product payload doesn't expect key to have either null /'' values. */
	                for (var i = 0; i < productDetailObj.length; i++) {
	                    var field = productDetailObj[i];
	                    if (field.IsEditable) {
	                        if (field.Type === cpqAdminConstants.boolean) {
	                            finalPayload[field.FieldName] = (!field.Value ? false : JSON.parse(field.Value));
	                        } else if (field.Type === cpqAdminConstants.datetime || field.Type === cpqAdminConstants.date) {
	                            finalPayload[field.FieldName] = field.Value;
	                        } else if (field.Type === cpqAdminConstants.multipicklist) {
	                            finalPayload[field.FieldName] = field.Value.join(';');
	                        } else if (field.Type === cpqAdminConstants.picklist) {
	                            if (field.Value === null || field.Value === undefined || field.Value === '') {
	                                finalPayload[field.FieldName] = '';
	                            } else {
	                                finalPayload[field.FieldName] = field.Value;
	                            }
	                        } else if (field.Type === cpqAdminConstants.reference) {
	                            if (field.autocomplete && field.autocomplete.selectedItem) {
	                                finalPayload[field.FieldName] = field.autocomplete.selectedItem.Id;
	                            }
	                        } else if (field.Type === cpqAdminConstants.double || field.Type === cpqAdminConstants.percent || field.Type === cpqAdminConstants.currency) {
	                            if (field.Value === '' || field.Value === undefined) {
	                                finalPayload[field.FieldName] = 0;
	                            } else {
	                                finalPayload[field.FieldName] = field.Value;
	                            }
	                        } else {
	                            if (field.Value !== '') {
	                                finalPayload[field.FieldName] = field.Value;
	                            }
	                        }
	                    }
	                }
	            } else {
	                /* Update product API can handle key to have either 0(Zero) / '' values for a field. */
	                for (var i = 0; i < productDetailObj.length; i++) {
	                    var field = productDetailObj[i];
	                    if (field.IsEditable) {
	                        if (field.Type === cpqAdminConstants.boolean) {
	                            finalPayload[field.FieldName] = (!field.Value ? false : field.Value);
	                        } else if (field.Type === cpqAdminConstants.datetime || field.Type === cpqAdminConstants.date) {
	                            finalPayload[field.FieldName] = field.Value;
	                        } else if (field.Type === cpqAdminConstants.double || field.Type === cpqAdminConstants.percent || field.Type === cpqAdminConstants.currency) {
	                            if (field.Value === '' || field.Value === undefined) {
	                                finalPayload[field.FieldName] = 0;
	                            } else {
	                                finalPayload[field.FieldName] = field.Value;
	                            }
	                        } else if (field.Type === cpqAdminConstants.picklist) {
	                            if (field.Value === null || field.Value === undefined || field.Value === '') {
	                                finalPayload[field.FieldName] = '';
	                            } else {
	                                finalPayload[field.FieldName] = field.Value;
	                            }
	                        } else if (field.Type === cpqAdminConstants.multipicklist) {
	                            finalPayload[field.FieldName] = field.Value.join(';');
	                        } else if (field.Type === cpqAdminConstants.reference) {
	                            if (field.autocomplete && field.autocomplete.selectedItem) {
	                                finalPayload[field.FieldName] = field.autocomplete.selectedItem.Id;
	                            }
	                        } else {
	                            if (field.Value !== null && field.Value !== undefined) {
	                                finalPayload[field.FieldName] = field.Value;
	                            }
	                        }
	                    }
	                }
	            }
	            return finalPayload;
	        }
	
	        /* API service call for create new and update an existing product */
	        function fnsetProductDetailsById(productId, productDetailObj) {
	            if (productDetailObj && productDetailObj.length > 0) {
	                var request = [],
	                    product = {};
	                if (productId == 'new') {
	                    product = createPayload(productDetailObj, 'new');
	                    request.push(product);
	                    return remoteService.createProducts(request);
	                } else {
	                    product = createPayload(productDetailObj, 'update');
	                    product.Id = productId;
	                    request.push(product);
	                    return remoteService.updateProducts(request);
	                }
	            }
	        }
	
	        function uploadAttachments(request) {
	            return remoteService.uploadAttachments(request);
	        }
	
	        function getAttachments(productId) {
	            return remoteService.getAttachmentsByParentId([productId]);
	        }
	
	        function getOnlyImages(arr) {
	            var images = [];
	            if (arr.length) {
	                for (var i = 0; i < arr.length; i++) {
	                    var temp = {},
	                        parentObj = arr[i].ProductInformationSO,
	                        informationType = parentObj[getPrefixedAttribute('InformationType__c')];
	                    if (informationType === 'Attached File') {
	                        var name = parentObj.Name,
	                            fileType = productService.getContentType(parentObj),
	                            extension = name.substr(name.lastIndexOf('.') + 1);
	                        if (fileType === 'image') {
	                            var imageObj = {
	                                name: name,
	                                source: systemConstants.salesforceUrl + '/servlet/servlet.FileDownload?file=' + parentObj[getPrefixedAttribute('FileId__c')],
	                                type: extension,
	                                icon: extension.toLowerCase() == cpqAdminConstants.PDF ? 'fa-file-pdf-o' : '',
	                                Id: parentObj.Id,
	                                fileId: parentObj[getPrefixedAttribute('FileId__c')]
	                            };
	                            images.push(imageObj);
	                        }
	                    } else if (informationType === 'URL Address') {
	                        var imageUrl,
	                            contentType = productService.getContentType(parentObj);
	                        if (contentType === 'image') {
	                            var imageUrl = $sce.trustAsResourceUrl(parentObj[getPrefixedAttribute('ContentUrl__c')]),
	                                name = productService.getFileNameFromUrl($sce.valueOf(imageUrl)),
	                                extension = name.substr(name.lastIndexOf('.') + 1),
	                                imageObj = {
	                                    name: name,
	                                    source: imageUrl,
	                                    type: extension,
	                                    icon: extension.toLowerCase() == cpqAdminConstants.PDF ? 'fa-file-pdf-o' : '',
	                                    Id: parentObj.Id
	                                };
	                            images.push(imageObj);
	                        }
	                    }
	
	                }
	            }
	            return images;
	        }
	
	        function getProductInformation2Attachments(productId) {
	            var defer = $q.defer();
	            if (productId !== 'new') {
	                remoteService.getProductInformation2(productId)
	                    .then(function (response) {
	                        defer.resolve(getOnlyImages(response));
	                    }, function (reason) {
	                        defer.reject(reason);
	                    });
	            } else {
	                defer.resolve([]);
	            }
	            return defer.promise;
	        }
	
	        function removeAttachments(attachmentId) {
	            return remoteService.removeAttachments([attachmentId]);
	        }
	        /* request : takes a list of Attachment sobjects */
	        function updateAttachments(request) {
	            return remoteService.updateAttachments(request);
	        }
	
	        function updateHasAttributes(payload) {
	            var request = [];
	            request.push(payload)
	            return remoteService.updateProducts(request);
	        }
	
	        function updateHasOptions(payload) {
	            var request = [];
	            request.push(payload);
	            return remoteService.updateProducts(request);
	        }
	
	        var productDetailsService = {
	            setProductDetailsById: fnsetProductDetailsById,
	            uploadAttachments: uploadAttachments,
	            updateAttachments: updateAttachments,
	            getAttachments: getAttachments,
	            getProductInformation2Attachments: getProductInformation2Attachments,
	            removeAttachments: removeAttachments,
	            updateHasAttributes: updateHasAttributes,
	            updateHasOptions: updateHasOptions
	        };
	
	
	
	        return productDetailsService;
	    };
	
	
	    productDetailService.$inject = ['$q', '$sce', 'remoteService', 'productService', 'cpqAdminConstants', 'systemConstants'];
	
	    module.exports = productDetailService;
	})();


/***/ }),
/* 379 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"detail-container\">\n        <div class=\"left-tree tree-view setWithCent detail-left-container\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <header>\n                <div class=\"search\">\n                    <form ng-submit=\"vm.setFilters()\" novalidate>\n                        <div class=\"search-input-container\">\n                            <div class=\"input-group\">\n                                <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                                <label class=\"ng-binding\">Search</label>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </header>\n            <advanced-search context-object=\"'Product2'\" is-editable=\"false\" selected-view=\"vm.savedSearchValue\" search-string=\"vm.searchText\"></advanced-search>\n            <filter-product-list search-text=\"vm.searchText\" reload-grid=\"vm.reloadGrid\"></filter-product-list>\n        </div>\n        <div class=\"product-detail-block\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-left\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <image-carousel image-list=\"vm.imageList\" class=\"fixed-block\"></image-carousel>\n            <!-- Create / Update product details form -->\n            <form class=\"product-detail-form\" novalidate name=\"vm.productDetailsForm\">\n                <div data-ng-repeat=\"column in vm.productDetails track by $index\" data-ng-if=\"$index % 2 == 0\" class=\"row noMargin product-detail-form-item\">\n                    <div class=\"col-xs-12 col-lg-5 noPadding\">\n                        <div class=\"form-group\">\n                            <material-form-field model=\"vm.productDetails[$index].Value\" field-type=\"{{vm.productDetails[$index].Type}}\" is-editable=\"{{vm.productDetails[$index].IsEditable}}\" properties=\"vm.productDetails[$index]\" form-name=\"vm.productDetailsForm\" ng-if=\"!vm.productDetails[$index].autocomplete\">\n                            </material-form-field>\n                            <material-form-field field-type=\"AUTOCOMPLETE\" field-label=\"vm.productDetails[$index].FieldLabel\" properties=\"vm.productDetails[$index]\" form-name=\"vm.productDetailsForm\" ng-if=\"vm.productDetails[$index].autocomplete\">\n                            </material-form-field>\n                            <div ng-messages=\"vm.productDetailsForm[vm.productDetails[$index].FieldName].$error\" ng-if=\"vm.productDetailsForm[vm.productDetails[$index].FieldName].$touched || vm.productDetailsForm.$submitted \">\n                                <p ng-message=\"required\" class=\"formError\">\n                                    {{vm.productDetails[$index].FieldLabel}} value must be entered\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-xs-1 col-lg-1\" data-ng-if=\"vm.productDetails.length > ($index + 1)\"></div>\n                    <div class=\"col-xs-12 col-lg-5 noPadding\" data-ng-if=\"vm.productDetails.length > ($index + 1)\">\n                        <div class=\"form-group\">\n                            <material-form-field model=\"vm.productDetails[$index+1].Value\" field-type=\"{{vm.productDetails[$index+1].Type}}\" is-editable=\"{{vm.productDetails[$index+1].IsEditable}}\" properties=\"vm.productDetails[$index+1]\" form-name=\"vm.productDetailsForm\" ng-if=\"!vm.productDetails[$index+1].autocomplete\">\n                            </material-form-field>\n                            <material-form-field field-type=\"AUTOCOMPLETE\" field-label=\"vm.productDetails[$index+1].FieldLabel\" properties=\"vm.productDetails[$index+1]\" form-name=\"vm.productDetailsForm\" ng-if=\"vm.productDetails[$index+1].autocomplete\">\n                            </material-form-field>\n                            <div ng-messages=\"vm.productDetailsForm[vm.productDetails[$index+1].FieldName].$error\" ng-if=\"vm.productDetailsForm[vm.productDetails[$index+1].FieldName].$touched || vm.productDetailsForm.$submitted \">\n                                <p ng-message=\"required\" class=\"formError\">\n                                    {{vm.productDetails[$index+1].FieldLabel}} value must be entered\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"clearfix\"></div>\n                <!-- Maintaining a separate block for showing Rich Text Editor -->\n                <div class=\"col-xs-12 col-lg-12 noPadding\" data-ng-if=\"vm.richTextEntries.length\" data-ng-repeat=\"item in vm.richTextEntries\">\n                    <div class=\"form-group angular-wysiwyg\">\n                        <label for=\"longDescription\" class=\"detailsLabelColor\">{{item.FieldLabel}}</label>\n                        <wysiwyg textarea-id=\"question\" textarea-class=\"form-control\" textarea-height=\"180px\" textarea-name=\"textareaQuestion\" textarea-required ng-model=\"item.Value\" enable-bootstrap-title=\"true\"></wysiwyg>\n                    </div>\n                </div>\n                <!-- Maintaining a separate block for showing Rich Text Editor ends here-->\n            </form>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToDetailsPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\" data-ng-disabled=\"!vm.enableSave\">Save</a>\n                </div>\n            </div>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n</div>\n<div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\n</div>\n<div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n    <div class=\"modalOverlay\">\n        <div class=\"modalHeaderBody\">\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n            <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n        </div>\n        <div class=\"modal-Footer text-right\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancel()\">\n                <span class=\"modal-TextColor\">Cancel</span>\n            </button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirm()\">\n                <span class=\"modal-TextColor\">Ok</span>\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	(function () {
	    'use strict';
	    var productDetailController = function ($scope, $rootScope, $state, $stateParams, formFields, productInformation2Attachments, productAttachments,
	        productDetailService, productService, systemConstants, _, applicationService, i18nService, cpqAdminConstants, listService, productConstants, $mdDialog) {
	
	        var vm = this,
	            isFormSaved = false,
	            prefix = systemConstants.nsPrefix || '',
	            selectedImageIndex = 0,
	            primaryImageIconId = null,
	            currentlySelectedProduct;
	
	        vm.labels = i18nService.CustomLabel;
	        vm.isCancelClicked = false;
	        vm.imageList = [];
	        /**
	         * updateState method checks whether meta data about the current selected product is
	         * available or not. Like product name, product code, etc.
	         * For a new product, it wont have any metadata until unless it is saved.
	         * Helps is page refresh and state change activity.
	         */
	        productService.updateState($stateParams.id);
	
	        currentlySelectedProduct = productService.getSelectedProduct();
	        if (currentlySelectedProduct) {
	            primaryImageIconId = currentlySelectedProduct.iconId;
	        }
	
	        for (var i = 0; i < formFields.length; i++) {
	            formFields[i].ElementId = 'element' + i;
	            if (formFields[i].FieldName === prefix + 'Version__c' && (formFields[i].Value === '' || formFields[i].Value === undefined)) {
	                formFields[i].Value = 1.0;
	            }
	            if ((formFields[i].Type === cpqAdminConstants.date || formFields[i].Type === cpqAdminConstants.datetime)
	                && formFields[i].Value === '') {
	                delete formFields[i].Value;
	            }
	        }
	        vm.productDetails = formFields;
	
	        /**
	         * Get the list of RichText Fields. Rich Texts are always going to be at the end just before the
	         * multi-media section. So we just cant dynamically repeat this dynamic field as we are doing for
	         * other form fields. So plan is to get the list of RichText fields present in the productDetails
	         * object. Separate them to another another array vm.richTextEntries
	         */
	        function getRichTextFields() {
	            var tempArr = [];
	            if (formFields) {
	                for (var field in formFields) {
	                    if (formFields[field].IsRichText && formFields[field].Type === cpqAdminConstants.textarea) {
	                        tempArr.push(formFields[field]);
	                        //Take out the rich text entries from the main list
	                        vm.productDetails.splice(field, 1);
	                    }
	                }
	            }
	            return tempArr;
	        }
	
	        /**
	         * Prepare Rich Text Entries for this product
	         */
	        vm.richTextEntries = getRichTextFields();
	
	
	        if (productInformation2Attachments.length > 0) {
	            for (var i = 0; i < productInformation2Attachments.length; i++) {
	                if (productInformation2Attachments[i].fileId === primaryImageIconId) {
	                    vm.imageList.unshift(productInformation2Attachments[i]);
	                } else {
	                    vm.imageList.push(productInformation2Attachments[i]);
	                }
	
	            }
	        }
	        if (productAttachments.length > 0) {
	            for (var i = 0; i < productAttachments.length; i++) {
	                var fileType = productAttachments[i].Name.substr(productAttachments[i].Name.lastIndexOf('.') + 1);
	                var objImage = {
	                    name: productAttachments[i].Name,
	                    source: systemConstants.salesforceUrl + '/servlet/servlet.FileDownload?file=' + productAttachments[i].Id,
	                    type: fileType,
	                    icon: fileType.toLowerCase() == cpqAdminConstants.PDF ? 'fa-file-pdf-o' : '',
	                    Id: productAttachments[i].Id
	                };
	                if (productAttachments[i].Id === primaryImageIconId) {
	                    vm.imageList.unshift(objImage);
	                } else {
	                    vm.imageList.push(objImage);
	                }
	            }
	        }
	
	        /**
	         * When user clicks on the 'Save Product' button, an event named 'explicitPageSave' gets broadcasted.
	         * A page has to listen to that event and do the page specific save functionality.
	         */
	        vm.explicitPageSave = function () {
	            if ($stateParams.id === cpqAdminConstants.NEW) {
	                save({}, $state.current, {
	                    id: $stateParams.id
	                });
	            } else {
	                if (hasUpdatedDateFields() || vm.productDetailsForm.$dirty) {
	                    save({}, $state.current, {
	                        id: $stateParams.id
	                    });
	                } else {
	                    addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	                }
	
	            }
	        };
	
	        function isRteValid() {
	            var isValid = true,
	                rteList = angular.copy(vm.richTextEntries);
	
	            if (rteList.length) {
	                for (var item = 0; item < rteList.length; item++) {
	                    var content = rteList[item].Value,
	                        length = content ? content.length : 0;
	                    if (length > rteList[item].Length) {
	                        isValid = false;
	                        break;
	                    }
	                }
	            }
	            return isValid;
	        }
	        /*
	         * Save method prepares the final payload. It merges field entries and Rich Text entries.
	         * Checks the mandatory fields.
	         * Makes service save call.
	         */
	        function save(e, toState, toParams) {
	            if (isRteValid()) {
	                if (vm.productDetailsForm.$valid && isValidEffectiveDateRange()) {
	                    /**
	                     * Remove the $$hashKey from the model objects.
	                     */
	                    var payload = angular.copy(vm.productDetails),
	                        rteList = angular.copy(vm.richTextEntries);
	
	                    if ($stateParams.id === cpqAdminConstants.NEW) {
	                        /** 
	                         * Consider merging vm.productDetails and vm.richTextEntries values and prepare the final payload.
	                         */
	
	                        if (rteList) {
	                            for (var item = 0; item < rteList.length; item++) {
	                                payload.push(rteList[item]);
	                            }
	                        }
	
	                        productDetailService.setProductDetailsById($stateParams.id, payload)
	                            .then(function (res) {
	                                isFormSaved = true;
	
	                                /*If toState is defined, then after successfully saved, navigate to the next page.*/
	                                if (toParams && toParams.id === cpqAdminConstants.NEW) {
	                                    /** 
	                                     * Update toParams to newly generated product code
	                                     */
	                                    if (res.length > 0) {
	                                        toParams.id = res[0].Id;
	                                    }
	
	                                }
	                                if (toState) {
	                                    $state.go(toState, toParams);
	                                } else {
	                                    /**
	                                     * - Check the config type here. If standalone or option, hide the 'Options' menu.
	                                     */
	                                    productService.updateOptionsMenuStatus({
	                                        configType: res[0].ConfigurationType__c
	                                    });
	
	                                }
	                            }, function (reason) {
	                                applicationService.showErrorMessage(reason);
	                                /**
	                                 * If save failed, then stop the navigation.Else it will be navigated
	                                 */
	                                if (e) {
	                                    addAlert(vm.labels.ProductSaveError, cpqAdminConstants.DANGER);
	                                    //e.preventDefault();
	                                } else { }
	
	                            });
	                    } else {
	                        if (rteList) {
	                            for (var item in rteList) {
	                                payload.push(rteList[item]);
	                            }
	                        }
	                        updateProduct(payload, toState, toParams);
	                    }
	
	
	                } else {
	                    vm.productDetailsForm.$setSubmitted();
	                }
	            } else {
	                showUserMessage(e, toState, toParams);
	            }
	        }
	
	        /**
	         * When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed in case of errors in saving the page or the form.
	         * is invalid. This form contains some mandatory field.
	         *
	         * If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	        $scope.$on('$stateChangeStart', function (e, toState, toParams) {
	
	            if (toState.name === 'app.list') {
	                return true;
	            } else if (isFormSaved) {
	                return true;
	            } else {
	                /**
	                 * Check if Form is dirty or not.
	                 * Go for save, only when it is dirty or if it is for a new product.
	                 */
	                if ((vm.productDetailsForm.$dirty || $stateParams.id === cpqAdminConstants.NEW || hasUpdatedDateFields() || vm.productDetailsForm.$invalid) && !vm.isCancelClicked) {
	                    e.preventDefault();
	                    save(e, toState, toParams);
	                } else {
	                    vm.isCancelClicked = false;
	                    return true;
	                }
	            }
	
	        });
	
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	            document.querySelector('.product-detail-block').scrollTop = 0;
	        }
	
	        vm.closeAlert = function (index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        /**
	         * - Pickaday directive is not changeing the dirty flag to true where ever used.
	         * So manually checking if there is any after page got rendered.
	         */
	        function hasUpdatedDateFields() {
	            var present = false;
	            for (var item in vm.productDetails) {
	                if (vm.productDetails[item].Type === cpqAdminConstants.datetime) {
	                    if (vm.productDetails[item].valueUpdated) {
	                        present = true;
	                    }
	                }
	            }
	            return present;
	        }
	
	        function getValue(obj, fieldName) {
	            var value = '';
	            for (var item in obj) {
	                if (obj[item].FieldName === fieldName) {
	                    value = obj[item].Value;
	                }
	            }
	            return value;
	        }
	
	        if (currentlySelectedProduct && currentlySelectedProduct.needsBundleMaintenance) {
	            addAlert(vm.labels.BundleStructureChanged, cpqAdminConstants.DANGER);
	        }
	
	        function updateProduct(payload, toState, toParams) {
	
	            var lastPayload = payload;
	            productDetailService.setProductDetailsById($stateParams.id, payload)
	                .then(function (res) {
	                    isFormSaved = true;
	                    var getSelectedProduct = productService.getSelectedProduct();
	                    var iconId = getSelectedProduct.iconId;
	                    var icon = (iconId ? iconId : '');
	
	                    //Get ConfigurationType__c from payload and do an update.
	                    var configurationType = getValue(lastPayload, prefix + 'ConfigurationType__c');
	                    var productName = getValue(lastPayload, 'Name');
	
	                    productService.setSelectedProduct({
	                        ProductName: productName,
	                        ProductCode: getValue(lastPayload, 'Id'),
	                        configType: configurationType,
	                        hasAttributes: getValue(lastPayload, prefix + 'HasAttributes__c'),
	                        hasOptions: getValue(lastPayload, prefix + 'HasOptions__c'),
	                        icon: getSelectedProduct.iconId,
	                        iconId: iconId
	                    });
	
	                    updateProductHeader();
	                    productService.updateOptionsMenuStatus({
	                        configType: configurationType
	                    });
	                    if (toState) {
	                        addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                        if (productName !== getSelectedProduct.ProductName) {
	                            vm.reloadGrid = true;
	                        }
	                        $state.go(toState, toParams);
	                    } else {
	                        /**
	                         * - Check the config type here. If standalone or option, hide the 'Options' menu.
	                         */
	                        addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                    }
	                }, function (reason) {
	                    console.log(reason);
	                    applicationService.showErrorMessage(reason);
	                    /**
	                     * If save failed, then stop the navigation.Else it will be navigated
	                     */
	
	                });
	        }
	
	        function updateProductHeader() {
	            if (vm.selectedImage && vm.selectedImage.Id !== undefined) {
	                var selectedProduct = productService.getSelectedProduct();
	                if (selectedProduct) {
	                    selectedProduct.icon = systemConstants.salesforceUrl + '/servlet/servlet.FileDownload?file=' + vm.selectedImage.Id;
	                    productService.setSelectedProduct(selectedProduct);
	                }
	            }
	        }
	        $scope.$watchGroup(['vm.productDetailsForm.$valid', 'vm.productDetailsForm.$invalid'], function () {
	            if (vm.productDetailsForm && vm.productDetailsForm.$valid) {
	                vm.enableSave = true;
	            } else {
	                vm.enableSave = false;
	            }
	        });
	
	        function openClonePopup() {
	            var selectedProduct = productService.getSelectedProduct();
	            if (selectedProduct && selectedProduct.ProductName) {
	                $mdDialog.show({
	                    controller: __webpack_require__(375),
	                    controllerAs: 'vm',
	                    template: __webpack_require__(376),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    bindToController: true,
	                    locals: {
	                        selectedProduct: {
	                            Id: $stateParams.id,
	                            Name: selectedProduct.ProductName
	                        }
	                    }
	                });
	            } else {
	                $mdDialog.show({
	                    controller: __webpack_require__(375),
	                    controllerAs: 'vm',
	                    template: __webpack_require__(376),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    bindToController: true
	                });
	            }
	
	        };
	
	        $scope.$on(vm.labels.NewProductButton.split(' ').join('-'), function () {
	            createNewProduct();
	        });
	
	        $scope.$on(vm.labels.CloneProductButton.split(' ').join('-'), function () {
	            openClonePopup();
	        });
	
	        function createNewProduct() {
	            $state.go('app.product.details', {
	                id: 'new'
	            });
	        };
	
	        // Show filter Panel
	        vm.toggleProductView = function () {
	            var productView = document.querySelector('.mainProductContent');
	            angular.element(productView).addClass('showFilterPanel');
	        };
	        // Hide filter Panel
	        vm.hideFilterPanel = function () {
	            var productView = document.querySelector('.mainProductContent');
	            angular.element(productView).removeClass('showFilterPanel');
	        };
	        // Show search bar
	        vm.showSearchBar = function () {
	            var productView = document.querySelector('.details-search');
	            angular.element(productView).addClass('showSearchPanel');
	        };
	        // Hide Search Bar
	        vm.hideSearchBar = function () {
	            var productView = document.querySelector('.details-search');
	            angular.element(productView).removeClass('showSearchPanel');
	            vm.searchText = '';
	            vm.setFilters();
	        };
	
	        vm.setFilters = function () {
	            var filterObj = listService.getFilters();
	            if (vm.searchText) {
	                vm.savedSearchValue = 'View All';
	                filterObj = {
	                    'ViewName': prefix + productConstants.fieldsetProductList,
	                    'SortField': 'Name' || 'LastModifiedDate',
	                    'SortDirection': cpqAdminConstants.ASCENDING,
	                    'NumberOfProductsPerChunk': productConstants.numberOfProductsPerChunk || 50
	                };
	            }
	            filterObj.SearchString = vm.searchText || '';
	            filterObj.ChunkNumber = 1;
	            listService.setFilters(filterObj);
	        };
	
	        function getFilters() {
	            var filter = listService.getFilters();
	            if (filter && filter.SearchString) {
	                vm.searchText = filter.SearchString;
	            }
	        }
	        /* On page load, bind the list page search string to the detail view search text field */
	        getFilters();
	
	        vm.goToDetailsPage = function () {
	            vm.isCancelClicked = true;
	            $state.go('app.product.details');
	        };
	
	        var event, state, params;
	
	        function showUserMessage(e, toState, toParams) {
	            event = e;
	            state = toState;
	            params = toParams;
	            vm.confiramtionPopup = true;
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.Warning,
	                messageBody: vm.labels.RTEExceedsLimitBody,
	                messageNote: vm.labels.RTEExceedsLimitNote
	            }
	        }
	        vm.cancel = function () {
	            vm.confiramtionPopup = false;
	            event = state = params = undefined;
	        };
	        vm.confirm = function () {
	            vm.confiramtionPopup = false;
	            vm.richTextEntries[0].Value = vm.richTextEntries[0].Value.substring(0, vm.richTextEntries[0].Length);
	            save(event, state, params);
	        };
	
	        function isValidEffectiveDateRange() {
	            const effectiveDateField = _.find(vm.productDetails, (field) => {
	                return field.FieldName === prefix + 'EffectiveDate__c';
	            });
	            const expirationDateField = _.find(vm.productDetails, (field) => {
	                return field.FieldName === prefix + 'ExpirationDate__c';
	            });
	            if (effectiveDateField && effectiveDateField.Value
	                && expirationDateField && expirationDateField.Value
	                && effectiveDateField.Value > expirationDateField.Value) {
	                addAlert(vm.labels.DateRangeValidation, cpqAdminConstants.DANGER);
	                return false;
	            }
	            return true;
	        }
	
	    };
	
	    productDetailController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$state',
	        '$stateParams',
	        'formFields',
	        'productInformation2Attachments',
	        'productAttachments',
	        'productDetailService',
	        'productService',
	        'systemConstants',
	        'lodash',
	        'applicationService',
	        'i18nService',
	        'cpqAdminConstants',
	        'listService',
	        'productConstants',
	        '$mdDialog'
	    ];
	
	    module.exports = productDetailController;
	
	})();


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.product.association', [])
	
	    .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.product.associations', {
	                parent: 'app.product',
	                url: '/:id/associations',
	                views: {
	                    'productContainer': {
	                        template: __webpack_require__(382),
	                        controller: __webpack_require__(383),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    treeData: ['associationService', function(associationService) {
	                        var request = {
	                            ChunkNumber: 1,
	                            NumberOfCategoriesPerChunk: 25,
	                            SearchString: '',
	                            PriceListId: null
	                        };
	                        return associationService.getTreeData(request);
	                    }],
	                    associatedCategories: ['associationService', '$stateParams', function(associationService, $stateParams) {
	                        return associationService.getCategoriesByProductCode($stateParams.id);
	                    }],
	                    ProductGroupData: ['associationService', function(associationService) {
	                        var request = {
	                            SearchString: '',
	                            NumberOfRecordsPerChunk: 25,
	                            ChunkNumber: 1
	                        };
	                        return associationService.getAllProductGroups(request);
	                    }],
	                    associatedProductGroups: ['associationService', '$stateParams', function(associationService, $stateParams) {
	                        var request = {
	                            ProductId: $stateParams.id,
	                            SearchString: '',
	                            NumberOfRecordsPerChunk: 10000,
	                            ChunkNumber: 1
	                        };
	                        return associationService.getAssociatedProductGroupsByProductId(request);
	                    }]
	                }
	            })
	        }])
	        .service('associationService', __webpack_require__(395));
	
	})();


/***/ }),
/* 382 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"association-page\">\n        <!-- Left Panel -->\n        <div class=\"left-container left-tree\" ng-include=\"'left-list.html'\" resizable r-directions=\"['right']\" r-flex=\"true\"></div>\n        <!-- Middle Panel -->\n        <div class=\"association-container\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"2000\">{{alert.msg}}</uib-alert>\n            <div class=\"association-title\" layout=\"layout-row\">\n                <div class=\"flex-10\">{{vm.labels.Action}}</div>\n                <div class=\"flex-40\">{{vm.labels.Name}}</div>\n                <div class=\"flex-25\">\n                    <md-menu class=\"type\">\n                        <a href=\"\" ng-click=\"$mdOpenMenu($event)\" aria-label=\"type\">\n                            {{vm.labels.Type}} <i class=\"material-icons filter-icon\">filter_list</i>\n                        </a>\n                        <md-menu-content width=\"4\">\n                            <md-menu-item>\n                                <material-form-field field-type=\"checkbox\" model=\" vm.associatedSearchByType.category\" is-editable=\"true\" field-label=\"vm.treeHeader\" show-inline=\"true\" name=\"categoryHierarchy\" id=\"category\" md-prevent-menu-close=\"md-prevent-menu-close\" true-value=\"0\" false-value=\"'productGroup'\" class=\"association-filter-checkbox\"> \n                                </material-form-field> \n                            </md-menu-item>\n                            <md-divider></md-divider>\n                            <md-menu-item>\n                                <material-form-field field-type=\"checkbox\" model=\"vm.associatedSearchByType.productGroup\" is-editable=\"true\" field-label=\"vm.labels.ProductGroups\" show-inline=\"true \" name=\"productGroup\" id=\"productGroup\" md-prevent-menu-close=\"md-prevent-menu-close\" true-value=\"0\" false-value=\"'categoryHierarchy'\" class=\"association-filter-checkbox\"> \n                                </material-form-field>\n                            </md-menu-item>\n                        </md-menu-content>\n                    </md-menu>\n                </div>\n                <div class=\"flex-25\">{{vm.labels.CatalogImage}}</div>\n            </div>\n            <div class=\"dropzone-container\">\n                <div class=\"dropzone\" dnd-list=\"vm.associatedList\" dnd-drop=\"vm.addNewList(event, index, item)\" dnd-inserted=\"vm.addProductGroupToProduct(index, item, event)\">\n                    <div class=\"associated-list\" data-ng-repeat=\"item in vm.associatedList | filter:vm.associatedSearchByType.category | filter:vm.associatedSearchByType.productGroup\" data-ng-class=\"{ 'associated-catergory': item.type==='categoryHierarchy' , 'associated-product-group': item.type==='productGroup' }\">\n                            <div layout=\"layout-row\" data-ng-if=\"item.type==='categoryHierarchy'\">\n                                <div class=\"flex-10\">\n                                    <a href=\"\" class=\"delete\" data-ng-click=\"vm.removeCategory($index, item)\"><i class=\"material-icons\">clear</i></a>\n                                </div>\n                                <div class=\"flex-40 category-name\" data-ng-click=\"vm.viewCategory(item.ClsHierarchySO.Id, item.ClsHierarchySO[ vm.prefix + 'HierarchyId__c'])\">\n                                    <span ng-repeat='obj in item.breadcrumb track by $index' class=\"node-name text-primary\" data-ng-if=\"$index !==( item.breadcrumb.length -1)\">\n                                    &nbsp;{{obj}}\n                                    <i class=\"fa fa-angle-double-right\"></i>\n                                </span>\n                                    <span ng-repeat='obj in item.breadcrumb' data-ng-if=\"$index===( item.breadcrumb.length -1)\" class=\"text-primary \">\n                                    {{obj}}</span>\n                                </div>\n                                <div class=\"flex-25\" data-ng-click=\"vm.viewProductGroupDetail($index)\">\n                                    <span class=\"type-category\"><i class=\"fa fa-sitemap\" aria-hidden=\"true\"></i>Category</span>\n                                </div>\n                                <div class=\"flex-25 associated-image\" data-ng-click=\"vm.viewProductGroupDetail($index)\">\n                                    <img class=\"image \" ng-src=\"{{ '/servlet/servlet.FileDownload?file='+item.ClsHierarchySO[vm.prefix + 'LargeIconId__c']}}\" alt='Category Image' ng-if=\"item[ 'ClsHierarchySO'][vm.prefix + 'LargeIconId__c']\" />\n                                    <span class=\"fa fa-image\" ng-if=\"!item.ClsHierarchySO[vm.prefix + 'LargeIconId__c']\"></span>\n                                </div>\n                            </div>\n                            <div layout=\"layout-row\" data-ng-if=\"item.type==='productGroup'\">\n                                <div class=\"flex-10\">\n                                    <a href=\"\" class=\"delete\" data-ng-click=\"vm.removeProductGroupFromProduct($index, item)\"><i class=\"material-icons\">clear</i></a>\n                                </div>\n                                <div class=\"flex-40 product-group-name\" data-ng-click=\"vm.viewProductGroup(item.Id)\">\n                                    <span class=\"text-primary\">{{item.Name}}</span>\n                                </div>\n                                <div class=\"flex-25\" data-ng-click=\"vm.viewProductGroupDetail($index)\">\n                                    <span class=\"type-product-group\"><i class=\"fa fa-cubes\" aria-hidden=\"true\"></i>Product Group</span>\n                                </div>\n                                <div class=\"flex-25\">\n                                </div>\n                            </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <!-- Footer Panle -->\n        <div class=\"association-footer\">\n            <div class=\"container-fluid\">\n                <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToDetailsPage()\">{{vm.labels.DialogCancelButton}}</a>\n                <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">{{vm.labels.DialogSaveButton}}</a>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var productAssociationController = function($state, $scope, $rootScope, $templateCache, $stateParams, $location, $anchorScroll, $mdDialog, _, systemConstants, applicationService, i18nService, productConstants, productService, associationService, treeData, associatedCategories, ProductGroupData, associatedProductGroups) {
	        $templateCache.put('left-list.html', __webpack_require__(384));
	        $templateCache.put('left-category-hierarchy-list.html', __webpack_require__(385));
	        $templateCache.put('left-product-groups-list.html', __webpack_require__(386));
	
	        var vm = this,
	            /**
	             * 'isDirty'  variable is used to track changes happened to the parent data model of the controller
	             * It helps is avoiding save() calls at times.
	             */
	            isDirty = false,
	            /**
	             * - Contains the list of exisitng categories association
	             */
	            existingCategories = [],
	            /**
	             * - Contains newlyAdded categories from right side categories heirarchy
	             */
	            newlyAddedCategories = [],
	            /**
	             * - This list will contain the to be removed categories.
	             */
	            toBeRemovedCategories = [];
	
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.isModalOpen = true;
	        vm.isCancelClicked = false;
	        /* Init the category variables */
	        vm.associatedCategories = [];
	        vm.associatedCategories = setAssociatedType(associatedCategories, 'categoryHierarchy');
	        existingCategories = associatedCategories;
	        vm.treeData = treeData.CategoryNodeDOs;
	        vm.treeLabel = vm.prefix + 'Label__c';
	        vm.tooltipField = 'Name';
	        vm.treeHeader = 'Category Hierarchy';
	        vm.type = 'association-categories';
	        vm.nodeChildren = 'ChildCategoryDOs';
	        vm.currentCategoryPage = 1;
	
	        /* Init the common variables */
	        productService.updateState($stateParams.id);
	        vm.associatedSearchByType = {
	            'category': 0,
	            'productGroup': 0
	        };
	        vm.associatedList = [];
	
	        /* Init the productGroup variables */
	        vm.pageNumberProductGroup = 1;
	        vm.disableLeftBtnProductGroup = true;
	        var getProductGroupObj = {
	            "SearchString": "",
	            "NumberOfRecordsPerChunk": 25,
	            "ChunkNumber": vm.pageNumberProductGroup
	        };
	        vm.associatedProductGroups = [];
	        vm.productGroupList = [];
	        vm.associatedProductGroups = setAssociatedType(associatedProductGroups, 'productGroup');
	        vm.productGroupList = ProductGroupData;
	
	        vm.associatedList = vm.associatedCategories.concat(vm.associatedProductGroups);
	
	
	        /** 
	         * - This method is calling while drop a list from left side panel to middle panel
	         * - Executing the addCategory method if selectedOption is 'category-hierarchy'
	         * - Executing the addProductGroup method if selectedOption is 'product-groups'
	         */
	        vm.addNewList = function(event, index, item) {
	            /*
	             * Treat the page content as dirty. Because, a new node just got added to the center panel.
	             */
	            isDirty = true;
	            if (vm.selectedOption === "category-hierarchy") {
	                return addCategory(event, index, item);
	            } else {
	                return addProductGroup(event, index, item);
	            }
	        };
	
	        function getExistingCategories() {
	            var associatedcategories = [];
	            angular.forEach(vm.associatedList, function(item, key) {
	                if (item.type === 'categoryHierarchy') {
	                    associatedcategories.push(item);
	                }
	            });
	            return associatedcategories;
	        }
	
	        /**
	         * When user double clicks a leaf node, the products associated with the category are to be
	         * displayed in the fourth panel.
	         */
	        vm.getSelectedNodeDetails = function(categoryId) {
	            return associationService.getProductsByCategory(categoryId);
	        };
	
	        /**
	         * - Takes a node obj and checks whether that node belongs to newlyAddedCategories list.
	         * - Returns true if yes, false otherwise
	         */
	        function doesBelongToNewList(nodeObj) {
	            var present = false;
	            for (var item = 0; item < newlyAddedCategories.length; item++) {
	                if (newlyAddedCategories[item].ClsHierarchySO.Id === nodeObj.ClsHierarchySO.Id) {
	                    present = true;
	                }
	            }
	            return present;
	        }
	
	        /**
	         * Makes the already associated categories as not selectable on right side tree on page load activity.
	         */
	        function updateTreeOnLoad() {
	            if (vm.associatedList && vm.associatedList.length > 0) {
	                for (var i = 0; i < vm.associatedList.length; i++) {
	                    if (vm.associatedList[i].type === 'categoryHierarchy') {
	                        updateTree(vm.treeData, vm.associatedList[i].ClsHierarchySO.Id, true);
	                    }
	                }
	            }
	        }
	        updateTreeOnLoad();
	
	        /**
	         * Updates the tree data model on which node or leaf is selected.
	         * Adds 'isSelected' property to the element.
	         */
	        function updateTree(array, nodeId, isSelected) {
	            _.each(array, function(node) {
	                if (node.ClsHierarchySO.Id === nodeId) {
	                    node.isSelected = isSelected;
	                    return;
	                } else if (node[vm.nodeChildren]) {
	                    updateTree(node[vm.nodeChildren], nodeId, isSelected);
	                }
	            });
	        }
	
	        /**
	         * -Retrieves the index of the node from the existingCategories list.
	         */
	        function getNodeIndex(list, nodeObj) {
	            var index = '',
	                objList = [];
	
	            if (list === 'newlyAddedItemList') {
	                objList = newlyAddedCategories;
	            } else if (list === 'existingItemList') {
	                objList = existingCategories;
	            }
	
	            for (var item = 0; item < objList.length; item++) {
	                if (objList[item].ClsHierarchySO.Id === nodeObj.ClsHierarchySO.Id) {
	                    index = item;
	                }
	            }
	            return index;
	        }
	
	        /**
	         * Contains the entire heirarchy of the selected leaf node.
	         */
	        var parentList = [];
	
	        /**
	         * Out of the tree data model, this method finds out the entire heirarchy of the selected leaf node.
	         * Traced backward from selected leaf node up towards its parent.
	         */
	        function getParentTrace(obj, nodeId) {
	            var node = {};
	            if (nodeId) {
	                for (var item = 0; item < obj.length; item++) {
	                    if (obj[item].ClsHierarchySO.Id === nodeId) {
	                        node = obj[item];
	                        parentList.push(node.ClsHierarchySO[vm.prefix + 'Label__c']);
	                        getParentTrace(vm.treeData, node.ClsHierarchySO[vm.prefix + 'AncestorId__c']);
	                    } else if (obj[item].ChildCategoryDOs) {
	                        getParentTrace(obj[item].ChildCategoryDOs, nodeId);
	                    }
	                }
	            }
	        }
	
	
	        /**
	         * Adds a category to the breadcrumb data model, once user drops a leaf node in the center panel
	         */
	        function addCategory(event, index, node) {
	            if (node.breadcrumb && node.breadcrumb.length > 0) {
	                //TODO : Processing on the pre-loaded nodes or already added nodes will be done.
	            } else {
	                if (node.isSelected !== true) {
	                    node.isSelected = true;
	                    parentList = [];
	                    getParentTrace(vm.treeData, node.ClsHierarchySO.Id);
	                    node.breadcrumb = parentList.reverse();
	                    updateTree(vm.treeData, node.ClsHierarchySO.Id, true);
	                }
	                node.type = "categoryHierarchy";
	                /* Add to newly added categories array. */
	                newlyAddedCategories.push(node);
	            }
	            if (vm.selectedOption = 'category-hierarchy')
	                node.isShow = true;
	            else
	                node.isShow = false;
	            return node;
	        };
	
	
	        /**
	         * When user clicks on the remove icon present on the breadcrumb list.
	         * removes the selected association from the list.
	         */
	        vm.removeCategory = function(index, node) {
	            /*
	             * Treat the page content as dirty. Because, a new node just got removed from the center panel.
	             */
	            isDirty = true;
	            /**
	             * - Find out more about tobe removed node. Whether it belongs to existing list or newly added list.
	             * - If it doesnt belong to newlyAddedCategories, then it is must from existing list.
	             */
	            if (doesBelongToNewList(node)) {
	                /* Remove it from the newly added list */
	                var existingIndex = getNodeIndex('newlyAddedItemList', node);
	                /* Remove $$hashKey from existingCategories list */
	                newlyAddedCategories = angular.copy(newlyAddedCategories);
	                newlyAddedCategories.splice(existingIndex, 1);
	
	            } else {
	                /**
	                 * - Track this change. Add this node to the toBeRemovedCategories list.
	                 * - Remove the node from the existingCategories list.
	                 */
	                toBeRemovedCategories.push(node);
	
	                var presentIndex = getNodeIndex('existingItemList', node);
	                /* Remove $$hashKey from existingCategories list */
	                existingCategories = angular.copy(existingCategories);
	                existingCategories.splice(presentIndex, 1);
	
	            }
	            vm.associatedList.splice(index, 1);
	            updateTree(vm.treeData, node.ClsHierarchySO.Id, false);
	        };
	
	        /**
	         *  - view categories popup
	         */
	        vm.viewCategory = function(categoryId, hierarchyId) {
	            if (vm.isModalOpen) {
	                vm.isModalOpen = false;
	                $mdDialog.show({
	                    controller: __webpack_require__(387),
	                    template: __webpack_require__(388),
	                    parent: angular.element(document.body),
	                    controllerAs: 'vm',
	                    clickOutsideToClose: false,
	                    resolve: {
	                        selectedCategory: function() {
	                            return associationService.getCategoryById(categoryId)
	                        },
	                        selectedProduct: function() {
	                            return productService.getSelectedProduct();
	                        }
	                    }
	                }).then(function() {}, function() {
	                    vm.isModalOpen = true;
	                });
	            }
	        };
	
	        /**
	         * User can search categories on right side tree panel. This method gets called when user presses enter key
	         * on search box.
	         */
	        vm.searchCategory = function(priceListValue, searchText, pageNumber) {
	            vm.currentPage = pageNumber;
	            associationService.getTreeData({
	                PriceListId: null,
	                ChunkNumber: pageNumber,
	                SearchString: vm.searchCategoryText || '',
	                NumberOfCategoriesPerChunk: productConstants.treePanelItemsPerChunk
	            }).then(function(response) {
	                vm.treeData = response.CategoryNodeDOs;
	                vm.isMaxSQLSizeExceed = false;
	                if (response.CategoryNodeDOs.length === 0) {
	                    vm.searchedStr = vm.searchText;
	                }
	                /**
	                 * Call on page load to update the tree with selectable node available.
	                 */
	                updateTreeOnLoad();
	            }, function(reason) {
	                if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                    vm.treeData = [];
	                    vm.isMaxSQLSizeExceed = true;
	                }
	            });
	        };
	
	        /**
	         * - Add New product group request 
	         */
	        function addProductGroup(event, index, node) {
	            node.type = "productGroup";
	            updateProductGroup(vm.productGroupList, node.Id, true);
	            if (vm.selectedOption = 'product-groups')
	                node.isShow = true;
	            else
	                node.isShow = false;
	            return node;
	        }
	
	        /** 
	         * - Associate the productgroup to product
	         */
	        vm.addProductGroupToProduct = function(index, node, event) {
	            if (vm.selectedOption === 'product-groups') {
	                var productGroup = {
	                    Id: $stateParams.id,
	                    productGroupId: node.Id,
	                }
	                associationService.addProductGroupToProduct(productGroup).then(function(response) {
	                    if (response) {
	                        vm.associatedList[index].ProductGroupMemberId = response.ProductGroupMemberSOs[0].Id;
	                        vm.associatedProductGroups.push(vm.associatedList[index]);
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            }
	        }
	
	        /**
	         * - Remove associated product group from product 
	         */
	        vm.removeProductGroupFromProduct = function(index, node) {
	            var request = {
	                ProductGroupId: node.Id,
	                ProductIds: [$stateParams.id]
	            };
	            associationService.removeProductGroupFromProduct(request).then(function() {
	                vm.associatedList.splice(index, 1);
	                updateProductGroup(vm.productGroupList, node.Id, false);
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        /**
	         * - Check the product group request chunkNumber
	         */
	        vm.getProductGroupList = function(type) {
	            vm.productGroupList = [];
	            if (type === 'next') {
	                vm.pageNumberProductGroup++;
	                if (vm.pageNumberProductGroup !== 1) {
	                    vm.disableLeftBtnProductGroup = false;
	                }
	            } else {
	                vm.pageNumberProductGroup--;
	                if (vm.pageNumberProductGroup === 1) {
	                    vm.disableLeftBtnProductGroup = true;
	                }
	            }
	            getProductGroupObj.ChunkNumber = vm.pageNumberProductGroup;
	            loadProductGroupList(getProductGroupObj);
	        }
	
	        /** 
	         * - Load the product group list when click previous and next button
	         */
	        function loadProductGroupList(reqObj) {
	            associationService.getAllProductGroups(reqObj).then(function(response) {
	                vm.productGroupList = response;
	                updateProductGroupOnLoad();
	                vm.isMaxSQLSizeExceed = false;
	                if (response.length < reqObj.NumberOfRecordsPerChunk) {
	                    vm.disableRightBtnProductGroup = true;
	                } else if (response.length === 0) {
	                    vm.searchedStr = vm.searchText;
	                } else {
	                    vm.disableRightBtnProductGroup = false;
	                }
	                document.querySelector('.list-table').scrollTop = 0;
	            }, function(reason) {
	                if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                    vm.productGroupList = [];
	                    vm.isMaxSQLSizeExceed = true;
	                }
	                vm.disableRightBtnProductGroup = true;
	            });
	        }
	
	        /**
	         * - Search product group based on the search text
	         */
	        vm.searchProductGroups = function() {
	            getProductGroupObj.SearchString = vm.searchProductGroupText;
	            getProductGroupObj.ChunkNumber = 1;
	            loadProductGroupList(getProductGroupObj);
	        };
	
	        /**
	         *  - Adds 'isSelected' property to the element.
	         */
	        function updateProductGroup(array, nodeId, isSelected) {
	            _.each(array, function(node) {
	                if (node.Id === nodeId) {
	                    node.isSelected = isSelected;
	                    return;
	                }
	            });
	        }
	
	        /**
	         *  - update product Group on load
	         */
	        function updateProductGroupOnLoad() {
	            if (vm.associatedList && vm.associatedList.length > 0) {
	                for (var i = 0; i < vm.associatedList.length; i++) {
	                    if (vm.associatedList[i].type === 'productGroup') {
	                        updateProductGroup(vm.productGroupList, vm.associatedList[i].Id, true);
	                    }
	                }
	            }
	        }
	        updateProductGroupOnLoad();
	
	        /**
	         * - view product group based on the search text
	         */
	        vm.viewProductGroup = function(productGroupId) {
	            if (vm.isModalOpen) {
	                vm.isModalOpen = false;
	                $mdDialog.show({
	                    controller: __webpack_require__(389),
	                    template: __webpack_require__(390),
	                    parent: angular.element(document.body),
	                    controllerAs: 'vm',
	                    clickOutsideToClose: false,
	                    resolve: {
	                        selectedProductGroup: function() {
	                            return associationService.getProductGroupDetailsById(productGroupId, false);
	                        }
	                    }
	                }).then(function() {}, function() {
	                    vm.isModalOpen = true;
	                });
	            }
	        };
	
	
	        /**
	         * When user clicks on the 'Save Product' button, an event named 'explicitPageSave' gets broadcasted.
	         * A page has to listen to that event and do the page specific save functionality.
	         */
	        vm.explicitPageSave = function() {
	            if (isDirty) {
	                vm.save();
	            }
	        };
	        $scope.$on('explicitPageSave', function() {
	            /**
	             * If page contains data about an existing product
	             *   - Check if the page is dirty, then initiate the save call, else no need to save again.
	             *   - Even the isDirty flag is set to true, check if the original incoming list and the final payloads
	             *     are same or different.
	             */
	            if (isDirty) {
	                vm.save();
	            }
	
	        });
	
	        //This watch is for implicit save functionality
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.product.list') {
	                return true;
	            } else if (isFormSaved) {
	                return true;
	            } else {
	                /**
	                 * Check if center panel is dirty.
	                 * Go for save, only when it is dirty or if it is for a new product.
	                 */
	                if (isDirty && !vm.isCancelClicked) {
	                    e.preventDefault();
	                    vm.save(e, toState, toParams);
	                } else {
	                    vm.isCancelClicked = false;
	                    return true;
	                }
	            }
	
	        });
	
	
	        /*
	         * Save method prepares the final payload.
	         * Makes service save call.
	         */
	        vm.save = function(e, toState, toParams) {
	            /**
	             * - angular.copy(newlyAddedCategories) : will have all data set for add service call
	             * - angular.copy(toBeRemovedCategories) : will have all data set for remove service call.
	             */
	            if (newlyAddedCategories.length > 0 && toBeRemovedCategories.length > 0) {
	                editedState = 'both';
	            } else {
	                isFormSaved = true;
	            }
	            if (newlyAddedCategories.length > 0) {
	                editedState = (editedState === 'both' ? 'both' : 'addState');
	                if (newlyAddedCategories.length > 0) {
	                    associationService.addCategoriesById($stateParams.id, angular.copy(newlyAddedCategories))
	                        .then(function(res) {
	                            stateInfo = {
	                                to: toState,
	                                param: toParams
	                            };
	                            addAPIStatus = true;
	                            vm.updateAPIStatus();
	                        }, function(reason) {
	                            stateInfo = {
	                                to: toState,
	                                param: toParams,
	                                event: e
	                            };
	                            addAPIStatus = false;
	                            vm.updateAPIStatus();
	                        });
	                }
	            }
	            if (toBeRemovedCategories.length > 0) {
	                editedState = (editedState === 'both' ? 'both' : 'removeState');
	                if (toBeRemovedCategories.length > 0) {
	                    associationService.removeCategoriesById($stateParams.id, angular.copy(toBeRemovedCategories))
	                        .then(function(response) {
	                            stateInfo = {
	                                to: toState,
	                                param: toParams
	                            };
	                            removeAPIStatus = true;
	                            vm.updateAPIStatus();
	                        }, function(reason) {
	                            stateInfo = {
	                                to: toState,
	                                param: toParams,
	                                event: e
	                            };
	                            removeAPIStatus = false;
	                            vm.updateAPIStatus();
	                        });
	                }
	            }
	        };
	
	        /**
	         * - Initailly Set the type of object (categoryHierarchy or productGroup) 
	         */
	        function setAssociatedType(obj, type) {
	            for (var item in obj) {
	                obj[item].type = type;
	                obj[item].isShow = true;
	            }
	            return obj;
	        }
	
	        /** 
	         * 'vm.types' variable is contains drop down otions
	         */
	        vm.types = {
	            'FieldType': 'PICKLIST',
	            'IsEditable': true,
	            'allowClear': false,
	            'PicklistValues': [{
	                'active': true,
	                'defaultValue': false,
	                'label': 'Category Hierarchy',
	                'value': 'category-hierarchy'
	            }, {
	                'active': true,
	                'defaultValue': false,
	                'label': 'Product Groups',
	                'value': 'product-groups'
	            }],
	            'value': 'category-hierarchy'
	        };
	        vm.selectedOption = vm.types.value;
	
	        /**
	         *  Identify and call the method based on selected options 
	         */
	        var deRegisterFunc = $scope.$watch('vm.types.value', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                if (newValue === "category-hierarchy") {
	                    vm.selectedOption = "category-hierarchy";
	                } else if (newValue === "product-groups") {
	                    vm.selectedOption = "product-groups";
	                }
	            }
	        });
	
	        /**
	         * - Change the left side panel while click the catgory button (or) productgroup button 
	         */
	        vm.changeTypeValue = function(value) {
	            vm.types.value = value;
	        }
	
	
	        /** 
	         *- Create new ProductGroup 
	         */
	        $scope.$on(vm.labels.NewProductGroup.split(' ').join('-'), function() {
	            createProductGroup()
	        });
	
	        function createProductGroup() {
	            $mdDialog.show({
	                controller: __webpack_require__(391),
	                template: __webpack_require__(392),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	            }).then(function(response) {
	                if (response) {
	                    $state.reload();
	                }
	            });
	        }
	
	
	        /**
	         *  - Add new categories popup
	         */
	        $scope.$on(vm.labels.NewCategoryButton.split(' ').join('-'), function() {
	            addCategories();
	        });
	
	        function addCategories() {
	            $mdDialog.show({
	                controller: __webpack_require__(393),
	                template: __webpack_require__(394),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	                    data: function() {
	                        return vm.treeData
	                    },
	                    currentCategory: function() {
	                        return null;
	                    }
	                }
	            }).then(function(response) {
	                if (response) {
	                    $state.reload();
	                }
	            });
	        };
	
	        /**
	         * User messages management.
	         */
	        vm.alerts = [];
	        vm.addAlert = function(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        };
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	        /**
	         * - When all API calls respond back with success as true, this method gets called
	         */
	        var isFormSaved = false,
	            addAPIStatus, removeAPIStatus, editedState,
	            stateInfo = {
	                to: '',
	                param: '',
	                event: ''
	            };
	        vm.processSuccessState = function() {
	            editedState = '';
	            isFormSaved = true;
	            if (stateInfo.to) {
	                $state.go(stateInfo.to, stateInfo.param);
	            } else {
	                vm.addAlert('Operation successfully', 'success');
	            }
	            existingCategories = getExistingCategories();
	            newlyAddedCategories = [];
	            toBeRemovedCategories = [];
	        };
	
	        /**
	         * - When any API calls respond back with success as false, this method gets called
	         */
	        vm.processErrorState = function() {
	            editedState = '';
	            // updateMenuStatus('error');
	            vm.addAlert('Something went wrong. Please try later', 'error');
	            if (stateInfo.event) {
	                stateInfo.event.preventDefault();
	            }
	        };
	
	        /**
	         * - Helper method to execute success or error state processor
	         */
	        vm.updateAPIStatus = function() {
	            if (editedState === 'both') {
	                if (addAPIStatus === true && removeAPIStatus === true) {
	                    vm.processSuccessState();
	                }
	            } else if (editedState === 'addState') {
	                if (addAPIStatus === true) {
	                    vm.processSuccessState();
	                } else if (addAPIStatus === false) {
	                    vm.processErrorState();
	                }
	
	            } else if (editedState === 'removeState') {
	                if (removeAPIStatus === true) {
	                    vm.processSuccessState();
	                } else if (removeAPIStatus === false) {
	                    vm.processErrorState();
	                }
	
	            }
	
	        };
	
	        vm.goToDetailsPage = function() {
	            vm.isCancelClicked = true;
	            $state.go('app.product.details', {
	                'id': $stateParams.id
	            });
	        };
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            vm = null;
	        });
	    };
	
	    productAssociationController.$inject = [
	        '$state',
	        '$scope',
	        '$rootScope',
	        '$templateCache',
	        '$stateParams',
	        '$location',
	        '$anchorScroll',
	        '$mdDialog',
	        'lodash',
	        'systemConstants',
	        'applicationService',
	        'i18nService',
	        'productConstants',
	        'productService',
	        'associationService',
	        'treeData',
	        'associatedCategories',
	        'ProductGroupData',
	        'associatedProductGroups'
	    ];
	
	    module.exports = productAssociationController;
	
	})();


/***/ }),
/* 384 */
/***/ (function(module, exports) {

	module.exports = "<header>\n    <div class=\"groups-title\">\n        <div class=\"header-button-group\">\n            <h4 class=\"pull-left\" ng-if=\"vm.selectedOption === 'category-hierarchy'\">{{vm.treeHeader}}</h4>\n            <h4 class=\"pull-left\" ng-if=\"vm.selectedOption === 'product-groups'\">{{vm.labels.ProductGroups}}</h4>\n            <md-button class=\"md-raised pull-right product-group-icon-button icon-button\" data-ng-class=\"{'active': vm.selectedOption === 'product-groups'}\" title=\"Product Groups\" data-ng-click=\"vm.changeTypeValue('product-groups');\">\n                <md-icon><i class=\"fa fa-cubes\" aria-hidden=\"true\"></i></md-icon>\n            </md-button>\n            <md-button class=\"md-raised pull-right category-icon-button icon-button\" data-ng-class=\"{'active': vm.selectedOption === 'category-hierarchy'}\" title=\"Category Hierarchy\" data-ng-click=\"vm.changeTypeValue('category-hierarchy');\">\n                <md-icon><i class=\"fa fa-sitemap\" aria-hidden=\"true\"></i></md-icon>\n            </md-button>\n            <p class=\"clearfix\"></p>\n        </div>\n    </div>\n</header>\n<div class=\"category-hierarchy-list\" ng-include=\"'left-category-hierarchy-list.html'\" ng-if=\"vm.selectedOption === 'category-hierarchy'\"></div>\n<div class=\"product-groups-list tree-view\" ng-include=\"'left-product-groups-list.html'\" ng-if=\"vm.selectedOption === 'product-groups'\"></div>\n"

/***/ }),
/* 385 */
/***/ (function(module, exports) {

	module.exports = "<!-- Tree container directive -->\n<!-- It shows a herarchial tree data structure -->\n<!-- Provides drag-n-drop from the tree node / leaf node to the left panel or center panel -->\n<div class=\"tree-view setWithCent\">\n    <header>\n        <div class=\"search\">\n            <form ng-submit=\"vm.searchCategory(null, vm.searchCategoryText, 1);\" novalidate>\n                <div class=\"search-input-container\">\n                    <div class=\"input-group\">\n                        <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchCategoryText\" name=\"searchText\" required>\n                        <label class=\"ng-binding\">Search</label>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </header>\n    <div class=\"tree\">\n        <div class=\"list-other-Panel\">\n            <div data-ng-if=\"vm.treeData.length == 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{vm.labels.NoMatchingCategories}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.treeData.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"categories-list-view-tree-container\">\n                <tree-container data=\"vm.treeData\" header-text=\"vm.treeHeader\" page-type='vm.type' get-node-details=\"vm.getSelectedNodeDetails\" detail-of-selected-node=\"vm.nodeDetails\" search=\"vm.searchCategory\" selected-node=\"vm.selectedCategory\" enable-detail-panel=\"true\" node-children=\"vm.nodeChildren\" tooltip-field=\"vm.tooltipField\" node-label=\"vm.treeLabel\" options=\"vm.options\" expand-collapse=\"vm.expandCollapse\" search-text=\"vm.searchText\" current-page=\"vm.currentPage\" on-tree-node-label-click=\"vm.viewCategory(categoryId, hierarchyId)\">\n                </tree-container>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- Tree container directive -->\n"

/***/ }),
/* 386 */
/***/ (function(module, exports) {

	module.exports = "<header>\n    <div class=\"search\">\n        <form data-ng-submit=\"vm.searchProductGroups();\" novalidate>\n            <div class=\"search-input-container\">\n                <div class=\"input-group\">\n                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchProductGroupText\" name=\"searchProductGroupText\" required>\n                    <label class=\"ng-binding\">Search</label>\n                </div>\n            </div>\n        </form>\n    </div>\n</header>\n<div class=\"list-table\">\n    <div data-ng-if=\"vm.productGroupList.length == 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n        {{vm.labels.NoMatchingProductGroups}} <span><b>{{vm.searchedStr}}</b></span>\n    </div>\n    <div data-ng-if=\"vm.productGroupList.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n        {{vm.labels.MaxSQLSizeExceedMessage}}\n    </div>\n    <table>\n        <tbody class=\"list\">\n            <tr data-ng-repeat=\"list in vm.productGroupList track by list.Id\" data-ng-click=\"vm.viewProductGroup(list.Id)\" data-ng-class=\"{'active': $index == vm.activeProductGroup, 'drag-disabled': list.isSelected}\" dnd-draggable=\"list\" dnd-droppable-in=\".dropzone\" dnd-effect-allowed=\"copy\" dnd-disable-if=\"list.isSelected\">\n                <td>\n                    <span>{{ list.Name }}</span>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<div class=\"pagination cf\">\n    <div class=\"next-prev\">\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtnProductGroup\" data-ng-click=\"vm.getProductGroupList('previous')\">\n            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n        </button>\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtnProductGroup\" data-ng-click=\"vm.getProductGroupList('next')\">\n            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n        </button>\n    </div>\n</div>"

/***/ }),
/* 387 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var viewCategoryController = function($rootScope, $scope, $state, $stateParams, $mdDialog, i18nService, systemConstants, cpqAdminConstants, applicationService, associationService, selectedProduct, selectedCategory) {
	        var vm = this,
	            isSelectedAssociatedProduct = false,
	            isSelectedAssociatedPriceList = false;
	
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	
	        vm.selectedTab = 0;
	        vm.selectedCategory = selectedCategory;
	        vm.associatedProduct = [];
	        vm.associatedPriceList = [];
	
	        /* AssociatedPriceList pagination */
	        vm.pageNumber = 0;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = false;
	        var getPriceListObj = {
	            CategoryId: selectedCategory[vm.prefix + 'HierarchyId__c'],
	            ChunkNumber: vm.pageNumber,
	            NumberOfRecordsPerChunk: 25,
	            SearchString: ''
	        };
	
	        /* AssociatedPriceList */
	
	        /**
	         * - Active format contant
	         */
	        vm.getFormattedContent = function(isActive) {
	            var modifiedValue = '';
	            if (isActive) {
	                modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	            } else {
	                modifiedValue = "<i class='material-icons show'>check_circle</i>";
	            }
	            return modifiedValue;
	        };
	
	        /**
	         * - Check the associated product request chunkNumber
	         */
	        vm.getAssociatedProductList = function(type) {
	            vm.associatedPriceList = [];
	            if (type === 'next') {
	                vm.pageNumber++;
	                if (vm.pageNumber !== 1) {
	                    vm.disableLeftBtn = false;
	                }
	            } else {
	                vm.pageNumber--;
	                if (vm.pageNumber === 1) {
	                    vm.disableLeftBtn = true;
	                }
	            }
	            getPriceListObj.ChunkNumber = vm.pageNumber;
	            loadPriceList(getPriceListObj);
	        }
	
	        /** 
	         * - Load the associated price list when click previous and next button
	         */
	        function loadPriceList(reqObj) {
	            associationService.getPriceListsAssociatedToCategory(reqObj).then(function(response) {
	                vm.associatedPriceList = response.PriceListDOs;
	                vm.isMaxSQLSizeExceed = false;
	                if (vm.associatedPriceList.length < reqObj.NumberOfRecordsPerChunk) {
	                    vm.disableRightBtn = true;
	                } else {
	                    vm.disableRightBtn = false;
	                }
	            }, function(reason) {
	                if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                    vm.associatedPriceList = [];
	                    vm.isMaxSQLSizeExceed = true;
	                }
	                vm.disableRightBtn = true;
	            });
	        }
	
	        /**
	         * - Search associated product based on the search text
	         */
	        vm.searchAssociatedProduct = function() {
	            getPriceListObj.SearchString = vm.searchText;
	            getPriceListObj.ChunkNumber = 1;
	            loadPriceList(getPriceListObj);
	        };
	
	        vm.clearSearchInput = function() {
	            vm.searchText = '';
	            vm.searchAssociatedProduct();
	        };
	
	        vm.onTabSelect = function() {
	            switch (vm.selectedTab) {
	                case 1:
	                    {
	                        /** Flag for call the api only once while on select tab **/
	                        if (!isSelectedAssociatedProduct) {
	                            getAssociatedProduct();
	                            isSelectedAssociatedProduct = true;
	                        }
	                        break;
	                    }
	                case 2:
	                    {
	                        /** Flag for call the api only once while on select tab **/
	                        if (!isSelectedAssociatedPriceList) {
	                            var request = {
	                                CategoryId: selectedCategory[vm.prefix + 'HierarchyId__c'],
	                                ChunkNumber: 1,
	                                NumberOfRecordsPerChunk: 25,
	                                SearchString: ''
	                            };
	                            loadPriceList(request);
	                            isSelectedAssociatedPriceList = true;
	                        }
	                        break;
	                    }
	            }
	        };
	
	        function getAssociatedProduct() {
	            if (!vm.associatedProduct.length) {
	                associationService.getProductsByCategory(selectedCategory.Id).then(function(response) {
	                    vm.associatedProduct = response;
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            }
	        }
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	        vm.goToCatalog = function() {
	            $mdDialog.cancel();
	            $state.go('app.catalog.manageCatalogDetails', { 'id': vm.selectedCategory.Id, 'productId': selectedProduct.ProductCode, 'productName': selectedProduct.ProductName });
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	    };
	
	    viewCategoryController.$inject = [
	        '$rootScope',
	        '$scope',
	        '$state',
	        '$stateParams',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'cpqAdminConstants',
	        'applicationService',
	        'associationService',
	        'selectedProduct',
	        'selectedCategory'
	    ];
	
	    module.exports = viewCategoryController;
	})();


/***/ }),
/* 388 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"view-category-dialog\" ng-cloak>\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n        </i>\n    </button>\n    <button class=\"slds-button slds-button_brand edit-button\" data-ng-click=\"vm.goToCatalog();\">{{vm.labels.EditCategoryButton}}</button>\n    <md-dialog-content class=\"dialog-content\">\n        <md-tabs md-border-bottom md-selected=\"vm.selectedTab\">\n            <md-tab label=\"{{vm.labels.Details}}\">\n                <md-content class=\"category-details\">\n                    <form novalidate name=\"vm.categoryDetailsForm\" class=\"md-padding\">\n                        <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n                        <div layout=\"row\" class=\"md-padding\">\n                            <material-form-field model=\"vm.selectedCategory.Name\" field-type=\"STRING\" is-disabled=\"true\" field-label=\"vm.labels.Name\" field-name=\"Name\" flex=\"45\" is-required=\"true\">\n                            </material-form-field>\n                            <div flex=\"10\"></div>\n                            <material-form-field model=\"vm.selectedCategory[vm.prefix + 'Label__c']\" field-type=\"STRING\" is-disabled=\"true\" field-label=\"vm.labels.LabelText\" name=\"label\" flex=\"45\" is-required=\"true\">\n                            </material-form-field>\n                        </div>\n                        <div layout=\"row\" class=\"md-padding\">\n                            <material-form-field model=\"vm.selectedCategory[vm.prefix + 'Description__c']\" field-type=\"TEXTAREA\" is-disabled=\"true\" field-label=\"vm.labels.Description\" flex>\n                            </material-form-field>\n                        </div>\n                        <div layout=\"row\" class=\"md-padding\">\n                            <material-form-field model=\"vm.selectedCategory[vm.prefix + 'DefaultSearchCategory__c']\" field-type=\"BOOLEAN\" is-disabled=\"true\" field-label=\"vm.labels.DefaultSearchCategory\" element-id=\"defaultSearchCategory\" flex=\"50\">\n                            </material-form-field>\n                            <material-form-field model=\"vm.selectedCategory[vm.prefix + 'ExpandedByDefault__c']\" field-type=\"BOOLEAN\" is-disabled=\"true\" field-label=\"vm.labels.ExpandedByDefault\" element-id=\"expandedByDefault\" flex=\"50\">\n                            </material-form-field>\n                        </div>\n                        <div layout=\"row\" class=\"md-padding\">\n                            <material-form-field model=\"vm.selectedCategory[vm.prefix + 'IncludeInTotalsView__c']\" field-type=\"BOOLEAN\" is-disabled=\"true\" field-label=\"vm.labels.IncludeInTotalsView\" element-id=\"includeInTotalsView\" flex=\"50\">\n                            </material-form-field>\n                            <material-form-field model=\"vm.selectedCategory[vm.prefix + 'HideAllSearchFilters__c']\" field-type=\"BOOLEAN\" is-disabled=\"true\" field-label=\"vm.labels.HideAllSearchFilters\" element-id=\"hideAllSearchFilters__c\" flex=\"50\">\n                            </material-form-field>\n                        </div>\n                        <div class=\"md-padding\" data-ng-if=\"vm.selectedCategory[vm.prefix + 'LargeIconId__c']\">\n                            <div class=\"upload-image-label\">{{vm.labels.CatalogImage}}</div>\n                            <img ng-src=\"{{'/servlet/servlet.FileDownload?file='+ vm.selectedCategory[vm.prefix + 'LargeIconId__c']}}\" alt=\"Category Image\" width=\"100\" /></div>\n                    </form>\n                </md-content>\n            </md-tab>\n            <md-tab label=\"{{vm.labels.AssociatedProduct}}\"  md-on-select=\"vm.onTabSelect()\">\n                <md-content>\n                    <div class=\"associated-product-list\">\n                        <div layout=\"row\" class=\"associated-price-list-header\">\n                            <div flex=\"40\">{{vm.labels.ProductName}}</div>\n                            <div flex=\"20\">{{vm.labels.ProductCode}}</div>\n                            <div flex=\"20\">{{vm.labels.ConfigurationType}}</div>\n                            <div flex=\"20\">{{vm.labels.CatalogImage}}</div>\n                        </div>\n                        <div class=\"associated-price-list-body\">\n                            <div layout=\"row\" data-ng-repeat=\"item in vm.associatedProduct\">\n                                <div flex=\"40\">{{item.Name}}</div>\n                                <div flex=\"20\">{{item.ProductCode}}</div>\n                                <div flex=\"20\">{{item[vm.prefix + 'ConfigurationType__c']}}</div>\n                                <div flex=\"20\" class=\"associated-image\">\n                                    <img class=\"image\" ng-src=\"{{'/servlet/servlet.FileDownload?file='+item[vm.prefix + 'IconId__c']}}\" alt='Category Image' ng-if=\"item[vm.prefix + 'IconId__c']\" />\n                                    <span class=\"fa fa-image\" ng-if=\"!item[vm.prefix + 'IconId__c']\"></span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </md-content>\n            </md-tab>\n            <md-tab label=\"{{vm.labels.AssociatedPriceList}}\"  md-on-select=\"vm.onTabSelect()\">\n                <md-content>\n                    <div class=\"list-table\">\n                        <table class=\"table\">\n                            <thead>\n                                <tr>\n                                    <th>{{vm.labels.Name}}</th>\n                                    <th>{{vm.labels.Description}}</th>\n                                    <th>{{vm.labels.Active}}</th>\n                                    <th>{{vm.labels.CreatedBy}}</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr ng-repeat=\"item in vm.associatedPriceList\">\n                                    <td>{{item.PriceListSO.Name}}</td>\n                                    <td>{{item.PriceListSO[vm.prefix + 'Description__c']}}</td>\n                                    <td class=\"product-heirarchy\"><span ng-bind-html=\"vm.getFormattedContent(item.PriceListSO[vm.prefix + 'Active__c'])\"></span></td>\n                                    <td>{{item.PriceListSO.CreatedBy.Name}}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <div class=\"pagination-container text-center\">\n                        <div class=\"navigation-control\">\n                            <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getAssociatedProductList('previous')\">\n                                <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                            <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                            <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getAssociatedProductList('next')\">\n                                <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                        </div>\n                    </div>\n                </md-content>\n            </md-tab>\n        </md-tabs>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancel()\">{{vm.labels.DialogCancelButton}}</button>\n    </md-dialog-actions>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 389 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var viewProductGroupController = function($rootScope, $scope, $state, $stateParams, $timeout, $mdDialog, i18nService, systemConstants, cpqAdminConstants, applicationService, productService, associationService, selectedProductGroup) {
	        var vm = this,
	            isSelectedAssociatedProduct = false,
	            isSelectedAssociatedRule = false;
	
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.selectedProductGroupId = selectedProductGroup.ProductGroupSO.Id;
	        vm.selectedProductGroup = {
	            'Id': selectedProductGroup.ProductGroupSO.Id,
	            'Name': selectedProductGroup.ProductGroupSO.Name,
	            'Description': selectedProductGroup.ProductGroupSO[vm.prefix + 'Description__c'],
	        };
	        vm.selectedTab = 0;
	
	        /** Associated Product begin **/
	        vm.productPageNumber = 1;
	        vm.productDisableLeftBtn = true;
	        var getProductObj = {
	            'SearchString': "",
	            'NumberOfRecordsPerChunk': 20,
	            'ChunkNumber': vm.productPageNumber,
	            'productGroupId': vm.selectedProductGroupId
	        };
	        vm.productList = [];
	
	        /**
	         * - Check the associated product request chunkNumber
	         */
	        vm.getProductList = function(type) {
	            vm.productList = [];
	            if (type === 'next') {
	                vm.productPageNumber++;
	                if (vm.productPageNumber !== 1) {
	                    vm.productDisableLeftBtn = false;
	                }
	            } else {
	                vm.productPageNumber--;
	                if (vm.productPageNumber === 1) {
	                    vm.productDisableLeftBtn = true;
	                }
	            }
	            getProductObj.ChunkNumber = vm.productPageNumber;
	            loadProductList(getProductObj);
	        }
	
	        /** 
	         * - Load the associated product list when click previous and next button
	         */
	        function loadProductList(reqObj) {
	            vm.productList = [];
	            associationService.getAssociatedProductsForProductGroup(reqObj).then(function(response) {
	                vm.productList = response;
	                vm.isMaxSQLSizeExceed = false;
	                if (response.length < reqObj.NumberOfRecordsPerChunk) {
	                    vm.productDisableRightBtn = true;
	                } else {
	                    vm.productDisableRightBtn = false;
	                }
	            }, function(reason) {
	                if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                    vm.productList = [];
	                    vm.isMaxSQLSizeExceed = true;
	                }
	                vm.productDisableRightBtn = true;
	            });
	        }
	
	        /**
	         * - Search product based on the search text
	         */
	        vm.searchProduct = function() {
	            getProductObj.SearchString = vm.productSearchText;
	            getProductObj.ChunkNumber = 1;
	            loadProductList(getProductObj);
	        };
	
	        vm.clearSearchProductInput = function() {
	            vm.productSearchText = '';
	            vm.searchProduct();
	        }
	
	        /** Associated Product end **/
	
	        /** Associated Rules begin **/
	
	        vm.associatedRules = [];
	        
	        function getAssociatedRule(productGroupId) {
	            associationService.getAssociatedRulesByProductGroupId(productGroupId).then(function(response) {
	                vm.associatedRules = response;
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        /** Associated Rules end **/
	
	        vm.onTabSelect = function() {
	            switch (vm.selectedTab) {
	                case 1:
	                    {
	                        /** Flag for call the api only once while on select tab **/
	                        if (!isSelectedAssociatedProduct) {
	                            var request = {
	                                ProductGroupId: vm.selectedProductGroup.Id,
	                                SearchString: '',
	                                NumberOfRecordsPerChunk: 20,
	                                ChunkNumber: 1
	                            };
	                            loadProductList(request);
	                            isSelectedAssociatedProduct = true;
	                        }
	                        break;
	                    }
	                case 2:
	                    {
	                        /** Flag for call the api only once while on select tab **/
	                        if (!isSelectedAssociatedRule) {
	                            getAssociatedRule(vm.selectedProductGroup.Id);
	                            isSelectedAssociatedRule = true;
	                        }
	                        break;
	                    }
	            }
	        }
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        vm.goToProductGroup = function() {
	            $mdDialog.cancel();
	            var selectedProduct = productService.getSelectedProduct();
	            $state.go('app.productGroups.details.form', { 'id': vm.selectedProductGroupId, 'productId': $state.params.id, 'productName': selectedProduct.ProductName });
	        };
	
	        vm.goToAssociatedRules = function(selectedRule, ruleType) {
	            var selectedProduct = productService.getSelectedProduct();
	            var associatedRulesDetails = { 'RuleType': ruleType, 'Id': selectedRule.Id, 'Name': selectedRule.Name };
	            $mdDialog.cancel().then(function(){
	                $state.go('app.productGroups.associatedRule', { 'id': vm.selectedProductGroupId, 'productId': $state.params.id, 'productName': selectedProduct.ProductName, 'associatedRulesDetails': associatedRulesDetails });
	            });
	        };
	    };
	
	    viewProductGroupController.$inject = [
	        '$rootScope',
	        '$scope',
	        '$state',
	        '$stateParams',
	        '$timeout',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'cpqAdminConstants',
	        'applicationService',
	        'productService',
	        'associationService',
	        'selectedProductGroup'
	    ];
	
	    module.exports = viewProductGroupController;
	})();


/***/ }),
/* 390 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"view-product-group-dialog\" ng-cloak>\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n    </button>\n    <button class=\"slds-button slds-button_brand edit-button\" data-ng-click=\"vm.goToProductGroup();\">{{vm.labels.EditProductGroupButton}}</button>\n    <md-dialog-content class=\"dialog-content\">\n        <md-tabs md-border-bottom md-selected=\"vm.selectedTab\">\n            <md-tab label=\"{{vm.labels.Details}}\">\n                <md-content class=\"md-padding\">\n                    <form class=\"product-group-from\" name=\"vm.productGroupForm\" novalidate>\n                        <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n                        <div layout=\"row\" class=\"md-padding\">\n                            <material-form-field model=\"vm.selectedProductGroup.Name\" field-type=\"string\" is-editable=\"true\" is-disabled=\"true\" is-required=\"true\" field-label=\"vm.labels.Name\" name=\"name\" flex=\"50\">\n                            </material-form-field>\n                        </div>\n                        <div ng-messages=\"vm.productGroupForm.name.$error\" ng-if=\"vm.productGroupForm.name.$touched || vm.productGroupForm.$submitted\" class=\"md-padding error-message\">\n                            <p ng-message=\"required\" class=\"formError\">\n                                {{vm.labels.Name}} value must be entered\n                            </p>\n                        </div>\n                        <div layout=\"row\" class=\"md-padding\">\n                            <material-form-field model=\"vm.selectedProductGroup.Description\" field-type=\"TEXTAREA\" is-editable=\"true\" is-disabled=\"true\" field-label=\"vm.labels.Description\" flex=\"50\">\n                            </material-form-field>\n                        </div>\n                    </form>\n                </md-content>\n            </md-tab>\n            <md-tab label=\"{{vm.labels.AssociatedProduct}}\" md-on-select=\"vm.onTabSelect()\">\n                <md-content>\n                    <div class=\"associated-product-list\">\n                        <div layout=\"row\" class=\"associated-product-list-header\">\n                            <div flex=\"40\">{{vm.labels.ProductName}}</div>\n                            <div flex=\"20\">{{vm.labels.ProductCode}}</div>\n                            <div flex=\"20\">{{vm.labels.ConfigurationType}}</div>\n                            <div flex=\"20\">{{vm.labels.CatalogImage}}</div>\n                        </div>\n                        <div class=\"associated-product-list-body\">\n                            <div layout=\"row\" data-ng-repeat=\"item in vm.productList\">\n                                <div flex=\"40\">{{item.Name}}</div>\n                                <div flex=\"20\">{{item.productCode}}</div>\n                                <div flex=\"20\">{{item.configurationType}}</div>\n                                <div flex=\"20\" class=\"associated-image\">\n                                    <img class=\"image\" ng-src=\"{{'/servlet/servlet.FileDownload?file=' + item.IconId}}\" alt='Product Image' ng-if=\"item.IconId\" />\n                                    <span class=\"fa fa-image\" ng-if=\"!item.IconId\"></span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"pagination-container text-center\">\n                        <div class=\"navigation-control\">\n                            <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.productDisableLeftBtn\" data-ng-click=\"vm.getProductList('previous')\">\n                                <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                            <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                            <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.productDisableRightBtn\" data-ng-click=\"vm.getProductList('next')\">\n                                <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                        </div>\n                    </div>\n                </md-content>\n            </md-tab>\n            <md-tab label=\"ASSOCIATED RULES\" md-on-select=\"vm.onTabSelect()\">\n                <md-content>\n                    <div class=\"product-groups-rules\">\n                        <div layout=\"row\" class=\"associated-rule-header\">\n                            <div>{{vm.labels.RuleName}}</div>\n                        </div>\n                        <div class=\"associated-rule-body\">\n                            <div layout=\"row\" data-ng-repeat=\"item in vm.associatedRules.ConstraintRuleSOs\">\n                                <i class=\"fa fa-link\" aria-hidden=\"true\"></i>\n                                <a href=\"\" data-ng-click=\"vm.goToAssociatedRules(item, 'constraint');\">{{item.Name}}</a>\n                            </div>\n                            <div layout=\"row\" data-ng-repeat=\"item in vm.associatedRules.ProductAttributeRuleSOs\">\n                                <i class=\"fa fa-sliders\" aria-hidden=\"true\"></i>\n                                <a href=\"\" data-ng-click=\"vm.goToAssociatedRules(item, 'productAttribute');\">{{item.Name}}</a>\n                            </div>\n                            <div layout=\"row\" data-ng-repeat=\"item in vm.associatedRules.AttributeValueMatrixSOs\">\n                                <i class=\"fa fa-table\" aria-hidden=\"true\"></i>\n                                <a href=\"\" data-ng-click=\"vm.goToAssociatedRules(item, 'attributeValueMatrix');\">{{item.Name}}</a>\n                            </div>\n                        </div>\n                    </div>\n                </md-content>\n            </md-tab>\n        </md-tabs>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <button class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.DialogCancelButton}}</button>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 391 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var createProductGroupController = function($rootScope, $scope, $stateParams, $mdDialog, i18nService, systemConstants, applicationService, associationService) {
	        var vm = this;
	
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	
	        vm.saveProductGroup = function() {
	            if (vm.frmCreateProductGroup.$valid) {
	                var ProductGroupMemberSOs = {};
	                ProductGroupMemberSOs[vm.prefix + 'ProductId__c'] = $stateParams.id;
	                var request = {
	                    'ProductGroupSO': {
	                        'Name': vm.selectedProductGroup.Name
	                    },
	                    'ProductGroupMemberSOs': []
	                }
	                request.ProductGroupSO[vm.prefix + 'Description__c'] = vm.selectedProductGroup.Description;
	                request.ProductGroupMemberSOs.push(ProductGroupMemberSOs);
	                associationService.createProductGroup(request).then(function(response) {
	                    if (response && response.ProductGroupSO.Id) {
	                        $mdDialog.hide(response);
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else {
	                vm.frmCreateProductGroup.$setSubmitted();
	            }
	        }
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	    };
	
	    createProductGroupController.$inject = [
	        '$rootScope',
	        '$scope',
	        '$stateParams',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'applicationService',
	        'associationService',
	    ];
	
	    module.exports = createProductGroupController;
	})();


/***/ }),
/* 392 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"create-product-group-dialog\" ng-cloak>\n    <form name=\"vm.frmCreateProductGroup\" novalidate>\n        <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n            </i>\n        </button>\n        <md-dialog-content class=\"dialog-content\">\n            <md-tabs md-border-bottom>\n                <md-tab label=\"{{vm.labels.NewProductGroup}}\">\n                    <md-content class=\"md-padding\">\n                        <div layout=\"row\" class=\"md-padding\">\n                            <material-form-field model=\"vm.selectedProductGroup.Name\" field-type=\"string\" is-editable=\"true\" field-label=\"vm.labels.Name\" name=\"name\" flex=\"50\" is-required=\"true\">\n                            </material-form-field>\n                        </div>\n                        <div layout=\"row\" class=\"form-error-message\" ng-messages=\"vm.frmCreateProductGroup.name.$error\" ng-if=\"vm.frmCreateProductGroup.name.$touched || vm.frmCreateProductGroup.$submitted\">\n                            <p ng-message=\"required\" flex=\"50\" class=\"formError\" role=\"alert\">\n                                {{vm.labels.Name}} must be entered\n                            </p>\n                        </div>\n                        <div layout=\"row\" class=\"md-padding description-error\">\n                            <material-form-field model=\"vm.selectedProductGroup.Description\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.Description\" flex=\"50\" max-length=\"255\" name=\"description\">\n                            </material-form-field>\n                        </div>\n                        <div layout=\"row\" class=\"form-error-message\" ng-messages=\"vm.frmCreateProductGroup.description.$error\">\n                            <p ng-message=\"maxlength\" flex=\"50\" class=\"formError\" role=\"alert\">\n                                {{::vm.labels.FormDescriptionMaxCharError | mergeMessage:vm.labels.Description}}\n                            </p>\n                        </div>\n                    </md-content>\n                </md-tab>\n            </md-tabs>\n        </md-dialog-content>\n        <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancel()\">{{vm.labels.DialogCancelButton}}</button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.saveProductGroup()\">{{vm.labels.DialogSaveButton}}</button>\n        </md-dialog-actions>\n    </form>\n</md-dialog>\n"

/***/ }),
/* 393 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var createCategoryController = function ($scope, $mdDialog, data, systemConstants, i18nService, associationService,optionsService, $stateParams, cpqAdminConstants, $q, productDetailService,
	        applicationService, productConstants, $state, catalogDetailService, currentCategory, _ ) {
	
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        var catalogTypes = (typeof vm.catalogTypes == "object") ? vm.catalogTypes : null;
	        var currentCategoryType = catalogTypes ? vm.catalogTypes[0] : vm.labels.Offering; // 'Offering' is the default if catalogTypes is not defined 
	        
	        if($state.current.name.indexOf('catalog') !== -1) {
	            vm.modalHeader = vm.labels.CreateNewCategory;
	            vm.modalSearchPlaceHolder = vm.labels.SearchParentCategory;
	        } else {
	            vm.modalHeader = vm.labels.CreateNewOG;
	            vm.modalSearchPlaceHolder = vm.labels.SearchParentOG;
	        }
	
	        vm.searchCategory = function (priceListValue, searchText, pageNumber) {
	            vm.currentPage = pageNumber;
	            associationService.getTreeData({
	                PriceListId: null,
	                ChunkNumber: pageNumber,
	                SearchString: vm.searchText || '',
	                NumberOfCategoriesPerChunk: productConstants.treePanelItemsPerChunk,
	                HasZeroProductCount: true,
	                Types: catalogTypes
	            }).then(function(response) {
	                vm.data = response.CategoryNodeDOs;
	                vm.isMaxSQLSizeExceed = false;
	                if (vm.data.length === 0) {
	                    vm.searchedStr = searchText;
	                }
	                else {
	                    updateTreeData(vm.data);
	                    setIsChosen(vm.data);
	                }
	                document.querySelector('.tree-wrapper').scrollTop = 0;
	            }, function(reason) {
	                if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                    vm.data = [];
	                    vm.isMaxSQLSizeExceed = true;
	                } else {
	                    applicationService.showErrorMessage(reason);
	                }
	            });
	        };
	
	        vm.cancel = function() {
	            $mdDialog.hide();
	        };
	        vm.saveCategory = function() {
	            if (vm.frmCreateCategory.$valid) {
	                var request = { CategoryDOs: [] };
	                if (vm.parentCategory.length == 0) {
	                    var CategoryDO = { CategorySO: { Name: vm.Name } };
	                    CategoryDO.CategorySO[prefix + 'HierarchyLabel__c'] = vm.Label;
	                    CategoryDO.CategorySO[prefix + 'Active__c'] = vm.IsActive;
	                    CategoryDO.CategorySO[prefix + 'Type__c'] = vm.Type;
	                    request.CategoryDOs.push(CategoryDO);
	                } else {
	                    for (var i = 0; i < vm.parentCategory.length; i++) {
	                        request.CategoryDOs.push({ HierarchyId: vm.parentCategory[i].Id });
	                    }
	                    request.CategoryHierarchySO = { Name: vm.Name };
	                    request.CategoryHierarchySO[prefix + 'Label__c'] = vm.Label;
	                    request.CategoryHierarchySO[prefix + 'Description__c'] = vm.Description;
	                    request.CategoryHierarchySO[prefix + 'LongDescription__c'] = vm.LongDescription || "";
	                    request.CategoryHierarchySO[prefix + 'HideAllSearchFilters__c'] = vm.HideAllSearchFilters || false;
	                    request.CategoryHierarchySO[prefix + 'ExpandedByDefault__c'] = vm.ExpandedByDefault || false;
	                    request.CategoryHierarchySO[prefix + 'IncludeInTotalsView__c'] = vm.IncludeInTotalsView || false;
	                    request.CategoryHierarchySO[prefix + 'DefaultSearchCategory__c'] = vm.DefaultSearchCategory || false;
	                }
	                associationService.createCategory(request).then(function(response) {
	                    if (response && response.CategoryDOs.length > 0) {
	                        saveImage(response.CategoryDOs, request.CategoryHierarchySO).then(function(res) {
	                             if (res) {
	                                if ($stateParams.id !== undefined ) {
	                                    var objHierarchyDO = {
	                                        HierarchyDOs: []
	                                    };
	                                    objHierarchyDO.ProductIds = [];
	                                    const productPrefix = "01t"
	                                    if($stateParams.id.startsWith(productPrefix))
	                                        objHierarchyDO.ProductId = $stateParams.id;
	                                    objHierarchyDO.OptionGroupIds = [];
	                                    objHierarchyDO.isCascadeGroupChanges = true;
	                                    for (var i = 0; i < response.CategoryDOs.length; i++) {
	                                        objHierarchyDO.OptionGroupIds.push(response.CategoryDOs[i].HierarchyId);
	                                    }
	                                    optionsService.buildHierarchy(objHierarchyDO).then(function (response) {
	                                        
	                                    }, function(reason) {
	                                        applicationService.showErrorMessage(reason);
	                                    });
	                                }
	                            }    
	                            if (res && $state.current.parent === 'app.product' && $state.current.name === 'app.catalog.manageCatalogList') 
	                            {
	                                var associatedCategories = [];
	                                for (var i = 0; i < response.CategoryDOs.length; i++) {
	                                    associatedCategories.push({ ClsHierarchySO: { Id: response.CategoryDOs[i].HierarchyId } });
	                                }
	                                associationService.addCategoriesById($stateParams.id, associatedCategories)
	                                    .then(function(res) {
	                                        $mdDialog.hide(res);
	                                    }, function(reason) {
	                                        applicationService.showErrorMessage(reason);
	                                    });
	                            } else {
	                                $mdDialog.hide(res);
	                            }
	                        });
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else {
	                vm.frmCreateCategory.$setSubmitted();
	            }
	        };
	
	        function saveImage(CategoryDOs, CategoryHierarchySO) {
	            var deferQ = $q.defer();
	            if (vm.fileDetails && vm.fileDetails.source != '') {
	                var attachmentRequestDOs = [];
	
	                var blob = vm.fileDetails.source.replace(/^data:image\/(png|jpg|jpeg);base64,/, "").replace(/^data:application\/(pdf|msword);base64,/, "");
	                for (var i = 0; i < CategoryDOs.length; i++) {
	                    attachmentRequestDOs.push({
	                        parentId: CategoryDOs[i].HierarchyId,
	                        AttachmentName: vm.fileDetails.name,
	                        attachmentBody: blob
	                    });
	                }
	
	                productDetailService.uploadAttachments(attachmentRequestDOs)
	                    .then(function(response) {
	                            if (response.length > 0) {
	                                var request = [];
	                            
	                                angular.forEach(CategoryDOs, function(item, key) {
	                                    CategoryHierarchySO.Id = item.HierarchyId;
	                                    CategoryHierarchySO[prefix + 'LargeIconId__c'] = response[key];
	                                    request.push(angular.copy(CategoryHierarchySO));
	                                });
	
	                                catalogDetailService.updateCateogryHierarchies(request).then(function(res) {
	                                    if (res) {
	                                        deferQ.resolve(true);
	                                    }
	                                }, function(reason) {
	                                    applicationService.showErrorMessage(reason);
	                                });
	
	                            }
	                        },
	                        function(reason) {
	                            applicationService.showErrorMessage(reason);
	                            deferQ.reject(reason);
	                        });
	            } else {
	                deferQ.resolve(true);
	            }
	            return deferQ.promise;
	        }
	
	        $scope.uploadImage = function(event) {
	            var files = event.target.files || event.originalEvent.dataTransfer.files;
	            for (var i = 0; i < files.length; i++) {
	                var file = files[i];
	                if (file.size <= cpqAdminConstants.IMAGE_SIZE) {
	                    var reader = new FileReader();
	                    var fileObj = files[i];
	                    //This below code block is detching scope and the element. 
	                    //We might need to use $apply down the line to refresh the image data model
	                    reader.onload = (function(fileObj) {
	                        return function(eventObj) {
	                            var fileType = fileObj.name.substr(fileObj.name.lastIndexOf('.') + 1);
	                            vm.fileDetails = {
	                                name: fileObj.name,
	                                source: eventObj.target.result,
	                                type: fileType
	                            };
	                            $scope.$apply();
	                        }
	                    })(fileObj);
	                    reader.readAsDataURL(file);
	                } else {
	                    alert(file.name + ' ' + vm.labels.ImageSizeExceeded);
	                }
	            }
	            event.target.value = '';
	        };
	
	        function updateParentCategory(array) {
	            for (var i = 0; i < array.length; i++) {
	                var index = _.findIndex(vm.parentCategory, function (field) {
	                    return (field.Id === array[i].ClsHierarchySO.Id);
	                });
	                if (array[i].isChosen) {
	                    if (index == -1) {
	                        vm.parentCategory.push({ Id: array[i].ClsHierarchySO.Id, Label: array[i].ClsHierarchySO[prefix + 'Label__c'] });
	                    }
	                } else {
	                    if (index > -1) {
	                        vm.parentCategory.splice(index, 1);
	                    }
	                }
	                if (array[i].ChildCategoryDOs && array[i].ChildCategoryDOs.length > 0) {
	                    updateParentCategory(array[i].ChildCategoryDOs);
	                }
	            }
	            if (vm.parentCategory.length > 0) {
	                vm.isSubCategory = true;
	            } else {
	                vm.isSubCategory = false;
	            }
	        }
	
	        var deRegisterFunc = $scope.$watch('vm.data', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                updateParentCategory(vm.data);
	            }
	        }, true);
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            vm = null;
	        });
	
	        function updateTreeData(array) {
	            for (var i = 0; i < array.length; i++) {
	                if (array[i].ClsHierarchySO[prefix + 'ProductCount__c'] && array[i].ClsHierarchySO[prefix + 'ProductCount__c'] > 0) {
	                    array[i].isSelected = true;
	                } else if (array[i].ChildCategoryDOs && array[i].ChildCategoryDOs.length > 0) {
	                    updateTreeData(array[i].ChildCategoryDOs);
	                }
	            }
	        }
	
	        vm.onNameFieldBlur = function() {
	            if (vm.frmCreateCategory.name.$viewValue !== null || vm.Name !== null) {
	                vm.Label = vm.frmCreateCategory.name.$viewValue || vm.Name;
	            }
	        };
	
	        function setIsChosen(array) {
	            for (var i = 0; i < array.length; i++) {
	                var index = _.findIndex(vm.parentCategory, function (field) {
	                    return (field.Id === array[i].ClsHierarchySO.Id);
	                });
	                if (index > -1) {
	                    array[i].isChosen = true;
	                }
	                else if (array[i].isChosen) {
	                    array[i].isChosen = false;
	                }
	                if (array[i].ChildCategoryDOs && array[i].ChildCategoryDOs.length > 0) {
	                    setIsChosen(array[i].ChildCategoryDOs);
	                }
	            }
	        }
	
	        vm.removeParent = function (index, item) {
	            vm.parentCategory.splice(index, 1);
	            setIsChosen(vm.data);
	        };
	
	        vm.expandCollapseMiddlePanel = function () {
	            var el = angular.element(document.querySelector('.create-category-dialog .dialog-left'));
	            el.toggleClass('middlepanel-hidden');
	            el = angular.element(document.querySelector('.create-category-dialog .dialog-center'));
	            el.toggleClass('middlepanel-hidden');
	            el = angular.element(document.querySelector('.create-category-dialog .dialog-right'));
	            el.toggleClass('middlepanel-hidden');
	        };
	
	        function onLoad() {
	            vm.parentCategory = [];
	            vm.currentPage = 1;
	            vm.pageType = 'categories';
	            vm.nodeLabel = prefix + 'Label__c';
	            vm.tooltipField = 'Name';
	            vm.data = angular.copy(data);
	            if (currentCategory && ((currentCategory[prefix + 'ProductCount__c'] === 0 && currentCategory[prefix + 'IsLeaf__c'] === 'Yes') || currentCategory[prefix + 'IsLeaf__c'] === 'No')) {
	                vm.parentCategory.push({ Id: currentCategory.Id, Label: currentCategory[prefix + 'Label__c'] });
	            }
	            vm.searchCategory(null, '', 1);
	
	            vm.typePicklistEntries = {
	                PicklistValues: [{
	                    label: currentCategoryType,
	                    value: currentCategoryType
	                }, {
	                    label: vm.labels.OfferingAndOptionGroup,
	                    value: 'Both'
	                }]
	            };
	            vm.Type = currentCategoryType; 
	            vm.IsActive = true;
	            vm.IncludeInTotalsView = true;
	        }
	
	        onLoad();
	    };
	
	    createCategoryController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'data',
	        'systemConstants',
	        'i18nService',
	        'associationService',
	        'optionsService',
	        '$stateParams',
	        'cpqAdminConstants',
	        '$q',
	        'productDetailService',
	        'applicationService',
	        'productConstants',
	        '$state',
	        'catalogDetailService',
	        'currentCategory',
	        'lodash'
	    ];
	
	    module.exports = createCategoryController;
	})();


/***/ }),
/* 394 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"category-dialog create-category-dialog\" ng-cloak>\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h4>{{vm.modalHeader}}</h4>\n            <span flex></span>\n            <button class=\"slds-button slds-button--icon\" ng-click=\"vm.cancel()\">\n                <i class=\"material-icons\">clear</i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"dialog-content\">\n        <div class=\"dialog-left md-padding leftTreeContainer middlepanel-hidden\">\n            <div class=\"categories-left-tree-container\">\n                <form novalidate ng-submit=\"vm.searchCategory(null, vm.searchText, 1);\">\n                    <div class=\"search\">\n                        <div class=\"search-input-container\">\n                            <div class=\"input-group\">\n                                <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required drop-disable />\n                                <label class=\"ng-binding\">{{vm.modalSearchPlaceHolder}}</label>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n                <div data-ng-if=\"vm.data.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                    {{vm.labels.MaxSQLSizeExceedMessage}}\n                </div>\n                <div data-ng-if=\"vm.data.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                    {{vm.labels.NoMatchingCategories}} <span><b>{{vm.searchedStr}}</b></span>\n                </div>\n                <div class=\"categories-create-tree-container\">\n                    <tree-container data=\"vm.data\" header-text=\"vm.treeHeader\" page-type=\"'categories'\" node-children=\"'ChildCategoryDOs'\" tooltip-field=\"vm.tooltipField\" node-label=\"vm.nodeLabel\"\n                                    is-choosable=\"true\" search=\"vm.searchCategory\" class=\"categories-create-tree-container\" current-page=\"vm.currentPage\">\n                    </tree-container>\n                </div>\n            </div>\n        </div>\n        <div class=\"treePanelToSlide\" ng-click=\"vm.expandCollapseMiddlePanel();\" role=\"button\" tabindex=\"0\">\n            <i class=\"material-icons\">keyboard_arrow_right</i>\n        </div>\n        <div class=\"dialog-center md-padding middlepanel-hidden\">\n            <h4 class=\"tree-header\">{{vm.labels.ParentCategory}}</h4>\n            <div class=\"dnd-container\">\n                <ul dnd-list=\"vm.parentCategory\" dnd-drop=\"vm.addCategory(event, index, item)\">\n                    <li ng-repeat=\"item in vm.parentCategory\" dnd-moved=\"vm.parentCategory.splice($index, 1)\" dnd-draggable=\"item\">\n                        <!-- Each breadcrumb design starts here -->\n                        <div>\n                            <a class=\"delete\" ng-click=\"vm.removeParent($index, item)\" href=\"\">\n                                <i class=\"material-icons\">clear</i>\n                            </a>\n                            <span>{{item.Label}}</span>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n        <div class=\"dialog-right md-padding middlepanel-hidden\">\n            <form name=\"vm.frmCreateCategory\" novalidate>\n                <div class=\"input-group-container create-category-field-name\">\n                    <material-form-field model=\"vm.Name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.Name\" is-required=\"true\" name=\"name\" on-blur=\"vm.onNameFieldBlur()\">\n                    </material-form-field>\n                    <div ng-messages=\"vm.frmCreateCategory.name.$error\" ng-if=\"vm.frmCreateCategory.name.$touched || vm.frmCreateCategory.$submitted \">\n                        <p ng-message=\"required\" class=\"formError\">\n                            {{vm.labels.MandatoryField}}\n                        </p>\n                    </div>\n                </div>\n                <div class=\"input-group-container create-category-field-label\">\n                    <material-form-field model=\"vm.Label\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.LabelText\" is-required=\"true\" name=\"label\">\n                    </material-form-field>\n                    <div ng-messages=\"vm.frmCreateCategory.label.$error\" ng-if=\"vm.frmCreateCategory.label.$touched || vm.frmCreateCategory.$submitted \">\n                        <p ng-message=\"required\" class=\"formError\">\n                            {{vm.labels.MandatoryField}}\n                        </p>\n                    </div>\n                </div>\n                <div ng-hide=\"vm.isSubCategory\">\n                    <div class=\"input-group-container\">\n                        <material-form-field model=\"vm.Type\" field-type=\"PICKLIST\" is-editable=\"true\" field-label=\"vm.labels.Type\" is-required=\"true\" name=\"type\" properties=\"vm.typePicklistEntries\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.frmCreateCategory.type.$error\" ng-if=\"vm.frmCreateCategory.type.$touched || vm.frmCreateCategory.$submitted \">\n                            <p ng-message=\"required\" class=\"alert alert-danger formError\" role=\"alert\">\n                                {{vm.labels.MandatoryField}}\n                            </p>\n                        </div>\n                    </div>\n                    <div class=\"input-group-container\">\n                        <material-form-field model=\"vm.IsActive\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.Active\" element-id=\"active\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div ng-if=\"vm.isSubCategory\">\n                    <div class=\"input-group-container\">\n                        <material-form-field model=\"vm.DefaultSearchCategory\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.DefaultSearchCategory\" element-id=\"default_search_category\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"input-group-container\">\n                        <material-form-field model=\"vm.ExpandedByDefault\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.ExpandedByDefault\" element-id=\"expanded_by_default\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"input-group-container\">\n                        <material-form-field model=\"vm.HideAllSearchFilters\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.HideAllSearchFilters\" element-id=\"hide_all_search_filters\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"input-group-container\">\n                        <material-form-field model=\"vm.IncludeInTotalsView\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.IncludeInTotalsView\" element-id=\"include_in_totals_view\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"input-group-container\">\n                        <material-form-field model=\"vm.Description\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.Description\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"form-group angular-wysiwyg\">\n                        <label for=\"LongDescription\" class=\"detailsLabelColor\">{{vm.labels.LongDescription}}</label>\n                        <wysiwyg textarea-id=\"question\" textarea-class=\"form-control\" textarea-height=\"180px\" textarea-name=\"textareaQuestion\" textarea-required ng-model=\"vm.LongDescription\" enable-bootstrap-title=\"true\"></wysiwyg>\n                    </div>\n                    <div class=\"upload-image-label\">{{vm.labels.UploadImage}}</div>\n                    <label class=\"slds-button slds-button_neutral upload-image-button\" for=\"file-input\">\n                        {{vm.labels.Browse}}\n                    </label>\n                    <img ng-src=\"{{vm.fileDetails.source}}\" alt=\"Category Image\" width=\"100\" data-ng-if=\"vm.fileDetails.source\" />\n                    <input id=\"file-input\" type=\"file\" class=\"hide\" onchange=\"angular.element(this).scope().uploadImage(event)\">\n                </div>\n            </form>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancel()\">{{vm.labels.DialogCancelButton}}</button>\n        <button class=\"slds-button slds-button_brand\" ng-click=\"vm.saveCategory()\">{{vm.labels.DialogSaveButton}}</button>\n    </md-dialog-actions>\n\n</md-dialog>\n"

/***/ }),
/* 395 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productAssociationService = function($q, $timeout, $filter, remoteService, systemConstants) {
	        var finalList = [],
	            filter,
	            prefix = systemConstants.nsPrefix || '';
	
	        function treeToFlat(obj) {
	            if (angular.isArray(obj)) {
	                for (var item in obj) {
	                    treeToFlat(obj[item]);
	                }
	            } else if (typeof obj !== 'function') {
	                if (obj.ChildCategoryDOs.length > 0) {
	                    treeToFlat(obj.ChildCategoryDOs);
	                } else {
	                    finalList.push(obj);
	                }
	            }
	        }
	
	        var parentList = [],
	            entireList = [];
	
	        /**
	         * Out of the tree data model, this method finds out the entire heirarchy of the selected leaf node.
	         * Traced backward from selected leaf node up towards its parent.
	         */
	        function getParentTrace(obj, nodeId) {
	            var node = {};
	            if (nodeId) {
	                for (var item = 0; item < obj.length; item++) {
	                    if (obj[item].ClsHierarchySO.Id === nodeId) {
	                        node = obj[item];
	                        if (parentList.indexOf(node.ClsHierarchySO[prefix + 'Label__c']) == -1) {
	                            parentList.push(node.ClsHierarchySO[prefix + 'Label__c']);
	                            getParentTrace(entireList, node.ClsHierarchySO[prefix + 'AncestorId__c']);
	                        }
	                    } else if (obj[item].ChildCategoryDOs && obj[item].ChildCategoryDOs.length > 0) {
	                        getParentTrace(obj[item].ChildCategoryDOs, nodeId);
	                    }
	                }
	            }
	        }
	
	        function prepareCategoriesList(data) {
	            entireList = data;
	            finalList = [];
	            if (data && data.length > 0) {
	                for (var i = 0; i < data.length; i++) {
	                    treeToFlat(data[i]);
	                }
	                if (finalList && finalList.length > 0) {
	                    for (var node = 0; node < finalList.length; node++) {
	                        parentList = [];
	                        getParentTrace(data, finalList[node].ClsHierarchySO[prefix + 'AncestorId__c']);
	                        var breadcrumb = parentList.reverse();
	                        breadcrumb.push(finalList[node].ClsHierarchySO[prefix + 'Label__c']);
	                        finalList[node].breadcrumb = breadcrumb;
	                    }
	                }
	            }
	            return finalList;
	        }
	
	        function getCategoriesByProductCode(productCode) {
	            var deferQ = $q.defer();
	            remoteService.getAssociatedCategories(productCode)
	                .then(function(response) {
	                    deferQ.resolve(prepareCategoriesList(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	
	        }
	
	        function getPriceListsAssociatedToCategory(requestObj) {
	            return remoteService.getPriceListsAssociatedToCategory(requestObj);
	        }
	
	        function getTreeData(request) {
	            return remoteService.getFullCatalogHierarchy(request, true);
	        }
	
	        function getProductsByCategory(categoryId) {
	            return remoteService.getProductsAssociatedToCategory(categoryId);
	        }
	
	        function addCategoriesById(productID, payload) {
	            if (payload && payload.length > 0) {
	                var request = {
	                    ProductDOs: []
	                };
	                for (var i = 0; i < payload.length; i++) {
	                    request.ProductDOs.push({
	                        ProductSO: {
	                            Id: productID
	                        },
	                        CategoryId: payload[i].ClsHierarchySO.Id
	                    });
	                }
	                return remoteService.associateCategories(request);
	            }
	        }
	
	        function removeCategoriesById(productID, payload) {
	            if (payload && payload.length > 0) {
	                var request = {
	                    ProductDOs: []
	                };
	                for (var i = 0; i < payload.length; i++) {
	                    request.ProductDOs.push({
	                        ProductSO: {
	                            Id: productID
	                        },
	                        CategoryId: payload[i].ClsHierarchySO.Id
	                    });
	                }
	                return remoteService.removeProductFromCategory(request);
	            }
	        }
	
	
	        function createCategory(payload) {
	            return remoteService.createCategories(payload);
	        }
	
	        function getCategoryById(categoryCode) {
	            var deferQ = $q.defer();
	            remoteService.getCategoryDetails(categoryCode)
	                .then(function(response) {
	                    deferQ.resolve(response.ClsHierarchySO);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function createProductGroup(payload) {
	            return remoteService.createProductGroup(payload);
	        }
	
	        /**
	         * - Get list of product groups
	         */
	        function getAllProductGroups(request) {
	            var deferQ = $q.defer();
	            remoteService.getAllProductGroups(request).then(function(response) {
	                deferQ.resolve(prepareProductGroupList(response));
	            }, function(reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        function prepareProductGroupList(rawObj) {
	            var response = rawObj.ProductGroupDOs;
	            var productGroupList = [];
	            if (angular.isDefined(rawObj)) {
	                for (var item in response) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        productGroupList.push({
	                            Id: response[item].ProductGroupSO.Id,
	                            Name: response[item].ProductGroupSO.Name
	                        });
	                    }
	                }
	            }
	            return productGroupList;
	        }
	
	        /** 
	         * - Get product group details by id 
	         */
	        function getProductGroupDetailsById(productGroupId, retrieveProducts) {
	            var deferQ = $q.defer();
	            /**
	             * - Second parameter is boolean value
	             * - pass true value for retrieve associated product to the product group 
	             * - If you don't need the associiated product infromation pass false   
	             */
	            remoteService.getProductGroupDetails(productGroupId, retrieveProducts)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function getAssociatedProductsForProductGroup(request) {
	            var deferQ = $q.defer();
	            remoteService.getProductsForProductGroup(request)
	                .then(function(response) {
	                    deferQ.resolve(prepareAssociatedProduct(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function getAssociatedRulesByProductGroupId(productGroupId) {
	            var deferQ = $q.defer();
	            remoteService.getRulesForProductGroup(productGroupId)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function prepareAssociatedProduct(rawObj) {
	            var response = rawObj.ProductGroupMemberSOs;
	            var productList = [];
	            if (angular.isDefined(rawObj)) {
	                for (var item in response) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        var product = {};
	                        product.Id = response[item][prefix + 'ProductId__r'].Id; 
	                        product.Name = response[item][prefix + 'ProductId__r'].Name;
	                        product.productGroupMemberId = response[item].Id;
	                        product.productCode = response[item][prefix + 'ProductId__r'].ProductCode;
	                        product.configurationType = response[item][prefix + 'ProductId__r'][prefix + 'ConfigurationType__c'];
	                        product.IconId = response[item][prefix + 'ProductId__r'][prefix + 'IconId__c'];
	                        productList.push(product);
	                    }
	                }
	            }
	            return productList;
	        }
	
	        function addProductGroupToProduct(payload) {
	            var deferQ = $q.defer();
	            var ProductGroupMemberSOs = {};
	            ProductGroupMemberSOs[prefix + 'ProductId__c'] = payload.Id;
	            ProductGroupMemberSOs[prefix + 'Sequence__c'] = payload.Sequence;
	            var request = {
	                'ProductGroupId': payload.productGroupId,
	                'ProductGroupMemberSOs': []
	            }
	            request.ProductGroupMemberSOs.push(ProductGroupMemberSOs);
	            remoteService.addProductsToProductGroup(request)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function removeProductGroupFromProduct(request) {
	            return remoteService.removeProductsFromProductGroup(request);
	        }
	
	        /**
	         * - Get all associated product groups by product id
	         */
	        function getAssociatedProductGroupsByProductId(payload) {
	            var deferQ = $q.defer();
	            remoteService.getProductGroupsForProduct(payload)
	                .then(function(response) {
	                    deferQ.resolve(prepareProductGroups(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function prepareProductGroups(rawObj) {
	            var response = rawObj.ProductGroupDOs;
	            var productGroupList = [];
	            if (angular.isDefined(rawObj)) {
	                for (var item in response) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        productGroupList.push({
	                            Id: response[item].ProductGroupSO.Id,
	                            Name: response[item].ProductGroupSO.Name,
	                        });
	                    }
	                }
	            }
	            return productGroupList;
	        }
	
	        function getProductsForCategory(categoryId) {
	            var deferQ = $q.defer();
	            remoteService.getProductsForCategory({ CategoryId: categoryId }).then(function (response) {
	                response.ProductClassificationSOs.sort(function (a, b) {
	                    if (a[prefix + 'Sequence__c'] > b[prefix + 'Sequence__c']) {
	                        return 1;
	                    }
	                    if (a[prefix + 'Sequence__c'] < b[prefix + 'Sequence__c']) {
	                        return -1;
	                    }
	                    // a must be equal to b
	                    return 0;
	                });
	                deferQ.resolve(response.ProductClassificationSOs);
	            }, function (reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        var associationService = {
	            /* Category */
	            getTreeData: getTreeData,
	            getCategoriesByProductCode: getCategoriesByProductCode,
	            getProductsByCategory: getProductsByCategory,
	            getPriceListsAssociatedToCategory: getPriceListsAssociatedToCategory,
	            addCategoriesById: addCategoriesById,
	            removeCategoriesById: removeCategoriesById,
	            prepareCategoriesList: prepareCategoriesList,
	            createCategory: createCategory,
	            getCategoryById: getCategoryById,
	            getProductsForCategory: getProductsForCategory,
	
	            /* Product Group */
	            addProductGroupToProduct: addProductGroupToProduct,
	            removeProductGroupFromProduct: removeProductGroupFromProduct,
	            createProductGroup: createProductGroup,
	            getAssociatedProductsForProductGroup: getAssociatedProductsForProductGroup,
	            getAssociatedRulesByProductGroupId: getAssociatedRulesByProductGroupId,
	            getAllProductGroups: getAllProductGroups,
	            getProductGroupDetailsById: getProductGroupDetailsById,
	            getAssociatedProductGroupsByProductId: getAssociatedProductGroupsByProductId
	        };
	
	        return associationService;
	    };
	
	    productAssociationService.$inject = ['$q', '$timeout', '$filter', 'remoteService', 'systemConstants'];
	
	    module.exports = productAssociationService;
	
	})();


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.product.option', [])
			.service('optionsService', __webpack_require__(397))
			.config(['$stateProvider', function($stateProvider) {
				$stateProvider.state('app.product.options', {
					parent: 'app.product',
					url: '/:id/options',
					views: {
						'productContainer': {
							template: __webpack_require__(398),
							controller: __webpack_require__(399),
							controllerAs: 'vm'
	
						}
					},
					resolve: {
						optionsList: ['optionsService', '$stateParams', function(optionsService, $stateParams) {
							return optionsService.getOptionsList($stateParams.id);
						}],
						updateSelectedProduct: ['optionsService', '$stateParams', function(optionsService, $stateParams) {
							return optionsService.updateSelectedProduct($stateParams.id);
						}]
					}
				});
			}]);
	})();

/***/ }),
/* 397 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var productOptionService = function ($q, $http, remoteService, systemConstants, productService, applicationService, productConstants) {
	        var prefix = systemConstants.nsPrefix || '';
	
	        function getOptionsTreeList(requestObj) {
	            var deferQ = $q.defer();
	            remoteService.getAllProducts(requestObj)
	                .then(function(response) {
	                        var products = response.ProductSOs;
	                        for (var i = 0; i < products.length; i++) {
	                            products[i].nodeId = products[i].Id;
	                            products[i].productId = products[i].Id;
	                            products[i].label = products[i].Name;
	                            if (requestObj.ConfigTypes.indexOf('option') > -1) {
	                                products[i].nodeType = 'option';
	                            }
	                        }
	                        response.Products = products;
	                        deferQ.resolve(response);
	                    },
	                    function(reason) {
	                        deferQ.reject(reason);
	                    });
	            return deferQ.promise;
	        }
	
	        function getOptionsList(productId) {
	            var request = {
	                ProductIds: [productId]
	            };
	            return remoteService.getProductStructure(request);
	        }
	
	        function getProductStructure(productId) {
	            var request = {
	                ProductIds: [productId]
	            };
	            return remoteService.getProductStructure(request);
	        }
	
	
	        function buildHierarchy(request) {
	            if (!request.ParentOptionGroupId) {
	                return remoteService.buildHierarchy(request);
	            }
	            else {
	                var deferQ = $q.defer();
	                var req = angular.copy(request);
	                delete req.ProductId;
	                remoteService.createChildProductOptionGroup(req).then(function (response) {
	                    deferQ.resolve(response);
	                }, function (reason) {
	                    if (reason.message && reason.message.toLowerCase().indexOf(productConstants.hierarchyException) > -1) {
	                        request = {
	                            HierarchyDOs: [],
	                            ProductIds: [],
	                            OptionGroupIds: [request.ChildOptionGroupId],
	                            ProductId: request.ProductId
	                        };
	                        remoteService.buildHierarchy(request).then(function (response) {
	                            deferQ.resolve(response);
	                        });
	                    } else {
	                        deferQ.reject(reason);
	                    }
	                });
	                return deferQ.promise;
	            }
	        }
	
	        function getOptionGroupDetails(optionGroupId) {
	            var deferQ = $q.defer();
	            remoteService.getOptionGroupDetails(optionGroupId).then(function (response) {
	                if (response && response.ProductOptionGroupSO) {
	                    if (response.ProductOptionGroupSO[prefix + 'MinTotalQuantityExpressionId__c']
	                        && response.ProductOptionGroupSO[prefix + 'MinTotalQuantityExpressionId__c'] != '') {
	                        response.ProductOptionGroupSO[prefix + 'MinTotalQuantity__c'] = applicationService.updateExpression(true, response.ProductOptionGroupSO[prefix + 'MinTotalQuantityExpressionId__r'][prefix + 'Expression__c']);
	                    }
	                    if (response.ProductOptionGroupSO[prefix + 'MaxTotalQuantityExpressionId__c']
	                        && response.ProductOptionGroupSO[prefix + 'MaxTotalQuantityExpressionId__c'] != '') {
	                        response.ProductOptionGroupSO[prefix + 'MaxTotalQuantity__c'] = applicationService.updateExpression(true, response.ProductOptionGroupSO[prefix + 'MaxTotalQuantityExpressionId__r'][prefix + 'Expression__c']);
	                    }
	                    if (response.ChildProductOptionGroupSOs) {
	                        response.ChildProductOptionGroupSOs.sort(function (a, b) {
	                            if (a[prefix + 'Left__c'] > b[prefix + 'Left__c']) {
	                                return 1;
	                            }
	                            if (a[prefix + 'Left__c'] < b[prefix + 'Left__c']) {
	                                return -1;
	                            }
	                            // a must be equal to b
	                            return 0;
	                        });
	                    }
	                    if (response.ComponentSOs) {
	                        for (var i = 0; i < response.ComponentSOs.length; i++) {
	                            if (response.ComponentSOs[i][prefix + 'MinQuantityExpressionId__c']
	                                && response.ComponentSOs[i][prefix + 'MinQuantityExpressionId__c'] != '') {
	                                response.ComponentSOs[i][prefix + 'MinQuantity__c'] = applicationService.updateExpression(true, response.ComponentSOs[i][prefix + 'MinQuantityExpressionId__r'][prefix + 'Expression__c']);
	                            }
	                            if (response.ComponentSOs[i][prefix + 'MaxQuantityExpressionId__c']
	                                && response.ComponentSOs[i][prefix + 'MaxQuantityExpressionId__c'] != '') {
	                                response.ComponentSOs[i][prefix + 'MaxQuantity__c'] = applicationService.updateExpression(true, response.ComponentSOs[i][prefix + 'MaxQuantityExpressionId__r'][prefix + 'Expression__c']);
	                            }
	                            if (response.ComponentSOs[i][prefix + 'DefaultQuantityExpressionId__c']
	                                && response.ComponentSOs[i][prefix + 'DefaultQuantityExpressionId__c'] != '') {
	                                response.ComponentSOs[i][prefix + 'DefaultQuantity__c'] = applicationService.updateExpression(true, response.ComponentSOs[i][prefix + 'DefaultQuantityExpressionId__r'][prefix + 'Expression__c']);
	                            }
	                        }
	                    }
	                    deferQ.resolve(response);
	                }
	            }, function (reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        function setOptionGroupDetails(payload) {
	            var finalRequest = [];
	            for (var count = 0; count < payload.length; count++) {
	                /*Remove isSelected property from each object of the array
	                * and set the sequence no for re-ordering
	                */
	                var sequenceNo = 1;
	                payload[count].ComponentSOs.forEach(function (v) {
	                    delete v.isSelected;
	                    delete v.selected;
	                    v[prefix + 'Sequence__c'] = sequenceNo++;
	                });
	                sequenceNo = 1;
	                payload[count].ChildProductOptionGroupSOs.forEach(function (v) {
	                    delete v.isSelected;
	                    delete v.nodeId;
	                    delete v.objectId;
	                    delete v.nodeType;
	                    delete v[prefix + 'Left__c'];
	                    delete v[prefix + 'Right__c'];
	                    delete v[prefix + 'Sequence__c'];
	                    delete v[prefix + 'RootSequence__c'];
	                    delete v[prefix + 'IsLeaf__c'];
	                });
	                delete payload[count].ProductOptionGroupSO[prefix + 'Left__c'];
	                delete payload[count].ProductOptionGroupSO[prefix + 'Right__c'];
	                delete payload[count].ProductOptionGroupSO[prefix + 'Sequence__c'];
	                delete payload[count].ProductOptionGroupSO[prefix + 'RootSequence__c'];
	                delete payload[count].ProductOptionGroupSO[prefix + 'IsLeaf__c'];
	                var request = { ProductOptionComponentDOs: [], ProductOptionGroupSO: payload[count].ProductOptionGroupSO, ChildProductOptionGroupSOs: payload[count].ChildProductOptionGroupSOs };
	                var productOptionGroupSO = payload[count].ProductOptionGroupSO;
	                if (productOptionGroupSO[prefix + 'MinTotalQuantity__c'] && productOptionGroupSO[prefix + 'MinTotalQuantity__c'] !== '' &&
	                    isNaN(productOptionGroupSO[prefix + 'MinTotalQuantity__c'])) {
	                    request.MinTotalQuantityExpressionSO = {};
	                    request.MinTotalQuantityExpressionSO[prefix + 'Expression__c'] = applicationService.updateExpression(false, productOptionGroupSO[prefix + 'MinTotalQuantity__c']);
	
	                    //Expression default field values
	                    request.MinTotalQuantityExpressionSO[prefix + 'ExpressionType__c'] = 'Field Update';
	                    request.MinTotalQuantityExpressionSO[prefix + 'EvaluationContext__c'] = 'Record Validation';
	                    request.MinTotalQuantityExpressionSO[prefix + 'UpdateField__c'] = prefix + 'Quantity__c';
	                    request.MinTotalQuantityExpressionSO[prefix + 'UpdateObject__c'] = prefix + 'LineItem__c';
	                    request.MinTotalQuantityExpressionSO[prefix + 'SourceObject__c'] = prefix + 'LineItem__c';
	
	                    if (productOptionGroupSO[prefix + 'MinTotalQuantityExpressionId__c'] != '') {
	                        request.MinTotalQuantityExpressionSO.Id = productOptionGroupSO[prefix + 'MinTotalQuantityExpressionId__c'];
	                    }
	                    request.ProductOptionGroupSO[prefix + 'MinTotalQuantity__c'] = null;
	                }
	                else if (productOptionGroupSO[prefix + 'ProductId__c']) {
	                    request.ProductOptionGroupSO[prefix + 'MinTotalQuantityExpressionId__c'] = null;
	                }
	                if (productOptionGroupSO[prefix + 'MaxTotalQuantity__c'] && productOptionGroupSO[prefix + 'MaxTotalQuantity__c'] !== '' &&
	                    isNaN(productOptionGroupSO[prefix + 'MaxTotalQuantity__c'])) {
	                    request.MaxTotalQuantityExpressionSO = {};
	                    request.MaxTotalQuantityExpressionSO[prefix + 'Expression__c'] = applicationService.updateExpression(false, productOptionGroupSO[prefix + 'MaxTotalQuantity__c']);
	
	                    //Expression default field values
	                    request.MaxTotalQuantityExpressionSO[prefix + 'ExpressionType__c'] = 'Field Update';
	                    request.MaxTotalQuantityExpressionSO[prefix + 'EvaluationContext__c'] = 'Record Validation';
	                    request.MaxTotalQuantityExpressionSO[prefix + 'UpdateField__c'] = prefix + 'Quantity__c';
	                    request.MaxTotalQuantityExpressionSO[prefix + 'UpdateObject__c'] = prefix + 'LineItem__c';
	                    request.MaxTotalQuantityExpressionSO[prefix + 'SourceObject__c'] = prefix + 'LineItem__c';
	
	                    if (productOptionGroupSO[prefix + 'MaxTotalQuantityExpressionId__c'] != '') {
	                        request.MaxTotalQuantityExpressionSO.Id = productOptionGroupSO[prefix + 'MaxTotalQuantityExpressionId__c'];
	                    }
	                    request.ProductOptionGroupSO[prefix + 'MaxTotalQuantity__c'] = null;
	                }
	                else if (productOptionGroupSO[prefix + 'ProductId__c']) {
	                    request.ProductOptionGroupSO[prefix + 'MaxTotalQuantityExpressionId__c'] = null;
	                }
	
	                var productOptions = payload[count].ComponentSOs;
	                for (var i = 0; i < productOptions.length; i++) {
	                    var component = { ProductOptionComponentSO: productOptions[i] };
	                    if (productOptions[i][prefix + 'MinQuantity__c'] && productOptions[i][prefix + 'MinQuantity__c'] !== '' && isNaN(productOptions[i][prefix + 'MinQuantity__c'])) {
	                        component.MinQuantityExpressionSO = {};
	                        component.MinQuantityExpressionSO[prefix + 'Expression__c'] = applicationService.updateExpression(false, productOptions[i][prefix + 'MinQuantity__c']);
	
	                        //Expression default field values
	                        component.MinQuantityExpressionSO[prefix + 'ExpressionType__c'] = 'Field Update';
	                        component.MinQuantityExpressionSO[prefix + 'EvaluationContext__c'] = 'Record Validation';
	                        component.MinQuantityExpressionSO[prefix + 'UpdateField__c'] = prefix + 'Quantity__c';
	                        component.MinQuantityExpressionSO[prefix + 'UpdateObject__c'] = prefix + 'LineItem__c';
	                        component.MinQuantityExpressionSO[prefix + 'SourceObject__c'] = prefix + 'LineItem__c';
	
	                        if (productOptions[i][prefix + 'MinQuantityExpressionId__c'] != '') {
	                            component.MinQuantityExpressionSO.Id = productOptions[i][prefix + 'MinQuantityExpressionId__c'];
	                        }
	                        component.ProductOptionComponentSO[prefix + 'MinQuantity__c'] = null;
	                    }
	                    else {
	                        component.ProductOptionComponentSO[prefix + 'MinQuantityExpressionId__c'] = null;
	                    }
	                    if (productOptions[i][prefix + 'MaxQuantity__c'] && productOptions[i][prefix + 'MaxQuantity__c'] !== '' && isNaN(productOptions[i][prefix + 'MaxQuantity__c'])) {
	                        component.MaxQuantityExpressionSO = {};
	                        component.MaxQuantityExpressionSO[prefix + 'Expression__c'] = applicationService.updateExpression(false, productOptions[i][prefix + 'MaxQuantity__c']);
	
	                        //Expression default field values
	                        component.MaxQuantityExpressionSO[prefix + 'ExpressionType__c'] = 'Field Update';
	                        component.MaxQuantityExpressionSO[prefix + 'EvaluationContext__c'] = 'Record Validation';
	                        component.MaxQuantityExpressionSO[prefix + 'UpdateField__c'] = prefix + 'Quantity__c';
	                        component.MaxQuantityExpressionSO[prefix + 'UpdateObject__c'] = prefix + 'LineItem__c';
	                        component.MaxQuantityExpressionSO[prefix + 'SourceObject__c'] = prefix + 'LineItem__c';
	
	                        if (productOptions[i][prefix + 'MaxQuantityExpressionId__c'] != '') {
	                            component.MaxQuantityExpressionSO.Id = productOptions[i][prefix + 'MaxQuantityExpressionId__c'];
	                        }
	                        component.ProductOptionComponentSO[prefix + 'MaxQuantity__c'] = null;
	                    }
	                    else {
	                        component.ProductOptionComponentSO[prefix + 'MaxQuantityExpressionId__c'] = null;
	                    }
	                    if (productOptions[i][prefix + 'DefaultQuantity__c'] && productOptions[i][prefix + 'DefaultQuantity__c'] !== '' && isNaN(productOptions[i][prefix + 'DefaultQuantity__c'])) {
	                        component.DefaultQuantityExpressionSO = {};
	                        component.DefaultQuantityExpressionSO[prefix + 'Expression__c'] = applicationService.updateExpression(false, productOptions[i][prefix + 'DefaultQuantity__c']);
	
	                        //Expression default field values
	                        component.DefaultQuantityExpressionSO[prefix + 'ExpressionType__c'] = 'Field Update';
	                        component.DefaultQuantityExpressionSO[prefix + 'EvaluationContext__c'] = 'Record Update';
	                        component.DefaultQuantityExpressionSO[prefix + 'UpdateField__c'] = prefix + 'Quantity__c';
	                        component.DefaultQuantityExpressionSO[prefix + 'UpdateObject__c'] = prefix + 'LineItem__c';
	                        component.DefaultQuantityExpressionSO[prefix + 'SourceObject__c'] = prefix + 'LineItem__c';
	
	                        if (productOptions[i][prefix + 'DefaultQuantityExpressionId__c'] != '') {
	                            component.DefaultQuantityExpressionSO.Id = productOptions[i][prefix + 'DefaultQuantityExpressionId__c'];
	                        }
	                        component.ProductOptionComponentSO[prefix + 'DefaultQuantity__c'] = null;
	                    }
	                    else {
	                        component.ProductOptionComponentSO[prefix + 'DefaultQuantityExpressionId__c'] = null;
	                    }
	                    request.ProductOptionComponentDOs.push(component);
	                }
	                finalRequest.push(request);
	            }
	            return remoteService.setOptionGroupDetails(finalRequest);
	        }
	
	        function getAllOptionGroups(request) {
	            var deferQ = $q.defer();
	            remoteService.getAllOptionGroups(request)
	                .then(function(response) {
	                        var optionGroups = response.OptionGroupDOs;
	                        for (var i = 0; i < optionGroups.length; i++) {
	                            optionGroups[i].nodeId = optionGroups[i].ClsHierarchySO.Id;
	                            optionGroups[i].label = optionGroups[i].ClsHierarchySO[prefix + 'Label__c'];
	                            optionGroups[i].nodeType = 'optionGroup';
	                            if (optionGroups[i].ChildCategoryDOs && optionGroups[i].ChildCategoryDOs.length > 0) {
	                                bindChildrenToOptionGroup(optionGroups[i].ChildCategoryDOs, optionGroups[i]);
	                            }
	                        }
	                        deferQ.resolve(optionGroups);
	                    },
	                    function(reason) {
	                        deferQ.reject(reason);
	                    });
	            return deferQ.promise;
	        }
	
	        function bindChildrenToOptionGroup(children, parent) {
	            parent.childCategories = [];
	            for (var i = 0; i < children.length; i++) {
	                children[i].nodeId = children[i].ClsHierarchySO.Id;
	                children[i].label = children[i].ClsHierarchySO[prefix + 'Label__c'];
	                children[i].nodeType = 'optionGroup';
	                parent.childCategories.push(children[i]);
	                if (children[i].ChildCategoryDOs && children[i].ChildCategoryDOs.length > 0) {
	                    bindChildrenToOptionGroup(children[i].ChildCategoryDOs, children[i]);
	                }
	                else if (children[i].ProductSOs && children[i].ProductSOs.length > 0) {
	                    children[i].childCategories = [];
	                    var options = children[i].ProductSOs;
	                    for (var j = 0; j < options.length; j++) {
	                        children[i].childCategories.push({ nodeType: 'option', nodeId: options[j].Id, label: options[j].Name });
	                    }
	                }
	            }
	        }
	
	        function removeProductsFromOptionGroups(payload) {
	            var request = {
	                HierarchyDOs: [payload]
	            };
	            return remoteService.removeProductsFromOptionGroups(request);
	        }
	
	        function removeOptionGroupsFromProduct(request) {
	            return remoteService.removeOptionGroupsFromProduct(request);
	        }
	
	        /* This utility method handles two use cases. One being navigation from tab to tab and
	         * the other being user refreshes the page. In both cases, it should display the current selected 
	         * product.
	         */
	        function updateSelectedProduct(productId) {
	            var deferQ = $q.defer();
	            /* Check if there is any selected product already available or not*/
	            var product = productService.getSelectedProduct();
	            if (product && product.ProductName) {
	                deferQ.resolve(true);
	            } else {
	                /* Else load the current selected product info before moving to the page */
	                productService.getProductDetailsByCode(productId)
	                    .then(function() {
	                        deferQ.resolve(true);
	                    }, function() {
	                        deferQ.reject(false);
	                    });
	            }
	            return deferQ.promise;
	        }
	
	        function updateBundleJob(productId) {
	            return remoteService.updateBundleJob(productId);
	        }
	
	        function flat2Tree(result) {
	            var map = {},
	                node, roots = [];
	            var nodes = result;
	            for (var i = 0; i < nodes.length; i += 1) {
	                node = nodes[i];
	                node.childCategories = [
	                    []
	                ];
	                map[node.nodeId] = i; // use map to look-up the parents
	                if (node.parentId !== '0' && nodes[map[node.parentId]]) {
	                    nodes[map[node.parentId]].childCategories[0].push(node);
	                } else {
	                    roots.push(node);
	                }
	                if (node.attrGrpId && node.attrGrpDO) {
	                    for (var k = 0; k < node.attrGrpDO.ProductAttributeDOs.length; k++) {
	                        nodes[map[node.nodeId]].childCategories[0].push({
	                            nodeId: node.attrGrpDO.ProductAttributeDOs[k].ProductAttributeSO.Id,
	                            label: node.attrGrpDO.ProductAttributeDOs[k].AttributeFieldLabel,
	                            nodeType: 'attribute'
	                        });
	                    }
	                }
	            }
	            return roots;
	        }
	
	        function reorderProductOptionGroups(pogToMoveId, newLocationPogId) {
	            return remoteService.reorderProductOptionGroups(pogToMoveId, newLocationPogId);
	        }
	
	        function saveAttributesByCode(request) {
	            return remoteService.associateAttributeGroup(request);
	        }
	
	        function getAttributesTreeList(request) {
	            var defer = $q.defer();
	            remoteService.getAllAttributeGroups(request).then(function (response) {
	                var result = response.AttributeGroupDOs;
	                defer.resolve(updatePicklistToAttribute(result));
	            }, function (reason) {
	                defer.reject(reason);
	            });
	            return defer.promise;
	        }
	
	        function updatePicklistToAttribute(obj) {
	            if (angular.isArray(obj)) {
	                for (var item in obj) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        obj[item].nodeType = 'attribute-group';
	                        obj[item].Name = obj[item].AttributeGroupSO.Name;
	                        obj[item].label = obj[item].AttributeGroupSO.Name;
	                        obj[item].nodeId = obj[item].AttributeGroupSO.Id;
	                        var productAttributeDos = obj[item].ProductAttributeDOs;
	                        productAttributeDos.sort(function (a, b) {
	                            if (a.ProductAttributeSO[prefix + 'Sequence__c'] > b.ProductAttributeSO[prefix + 'Sequence__c']) {
	                                return 1;
	                            }
	                            if (a.ProductAttributeSO[prefix + 'Sequence__c'] < b.ProductAttributeSO[prefix + 'Sequence__c']) {
	                                return -1;
	                            }
	                            // a must be equal to b
	                            return 0;
	                        });
	                        if (obj[item].FieldExpressionSOs && obj[item].FieldExpressionSOs.length > 0) {
	                            var fieldExpressionSOs = obj[item].FieldExpressionSOs;
	                            for (var i = 0; i < fieldExpressionSOs.length; i++) {
	                                for (var j = 0; j < productAttributeDos.length; j++) {
	                                    if (fieldExpressionSOs[i][prefix + 'UpdateField__c'] &&
	                                        fieldExpressionSOs[i][prefix + 'UpdateField__c'].indexOf('.' + productAttributeDos[j].ProductAttributeSO[prefix + 'Field__c']) > -1) {
	                                        if (fieldExpressionSOs[i][prefix + 'Expression__c']) {
	                                            productAttributeDos[j].ProductAttributeSO.Expression = applicationService.updateExpression(true, fieldExpressionSOs[i][prefix + 'Expression__c']);
	                                        }
	                                        productAttributeDos[j].ProductAttributeSO.ExpressionId = fieldExpressionSOs[i].Id;
	                                    }
	                                }
	                            }
	                        } 
	                        for (var j = 0; j < productAttributeDos.length; j++) {
	                            productAttributeDos[j].nodeType = 'attribute';
	                            productAttributeDos[j].Name = productAttributeDos[j].AttributeFieldLabel;
	                            productAttributeDos[j].label = productAttributeDos[j].AttributeFieldLabel;
	                            productAttributeDos[j].nodeId = productAttributeDos[j].ProductAttributeSO.Id;
	                        }
	                        obj[item].childCategories = productAttributeDos;
	                    }
	
	                }
	            }
	            return obj;
	        }
	
	        function getAttributeGroupsForProduct(request) {
	            var deferQ = $q.defer();
	            remoteService.getAttributeGroupsForProduct(request).then(function (response) {
	                deferQ.resolve(updatePicklistToAttribute(response.AttributeGroupDOs));
	            }, function (reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        var optionsService = {
	            getOptionsTreeList: getOptionsTreeList,
	            getOptionsList: getOptionsList,
	            buildHierarchy: buildHierarchy,
	            getProductStructure: getProductStructure,
	            getOptionGroupDetails: getOptionGroupDetails,
	            setOptionGroupDetails: setOptionGroupDetails,
	            getAllOptionGroups: getAllOptionGroups,
	            removeProductsFromOptionGroups: removeProductsFromOptionGroups,
	            removeOptionGroupsFromProduct: removeOptionGroupsFromProduct,
	            updateSelectedProduct: updateSelectedProduct,
	            updateBundleJob: updateBundleJob,
	            flat2Tree: flat2Tree,
	            reorderProductOptionGroups: reorderProductOptionGroups,
	            saveAttributesByCode: saveAttributesByCode,
	            getAttributesTreeList: getAttributesTreeList,
	            getAttributeGroupsForProduct: getAttributeGroupsForProduct
	        };
	
	        return optionsService;
	    };
	
	    productOptionService.$inject = [
	        '$q',
	        '$http',
	        'remoteService',
	        'systemConstants',
	        'productService',
	        'applicationService',
	        'productConstants'
	    ];
	
	    module.exports = productOptionService;
	})();


/***/ }),
/* 398 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"option-page\" data-ng-class=\"vm.isRightPanelVisible?'optionSlideRight-tree-panel':'optionSlideLeft-tree-panel'\">\n        <div class=\"left-option-group left-tree tree-view\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <header>\n                <h4>{{vm.labels.OptionGroups}}</h4>\n                <div class=\"tree-toggle small-body\">\n                    <span ng-click=\"vm.expandCollpaseLeftPanel(false);\">Expand</span> |\n                    <span ng-click=\"vm.expandCollpaseLeftPanel(true);\">Collapse</span>\n                </div>\n            </header>\n            <div class=\"product-title\" ng-class=\"{selected: vm.models.selected === null}\" ng-bind=\"vm.selectedProduct.ProductName\" ng-click=\"vm.clearSelectedNode()\"></div>\n            <div ng-repeat=\"list in vm.models.lists\" class=\"option-group-list\">\n                <div class=\"dropzone\">\n                    <!-- The dropzone also uses the list template -->\n                    <div ng-include=\"'left-list.html'\"></div>\n                </div>\n            </div>\n        </div>\n        <div class=\"option-container\">\n            <div class=\"option-panels\">\n                <div class=\"title\">Details</div>\n                <uib-alert ng-repeat=\"alert in vm.alertList\" type=\"{{alert.type}}\" class=\"text-left\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n                <form novalidate name=\"vm.productOptionsForm\">\n                    <div class=\"dropzone\" ng-repeat=\"item in [vm.selectedNode]\" ng-if=\"vm.selectedNode!=null &&\n                            (vm.selectedNode.ChildProductOptionGroupSOs === undefined || vm.selectedNode.ChildProductOptionGroupSOs.length == 0)\">\n                        <div ng-include=\"'container.html'\" onload=\"item = vm.selectedNode\"></div>\n                    </div>\n                    <div class=\"dropzone\" ng-include=\"'middle-panel.html'\" ng-if=\"(vm.selectedNode==null || vm.selectedNode.nodeType=='Bundle') && !vm.attributeGroup\">\n                    </div>\n                    <div class=\"dropzone\" ng-include=\"'content-OG.html'\" ng-if=\"vm.selectedNode.ChildProductOptionGroupSOs && vm.selectedNode.ChildProductOptionGroupSOs.length > 0\">\n                    </div>\n                    <div class=\"option-group\" ng-if=\"vm.attributeGroup\">\n                        <div class=\"dropzone\" ng-repeat=\"itemAttrGrp in [vm.attributeGroup]\">\n                            <div ng-include=\"'attribute-container.html'\" onload=\"itemAttrGrp = vm.attributeGroup\"></div>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"options-footer\">\n                    <div class=\"container-fluid\">\n                        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToProductDetailsPage()\">Cancel</a>\n                        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">Save</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"treePanelToSlide\" ng-click=\"vm.isRightPanelVisible=false\">\n            <i class=\"material-icons\">keyboard_arrow_left</i>\n        </div>\n        <div class=\"option-tree-panel\">\n            <div class=\"tree-title\">\n                <header>\n                    <i class=\"material-icons\" style=\"float:right\" data-ng-click=\"vm.isRightPanelVisible=true\" aria-hidden=\"true\" role=\"button\" tabindex=\"0\">clear</i>\n                    <h4>{{vm.optionsHeader}}</h4>\n                    <div class=\"search\" style=\"margin:10px 0;\">\n                        <form ng-submit=\"vm.doSearchOptions();\" novalidate>\n                            <div class=\"search-input-container\">\n                                <div class=\"input-group\">\n                                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required drop-disable/>\n                                    <label class=\"ng-binding\">Search</label>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <material-form-field model=\"vm.options[0].value\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.options[0]\">\n                    </material-form-field>\n                </header>\n            </div>\n            <div data-ng-if=\"vm.optionsTreeList.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{vm.labels.NoMatchingOptions}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.optionsTreeList.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <tree-container data=\"vm.optionsTreeList\" header-text=\"vm.optionsHeader\" page-type='vm.type' search=\"vm.searchOptions\" node-children=\"vm.nodeChildren\" tooltip-field=\"'Name'\" node-label=\"'label'\" options=\"vm.options\" get-product-structure=\"vm.getProductStructure\" expand-collapse=\"vm.expandCollapse\" current-page=\"vm.currentPage\">\n            </tree-container>\n        </div>\n    </div>\n</div>\n<div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confirmationPopup\">\n</div>\n<div class=\"modalBody\" ng-show=\"vm.confirmationPopup\">\n    <div class=\"modalOverlay\">\n        <div class=\"modalHeaderBody\">\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelDialogContext()\"></i>\n            <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n        </div>\n        <div class=\"modal-Footer text-right\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelDialogContext()\">\n                <span class=\"modal-TextColor\">{{vm.labels.No}}</span>\n            </button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmDialogContext()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Yes}}</span>\n            </button>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    var productOptionController = function($scope, $state, _, $stateParams, $templateCache, $location, $window, optionsList, optionsService, productService, applicationService, systemConstants, i18nService,
	        updateSelectedProduct, productConstants, cpqAdminConstants, productDetailService, $mdDialog, apiCallsService, attributesService, $q, associationService, catalogConstants) {
	        $templateCache.put('list.html', __webpack_require__(400));
	        $templateCache.put('container.html', __webpack_require__(401));
	        $templateCache.put('item.html', __webpack_require__(402));
	        $templateCache.put('content.html', __webpack_require__(403));
	        $templateCache.put('content-OG.html', __webpack_require__(404));
	
	        $templateCache.put('left-list.html', __webpack_require__(405));
	        $templateCache.put('left-container.html', __webpack_require__(406));
	        $templateCache.put('left-content.html', __webpack_require__(407));
	
	        $templateCache.put('middle-panel.html', __webpack_require__(408));
	
	        var vm = this,
	            parentList = [],
	            selectedOptionProductId = undefined;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.optionsHeader = vm.labels.OptionHierarchy;
	        vm.type = 'options';
	        vm.nodeChildren = 'childCategories';
	        vm.currentPage = 1;
	        vm.isCancelClicked = false;
	        vm.colDefs = [{
	            field: 'Description'
	        }];
	        vm.allowedTypes = ['option'];
	        vm.isMaxSQLSizeExceed = false;
	        vm.isRightPanelVisible = true;
	        vm.alertList = [];
	        vm.expandCollapse = function() {
	            vm.isRightPanelVisible = true;
	        }
	
	        var leftPanelList = JSON.parse(optionsList.ProductStructureJSONs[0].Value);
	
	        leftPanelList = optionsService.flat2Tree(leftPanelList);        
	        
	        var stateName = ($state.current.name === 'app.catalog.manageCatalogList') ? vm.labels.Offering : vm.labels.OptionGroup;
	
	        var requestObj = {
	            ChunkNumber: 1,
	            NumberOfCategoriesPerChunk: catalogConstants.treePanelItemsPerChunk,
	            SearchString: '',
	            PriceListId: null,
	            Types: [stateName,"Both"],
	            HasZeroProductCount: false
	        }; 
	        associationService.getTreeData(requestObj, true)
	            .then(function(response) {
	                vm.treeData = response.CategoryNodeDOs;
	            });
	
	
	        vm.models = {
	            selected: null,
	            lists: {
	                //This data model seems to be non-confirming. Need to refactor this one.
	                'A': sortLeftList(leftPanelList, 'rootSequence')
	            }
	        };
	        setSelectedOnLoad();
	
	        var isCallFromClickonOptionGroup = false;
	        vm.changeMiddlePanel = function(node) {
	            vm.allowedTypes = ['option', 'optionBundle', undefined];
	            //vm.models.selected = node;
	            isCallFromClickonOptionGroup = true;
	            selectedOptionGroupId = '';
	            updateProductAttributeGroup().then(function(response) {
	                if (response) {
	                    delete vm.attributeGroup;
	                    saveOptionGroupDetails(node, true);
	                }
	            });
	            parentList = [];
	            getParentTrace(vm.models.lists.A, node.parentId);
	        };
	
	        /**
	         * Update the details tab HasOptions value Based on left panel length
	         */
	        vm.updateHasOptions = function() {
	            var selectedProduct = productService.getSelectedProduct();
	            var product = {};
	            product.Id = $stateParams.id;
	            product.Name = selectedProduct.productName;
	            if (vm.models.lists.A.length && vm.models.lists.A.length > 0) {
	                if (selectedProduct.hasOptions == "false" || selectedProduct.hasOptions == false) {
	                    product[vm.prefix + "HasOptions__c"] = true;
	                    selectedProduct.hasOptions = "true";
	                    vm.updateHasOptionInDetails(product, selectedProduct);
	                }
	            }
	            if (vm.models.lists.A.length == 0) {
	                product[vm.prefix + "HasOptions__c"] = false;
	                selectedProduct.hasOptions = "false";
	                vm.updateHasOptionInDetails(product, selectedProduct);
	            }
	        }
	        vm.updateHasOptionInDetails = function(productObj, selectedProductObj) {
	            productDetailService.updateHasOptions(productObj)
	                .then(function(response) {
	                    productService.setSelectedProduct(selectedProductObj);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	        vm.updateHasOptions();
	        getPicklistValues();
	
	        function getSelectedNodeDetailsForWarning(selectedNode) {
	            if (selectedNode != null && selectedNode != undefined) {
	                if (selectedNode.ProductOptionGroupSO != null && selectedNode.ProductOptionGroupSO != undefined) {
	                    cascadeGroupChanges = selectedNode.ProductOptionGroupSO[vm.prefix+'CascadeGroupChanges__c'];
	                    if (selectedNode.ProductOptionGroupSO[vm.prefix+'OptionGroupId__r'] != null && 
	                        selectedNode.ProductOptionGroupSO[vm.prefix+'OptionGroupId__r'] != undefined) {
	                        selectedNodeId = selectedNode.ProductOptionGroupSO[vm.prefix+'OptionGroupId__r']['Id'];
	                    
	                    } else {
	                        selectedNodeId = '';
	                    }
	
	                } else {
	                    cascadeGroupChanges = false;    
	                }
	            }
	        }
	
	        var warningMessageObject = {
	                                        "type": vm.labels.Confirmation,
	                                        "message": vm.labels.GlobalOGWarningMsg
	                                   }
	        var selectedOptionGroupId = '';
	        var showWarningMsg = false;
	        var selectedNodeId = '';
	        var cascadeGroupChanges = false;
	
	        function saveOptionGroupDetails(node, blChange, toState, toParams) {
	
	            if (selectedOptionGroupId == '' && isCallFromClickonOptionGroup == false) {
	                if ((vm.selectedNode != undefined && vm.selectedNode != null)) {
	                    selectedOptionGroupId = node.nodeId;
	                    showWarningMsg = true;        
	                }
	            } else if ((selectedOptionGroupId != node.nodeId) && isCallFromClickonOptionGroup == false) {
	                selectedOptionGroupId = node.nodeId;
	                showWarningMsg = true;   
	            } else {
	                showWarningMsg = false;
	            }
	            vm.massEditObj = {};
	            varToCheck = {};
	            if (vm.selectedNode == undefined || vm.selectedNode == null) {
	                if (vm.productOptionsForm && vm.productOptionsForm.$dirty) {
	                    isFormSaved = true;
	                    if (toState) {
	                        $state.go(toState, toParams);
	                    }
	                }
	                if (node) {
	                    if (node.nodeType === 'optionGroup') {
	                        optionsService.getOptionGroupDetails(node.objectId)
	                            .then(function(response) {
	                                updateLeftPanel(node);
	                                vm.selectedNode = response;
	                                getSelectedNodeDetailsForWarning(vm.selectedNode);    
	                                updateTreeOnLoad(vm.optionsTreeList);
	                                for (var i = 0; i < vm.selectedNode.ComponentSOs.length; i++) {
	                                    vm.selectedNode.ComponentSOs[i].isSelected = true;
	                                }
	                                for (var i = 0; i < vm.selectedNode.ChildProductOptionGroupSOs.length; i++) {
	                                    vm.selectedNode.ChildProductOptionGroupSOs[i].nodeId = vm.selectedNode.ChildProductOptionGroupSOs[i][vm.prefix + 'OptionGroupId__c'];
	                                    vm.selectedNode.ChildProductOptionGroupSOs[i].objectId = vm.selectedNode.ChildProductOptionGroupSOs[i].Id;
	                                    vm.selectedNode.ChildProductOptionGroupSOs[i].nodeType = 'optionGroup';
	                                    vm.selectedNode.ChildProductOptionGroupSOs[i].isSelected = true;
	                                }
	                                if (vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ContentType__c'] === 'Attributes' && vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ProductAttributeGroupMemberId__c']) {
	                                    vm.attributeGroupAutoComplete.autocomplete.selectedItem = {
	                                        Id: vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ProductAttributeGroupMemberId__r'][vm.prefix + 'AttributeGroupId__c'],
	                                        Name: vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ProductAttributeGroupMemberId__r'].Name
	                                    };
	                                    getAttributeGroupDetails(vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ProductAttributeGroupMemberId__c']);
	                                }
	                                if (showWarningMsg ==  true && cascadeGroupChanges) {
	                                    applicationService.showErrorMessage(warningMessageObject);
	                                }
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                    }
	                }
	            } else {
	                if (vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'IsPicklist__c'] === true && vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'MaxOptions__c'] != 1) {
	                    addAlert({
	                        type: cpqAdminConstants.DANGER,
	                        msg: vm.labels.ErrorMaxOptions
	                    });
	                } else {
	                    optionsService.setOptionGroupDetails([angular.copy(vm.selectedNode)])
	                        .then(function(response) {
	                            if (response == true && blChange) {
	                                if (vm.productOptionsForm && vm.productOptionsForm.$dirty) {
	                                    isFormSaved = true;
	                                    vm.productOptionsForm.$dirty = false;
	                                    addAlert({
	                                        type: cpqAdminConstants.SUCCESS,
	                                        msg: vm.labels.SavedSuccessfully
	                                    });
	                                }
	                                if (blChange) {
	                                    if (node.nodeType === 'optionGroup') {
	                                        optionsService.getOptionGroupDetails(node.objectId)
	                                            .then(function(response) {
	                                                isFormSaved = true;
	                                                updateLeftPanel(node);
	                                                vm.selectedNode = response;
	                                                getSelectedNodeDetailsForWarning(vm.selectedNode);
	                                                updateTreeOnLoad(vm.optionsTreeList);
	                                                for (var i = 0; i < vm.selectedNode.ComponentSOs.length; i++) {
	                                                    vm.selectedNode.ComponentSOs[i].isSelected = true;
	                                                }
	                                                for (var i = 0; i < vm.selectedNode.ChildProductOptionGroupSOs.length; i++) {
	                                                    vm.selectedNode.ChildProductOptionGroupSOs[i].nodeId = vm.selectedNode.ChildProductOptionGroupSOs[i][vm.prefix + 'OptionGroupId__c'];
	                                                    vm.selectedNode.ChildProductOptionGroupSOs[i].objectId = vm.selectedNode.ChildProductOptionGroupSOs[i].Id;
	                                                    vm.selectedNode.ChildProductOptionGroupSOs[i].nodeType = 'optionGroup';
	                                                    vm.selectedNode.ChildProductOptionGroupSOs[i].isSelected = true;
	                                                }
	                                                if (toState) {
	                                                    $state.go(toState, toParams);
	                                                }
	                                                if (vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ContentType__c'] === 'Attributes' && vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ProductAttributeGroupMemberId__c']) {
	                                                    vm.attributeGroupAutoComplete.autocomplete.selectedItem = {
	                                                        Id: vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ProductAttributeGroupMemberId__r'][vm.prefix + 'AttributeGroupId__c'],
	                                                        Name: vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ProductAttributeGroupMemberId__r'].Name
	                                                    };
	                                                    getAttributeGroupDetails(vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ProductAttributeGroupMemberId__c']);
	                                                }
	                                                
	                                            }, function(reason) {
	                                                applicationService.showErrorMessage(reason);
	                                            });
	                                    } 
	                                } else {
	                                    isFormSaved = true;
	                                    if (toState) {
	                                        $state.go(toState, toParams);
	                                    }
	                                }
	                                if (showWarningMsg == true && cascadeGroupChanges) {
	                                    applicationService.showErrorMessage(warningMessageObject);
	                                }
	
	                            } else {
	                                isFormSaved = true;
	                                if (toState) {
	                                    $state.go(toState, toParams);
	                                }
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                }
	            }
	        }
	
	        function updateChilds(node, isSelected) {
	            if (node.childCategories) {
	                _.each(node.childCategories, function(child) {
	                    child.isSelected = isSelected;
	                    updateChilds(child, isSelected);
	                });
	            }
	        }
	
	        function updateTree(array, nodeId, isSelected) {
	            _.each(array, function(node) {
	                if (node) {
	                    if (node.nodeId === nodeId || node.componentProductId === nodeId) {
	                        node.isSelected = isSelected;
	                        updateChilds(node, isSelected);
	                        return;
	                    } else if (node.childCategories) {
	                        updateTree(node.childCategories, nodeId, isSelected);
	                    }
	                }
	            });
	        }
	
	        vm.addOption = function(event, index, node) {
	            if (selectedNodeId != '') {
	                if (selectedOptionGroupId == '') {
	                    selectedOptionGroupId = selectedNodeId;
	                    showWarningMsg = true;
	                } else if (selectedOptionGroupId != selectedNodeId) {
	                    selectedOptionGroupId = selectedNodeId;   
	                    showWarningMsg = true;
	                } else {
	                    showWarningMsg = false;
	                }
	            } else {
	                showWarningMsg = false;
	            }
	
	            if (!Array.isArray(node) && node.isSelected !== true) {
	                node.isSelected = true;
	                //updateTree(vm.optionsTreeList, node.nodeId, true);
	                if (node.nodeType === 'attribute-group') {
	                    saveOptionGroup(node);
	                } else {
	                    var objHierarchyDO = {
	                        HierarchyDOs: []
	                    };
	                    if (node.nodeType == 'option' || node.nodeType == 'optionBundle' || node.nodeType === undefined) {
	                        objHierarchyDO.ProductId = $stateParams.id;
	                        objHierarchyDO.ProductIds = [node.componentProductId || node.nodeId];
	                        objHierarchyDO.OptionGroupIds = [];
	                        objHierarchyDO.OptionGroupId = vm.selectedNode.ProductOptionGroupSO.Id;
	                    } else if (node.nodeType == 'optionGroup') {
	                        objHierarchyDO.ProductIds = [];
	                        objHierarchyDO.ProductId = $stateParams.id;
	                        if (vm.selectedNode == null)
	                            objHierarchyDO.OptionGroupIds = [node.nodeId];
	                        else {
	                            objHierarchyDO = {
	                                ParentOptionGroupId: vm.selectedNode.ProductOptionGroupSO.Id,
	                                ChildOptionGroupId: node.nodeId,
	                                ProductId: $stateParams.id
	                            };
	                        }
	                    }
	
	                    if (vm.productOptionsForm && vm.productOptionsForm.$dirty && vm.selectedNode != null) {
	                        optionsService.setOptionGroupDetails([angular.copy(vm.selectedNode)])
	                            .then(function(response) {
	                                if (response == true) {
	                                    vm.productOptionsForm.$dirty = false;
	                                    return buildHierarchy(node, objHierarchyDO);
	                                }
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                    } else {
	                        return buildHierarchy(node, objHierarchyDO);
	                    }
	                }
	            } else {
	                if (vm.productOptionsForm) {
	                    vm.productOptionsForm.$dirty = true;
	                }
	                if (Array.isArray(node)) {
	                    angular.forEach(node, function(item) { item.selected = false; });
	                    var list = vm.selectedNode.ComponentSOs;
	                    list = list.slice(0, index)
	                        .concat(node)
	                        .concat(list.slice(index));
	                    vm.selectedNode.ComponentSOs = list; //.filter(function (item) { return !item.selected; });
	                    return true;
	                } else {
	                    index--;
	                    var newLocationPOGId = null,
	                        POGToMoveId;
	                    if (vm.selectedNode == null) {
	                        if (index >= 0) {
	                            newLocationPOGId = vm.models.lists.A[index].objectId;
	                        }
	                        POGToMoveId = node.objectId;
	                    } else if (vm.selectedNode && vm.selectedNode.ChildProductOptionGroupSOs && vm.selectedNode.ChildProductOptionGroupSOs.length > 0) {
	                        if (index >= 0) {
	                            newLocationPOGId = vm.selectedNode.ChildProductOptionGroupSOs[index].Id;
	                        }
	                        POGToMoveId = node.Id;
	                    }
	                    optionsService.reorderProductOptionGroups(POGToMoveId, newLocationPOGId).then(function(response) {
	                        if (response) {
	                            updateLeftPanel(null);
	                        }
	                    }, function(reason) {
	                        applicationService.showErrorMessage(reason);
	                    });
	                    return node;
	                }
	            }
	        };
	
	        function updateMainContent(array, nodeId) {
	            _.each(array, function(node) {
	                if (node) {
	                    if (node.nodeId === nodeId) {
	                        array.splice(array.indexOf(node), 1);
	                        return;
	                    } else if (node.childCategories && node.childCategories.length > 0) {
	                        updateMainContent(node.childCategories[0], nodeId);
	                    }
	                }
	            });
	        }
	
	        vm.removeOption = function(node) {
	
	            if (selectedNodeId != '') {
	                if (selectedOptionGroupId == '') {
	                    selectedOptionGroupId = selectedNodeId;
	                    showWarningMsg = true;
	                } else if (selectedOptionGroupId != selectedNodeId) {
	                    selectedOptionGroupId = selectedNodeId;   
	                    showWarningMsg = true;
	                } else {
	                    showWarningMsg = false;
	                }
	            } else {
	                showWarningMsg = false;    
	            }
	
	            var objHierarchyDO = {
	                ParentProductId: $stateParams.id
	            };
	            if (node.nodeType && node.nodeType == 'optionGroup') {
	                if (vm.selectedNode == null)
	                    objHierarchyDO.ChildOptionGroupId = node.nodeId;
	                else {
	                    objHierarchyDO.ParentOptionGroupId = vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'OptionGroupId__c'];
	                    objHierarchyDO.ChildOptionGroupId = node.nodeId;
	                }
	            } else {
	                objHierarchyDO.ChildProductId = node[vm.prefix + 'ComponentProductId__c'];
	                objHierarchyDO.ParentOptionGroupId = node[vm.prefix + 'ProductOptionGroupId__c'];
	            }
	            optionsService.removeProductsFromOptionGroups(objHierarchyDO).then(function(response) {
	                if (response == true) {
	
	                    updateMainContent(vm.models.lists.A, node.Id);
	                    for (var i = 0; i < vm.selectedNode.ComponentSOs.length; i++) {
	                        var option = vm.selectedNode.ComponentSOs[i];
	                        if (option.Id == node.Id)
	                            vm.selectedNode.ComponentSOs.splice(i, 1);
	                    }
	                    updateTreeOnLoad(vm.optionsTreeList);
	                    /**
	                    Call method for Update the details tab HasAttributes value 
	                    */
	                    vm.updateHasOptions();
	                    updateBundleJob();
	                    if (showWarningMsg == true && cascadeGroupChanges) {
	                        applicationService.showErrorMessage(warningMessageObject);
	                    }
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        };
	
	
	
	        vm.checkArray = function(item) {
	            if (item.childCategories && item.childCategories.length > 0 && !angular.isArray(item.childCategories[0])) {
	                item.childCategories = [item.childCategories];
	            } else if (item.childCategories == undefined || item.childCategories.length == 0)
	                item.childCategories = [
	                    []
	                ];
	        };
	        vm.doSearchOptions = function() {
	            var typeToBeSearched = vm.options[0].value,
	                searchText = vm.searchText;
	            vm.searchOptions(typeToBeSearched, searchText, 1);
	        };
	        //Searches the entire options, bundle or options group based on dropdown selection and entered search text
	        vm.searchOptions = function(typeToBeSearched, searchText, pageNumber) {
	            vm.currentPage = pageNumber;
	            if (typeToBeSearched.toLowerCase() == 'optiongroup') {
	                var request = {
	                    ChunkNumber: pageNumber,
	                    NumberOfOptionGroupsPerChunk: 25,
	                    SearchString: vm.searchText
	                };
	
	                optionsService.getAllOptionGroups(request)
	                    .then(function(response) {
	                        vm.optionsTreeList = response;
	                        vm.isMaxSQLSizeExceed = false;
	                        if (response.length === 0) {
	                            vm.searchedStr = vm.searchText;
	                        }
	                        updateTreeOnLoad(vm.optionsTreeList);
	                    }, function(reason) {
	                        if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                            vm.optionsTreeList = [];
	                            vm.isMaxSQLSizeExceed = true;
	                        } else {
	                            applicationService.showErrorMessage(reason);
	                        }
	                    });
	
	            } else if (typeToBeSearched == 'attributeGroup') {
	                var request = {
	                    ChunkNumber: pageNumber,
	                    NumberOfAttributeGroupsPerChunk: productConstants.treePanelItemsPerChunk,
	                    SearchString: vm.searchText,
	                    MaxNumberOfAttributesPerGroup: productConstants.MaxNumberOfAttributesPerGroup
	                };
	                /**
	                 * - Make service call and update the value of vm.attributesList.
	                 */
	                optionsService.getAttributesTreeList(request).then(function(response) {
	                    /* once vm.optionsTreeList model is updated, it will be automatically bound to right side tree. */
	                    vm.optionsTreeList = response;
	                    if (response.length === 0) {
	                        vm.searchedStr = vm.searchText;
	                    }
	                    //updateTreeOnLoadAttributes(vm.optionsTreeList);
	                }, function(reason) {
	                    if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                        reason.message = vm.labels.MaxSQLSizeExceedMessage;
	                    }
	                    applicationService.showErrorMessage(reason);
	                });
	            } else if (typeToBeSearched.toLowerCase() == 'attribute') {
	                attributesService.targetAttributesFieldSearch(vm.searchText ? vm.searchText : '').then(function(response) {
	                    /* once vm.attributesList model is updated, it will be automatically bound to right side tree. */
	                    vm.optionsTreeList = response;
	                    if (response.length === 0) {
	                        vm.searchedStr = vm.searchText;
	                    }
	                    updateTreeOnLoadAttributes(vm.optionsTreeList);
	                }, function(reason) {
	                    if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                        reason.message = vm.labels.MaxSQLSizeExceedMessage;
	                    }
	                    applicationService.showErrorMessage(reason);
	                });
	            } else {
	                //Update vm.optionsTreeList after doing Apex service call;
	                //Right side tree will be auto updated with search result
	                optionsService.getOptionsTreeList({
	                    'ViewName': vm.prefix + productConstants.fieldsetProductList,
	                    'SortField': 'LastModifiedDate',
	                    'SortDirection': cpqAdminConstants.ASCENDING,
	                    'SearchString': vm.searchText,
	                    'ChunkNumber': pageNumber,
	                    'NumberOfProductsPerChunk': productConstants.treePanelItemsPerChunk,
	                    'ConfigTypes': typeToBeSearched.split('|')
	                }).then(function(response) {
	                    if (typeToBeSearched.toLowerCase() != 'option|standalone') {
	                        for (var i = 0; i < response.Products.length; i++) {
	                            response.Products[i][vm.nodeChildren] = [{}];
	                        }
	                    }
	                    vm.isMaxSQLSizeExceed = false;
	                    vm.optionsTreeList = response.Products;
	                    if (response.Products.length === 0) {
	                        vm.searchedStr = vm.searchText;
	                    }
	                    updateTreeOnLoad(vm.optionsTreeList);
	                }, function(reason) {
	                    if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                        vm.optionsTreeList = [];
	                        vm.isMaxSQLSizeExceed = true;
	                    } else {
	                        applicationService.showErrorMessage(reason);
	                    }
	                });
	            }
	            document.querySelector('.tree-wrapper').scrollTop = 0;
	        };
	
	        var isFormSaved = false;
	        // Explicit page save functionality
	        $scope.$on('explicitPageSave', function(evts, args) {
	            if (vm.productOptionsForm && vm.productOptionsForm.$dirty) {
	                vm.savePage();
	            }
	        });
	
	        //This watch is for implicit save functionality
	        $scope.$on('$stateChangeStart', function(e, toState, toParams, fromState, fromParams) {
	            if (toState.name === 'app.list') {
	                return true;
	            } else if (isFormSaved) {
	                return true;
	            } else {
	                if (vm.productOptionsForm && vm.productOptionsForm.$dirty && !vm.isCancelClicked) {
	                    e.preventDefault();
	                    vm.savePage(e, toState, toParams);
	                } else {
	                    vm.isCancelClicked = false;
	                    return true;
	                }
	
	            }
	
	        });
	
	        //Re-usable savePage method
	        vm.savePage = function(e, toState, toParams) {
	            //Remove the $$hashKey from the model objects and the post payload is ready.
	            updateProductAttributeGroup().then(function(response) {
	                if (response) {
	                    saveOptionGroupDetails(vm.models.selected, true, toState, toParams);
	                }
	            });
	        };
	
	        //For adding PriceList picklist to the right side tree panel
	        //Keep the picklist as first element of the options array.
	        vm.options = [{
	            'FieldName': 'Options_PL',
	            'FieldType': 'PICKLIST',
	            'IsEditable': true,
	            'allowClear': false,
	            'PicklistValues': [{
	                'active': true,
	                'defaultValue': false,
	                'label': 'Bundle',
	                'value': 'Bundle'
	            }, {
	                'active': true,
	                'defaultValue': false,
	                'label': 'Option Groups',
	                'value': 'optionGroup'
	            }, {
	                'active': true,
	                'defaultValue': false,
	                'label': 'Options',
	                'value': 'Option|Standalone'
	            }, {
	                'active': true,
	                'defaultValue': false,
	                'label': 'Attribute Groups',
	                'value': 'attributeGroup'
	            }, {
	                'active': true,
	                'defaultValue': false,
	                'label': 'Attributes',
	                'value': 'Attribute'
	            }],
	            'value': 'optionGroup'
	        }];
	
	        vm.getProductStructure = function(node) {
	            optionsService.getProductStructure(node.productId)
	                .then(function(response) {
	                    for (var i = 0; i < vm.optionsTreeList.length; i++) {
	                        if (vm.optionsTreeList[i].Id === node.Id) {
	                            vm.optionsTreeList[i].childCategories = flat2TreeRightPanel(JSON.parse(response.ProductStructureJSONs[0].Value));
	                            updateTreeOnLoad(vm.optionsTreeList[i].childCategories);
	                        }
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        };
	
	        function flat2TreeRightPanel(result) {
	            var map = {},
	                node, roots = [];
	            var nodes = result;
	            for (var i = 0; i < nodes.length; i += 1) {
	                node = nodes[i];
	                node.Name = node.label;
	                node.childCategories = [];
	                map[node.nodeId] = i; // use map to look-up the parents
	                if (node.parentId !== "0" && nodes[map[node.parentId]]) {
	                    nodes[map[node.parentId]].childCategories.push(node);
	                } else {
	                    roots.push(node);
	                }
	            }
	            return roots;
	        }
	
	        function generatePayload(parentId, children) {
	            if (children && children.length > 0) {
	                for (var i = 0; i < children.length; i++) {
	                    var objHierarchyDO = {
	                        ParentProductId: $stateParams.id
	                    };
	                    if (children[i].nodeType.toLowerCase() == 'optiongroup') {
	                        objHierarchyDO.ChildOptionGroupId = children[i].nodeId;
	                        objHierarchyDO.ChildProductId = null;
	                        if (parentId != '') {
	                            objHierarchyDO.ParentOptionGroupId = parentId;
	                        } else
	                            objHierarchyDO.ParentOptionGroupId = null;
	                    } else if (children[i].nodeType.toLowerCase() == 'option') {
	                        objHierarchyDO.ChildProductId = children[i].nodeId;
	                        objHierarchyDO.ParentOptionGroupId = parentId;
	                        objHierarchyDO.ChildOptionGroupId = null;
	                    }
	                    vm.payload.push(objHierarchyDO);
	                    if (children[i][vm.nodeChildren] && children[i][vm.nodeChildren].length > 0) {
	                        generatePayload(children[i].nodeId, children[i][vm.nodeChildren][0]);
	                    }
	                }
	            }
	        }
	
	        function setSelectedOnLoad() {
	            for (var i = 0; i < vm.models.lists.A.length; i++) {
	                vm.models.lists.A[i].isSelected = true;
	            }
	        }
	
	        vm.selectedProduct = productService.getSelectedProduct();
	        vm.expandCollpaseLeftPanel = function(isCollapse) {
	            vm.isCollapse = isCollapse;
	            expandCollapseLeftPanelChild(vm.models.lists.A);
	        }
	
	        function expandCollapseLeftPanelChild(array) {
	            for (var i = 0; i < array.length; i++) {
	                var node = array[i];
	                node.collapse = vm.isCollapse;
	                if (node.childCategories && node.childCategories.length > 0) {
	                    expandCollapseLeftPanelChild(node.childCategories[0]);
	                }
	            }
	        }
	
	        var selectednode, ruleType;
	        vm.showRemoveConfirmation = function(node, ruleTypeSelected) {
	            vm.confirmationPopup = true;
	            selectednode = node;
	            ruleType = ruleTypeSelected;
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.DeleteMessageBody
	            }
	        };
	
	        // decides dialog context between goToDetails and remove option/optiongroup
	        vm.confirmDialogContext = function() {
	            if (angular.isDefined(selectedOptionProductId)) {
	                vm.confirmForGoToDetailsPage();
	            } else if (angular.isDefined(selectednode) && angular.isDefined(ruleType)) {
	                vm.confirmRemove();
	            }
	        }
	
	        vm.cancelDialogContext = function() {
	            if (angular.isDefined(selectedOptionProductId)) {
	                vm.cancelForGoToDetailsPage();
	            } else if (angular.isDefined(selectednode) && angular.isDefined(ruleType)) {
	                vm.cancelRemove();
	            }
	        }
	
	        vm.confirmRemove = function() {
	            if (ruleType === 'option') {
	                vm.removeOption(selectednode);
	            } else if (ruleType === 'optiongroup') {
	                vm.removeOptionGroup(selectednode);
	            } 
	            vm.confirmationPopup = false;
	        };
	
	        vm.cancelRemove = function() {
	            selectednode = undefined;
	            vm.confirmationPopup = false;
	        };
	
	        vm.removeOptionGroup = function(node) {
	            var request = [node.objectId];
	            optionsService.removeOptionGroupsFromProduct(request).then(function(response) {
	                if (response == true) {
	                    updateMainContent(vm.models.lists.A, node.nodeId);
	                    if (vm.selectedNode && vm.selectedNode.ChildProductOptionGroupSOs && vm.selectedNode.ChildProductOptionGroupSOs.length > 0) {
	                        updateMainContent(vm.selectedNode.ChildProductOptionGroupSOs, node.nodeId);
	                    }
	                    updateTreeOnLoad(vm.optionsTreeList);
	
	                    /**
	                    Call method for Update the details tab HasAttributes value 
	                    */
	                    vm.updateHasOptions();
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        };
	
	        function updateTreeOnLoad(arrayToUpdate, isSameBundle) {
	            if (vm.selectedNode) {
	                for (var i = 0; i < arrayToUpdate.length; i++) {
	                    var index;
	                    if (vm.selectedNode.ComponentSOs && vm.selectedNode.ComponentSOs.length > 0) {
	                        index = _.findIndex(vm.selectedNode.ComponentSOs, function(field) {
	                            return (field[vm.prefix + 'ComponentProductId__c'] === arrayToUpdate[i].nodeId || field[vm.prefix + 'ComponentProductId__c'] === arrayToUpdate[i].componentProductId);
	                        });
	                    } else if (vm.selectedNode.ChildProductOptionGroupSOs && vm.selectedNode.ChildProductOptionGroupSOs.length > 0) {
	                        index = _.findIndex(vm.selectedNode.ChildProductOptionGroupSOs, function(field) {
	                            return (field[vm.prefix + 'OptionGroupId__c'] === arrayToUpdate[i].nodeId);
	                        });
	                    }
	                    if (index > -1 || parentList.indexOf(arrayToUpdate[i].nodeId) > -1) {
	                        arrayToUpdate[i].isSelected = true;
	                    } else if ((arrayToUpdate[i].nodeId == $stateParams.id) ||
	                        (arrayToUpdate[i].nodeId == vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'OptionGroupId__c']) ||
	                        isSameBundle) {
	                        arrayToUpdate[i].isSelected = true;
	                    } else if (arrayToUpdate[i].isSelected == true) {
	                        arrayToUpdate[i].isSelected = false;
	                    }
	                    if (arrayToUpdate[i].childCategories && arrayToUpdate[i].childCategories.length > 0) {
	                        if (isSameBundle) {
	                            updateTreeOnLoad(arrayToUpdate[i].childCategories, true);
	                        } else {
	                            updateTreeOnLoad(arrayToUpdate[i].childCategories);
	                        }
	                    }
	                }
	            } else {
	                for (var i = 0; i < arrayToUpdate.length; i++) {
	                    var index = _.findIndex(vm.models.lists.A, function(field) {
	                        return field.nodeId === arrayToUpdate[i].nodeId;
	                    });
	                    if (index > -1) {
	                        arrayToUpdate[i].isSelected = true;
	                    } else if ((arrayToUpdate[i].nodeId == $stateParams.id) ||
	                        isSameBundle) {
	                        arrayToUpdate[i].isSelected = true;
	                    } else if (arrayToUpdate[i].isSelected == true) {
	                        arrayToUpdate[i].isSelected = false;
	                    }
	                    if (arrayToUpdate[i].childCategories && arrayToUpdate[i].childCategories.length > 0) {
	                        if (isSameBundle) {
	                            updateTreeOnLoad(arrayToUpdate[i].childCategories, true);
	                        } else {
	                            updateTreeOnLoad(arrayToUpdate[i].childCategories);
	                        }
	                    }
	                }
	            }
	        }
	
	        vm.clearSelectedNode = function() {
	            vm.selectedNode = null;
	            selectedNodeId = '';
	            cascadeGroupChanges = false;
	            vm.models.selected = null;
	            updateTreeOnLoad(vm.optionsTreeList);
	            delete vm.attributeGroup;
	        };
	
	        vm.expandBundleLeftPanel = function(item) {
	            item.collapse = !item.collapse;
	        };
	
	        /**
	         * - To get the full parent trace to disable the nodes in the tree panel
	         */
	        function getParentTrace(array, nodeId) {
	            var node = {};
	            if (nodeId) {
	                for (var i = 0; i < array.length; i++) {
	                    if (array[i].nodeId == nodeId) {
	                        parentList.push(array[i].nodeId);
	                        if (array[i].componentProductId) {
	                            parentList.push(array[i].componentProductId);
	                        }
	                        getParentTrace(vm.models.lists.A, array[i].parentId);
	                    } else if (array[i][vm.nodeChildren] && array[i][vm.nodeChildren].length > 0) {
	                        getParentTrace(array[i][vm.nodeChildren][0], nodeId);
	                    }
	                }
	            }
	        }
	
	        var deRegisterFunc = $scope.$watch('vm.options[0].value', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                //make the request for tree loading here
	                vm.searchOptions(newValue, vm.searchText, 1);
	            }
	        });
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            vm = null;
	        });
	
	        vm.toggleSearch = function() {
	            vm.searchText = '';
	            var searchBar = document.querySelector('.tree-search .search-leaf');
	            angular.element(searchBar).toggleClass('hidden');
	            if (angular.element(searchBar).hasClass('hidden')) {
	                vm.searchOptions(newValue, vm.searchText, 1);
	            }
	        };
	
	        vm.showSearchBar = function() {
	            var productView = document.querySelector('.details-search');
	            angular.element(productView).addClass('showOptionsSearchPanel');
	        };
	        // Hide Search Bar
	        vm.hideSearchBar = function() {
	            var productView = document.querySelector('.details-search');
	            angular.element(productView).removeClass('showOptionsSearchPanel');
	            vm.searchText = '';
	            vm.searchOptions(null, vm.searchText, 1);
	        };
	
	        function createOptionGroup() {
	            $mdDialog.show({
	                controller: __webpack_require__(409),
	                template: __webpack_require__(410),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	                    productStructure: function() {
	                        return optionsService.getOptionsList($stateParams.id);
	                    }
	                }
	            }).then(function(response) {
	                if (response) {
	                    $state.reload();
	                }
	            });
	        }
	
	        function createSharedOptionGroup() {
	            $mdDialog.show({
	                controller: __webpack_require__(393),
	                template: __webpack_require__(394),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                locals: {
	                    data: vm.treeData,
	                    ttreeOptions: vm.options,
	                    catalogTypes: [stateName,"Both"]
	                },
	                bindToController: true,
	                resolve: {
	                    currentCategory: function() {
	                        return null;
	                    }
	                }
	            }).then(function(response) {
	                if (response) {
	                    $state.reload();
	                }
	            });
	        }
	
	        vm.viewOptionBundle = function(item) {
	            $mdDialog.show({
	                controller: __webpack_require__(411),
	                template: __webpack_require__(412),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	                    selectedOptionBundle: function() {
	                        return item;
	                    },
	                    treeOptionBundle: function() {
	                        return optionsService.getProductStructure(item.componentProductId);
	                    }
	                }
	            }).then(function(response) {
	
	            });
	        };
	
	        vm.goToDetailsPage = function(item) {
	            vm.confirmationPopup = true;
	            selectedOptionProductId = item.componentProductId;
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.GoToDetailsPageMessageBody + " '" + item.label + "' ?",
	            }
	        };
	
	        vm.confirmForGoToDetailsPage = function() {
	            vm.confirmationPopup = false;
	            var absUrl = $location.absUrl();
	            var getDetilsPageUrl = absUrl.substring(0, absUrl.indexOf('product/')) + 'product/' + selectedOptionProductId + '/details';
	            $window.open(getDetilsPageUrl, '_blank');
	            selectedOptionProductId = undefined;
	        };
	
	        vm.cancelForGoToDetailsPage = function() {
	            selectedOptionProductId = undefined;
	            vm.confirmationPopup = false;
	        };
	
	        vm.onFocus = function(field, index) {
	            $mdDialog.show({
	                controller: __webpack_require__(413),
	                controllerAs: 'vm',
	                template: __webpack_require__(414),
	                parent: angular.element(document.body),
	                clickOutsideToClose: false,
	                resolve: {
	                    expression: function() {
	                        var expression = '';
	                        switch (field) {
	                            case vm.prefix + 'MinTotalQuantity__c':
	                            case vm.prefix + 'MaxTotalQuantity__c':
	                                expression = vm.selectedNode.ProductOptionGroupSO[field];
	                                break;
	                            case vm.prefix + 'MinQuantity__c':
	                            case vm.prefix + 'MaxQuantity__c':
	                            case vm.prefix + 'DefaultQuantity__c':
	                                expression = vm.selectedNode.ComponentSOs[index][field];
	                                break;
	                            case 'MassEditMinQty':
	                                expression = vm.massEditObj.MinQty;
	                                break;
	                            case 'MassEditMaxQty':
	                                expression = vm.massEditObj.MaxQty;
	                                break;
	                            case 'MassEditDefaultQty':
	                                expression = vm.massEditObj.DefaultQty;
	                                break;
	                            case 'Expression':
	                                expression = angular.copy(vm.displayAttributes[0][index].ProductAttributeSO[field]);
	                                break;
	                            case 'MassEditExpression':
	                                expression = vm.massEditObjAttributes.Expression;
	                                break;
	                        }
	                        return expression;
	                    }
	                }
	            }).then(function(response) {
	                switch (field) {
	                    case vm.prefix + 'MinTotalQuantity__c':
	                    case vm.prefix + 'MaxTotalQuantity__c':
	                        vm.selectedNode.ProductOptionGroupSO[field] = response;
	                        break;
	                    case vm.prefix + 'MinQuantity__c':
	                    case vm.prefix + 'MaxQuantity__c':
	                    case vm.prefix + 'DefaultQuantity__c':
	                        vm.selectedNode.ComponentSOs[index][field] = response;
	                        break;
	                    case 'MassEditMinQty':
	                        vm.massEditObj.MinQty = response;
	                        break;
	                    case 'MassEditMaxQty':
	                        vm.massEditObj.MaxQty = response;
	                        break;
	                    case 'MassEditDefaultQty':
	                        vm.massEditObj.DefaultQty = response;
	                        break;
	                    case 'Expression':
	                        vm.displayAttributes[0][index].ProductAttributeSO[field] = response;
	                        break;
	                    case 'MassEditExpression':
	                        vm.massEditObjAttributes.Expression = response;
	                        break;
	                }
	                if (vm.productOptionsForm) {
	                    vm.productOptionsForm.$dirty = true;
	                }
	            });
	        };
	
	        $scope.$on(vm.labels.NewOptionGroup.split(' ').join('-'), function() {
	            createOptionGroup();
	        });
	
	        $scope.$on(vm.labels.NewStandaloneOptionGroup.split(' ').join('-'), function() {
	            createOptionGroup();
	        });
	
	        $scope.$on(vm.labels.NewSharedOptionGroup.split(' ').join('-'), function() {
	            createSharedOptionGroup();
	        });
	
	        vm.goToProductDetailsPage = function() {
	            vm.isCancelClicked = true;
	            $state.go('app.product.details', {
	                'id': $stateParams.id
	            });
	        };
	
	        vm.explicitPageSave = function() {
	            if (vm.productOptionsForm && vm.productOptionsForm.$dirty) {
	                isCallFromClickonOptionGroup = false;
	                vm.savePage();
	            }
	        };
	
	        function updateBundleJob() {
	            optionsService.updateBundleJob($stateParams.id)
	                .then(function(response) {
	                    var updateNotInFastModeMsg = "Bundle update cannot be run in fast mode";
	                    if (response.toLowerCase().includes(updateNotInFastModeMsg.toLowerCase())) {
	                        addAlert({
	                            type: cpqAdminConstants.DANGER,
	                            msg: response
	                        });
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function buildHierarchy(node, objHierarchyDO) {
	
	            optionsService.buildHierarchy(objHierarchyDO).then(function(response) {
	                if (response && (response.Success || response.ChildProductOptionGroupSOs)) {
	                    if (response.ProductOptionGroupDO && response.ProductOptionGroupDO.ChildProductOptionGroupSOs.length > 0) {
	                        if (vm.selectedNode == null) {
	                            var newOG = flat2TreeBuildHierarchy(response.ProductOptionGroupDO);
	                            newOG.isSelected = true;
	                            vm.models.lists.A.push(newOG);
	                        } else {
	                            vm.models.selected.childCategories[0].push(flat2TreeBuildHierarchy(response.ProductOptionGroupDO));
	                            var newOG = response.ProductOptionGroupDO.ChildProductOptionGroupSOs[0];
	                            newOG.objectId = newOG.Id;
	                            newOG.nodeType = 'optionGroup';
	                            newOG.isSelected = true;
	                            newOG.nodeId = newOG[vm.prefix + 'OptionGroupId__c'];
	                            vm.selectedNode.ChildProductOptionGroupSOs.push(newOG);
	                        }
	                    } else if (response.ProductOptionGroupDO && response.ProductOptionGroupDO.ComponentSOs.length > 0) {
	                        var newOption = response.ProductOptionGroupDO.ComponentSOs[0];
	                        vm.selectedNode.ComponentSOs.push(newOption);
	                        node = newOption;
	                        vm.models.selected.childCategories[0].push({
	                            "parentId": null,
	                            "nodeType": "option",
	                            "nodeId": newOption.Id,
	                            "name": newOption[vm.prefix + 'ComponentProductId__r'].Name,
	                            "label": newOption[vm.prefix + 'ComponentProductId__r'].Name,
	                            "componentProductId": newOption[vm.prefix + 'ComponentProductId__c']
	                        });
	                    } else if (response.ChildProductOptionGroupSOs && response.ChildProductOptionGroupSOs.length > 0) {
	                        vm.models.selected.childCategories[0].push(flat2TreeBuildHierarchy(response));
	                        var newOG = response.ChildProductOptionGroupSOs[0];
	                        newOG.objectId = newOG.Id;
	                        newOG.nodeType = 'optionGroup';
	                        newOG.isSelected = true;
	                        newOG.nodeId = newOG[vm.prefix + 'OptionGroupId__c'];
	                        vm.selectedNode.ChildProductOptionGroupSOs.push(newOG);
	                        if(vm.selectedNode && vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'IsLeaf__c'] === true){
	                            vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'IsLeaf__c'] = false;
	                            vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'MinOptions__c'] = null;
	                            vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'MaxOptions__c'] = null;
	                        }
	                    } else if (response.ProductOptionGroupSO) {
	                        var node = {
	                            "parentId": response.ProductOptionGroupSO[vm.prefix + 'ParentOptionGroupId__c'],
	                            "objectId": response.ProductOptionGroupSO.Id,
	                            "nodeType": "optionGroup",
	                            "nodeId": response.ProductOptionGroupSO[vm.prefix + 'OptionGroupId__c'],
	                            "name": response.ProductOptionGroupSO[vm.prefix + 'OptionGroupId__r'].Name,
	                            "label": response.ProductOptionGroupSO[vm.prefix + 'OptionGroupId__r'].Name,
	                            "minOptions": response.ProductOptionGroupSO[vm.prefix + 'MinOptions__c'],
	                            "maxOptions": response.ProductOptionGroupSO[vm.prefix + 'MaxOptions__c'],
	                            "minTotalQuantity": response.ProductOptionGroupSO[vm.prefix + 'MinTotalQuantity__c'],
	                            "maxTotalQuantity": response.ProductOptionGroupSO[vm.prefix + 'MaxTotalQuantity__c'],
	                            "isVisible": (response.ProductOptionGroupSO[vm.prefix + 'IsHidden__c'] == true ? false : true),
	                            "isPicklist": response.ProductOptionGroupSO[vm.prefix + 'IsPicklist__c']
	                        };
	                        vm.models.selected.childCategories[0].push(node);
	                        var newOG = response.ProductOptionGroupSO;
	                        newOG.objectId = newOG.Id;
	                        newOG.nodeType = 'optionGroup';
	                        newOG.isSelected = true;
	                        vm.selectedNode.ChildProductOptionGroupSOs.push(newOG);
	                    }
	                    vm.updateHasOptions();
	                    updateTreeOnLoad(vm.optionsTreeList);
	                    updateBundleJob();
	                    if (showWarningMsg == true && cascadeGroupChanges) {
	                        applicationService.showErrorMessage(warningMessageObject);
	                    }
	                    return node;
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	                return false;
	            });
	        }
	
	        function flat2TreeBuildHierarchy(result) {
	            var map = {},
	                node, roots = [],
	                nodes = [];
	            for (var i = 0; i < result.ChildProductOptionGroupSOs.length; i += 1) {
	                var newOG = result.ChildProductOptionGroupSOs[i];
	                node = {
	                    "parentId": newOG[vm.prefix + 'ParentOptionGroupId__c'],
	                    "objectId": newOG.Id,
	                    "nodeType": "optionGroup",
	                    "nodeId": newOG[vm.prefix + 'OptionGroupId__c'],
	                    "name": newOG[vm.prefix + 'OptionGroupId__r'].Name,
	                    "label": newOG[vm.prefix + 'OptionGroupId__r'].Name,
	                    "minOptions": newOG[vm.prefix + 'MinOptions__c'],
	                    "maxOptions": newOG[vm.prefix + 'MaxOptions__c'],
	                    "minTotalQuantity": newOG[vm.prefix + 'MinTotalQuantity__c'],
	                    "maxTotalQuantity": newOG[vm.prefix + 'MaxTotalQuantity__c'],
	                    "isVisible": (newOG[vm.prefix + 'IsHidden__c'] == true ? false : true),
	                    "isPicklist": newOG[vm.prefix + 'IsPicklist__c']
	                };
	                nodes.push(node);
	            }
	            for (var i = 0; i < result.ComponentSOs.length; i++) {
	                for (var j = 0; j < result.ChildProductOptionGroupSOs.length; j++) {
	                    if (result.ComponentSOs[i][vm.prefix + 'ProductOptionGroupId__c'] === result.ChildProductOptionGroupSOs[j].Id) {
	                        nodes.push({
	                            "parentId": result.ChildProductOptionGroupSOs[j][vm.prefix + 'OptionGroupId__c'],
	                            "nodeType": "option",
	                            "nodeId": result.ComponentSOs[i].Id,
	                            "name": result.ComponentSOs[i][vm.prefix + 'ComponentProductId__r'].Name,
	                            "label": result.ComponentSOs[i][vm.prefix + 'ComponentProductId__r'].Name,
	                            "componentProductId": result.ComponentSOs[i][vm.prefix + 'ComponentProductId__c']
	                        });
	                    }
	                }
	            }
	            for (var i = 0; i < nodes.length; i += 1) {
	                node = nodes[i];
	                node.childCategories = [
	                    []
	                ];
	                map[node.nodeId] = i; // use map to look-up the parents
	                if (node.parentId !== '0' && nodes[map[node.parentId]]) {
	                    nodes[map[node.parentId]].childCategories[0].push(node);
	                } else {
	                    roots = node;
	                }
	            }
	            roots.isSelected = true;
	            return roots;
	        }
	
	        function getPicklistValues() {
	            apiCallsService.getSObjectPicklistFields('ProductOptionGroup__c', ['ModifiableType__c']).then(function(response) {
	                if (response.length) {
	                    vm.modifiableTypePicklistEntries = {
	                        PicklistValues: response[0].PicklistValues
	                    };
	                } else {
	                    vm.modifiableTypePicklistEntries = {
	                        PicklistValues: []
	                    };
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	
	            apiCallsService.getSObjectPicklistFields('ProductOptionComponent__c', ['ConfigType__c']).then(function(response) {
	                if (response.length) {
	                    response[0].PicklistValues.unshift({
	                        active: true,
	                        defaultValue: false,
	                        label: vm.labels.NoneAsPickListValue,
	                        value: ''
	                    });
	                    vm.configTypePicklistEntries = {
	                        PicklistValues: response[0].PicklistValues
	                    };
	                } else {
	                    vm.configTypePicklistEntries = {
	                        PicklistValues: [{
	                            active: true,
	                            defaultValue: false,
	                            label: vm.labels.NoneAsPickListValue,
	                            value: ''
	                        }]
	                    };
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	
	            apiCallsService.getSObjectPicklistFields('ProductOptionGroup__c', ['ContentType__c']).then(function(response) {
	                if (response.length) {
	                    vm.contentTypePicklistEntries = {
	                        PicklistValues: response[0].PicklistValues
	                    };
	                } else {
	                    vm.contentTypePicklistEntries = {
	                        PicklistValues: []
	                    };
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        vm.getSelectedItemsToDrag = function(list, item) {
	            item.selected = true;
	            return list.filter(function(item) {
	                return item.selected;
	            });
	        };
	
	        vm.onDragstart = function(list, event) {
	            list.dragging = true;
	            if (event.dataTransfer.setDragImage) {
	                var img = new Image();
	                img.src = 'app/common/assets/images/nav-logo.png';
	                event.dataTransfer.setDragImage(img, 0, 0);
	            }
	        };
	
	        vm.onMoved = function() {
	            vm.selectedNode.ComponentSOs = vm.selectedNode.ComponentSOs.filter(function(item) {
	                return !item.selected;
	            });
	        };
	
	        vm.massEditObj = {
	            MinQty: '',
	            MaxQty: '',
	            DefaultQty: '',
	            Default: false,
	            Modifiable: false,
	            AllowCloning: false,
	            Required: false,
	            AutoUpdateQty: false,
	            ConfigType: ''
	
	        };
	        var varToCheck = {};
	        vm.applyMassEdit = function() {
	            if (vm.massEditObj) {
	                for (var i = 0; i < vm.selectedNode.ComponentSOs.length; i++) {
	                    if (vm.massEditObj.MinQty !== undefined || vm.massEditObj.MinQty !== '') {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'MinQuantity__c'] = vm.massEditObj.MinQty;
	                    } else {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'MinQuantity__c'] = '';
	                    }
	                    if (vm.massEditObj.MaxQty !== undefined || vm.massEditObj.MaxQty !== '') {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'MaxQuantity__c'] = vm.massEditObj.MaxQty;
	                    } else {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'MaxQuantity__c'] = '';
	                    }
	                    if (vm.massEditObj.DefaultQty !== undefined || vm.massEditObj.DefaultQty !== '') {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'DefaultQuantity__c'] = vm.massEditObj.DefaultQty;
	                    } else {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'DefaultQuantity__c'] = '';
	                    }
	                    if (vm.massEditObj.Default !== undefined || vm.massEditObj.Default !== false) {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'Default__c'] = vm.massEditObj.Default;
	                    } else {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'Default__c'] = false;
	                    }
	                    if (vm.massEditObj.Modifiable !== undefined || vm.massEditObj.Modifiable !== false) {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'Modifiable__c'] = vm.massEditObj.Modifiable;
	                    } else {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'Modifiable__c'] = false;
	                    }
	                    if (vm.massEditObj.AllowCloning !== undefined || vm.massEditObj.AllowCloning !== false) {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'AllowCloning__c'] = vm.massEditObj.AllowCloning;
	                    } else {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'AllowCloning__c'] = false;
	                    }
	                    if (vm.massEditObj.Required !== undefined || vm.massEditObj.Required !== false) {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'Required__c'] = vm.massEditObj.Required;
	                    } else {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'Required__c'] = false;
	                    }
	                    if (vm.massEditObj.AutoUpdateQty !== undefined || vm.massEditObj.AutoUpdateQty !== false) {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'AutoUpdateQuantity__c'] = vm.massEditObj.AutoUpdateQty;
	                    } else {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'AutoUpdateQuantity__c'] = false;
	                    }
	                    if (vm.massEditObj.ConfigType !== undefined || vm.massEditObj.ConfigType !== '') {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'ConfigType__c'] = vm.massEditObj.ConfigType;
	                    } else {
	                        vm.selectedNode.ComponentSOs[i][vm.prefix + 'ConfigType__c'] = '';
	                    }
	                }
	                //varToCheck = angular.copy(vm.massEditObj);
	            }
	        };
	
	        function updateLeftPanel(node) {
	            if (vm.selectedNode && vm.selectedNode.ChildProductOptionGroupSOs && vm.selectedNode.ChildProductOptionGroupSOs.length > 0) {
	                for (var i = 0; i < vm.selectedNode.ChildProductOptionGroupSOs.length; i++) {
	                    var children = vm.models.selected.childCategories[0];
	                    for (var j = 0; j < children.length; j++) {
	                        if (children[j].objectId === vm.selectedNode.ChildProductOptionGroupSOs[i].Id) {
	                            children.splice(i, 0, children.splice(j, 1)[0]);
	                        }
	                    }
	                }
	            } else if (vm.selectedNode && vm.selectedNode.ComponentSOs && vm.selectedNode.ComponentSOs.length > 0) {
	                for (var i = 0; i < vm.selectedNode.ComponentSOs.length; i++) {
	                    var children = vm.models.selected.childCategories[0];
	                    for (var j = 0; j < children.length; j++) {
	                        if (children[j].nodeId === vm.selectedNode.ComponentSOs[i].Id) {
	                            children.splice(i, 0, children.splice(j, 1)[0]);
	                        }
	                    }
	                }
	            } else if (vm.selectedNode != null && vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ContentType__c'] === 'Attributes') {
	                if(vm.displayAttributes && vm.displayAttributes.length > 0){
	                    for (var i = 0; i < vm.displayAttributes[0].length; i++) {
	                        var children = vm.models.selected.childCategories[0];
	                        for (var j = 0; j < children.length; j++) {
	                            if (children[j].nodeId === vm.displayAttributes[0][i].ProductAttributeSO.Id) {
	                                children.splice(i, 0, children.splice(j, 1)[0]);
	                            }
	                        }
	                    }
	                }
	            }
	            if (node) {
	                vm.attributeGroupAutoComplete.autocomplete.selectedItem = null;
	                if (node.childCategories && node.childCategories.length > 0) {
	                    var children = node.childCategories[0];
	                    if (children && children.length > 0 && children[0].nodeType == 'optionGroup') {
	                        vm.allowedTypes = ['optionGroup', 'attribute-group', undefined];
	                    } else if (children && children.length == 0) {
	                        vm.allowedTypes = ['option', 'optionBundle', undefined, 'optionGroup', 'attribute-group'];
	                    }
	                }
	                vm.models.selected = node;
	                if (node.nodeType === 'attribute-group') {
	                    vm.selectedNode = null;
	                    cascadeGroupChanges = false;
	                    selectedNodeId = '';
	                }
	            }
	        }
	
	        function sortLeftList(list, sortBy) {
	            list = _.sortBy(list, sortBy);
	            for (var i = 0; i < list.length; i++) {
	                if (list[i].childCategories && list[i].childCategories.length > 0 && list[i].childCategories[0].length > 0) {
	                    list[i].childCategories[0] = sortLeftList(list[i].childCategories[0], 'left');
	                }
	            }
	            return list;
	        }
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        vm.attributeGroupAutoComplete = {
	            'autocomplete': {
	                'querySearch': apiCallsService.searchSObjectRecords,
	                'displayName': 'Name',
	                'selectedItem': null,
	                'sObjectName': vm.prefix + 'ProductAttributeGroup__c',
	                'selectedItemChange': function(item) {
	                    if (item) {
	                        var payload = {
	                            ProductAttributeGroupMemberSOs: []
	                        };
	                        var objAGMember = {
	                            Name: item.Name
	                        };
	                        objAGMember[vm.prefix + 'ProductId__c'] = $stateParams.id;
	                        objAGMember[vm.prefix + 'AttributeGroupId__c'] = item.Id;
	                        payload.ProductAttributeGroupMemberSOs.push(objAGMember);
	                        optionsService.saveAttributesByCode(payload).then(function(response) {
	                            if (response && response.Success) {
	                                var attributeGroupMemberId = response.ProductAttributeGroupMemberSOs[0].Id;
	                                getAttributeGroupDetails(attributeGroupMemberId, true);
	                                vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ProductAttributeGroupMemberId__c'] = attributeGroupMemberId;
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                    }
	                }
	            }
	        };
	
	        $templateCache.put('attribute-list.html', __webpack_require__(415));
	        $templateCache.put('attribute-container.html', __webpack_require__(416));
	        $templateCache.put('attribute-content.html', __webpack_require__(417));
	
	        function getAttributeGroupDetails(attributeGroupMemberId, updateStructure) {
	            vm.pageNumberCenter = 1;
	            var request = {
	                SearchString: null,
	                NumberOfAttributeGroupsPerChunk: 1,
	                MaxNumberOfAttributesPerGroup: productConstants.MaxNumberOfAttributesPerGroup,
	                ChunkNumber: 1,
	                AttributeGroupMemberIds : [attributeGroupMemberId]
	            };
	            optionsService.getAttributeGroupsForProduct(request).then(function(response) {
	                if (response && response.length > 0) {
	                    vm.attributeGroup = response[0];
	                    vm.displayAttributes = [];
	                    vm.displayAttributes.push(response[0].ProductAttributeDOs);
	                    enableDisablePaging(response[0].ProductAttributeDOs);
	                    updateTreeOnLoadAttributes(vm.optionsTreeList);
	                    for (var i = 0; i < vm.displayAttributes[0].length; i++) {
	                        vm.displayAttributes[0][i].isSelected = true;
	                    }
	                    if (updateStructure) {
	                        vm.models.selected[vm.nodeChildren][0] = [];
	                        for (var i = 0; i < response[0].ProductAttributeDOs.length; i++) {
	                            if (response[0].ProductAttributeDOs[i].nodeType === 'attribute') {
	                                vm.models.selected[vm.nodeChildren][0].push({
	                                    nodeId: response[0].ProductAttributeDOs[i].ProductAttributeSO.Id,
	                                    label: response[0].ProductAttributeDOs[i].AttributeFieldLabel,
	                                    nodeType: 'attribute'
	                                });
	                            }
	                        }
	                    }
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        vm.addAttribute = function(event, index, node) {
	            if (node.isSelected !== true) {
	                node.isSelected = true;
	                if (vm.selectedNode != null && node.nodeType === 'attribute') {
	                    var newAttribute = {
	                        Name: node.Name,
	                        isSelected: true,
	                        nodeType: 'attribute',
	                        ProductAttributeSO: {}
	                    };
	                    if (node.ProductAttributeSO === undefined) {
	                        newAttribute.ProductAttributeSO[vm.prefix + 'Field__c'] = node.value;
	                        newAttribute.ProductAttributeSO[vm.prefix + 'AttributeGroupId__c'] = vm.attributeGroup.AttributeGroupSO.Id;
	                        newAttribute.ProductAttributeSO[vm.prefix + 'IsHidden__c'] = false;
	                        newAttribute.ProductAttributeSO[vm.prefix + 'IsPrimary__c'] = false;
	                        newAttribute.ProductAttributeSO[vm.prefix + 'IsReadOnly__c'] = false;
	                        newAttribute.FieldType = node.fieldType;
	                        node = newAttribute;
	                    }
	                    var children = vm.models.selected.childCategories[0];
	                    children.splice((vm.pageNumberCenter - 1) * productConstants.MaxNumberOfAttributesPerGroup + index, 0, { label: node.Name, nodeType: node.nodeType });
	                    vm.displayAttributes[0].splice(index, 0, node);
	                    updateTreeOnLoadAttributes(vm.optionsTreeList);
	                }
	                if (vm.productOptionsForm) {
	                    vm.productOptionsForm.$dirty = true;
	                }
	            } else {
	                if (vm.productOptionsForm) {
	                    vm.productOptionsForm.$dirty = true;
	                }
	                return node;
	            }
	        };
	
	        var getAttributesForAttributeGroup = function(pageNo) {
	            var request = {
	                "NumberOfRecordsPerChunk": productConstants.MaxNumberOfAttributesPerGroup,
	                "ChunkNumber": pageNo,
	                "AttributeGroupId": vm.attributeGroup.AttributeGroupSO.Id
	            };
	            attributesService.getAttributesForAttributeGroup(request).then(function(response) {
	                if (response && response.length > 0) {
	                    var selectedAttributeGroup = vm.attributeGroup;
	                    if (selectedAttributeGroup.FieldExpressionSOs && selectedAttributeGroup.FieldExpressionSOs.length > 0) {
	                        var fieldExpressionSOs = selectedAttributeGroup.FieldExpressionSOs;
	                        for (var i = 0; i < fieldExpressionSOs.length; i++) {
	                            for (var j = 0; j < response.length && response[j].nodeType === 'attribute'; j++) {
	                                if (fieldExpressionSOs[i][vm.prefix + 'UpdateField__c'] &&
	                                    fieldExpressionSOs[i][vm.prefix + 'UpdateField__c'].indexOf('.' + response[j].ProductAttributeSO[vm.prefix + 'Field__c']) > -1) {
	                                    if (fieldExpressionSOs[i][vm.prefix + 'Expression__c']) {
	                                        response[j].ProductAttributeSO.Expression = applicationService.updateExpression(true, fieldExpressionSOs[i][vm.prefix + 'Expression__c']);
	                                    }
	                                    response[j].ProductAttributeSO.ExpressionId = fieldExpressionSOs[i].Id;
	                                }
	                            }
	                        }
	                    }
	                    vm.displayAttributes = [];
	                    vm.displayAttributes.push(response);
	                    enableDisablePaging(response);
	                    updateTreeOnLoadAttributes(vm.optionsTreeList);
	                } else {
	                    enableDisablePaging(response);
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        };
	
	        vm.getAttributes = function(type) {
	            updateProductAttributeGroup().then(function(response) {
	                if (response) {
	                    if (type === 'next') {
	                        vm.pageNumberCenter++;
	                    } else if (type === 'previous') {
	                        vm.pageNumberCenter--;
	                    }
	                    getAttributesForAttributeGroup(vm.pageNumberCenter);
	                }
	            });
	        };
	
	        function enableDisablePaging(response) {
	            if (response.length > 0) {
	                if (response.length < productConstants.MaxNumberOfAttributesPerGroup) {
	                    vm.disableRightCenterBtn = true;
	                } else {
	                    vm.disableRightCenterBtn = false;
	                }
	                if (vm.pageNumberCenter === 1) {
	                    vm.disableLeftCenterBtn = true;
	                } else if (vm.pageNumberCenter !== 1) {
	                    vm.disableLeftCenterBtn = false;
	                }
	            } else {
	                if (vm.pageNumberCenter > 1) {
	                    vm.pageNumberCenter--;
	                    vm.disableRightCenterBtn = true;
	                } else {
	                    vm.disableLeftCenterBtn = true;
	                }
	            }
	        }
	
	        function updateProductAttributeGroup() {
	            var deferQ = $q.defer();
	            if (vm.attributeGroup && vm.selectedNode == null || 
	                (vm.attributeGroup && vm.selectedNode != null && vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ContentType__c'] === 'Attributes')) {
	                if (vm.productOptionsForm && vm.productOptionsForm.$dirty && vm.displayAttributes) {
	                    if (vm.displayAttributes.length > 0) {
	                        var payload = {
	                            AttributeGroupSO: vm.attributeGroup.AttributeGroupSO,
	                            ProductAttributeDOs: [],
	                            FieldExpressionSOs: vm.attributeGroup.FieldExpressionSOs,
	                            ProductAttributeGroupMemberSO: vm.attributeGroup.ProductAttributeGroupMemberSO
	                        };
	                        vm.attributeGroup.Name = vm.attributeGroup.AttributeGroupSO.Name;
	                        var attributes = angular.copy(vm.displayAttributes[0]);
	                        for (var i = 0; i < attributes.length; i++) {
	                            if (attributes[i].nodeType === 'attribute' && !attributes[i].exists) {
	                                payload.ProductAttributeDOs.push({
	                                    ProductAttributeSO: attributes[i].ProductAttributeSO
	                                });
	                            }
	                        }
	                        attributesService.updateProductAttributeGroup(payload, vm.pageNumberCenter).then(function(response) {
	                            if (response) {
	                                if (vm.productAttributesForm) {
	                                    vm.productAttributesForm.$dirty = false;
	                                }
	                                deferQ.resolve(true);
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                            deferQ.reject(false);
	                        });
	                    }
	                } else {
	                    deferQ.resolve(true);
	                }
	            } else {
	                deferQ.resolve(true);
	            }
	            return deferQ.promise;
	        }
	
	        vm.massEditObjAttributes = {};
	        vm.applyMassEditAttributes = function() {
	            if (vm.massEditObjAttributes) {
	                var attributes = vm.displayAttributes[0];
	                for (var i = 0; i < attributes.length; i++) {
	                    if (attributes[i].nodeType === 'attribute' && (attributes[i].FieldType === 'CURRENCY' || attributes[i].FieldType === 'DOUBLE' || attributes[i].FieldType === 'PERCENT'))
	                        if (vm.massEditObjAttributes.Expression !== undefined && vm.massEditObjAttributes.Expression !== varToCheck.Expression) {
	                            attributes[i].ProductAttributeSO.Expression = vm.massEditObjAttributes.Expression;
	                        }
	                    if (vm.massEditObjAttributes.IsReadOnly !== undefined && vm.massEditObjAttributes.IsReadOnly !== varToCheck.IsReadOnly) {
	                        attributes[i].ProductAttributeSO[vm.prefix + 'IsReadOnly__c'] = vm.massEditObjAttributes.IsReadOnly;
	                    }
	                    if (vm.massEditObjAttributes.IsHidden !== undefined && vm.massEditObjAttributes.IsHidden !== varToCheck.IsHidden) {
	                        attributes[i].ProductAttributeSO[vm.prefix + 'IsHidden__c'] = vm.massEditObjAttributes.IsHidden;
	                    }
	                    if (vm.massEditObjAttributes.IsPrimary !== undefined && vm.massEditObjAttributes.IsPrimary !== varToCheck.IsPrimary) {
	                        attributes[i].ProductAttributeSO[vm.prefix + 'IsPrimary__c'] = vm.massEditObjAttributes.IsPrimary;
	                    }
	                }
	                varToCheck = angular.copy(vm.massEditObjAttributes);
	            }
	        };
	
	        vm.deleteAttribute = function(node) {
	            var payload = { ProductAttributeIds: [node.ProductAttributeSO.Id] };
	            attributesService.deleteAttributeGroup(payload).then(function(response) {
	                if (response) {
	                    var attributes = vm.displayAttributes[0];
	                    attributes.splice(attributes.indexOf(node), 1);
	                    var children = vm.models.selected[vm.nodeChildren][0];
	                    var index = _.findIndex(children, function(field) {
	                        return (field.nodeId === node.ProductAttributeSO.Id && field.label === node.Name);
	                    });
	                    children.splice(index, 1);
	                    updateTreeOnLoadAttributes(vm.optionsTreeList);
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        };
	
	        function updateTreeOnLoadAttributes(arrayToUpdate) {
	            if (arrayToUpdate && vm.displayAttributes && vm.displayAttributes.length > 0) {
	                for (var i = 0; i < arrayToUpdate.length; i++) {
	                    var index = _.findIndex(vm.displayAttributes[0], function(field) {
	                        if (field.nodeType === 'attribute') {
	                            return (field.ProductAttributeSO[vm.prefix + 'Field__c'] === arrayToUpdate[i].value);
	                        }
	                    });
	                    if (index > -1) {
	                        arrayToUpdate[i].isSelected = true;
	                    } else {
	                        arrayToUpdate[i].isSelected = false;
	                    }
	                }
	            }
	        }
	
	        vm.addNewAttribute = function(index) {
	            var attributes = vm.displayAttributes[0];
	            var newAttribute = {
	                Name: '',
	                nodeType: 'attribute',
	                isSelected: true,
	                ProductAttributeSO: {},
	                autocomplete: {
	                    'querySearch': attributesService.targetAttributesFieldSearch,
	                    'displayName': 'label',
	                    'selectedItemChange': updateAttributeText
	                }
	            };
	            newAttribute.ProductAttributeSO[vm.prefix + 'AttributeGroupId__c'] = vm.attributeGroup.AttributeGroupSO.Id;
	            attributes.splice(index + 1, 0, newAttribute);
	        };
	
	        function updateAttributeText(item) {
	            var attributes = vm.displayAttributes[0];
	            if (item) {
	                attributes[selectedRowIndex].ProductAttributeSO[vm.prefix + 'Field__c'] = item.value;
	                attributes[selectedRowIndex].Name = item.label;
	            } else {
	                delete attributes[selectedRowIndex].ProductAttributeSO[vm.prefix + 'Field__c']
	            }
	        }
	
	        var selectedRowIndex;
	        vm.trackSelectedRowIndex = function(index) {
	            selectedRowIndex = index;
	        };
	
	        function addAttributes() {
	            $mdDialog.show({
	                controller: __webpack_require__(418),
	                template: __webpack_require__(419),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	
	                }
	            }).then(function(response) {
	                if (response) {
	                    //vm.getAttributeGroups('');
	                }
	            });
	        };
	
	        $scope.$on(vm.labels.NewAttributeButton.split(' ').join('-'), function() {
	            addAttributes();
	        });
	
	        
	
	        function saveOptionGroup(node) {
	            if (node.nodeType === 'attribute-group') {
	                var payload = {
	                    ProductAttributeGroupMemberSOs: []
	                };
	                var objAGMember = {
	                    Name: node.Name
	                };
	                objAGMember[vm.prefix + 'ProductId__c'] = $stateParams.id;
	                objAGMember[vm.prefix + 'AttributeGroupId__c'] = node.nodeId;
	                payload.ProductAttributeGroupMemberSOs.push(objAGMember);
	                optionsService.saveAttributesByCode(payload).then(function(res) {
	                    if (res && res.Success) {
	                        var request = {
	                            CategoryDOs: []
	                        };
	                        var attrGroupMemberId = res.ProductAttributeGroupMemberSOs[0].Id;
	                        if (vm.selectedNode == null) {
	                            var CategoryDO = {
	                                CategorySO: {
	                                    Name: node.label
	                                }
	                            };
	                            CategoryDO.CategorySO[vm.prefix + 'HierarchyLabel__c'] = node.label;
	                            CategoryDO.CategorySO[vm.prefix + 'Active__c'] = true;
	                            CategoryDO.CategorySO[vm.prefix + 'Type__c'] = 'Option Group';
	                            request.CategoryDOs.push(CategoryDO);
	                        } else {
	                            request.CategoryDOs.push({
	                                HierarchyId: vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'OptionGroupId__c']
	                            });
	                            request.CategoryHierarchySO = {
	                                Name: node.label
	                            };
	                            request.CategoryHierarchySO[vm.prefix + 'Label__c'] = node.label;
	                        }
	                        associationService.createCategory(request).then(function(response) {
	                            if (response && response.CategoryDOs.length > 0) {
	                                var objHierarchyDO = {
	                                    HierarchyDOs: []
	                                };
	                                objHierarchyDO.ProductIds = [];
	                                objHierarchyDO.ProductId = $stateParams.id;
	                                objHierarchyDO.OptionGroupIds = [];
	                                for (var i = 0; i < response.CategoryDOs.length; i++) {
	                                    objHierarchyDO.OptionGroupIds.push(response.CategoryDOs[i].HierarchyId);
	                                }
	                                optionsService.buildHierarchy(objHierarchyDO).then(function(response) {
	                                    if (response) {
	                                        var treeStructure = flat2TreeBuildHierarchy(response.ProductOptionGroupDO);
	                                        if(node && node.ProductAttributeDOs && node.ProductAttributeDOs.length > 0){
	                                            treeStructure.childCategories = [[]];
	                                            for(var k=0; k<node.ProductAttributeDOs.length;k++){
	                                                treeStructure.childCategories[0].push({
	                                                    nodeId: node.ProductAttributeDOs[k].ProductAttributeSO.Id,
	                                                    label: node.ProductAttributeDOs[k].AttributeFieldLabel,
	                                                    nodeType: 'attribute'
	                                                });
	                                            }
	                                        }
	                                        if (vm.selectedNode == null) {
	                                            treeStructure.isSelected = true;
	                                            vm.models.lists.A.push(treeStructure);
	                                        } else {
	                                            vm.models.selected.childCategories[0].push(treeStructure);
	                                            var newOG = angular.copy(response.ProductOptionGroupDO.ChildProductOptionGroupSOs[0]);
	                                            newOG.objectId = newOG.Id;
	                                            newOG.nodeType = 'optionGroup';
	                                            newOG.isSelected = true;
	                                            newOG.nodeId = newOG[vm.prefix + 'OptionGroupId__c'];
	                                            newOG[vm.prefix + 'ContentType__c'] = 'Attributes';
	                                            vm.selectedNode.ChildProductOptionGroupSOs.push(newOG);
	                                        }
	                                        if (response.ProductOptionGroupDO && response.ProductOptionGroupDO.ChildProductOptionGroupSOs.length > 0) {
	                                            for (var i = 0; i < response.ProductOptionGroupDO.ChildProductOptionGroupSOs.length; i++) {
	                                                if (objHierarchyDO.OptionGroupIds[0] === response.ProductOptionGroupDO.ChildProductOptionGroupSOs[i][vm.prefix + 'OptionGroupId__c']) {
	                                                    var OGToUpdate = {
	                                                        ProductOptionGroupSO: response.ProductOptionGroupDO.ChildProductOptionGroupSOs[i],
	                                                        ChildProductOptionGroupSOs: [],
	                                                        ComponentSOs: []
	                                                    };
	                                                    OGToUpdate.ProductOptionGroupSO[vm.prefix + 'ContentType__c'] = 'Attributes';
	                                                    OGToUpdate.ProductOptionGroupSO[vm.prefix + 'ProductAttributeGroupMemberId__c'] = attrGroupMemberId;
	
	                                                    optionsService.setOptionGroupDetails([OGToUpdate]).then(function(response) {
	                                                        if (response == true) {
	                                                            console.log(response);
	                                                        }
	                                                    });
	                                                }
	                                            }
	                                        }
	                                    }
	                                }, function(reason) {
	                                    applicationService.showErrorMessage(reason);
	                                });
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            }
	        }
	
	        /*this method will be called once user drops attribute group for option group of type 'Attributes' */
	        vm.onDrop = function(event, index, item){
	            vm.attributeGroupAutoComplete.autocomplete.selectedItem = {
	                Id: item.nodeId,
	                Name: item.label
	            };
	            if (vm.productOptionsForm) {
	                vm.productOptionsForm.$dirty = true;
	            }
	        };
	    };
	
	    productOptionController.$inject = [
	        '$scope',
	        '$state',
	        'lodash',
	        '$stateParams',
	        '$templateCache',
	        '$location',
	        '$window',
	        'optionsList',
	        'optionsService',
	        'productService',
	        'applicationService',
	        'systemConstants',
	        'i18nService',
	        'updateSelectedProduct',
	        'productConstants',
	        'cpqAdminConstants',
	        'productDetailService',
	        '$mdDialog',
	        'apiCallsService',
	        'attributesService',
	        '$q',
	        'associationService',
	        'catalogConstants'
	    ];
	
	    module.exports = productOptionController;
	})();


/***/ }),
/* 400 */
/***/ (function(module, exports) {

	module.exports = "<ul dnd-list=\"list\" dnd-drop=\"vm.addOption(event, index, item)\" class=\"options-list\" dnd-allowed-types=\"vm.allowedTypes\">\n    <li ng-repeat=\"item in list\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" dnd-moved=\"list.splice($index, 1)\" dnd-selected=\"models.selected = item\" ng-class=\"{selected: models.selected === item}\" ng-include=\"'content.html'\" onload=\"vm.checkArray(item)\" dnd-type=\"item.nodeType\">\n    </li>\n</ul>\n"

/***/ }),
/* 401 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"option-group\">\n    <!-- <div>{{item.label}}</div> -->\n    <!-- <div class=\"option-group-block\" ng-include=\"'content.html'\"></div> -->\n    <div class=\"option-columns\" layout=\"row\">\n        <div flex=\"15\">\n            <div class=\"form-group\">\n                <label>{{vm.labels.ContentType}}</label>\n                <material-form-field model=\"item.ProductOptionGroupSO[vm.prefix + 'ContentType__c']\" field-type=\"PICKLIST\" is-editable=\"true\" is-disabled=\"true\" properties=\"vm.contentTypePicklistEntries\">\n                </material-form-field>\n            </div>\n        </div>\n        <div flex=\"15\" ng-if=\"item.ProductOptionGroupSO[vm.prefix + 'ContentType__c']==='Options'\">\n            <div class=\"form-group\">\n                <label>{{vm.labels.MinOptions}}</label>\n                <material-form-field model=\"item.ProductOptionGroupSO[vm.prefix + 'MinOptions__c']\" field-type=\"string\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div flex=\"15\" ng-if=\"item.ProductOptionGroupSO[vm.prefix + 'ContentType__c']==='Options'\">\n            <div class=\"form-group\">\n                <label>{{vm.labels.MaxOptions}}</label>\n                <material-form-field model=\"item.ProductOptionGroupSO[vm.prefix + 'MaxOptions__c']\" field-type=\"string\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div flex=\"15\" ng-if=\"item.ProductOptionGroupSO[vm.prefix + 'ContentType__c']==='Options'\">\n            <div class=\"form-group eb-container\">\n                <label>{{vm.labels.MinTotalQty}}</label>\n                <material-form-field model=\"item.ProductOptionGroupSO[vm.prefix + 'MinTotalQuantity__c']\" field-type=\"string\" is-editable=\"true\">\n                </material-form-field>\n                <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus(vm.prefix + 'MinTotalQuantity__c')\">\n                    <i class=\"fa fa-external-link\"></i>\n                </button>\n            </div>\n        </div>\n        <div flex=\"15\" ng-if=\"item.ProductOptionGroupSO[vm.prefix + 'ContentType__c']==='Options'\">\n            <div class=\"form-group eb-container\">\n                <label>{{vm.labels.MaxTotalQty}}</label>\n                <material-form-field model=\"item.ProductOptionGroupSO[vm.prefix + 'MaxTotalQuantity__c']\" field-type=\"string\" is-editable=\"true\">\n                </material-form-field>\n                <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus(vm.prefix + 'MaxTotalQuantity__c')\">\n                    <i class=\"fa fa-external-link\"></i>\n                </button>\n            </div>\n        </div>\n        <div flex=\"30\" ng-if=\"item.ProductOptionGroupSO[vm.prefix + 'ContentType__c']==='Detail Page'\">\n            <div class=\"form-group\">\n                <label>{{vm.labels.DetailPage}}</label>\n                <material-form-field model=\"item.ProductOptionGroupSO[vm.prefix + 'DetailPage__c']\" field-type=\"string\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div flex=\"10\">\n            <div class=\"form-group text-center\">\n                <label class=\"is-hidden\">{{vm.labels.IsHidden}}</label>\n                <material-form-field model=\"item.ProductOptionGroupSO[vm.prefix + 'IsHidden__c']\" field-type=\"CHECKBOX\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div flex=\"10\" ng-if=\"item.ProductOptionGroupSO[vm.prefix + 'ContentType__c']==='Options'\">\n            <div class=\"form-group text-center\">\n                <label class=\"is-picklist\">{{vm.labels.IsPicklist}}</label>\n                <material-form-field model=\"item.ProductOptionGroupSO[vm.prefix + 'IsPicklist__c']\" field-type=\"CHECKBOX\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div flex=\"15\" ng-if=\"item.ProductOptionGroupSO[vm.prefix + 'ContentType__c']==='Options'\">\n            <div class=\"form-group\">\n                <label>{{vm.labels.ModifiableType}}</label>\n                <material-form-field model=\"item.ProductOptionGroupSO[vm.prefix + 'ModifiableType__c']\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"vm.modifiableTypePicklistEntries\">\n                </material-form-field>\n            </div>\n        </div>\n        <div flex=\"20\" ng-if=\"item.ProductOptionGroupSO[vm.prefix + 'ContentType__c']==='Attributes'\">\n            <div class=\"form-group\">\n                <label>{{vm.labels.AttributeGroup}}</label>\n                <material-form-field field-type=\"AUTOCOMPLETE\" field-label=\"' '\" properties=\"vm.attributeGroupAutoComplete\">\n                </material-form-field>\n            </div>\n        </div>\n        <div flex=\"20\" ng-if=\"item.ProductOptionGroupSO[vm.prefix + 'ContentType__c']==='Attributes'\" class=\"drop-attribute-group\" dnd-list=\"vm.pricingItems\" dnd-drop=\"vm.onDrop(event, index, item)\" dnd-allowed-types=\"['attribute-group']\" title=\"Drag & Drop Attribute Group\">\n        </div>\n    </div>\n    <div class=\"option-drop-zone\" ng-if=\"item.ComponentSOs\">\n        <div class=\"option-row\" layout=\"row\" ng-if=\"item.ComponentSOs.length>0\" flex>\n            <div flex>\n                {{vm.labels.Action}}\n                <i class=\"material-icons\" ng-click=\"vm.showMassEditPanel = !vm.showMassEditPanel\">mode_edit</i>\n            </div>\n            <div flex=\"15\">{{vm.labels.ComponentProduct}}</div>\n            <div flex>{{vm.labels.MinQty}}</div>\n            <div flex>{{vm.labels.MaxQty}}</div>\n            <div flex>{{vm.labels.DefaultQty}}</div>\n            <div flex>{{vm.labels.Default}}</div>\n            <div flex class=\"text-center\">{{vm.labels.QtyModifiable}}</div>\n            <div flex class=\"text-center\">{{vm.labels.AllowCloning}}</div>\n            <div flex class=\"text-center\">{{vm.labels.RequiredText}}</div>\n            <div flex class=\"text-center\">{{vm.labels.AutoUpdateQty}}</div>\n            <div flex class=\"text-center\">{{vm.labels.ConfigType}}</div>\n        </div>\n        <div ng-show=\"vm.showMassEditPanel\" class=\"option-columns mass-edit-panel\" layout=\"row\" flex>\n\n            <div class=\"action\" flex>\n                <button type=\"button\" class=\"slds-button slds-button_brand action\" data-ng-click=\"vm.applyMassEdit()\">{{vm.labels.Apply}}</button>\n            </div>\n            <div flex=\"15\">\n\n            </div>\n            <div class=\"eb-container-details\" flex>\n                <material-form-field model=\"vm.massEditObj.MinQty\" field-type=\"string\" is-editable=\"true\">\n                </material-form-field>\n                <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus('MassEditMinQty')\">\n                    <i class=\"fa fa-external-link\"></i>\n                </button>\n            </div>\n            <div class=\"eb-container-details\" flex>\n                <material-form-field model=\"vm.massEditObj.MaxQty\" field-type=\"string\" is-editable=\"true\">\n                </material-form-field>\n                <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus('MassEditMaxQty')\">\n                    <i class=\"fa fa-external-link\"></i>\n                </button>\n            </div>\n            <div class=\"eb-container-details\" flex>\n                <material-form-field model=\"vm.massEditObj.DefaultQty\" field-type=\"string\" is-editable=\"true\">\n                </material-form-field>\n                <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus('MassEditDefaultQty')\">\n                    <i class=\"fa fa-external-link\"></i>\n                </button>\n            </div>\n            <div class=\"text-center\" flex>\n                <material-form-field model=\"vm.massEditObj.Default\" field-type=\"CHECKBOX\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"text-center\" flex>\n                <material-form-field model=\"vm.massEditObj.Modifiable\" field-type=\"CHECKBOX\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"text-center\" flex>\n                <material-form-field model=\"vm.massEditObj.AllowCloning\" field-type=\"CHECKBOX\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"text-center\" flex>\n                <material-form-field model=\"vm.massEditObj.Required\" field-type=\"CHECKBOX\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"text-center\" flex>\n                <material-form-field model=\"vm.massEditObj.AutoUpdateQty\" field-type=\"CHECKBOX\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"text-center\" flex>\n                <material-form-field model=\"vm.massEditObj.ConfigType\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"vm.configTypePicklistEntries\">\n                </material-form-field>\n            </div>\n\n        </div>\n    </div>    \n    <div layout=\"column\" flex ng-if=\"item.ProductOptionGroupSO[vm.prefix + 'ContentType__c']==='Options'\" class=\"options-ul-parent\">\n            <ul dnd-list=\"item.ComponentSOs\" dnd-drop=\"vm.addOption(event, index, item)\" class=\"options-list\" dnd-allowed-types=\"vm.allowedTypes\" ng-class=\"{'hasOptionGroup': vm.allowedTypes.indexOf('optionGroup') > -1}\">\n                <li ng-repeat=\"component in item.ComponentSOs\" dnd-draggable=\"vm.getSelectedItemsToDrag(item.ComponentSOs, component)\" dnd-effect-allowed=\"move\" \n                    dnd-moved=\"vm.onMoved()\" ng-include=\"'content.html'\" dnd-type=\"component.nodeType\" \n                    dnd-selected=\"component.selected = !component.selected\" ng-class=\"{'selected': component.selected}\" \n                    ng-hide=\"item.ComponentSOs.dragging && component.selected\" dnd-dragstart=\"vm.onDragstart(item.ComponentSOs, event)\" dnd-dragend=\"item.ComponentSOs.dragging = false\" layout=\"column\" flex>\n                </li>\n            </ul>\n    </div>\n    \n    <!-- <div class=\"panel-body\" ng-repeat=\"list in item.childCategories\" ng-include=\"'list.html'\" ng-if='!item.collapse'></div>-->\n    <div class=\"clearfix\"></div>\n</div>\n"

/***/ }),
/* 402 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"item option\">{{item.label}}</div>\n"

/***/ }),
/* 403 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"option-columns\" layout=\"row\" flex>\n    <div class=\"action\" flex>\n        <div class=\"btn-group\" role=\"group\">\n            <button type=\"button\" class=\"slds-button slds-button--icon\" dnd-handle>\n                <i class=\"material-icons ng-scope\">more_vert</i>\n            </button>\n            <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.showRemoveConfirmation(component, 'option')\">\n                <i class=\"material-icons\" aria-hidden=\"true\">clear</i>\n            </button>\n        </div>\n    </div>\n    <div flex=\"15\">\n        <material-form-field model=\"component[vm.prefix + 'ComponentProductId__r'].Name\" field-type=\"string\" is-editable=\"true\" is-disabled=\"true\" title=\"{{component[vm.prefix + 'ComponentProductId__r'].Name}}\">\n        </material-form-field>\n    </div>\n    <div class=\"eb-container-details\" flex>\n        <material-form-field model=\"component[vm.prefix + 'MinQuantity__c']\" field-type=\"string\" is-editable=\"true\">\n        </material-form-field>\n        <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.onFocus(vm.prefix + 'MinQuantity__c', $index)\">\n            <i class=\"fa fa-external-link\"></i>\n        </button>\n    </div>\n    <div class=\"eb-container-details\" flex>\n        <material-form-field model=\"component[vm.prefix + 'MaxQuantity__c']\" field-type=\"string\" is-editable=\"true\">\n        </material-form-field>\n        <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus(vm.prefix + 'MaxQuantity__c', $index)\">\n            <i class=\"fa fa-external-link\"></i>\n        </button>\n    </div>\n    <div class=\"eb-container-details\" flex>\n        <material-form-field model=\"component[vm.prefix + 'DefaultQuantity__c']\" field-type=\"string\" is-editable=\"true\">\n        </material-form-field>\n        <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus(vm.prefix + 'DefaultQuantity__c', $index)\">\n            <i class=\"fa fa-external-link\"></i>\n        </button>\n    </div>\n    <div class=\"text-center\" flex>\n        <material-form-field model=\"component[vm.prefix + 'Default__c']\" field-type=\"CHECKBOX\" is-editable=\"true\">\n        </material-form-field>\n    </div>\n    <div class=\"text-center\" flex>\n        <material-form-field model=\"component[vm.prefix + 'Modifiable__c']\" field-type=\"CHECKBOX\" is-editable=\"true\">\n        </material-form-field>\n    </div>\n    <div class=\"text-center\" flex>\n        <material-form-field model=\"component[vm.prefix + 'AllowCloning__c']\" field-type=\"CHECKBOX\" is-editable=\"true\">\n        </material-form-field>\n    </div>\n    <div class=\"text-center\" flex>\n        <material-form-field model=\"component[vm.prefix + 'Required__c']\" field-type=\"CHECKBOX\" is-editable=\"true\">\n        </material-form-field>\n    </div>\n    <div class=\"text-center\" flex>\n        <material-form-field model=\"component[vm.prefix + 'AutoUpdateQuantity__c']\" field-type=\"CHECKBOX\" is-editable=\"true\">\n        </material-form-field>\n    </div>\n    <div class=\"text-center\" flex>\n        <material-form-field model=\"component[vm.prefix + 'ConfigType__c']\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"vm.configTypePicklistEntries\">\n        </material-form-field>\n    </div>\n</div>\n"

/***/ }),
/* 404 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"option-group\">\n    <div class=\"option-columns\" layout=\"row\">\n        <div flex=\"15\">\n            <div class=\"form-group\">\n                <label>{{vm.labels.MinOptions}}</label>\n                <material-form-field model=\"vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'MinOptions__c']\" field-type=\"string\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div flex=\"15\">\n            <div class=\"form-group\">\n                <label>{{vm.labels.MaxOptions}}</label>\n                <material-form-field model=\"vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'MaxOptions__c']\" field-type=\"string\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div flex=\"15\">\n            <div class=\"form-group eb-container\">\n                <label>{{vm.labels.MinTotalQty}}</label>\n                <material-form-field model=\"vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'MinTotalQuantity__c']\" field-type=\"string\" is-editable=\"true\">\n                </material-form-field>\n                <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus(vm.prefix + 'MinTotalQuantity__c')\">\n                    <i class=\"fa fa-external-link\"></i>\n                </button>\n            </div>\n        </div>\n        <div flex=\"15\">\n            <div class=\"form-group eb-container\">\n                <label>{{vm.labels.MaxTotalQty}}</label>\n                <material-form-field model=\"vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'MaxTotalQuantity__c']\" field-type=\"string\" is-editable=\"true\">\n                </material-form-field>\n                <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus(vm.prefix + 'MaxTotalQuantity__c')\">\n                    <i class=\"fa fa-external-link\"></i>\n                </button>\n            </div>\n        </div>\n        <div flex=\"10\">\n            <div class=\"form-group text-center\">\n                <label class=\"is-hidden\">{{vm.labels.IsHidden}}</label>\n                <material-form-field model=\"vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'IsHidden__c']\" field-type=\"CHECKBOX\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div flex=\"10\">\n            <div class=\"form-group text-center\">\n                <label class=\"is-picklist\">{{vm.labels.IsPicklist}}</label>\n                <material-form-field model=\"vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'IsPicklist__c']\" field-type=\"CHECKBOX\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div flex=\"20\">\n            <div class=\"form-group\">\n                <label>{{vm.labels.ModifiableType}}</label>\n                <material-form-field model=\"vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'ModifiableType__c']\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"vm.modifiableTypePicklistEntries\">\n                </material-form-field>\n            </div>\n        </div>\n    </div>\n    <div class=\"\">\n        <ul dnd-list=\"vm.selectedNode.ChildProductOptionGroupSOs\" dnd-drop=\"vm.addOption(event, index, item)\" class=\"options-list\" dnd-allowed-types=\"['optionGroup', 'attribute-group']\">\n            <li ng-repeat=\"item in vm.selectedNode.ChildProductOptionGroupSOs\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" dnd-moved=\"vm.selectedNode.ChildProductOptionGroupSOs.splice($index, 1)\" dnd-type=\"item.nodeType\">\n                <div class=\"option-columns\">\n                    <div class=\"sm-width action flex-0\">\n                        <div class=\"btn-group\" role=\"group\">\n                            <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.showRemoveConfirmation(item, 'optiongroup')\">\n                                <i class=\"material-icons\" aria-hidden=\"true\">clear</i>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"lg-width flex-1\">\n                        {{item[vm.prefix + 'OptionGroupId__r'].Name}}\n                    </div>\n                </div>\n            </li>\n        </ul>\n    </div>\n</div>\n"

/***/ }),
/* 405 */
/***/ (function(module, exports) {

	module.exports = "<ul dnd-list=\"list\"  dnd-allowed-types=\"[]\" dnd-drop=\"vm.addOption(event, index, item)\" class=\"options-list\">\r\n    <li ng-repeat=\"item in list\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" dnd-moved=\"list.splice($index, 1)\" dnd-selected=\"models.selected = item\" ng-class=\"{selected: models.selected === item}\" ng-include=\"item.nodeType=='option'||item.nodeType=='attribute'?'left-content.html' : 'left-container.html'\" onload=\"vm.checkArray(item)\" dnd-disable-if=\"true\" dnd-type=\"item.nodeType\">\r\n    </li>\r\n</ul>\r\n"

/***/ }),
/* 406 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"option-group\">\r\n    <div ng-class=\"{'option-parent': item.nodeType=='optionGroup' || item.nodeType=='attribute-group', 'selected': vm.models.selected === item}\">\r\n    \t<i ng-class=\"item.collapse || (item.collapse === undefined && item.nodeType=='optionBundle')? 'fa fa-caret-right' : 'fa fa-caret-down'\" ng-click=\"vm.expandBundleLeftPanel(item)\" ng-if=\"item.nodeType !== 'optionBundle' || vm.showForOptionBundleInPopup\"></i>\r\n    \t<span class=\"optionGroupHeader\" ng-if=\"item.nodeType=='optionGroup'||item.nodeType=='attribute-group'\">\r\n            <i class=\"material-icons\" title=\"Option Group\">blur_circular</i>\r\n            <span class=\"option-group-label slideOutPencilEdit\" title=\"{{item.name}}\">\r\n                <a ng-href=\"/{{item.nodeId}}\" target=\"_blank\"><i class=\"material-icons\" title=\"Edit\">create</i></a>\r\n                <span ng-click=\"vm.changeMiddlePanel(item)\">\r\n                    {{item.label}}\r\n                </span>\r\n            </span>\r\n        </span>\r\n    \t<span class=\"optionGroupHeader\" ng-if=\"item.nodeType=='optionBundle' && vm.showForOptionBundleInPopup === undefined\" class=\"bundleNode\">\r\n            <i class=\"material-icons\" title=\"Bundle\">bubble_chart</i>\r\n            <span class=\"option-group-label slideOutPencilEdit\" title=\"{{item.name}}\">\r\n                <a ng-href=\"/{{item.nodeId}}\" target=\"_blank\"><i class=\"material-icons\" title=\"Edit\">create</i></a>\r\n                <span data-ng-click=\"vm.viewOptionBundle(item)\">\r\n                    {{item.label}}\r\n                </span>\r\n            </span>\r\n        </span>\r\n        <span class=\"optionGroupHeader\" ng-if=\"item.nodeType=='optionBundle' && vm.showForOptionBundleInPopup\" class=\"bundleNode\">\r\n            <i class=\"material-icons\" title=\"Bundle\">bubble_chart</i>\r\n            <span class=\"option-group-label slideOutPencilEdit\" title=\"{{item.name}}\">\r\n                <a ng-href=\"/{{item.nodeId}}\" target=\"_blank\"><i class=\"material-icons\" title=\"Edit\">create</i></a>\r\n                <span>\r\n                    {{item.label}}\r\n                </span>\r\n            </span>\r\n        </span>\r\n    </div>\r\n    <div ng-repeat=\"list in item.childCategories\" ng-include=\"'left-list.html'\" ng-if='!item.collapse' ng-class=\"item.nodeType=='optionBundle'? '':'left-children'\"></div>\r\n    <div class=\"clearfix\"></div>\r\n</div>\r\n"

/***/ }),
/* 407 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-option\">\r\n\t<span class=\"optionNode\" ng-if=\"item.nodeType==='option'\">\r\n    \t<i class=\"material-icons\" title=\"Option\">bubble_chart</i>\r\n    \t<span class=\"option-label slideOutPencilEdit\" title=\"{{item.name}}\">\r\n            <a ng-href=\"/{{item.nodeId}}\" target=\"_blank\"><i class=\"material-icons\" title=\"Edit\">create</i></a>\r\n            <span data-ng-click=\"vm.goToDetailsPage(item)\">\r\n                {{item.label}}\r\n            </span>\r\n        </span>\r\n    </span>\r\n    <div ng-if=\"item.nodeType==='attribute'\">\r\n        <i class=\"material-icons\" title=\"Option\">device_hub</i>\r\n        <span class=\"option-label slideOutPencilEdit\" title=\"{{item.name}}\">\r\n            <a ng-href=\"/{{item.nodeId}}\" target=\"_blank\"><i class=\"material-icons\" title=\"Edit\">create</i></a>\r\n            <span>\r\n                {{item.label}}\r\n            </span>\r\n        </span>\r\n    </div>\r\n</div>\r\n"

/***/ }),
/* 408 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"\">\n    <ul dnd-list=\"vm.models.lists.A\" dnd-drop=\"vm.addOption(event, index, item)\" class=\"options-list\" dnd-allowed-types=\"['optionGroup', 'attribute-group']\">\n        <li ng-repeat=\"item in vm.models.lists.A\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" dnd-moved=\"vm.models.lists.A.splice($index, 1)\" dnd-type=\"item.nodeType\">\n            <div class=\"option-columns\">\n                <div class=\"sm-width action flex-0\">\n                    <div class=\"btn-group\" role=\"group\">\n                        <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.showRemoveConfirmation(item, 'optiongroup')\">\n                            <i class=\"material-icons\" aria-hidden=\"true\">clear</i>\n                        </button>\n                    </div>\n                </div>\n                <div class=\"lg-width flex-1\">\n                    {{item.label}}\n                </div>\n            </div>\n        </li>\n    </ul>\n</div>\n"

/***/ }),
/* 409 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var createCategoryController = function ($scope, $mdDialog, productStructure, systemConstants, i18nService, optionsService, $stateParams, cpqAdminConstants, $q, productDetailService,
	        applicationService, associationService, productConstants, _, apiCallsService) {
	
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '';
	
	        function onLoad() {
	            vm.parentCategory = [];
	            vm.labels = i18nService.CustomLabel;
	            productStructure = JSON.parse(productStructure.ProductStructureJSONs[0].Value);
	            vm.optionGroups = productStructure.filter(function (node) {
	                return node.nodeType === 'optionGroup' && (node.leaf === false || node.hasProducts === false); // -1 means not present
	            });
	            vm.optionGroups.sort(function (a, b) {
	                return a.rootSequence - b.rootSequence || a.left - b.left;
	            });
	            vm.optionGroups.unshift({ nodeId: '', label: 'No Parent' });
	            vm.parentOG = '';
	            for (var i = 0; i < vm.optionGroups.length; i++) {
	                vm.optionGroups[i].parent = [vm.optionGroups[i].label];
	                getParentsHierarchy(i, vm.optionGroups[i].parentId);
	                vm.optionGroups[i].parent.reverse();
	            }
	            vm.typePicklistEntries = {
	                PicklistValues: [{
	                    label: vm.labels.OptionGroup,
	                    value: 'Option Group'
	                }, {
	                    label: vm.labels.OptionGroupAndOffering,
	                    value: 'Both'
	                }]
	            };
	            vm.Type = 'Option Group'; //Default value is Option Group
	            vm.IsActive = true;
	            getPicklistValues();
	        }
	
	        vm.cancel = function() {
	            $mdDialog.hide();
	        };
	
	        vm.saveOptionGroup = function() {
	            if (vm.frmCreateCategory.$valid) {
	                var request = {
	                    CategoryDOs: []
	                };
	                if (!vm.parentOG) {
	                    var CategoryDO = {
	                        CategorySO: {
	                            Name: vm.Name
	                        }
	                    };
	                    CategoryDO.CategorySO[prefix + 'HierarchyLabel__c'] = vm.Label;
	                    CategoryDO.CategorySO[prefix + 'Active__c'] = vm.IsActive || false;
	                    CategoryDO.CategorySO[prefix + 'Type__c'] = vm.Type;
	                    request.CategoryDOs.push(CategoryDO);
	                } else {
	                    request.CategoryDOs.push({
	                        HierarchyId: vm.parentOG
	                    });
	                    request.CategoryHierarchySO = {
	                        Name: vm.Name
	                    };
	                    request.CategoryHierarchySO[prefix + 'Label__c'] = vm.Label;
	                    request.CategoryHierarchySO[prefix + 'LongDescription__c'] = vm.LongDescription || "";                    
	                }
	                associationService.createCategory(request).then(function(response) {
	                    if (response && response.CategoryDOs.length > 0) {
	                        saveImage(response.CategoryDOs).then(function(res) {
	                            if (res) {
	                                var objHierarchyDO = {
	                                    HierarchyDOs: []
	                                };
	                                objHierarchyDO.ProductIds = [];
	                                objHierarchyDO.ProductId = $stateParams.id;
	                                objHierarchyDO.OptionGroupIds = [];
	                                for (var i = 0; i < response.CategoryDOs.length; i++) {
	                                    objHierarchyDO.OptionGroupIds.push(response.CategoryDOs[i].HierarchyId);
	                                }
	                                optionsService.buildHierarchy(objHierarchyDO).then(function (response) {
	                                    if (response) {
	                                        if (vm.ContentType !== 'Options') {
	                                            if (response.ProductOptionGroupDO && response.ProductOptionGroupDO.ChildProductOptionGroupSOs.length > 0) {
	                                                for (var i = 0; i < response.ProductOptionGroupDO.ChildProductOptionGroupSOs.length; i++) {
	                                                    if (objHierarchyDO.OptionGroupIds[0] === response.ProductOptionGroupDO.ChildProductOptionGroupSOs[i][prefix + 'OptionGroupId__c']) {
	                                                        var OGToUpdate = {
	                                                            ProductOptionGroupSO: response.ProductOptionGroupDO.ChildProductOptionGroupSOs[i],
	                                                            ChildProductOptionGroupSOs: [],
	                                                            ComponentSOs: []
	                                                        };
	                                                        OGToUpdate.ProductOptionGroupSO[prefix + 'ContentType__c'] = vm.ContentType;
	
	                                                        optionsService.setOptionGroupDetails([OGToUpdate]).then(function (response) {
	                                                            if (response == true) {
	                                                                $mdDialog.hide(response);
	                                                            }
	                                                        });
	                                                    }
	                                                }
	                                            }
	                                        }
	                                        else {
	                                            $mdDialog.hide(true);
	                                        }
	                                    }
	                                }, function(reason) {
	                                    applicationService.showErrorMessage(reason);
	                                });
	                            }
	                        });
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else {
	                vm.frmCreateCategory.$setSubmitted();
	            }
	        };
	
	        function saveImage(CategoryDOs) {
	            var deferQ = $q.defer();
	            if (vm.fileDetails && vm.fileDetails.source != '') {
	                var attachmentRequestDOs = [];
	
	                var blob = vm.fileDetails.source.replace(/^data:image\/(png|jpg|jpeg);base64,/, "").replace(/^data:application\/(pdf|msword);base64,/, "");
	                for (var i = 0; i < CategoryDOs.length; i++) {
	                    attachmentRequestDOs.push({
	                        parentId: CategoryDOs[i].HierarchyId,
	                        AttachmentName: vm.fileDetails.name,
	                        attachmentBody: blob
	                    });
	                }
	                productDetailService.uploadAttachments(attachmentRequestDOs)
	                    .then(function(response) {
	                            if (response.length > 0) {
	                                console.log(response);
	                                deferQ.resolve(true);
	                            }
	                        },
	                        function(reason) {
	                            applicationService.showErrorMessage(reason);
	                            deferQ.reject(reason);
	                        });
	            } else {
	                deferQ.resolve(true);
	            }
	            return deferQ.promise;
	        }
	
	        $scope.uploadImage = function(event) {
	            var files = event.target.files || event.originalEvent.dataTransfer.files;
	            for (var i = 0; i < files.length; i++) {
	                var file = files[i];
	                if (file.size <= cpqAdminConstants.IMAGE_SIZE) {
	                    var reader = new FileReader();
	                    var fileObj = files[i];
	                    //This below code block is detching scope and the element. 
	                    //We might need to use $apply down the line to refresh the image data model
	                    reader.onload = (function(fileObj) {
	                        return function(eventObj) {
	                            var fileType = fileObj.name.substr(fileObj.name.lastIndexOf('.') + 1);
	                            vm.fileDetails = {
	                                name: fileObj.name,
	                                source: eventObj.target.result,
	                                type: fileType
	                            };
	                            $scope.$apply();
	                        }
	                    })(fileObj);
	                    reader.readAsDataURL(file);
	                } else {
	                    alert(file.name + ' ' + vm.labels.ImageSizeExceeded);
	                }
	            }
	            event.target.value = '';
	        };
	
	        vm.onNameFieldBlur = function() {
	            if (vm.frmCreateCategory.name.$viewValue !== null || vm.Name !== null) {
	                vm.Label = vm.frmCreateCategory.name.$viewValue || vm.Name;
	            }
	        };
	
	        function getParentsHierarchy(index, parentId) {
	            for (var j = 0; j < productStructure.length; j++) {
	                if (parentId === productStructure[j].nodeId) {
	                    vm.optionGroups[index].parent.push(productStructure[j].label);
	                    if (productStructure[j].parentId) {
	                        getParentsHierarchy(index, productStructure[j].parentId);
	                    }
	                }
	            }
	        }
	
	        function getPicklistValues() {
	            apiCallsService.getSObjectPicklistFields('ProductOptionGroup__c', ['ContentType__c']).then(function (response) {
	                if (response.length) {
	                    vm.contentTypePicklistEntries = {
	                        PicklistValues: response[0].PicklistValues
	                    };
	                    vm.ContentType = 'Options';
	                } else {
	                    vm.contentTypePicklistEntries = {
	                        PicklistValues: []
	                    };
	                }
	            }, function (reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        onLoad();
	    };
	
	    createCategoryController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'productStructure',
	        'systemConstants',
	        'i18nService',
	        'optionsService',
	        '$stateParams',
	        'cpqAdminConstants',
	        '$q',
	        'productDetailService',
	        'applicationService',
	        'associationService',
	        'productConstants',
	        'lodash',
	        'apiCallsService'
	    ];
	
	    module.exports = createCategoryController;
	})();


/***/ }),
/* 410 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"category-dialog create-option-dialog\" ng-cloak>\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h4>{{vm.labels.CreateNewOG}}</h4>\n            <span flex></span>\n            <button class=\"slds-button slds-button--icon\" ng-click=\"vm.cancel()\">\n                <i class=\"material-icons\">clear</i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"dialog-content\">\n        <div class=\"dialog-left leftTreeContainer\">\n            <h4>{{vm.labels.SelectParentOG}}</h4>\n            <div class=\"categories-left-tree-container create-option-tree-container md-padding\">\n                <md-radio-group ng-model=\"vm.parentOG\">\n                    <md-radio-button value=\"{{item.nodeId}}\" ng-repeat=\"item in vm.optionGroups\">{{item.parent.join(\" >> \")}}</md-radio-button>\n                </md-radio-group>\n            </div>\n        </div>\n        <div class=\"dialog-right md-padding\">\n            <form name=\"vm.frmCreateCategory\" novalidate>\n                <div class=\"input-group-container\">\n                    <material-form-field model=\"vm.Name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.Name\" is-required=\"true\" name=\"name\" on-blur=\"vm.onNameFieldBlur()\">\n                    </material-form-field>\n                    <div ng-messages=\"vm.frmCreateCategory.name.$error\" ng-if=\"vm.frmCreateCategory.name.$touched || vm.frmCreateCategory.$submitted\">\n                        <p ng-message=\"required\" class=\"formError\">\n                            {{vm.labels.MandatoryField}}\n                        </p>\n                    </div>\n                </div>\n                <div class=\"input-group-container\">\n                    <material-form-field model=\"vm.Label\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.LabelText\" is-required=\"true\" name=\"label\">\n                    </material-form-field>\n                    <div ng-messages=\"vm.frmCreateCategory.label.$error\" ng-if=\"vm.frmCreateCategory.label.$touched || vm.frmCreateCategory.$submitted \">\n                        <p ng-message=\"required\" class=\"formError\">\n                            {{vm.labels.MandatoryField}}\n                        </p>\n                    </div>\n                </div>\n                <div ng-if=\"!vm.parentOG\">\n                    <div class=\"input-group-container\">\n                        <material-form-field model=\"vm.IsActive\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.Active\" element-id=\"'active'\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div class=\"input-group-container\" data-ng-if=\"!vm.parentOG\">\n                    <material-form-field model=\"vm.Type\" field-type=\"PICKLIST\" is-editable=\"true\" field-label=\"vm.labels.Type\" is-required=\"true\" name=\"type\" properties=\"vm.typePicklistEntries\">\n                    </material-form-field>\n                    <div ng-messages=\"vm.frmCreateCategory.type.$error\" ng-if=\"vm.frmCreateCategory.type.$touched || vm.frmCreateCategory.$submitted \">\n                        <p ng-message=\"required\" class=\"alert alert-danger formError\" role=\"alert\">\n                            {{vm.labels.MandatoryField}}\n                        </p>\n                    </div>\n                </div>\n                <div class=\"input-group-container\">\n                    <material-form-field model=\"vm.ContentType\" field-type=\"PICKLIST\" is-editable=\"true\" field-label=\"'Content Type'\" properties=\"vm.contentTypePicklistEntries\">\n                    </material-form-field>\n                </div>\n                <div ng-if=\"vm.parentOG\">\n                    <div class=\"input-group-container\">\n                        <div class=\"form-group angular-wysiwyg\">\n                            <label for=\"LongDescription\" class=\"detailsLabelColor\">{{vm.labels.LongDescription}}</label>\n                            <wysiwyg textarea-id=\"question\" textarea-class=\"form-control\" textarea-height=\"180px\" textarea-name=\"textareaQuestion\" textarea-required ng-model=\"vm.LongDescription\" enable-bootstrap-title=\"true\"></wysiwyg>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.DialogCancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.saveOptionGroup()\">{{vm.labels.DialogSaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 411 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var viewOptionBundleController = function($scope, $state, $mdDialog, $templateCache, $location, $window, _, systemConstants, i18nService, applicationService, optionsService, selectedOptionBundle, treeOptionBundle) {
	
	        var vm = this;
	        vm.showForOptionBundleInPopup = true;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.selectedOptionBundle = angular.copy(selectedOptionBundle);
	        vm.treeOptionBundle = angular.copy(treeOptionBundle);
	        vm.selectedNode = null;
	        
	        vm.models = {
	            selected: null,
	            lists: {
	                //This data model seems to be non-confirming. Need to refactor this one.
	                'A': optionsService.flat2Tree(JSON.parse(treeOptionBundle.ProductStructureJSONs[0].Value))
	            }
	        };
	
	        vm.expandBundleLeftPanel = function(item) {
	            item.collapse = !item.collapse;
	            if (item.nodeType == "optionBundle" && item.childCategories && item.childCategories.length > 0 && item.childCategories[0].length == 0) {
	                optionsService.getProductStructure(item.componentProductId)
	                    .then(function(response) {
	                        var JSONResponse = optionsService.flat2Tree(JSON.parse(response.ProductStructureJSONs[0].Value));
	                        updateBundleLeftPanel(vm.models.lists.A, item.nodeId, JSONResponse);
	                        item.collapse = !item.collapse;
	
	                        //Now update the parentId for the bundle's option groups
	                        if (JSONResponse && JSONResponse.length > 0) {
	                            for (var i = 0; i < JSONResponse.length; i++) {
	                                JSONResponse[i].parentId = item.nodeId;
	                            }
	                        }
	                    }, function(reason) {
	                        applicationService.showErrorMessage(reason);
	                    });
	            }
	        };
	
	        function updateBundleLeftPanel(array, nodeId, response) {
	            _.each(array, function(node) {
	                if (node && node.nodeType == "optionBundle" && node.nodeId === nodeId) {
	                    node.childCategories[0] = response;
	                    return;
	                } else if (node.childCategories && node.childCategories.length > 0) {
	                    updateBundleLeftPanel(node.childCategories[0], nodeId, response);
	                }
	            });
	        }
	
	        vm.changeMiddlePanel = function(node) {
	            vm.selectedNode = null;
	            vm.allowedTypes = ['option', 'optionBundle', undefined];
	            if (node.childCategories && node.childCategories.length > 0) {
	                var children = node.childCategories[0];
	                if (children && children.length > 0 && children[0].nodeType == 'optionGroup') {
	                    vm.allowedTypes = ['optionGroup', undefined];
	                } else if (children && children.length == 0) {
	                    vm.allowedTypes = ['option', 'optionBundle', undefined, 'optionGroup'];
	                }
	            }
	            vm.models.selected = node;
	            optionsService.getOptionGroupDetails(node.objectId)
	                .then(function(response) {
	                    vm.selectedNode = response;
	                    for (var i = 0; i < vm.selectedNode.ComponentSOs.length; i++) {
	                        vm.selectedNode.ComponentSOs[i].isSelected = true;
	                    }
	                    for (var i = 0; i < vm.selectedNode.ChildProductOptionGroupSOs.length; i++) {
	                        vm.selectedNode.ChildProductOptionGroupSOs[i].nodeId = vm.selectedNode.ChildProductOptionGroupSOs[i][vm.prefix + 'OptionGroupId__c'];
	                        vm.selectedNode.ChildProductOptionGroupSOs[i].objectId = vm.selectedNode.ChildProductOptionGroupSOs[i].Id;
	                        vm.selectedNode.ChildProductOptionGroupSOs[i].nodeType = 'optionGroup';
	                        vm.selectedNode.ChildProductOptionGroupSOs[i].isSelected = true;
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        };
	
	        vm.goToDetails = function() {
	            $mdDialog.hide().then(function() {
	                var absUrl = $location.absUrl();
	                var getDetilsPageUrl = absUrl.substring(0, absUrl.indexOf('product/')) + 'product/' + selectedOptionBundle.componentProductId + '/details';
	                $window.open(getDetilsPageUrl, '_blank');
	            });
	        };
	
	        vm.cancel = function() {
	            $mdDialog.hide();
	        };
	
	    };
	
	    viewOptionBundleController.$inject = [
	        '$scope',
	        '$state',
	        '$mdDialog',
	        '$templateCache',
	        '$location',
	        '$window',
	        'lodash',
	        'systemConstants',
	        'i18nService',
	        'applicationService',
	        'optionsService',
	        'selectedOptionBundle',
	        'treeOptionBundle'
	    ];
	
	    module.exports = viewOptionBundleController;
	})();


/***/ }),
/* 412 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"view-option-bundle\" ng-cloak>\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h4>{{vm.labels.OptionBundle}}</h4>\n            <span flex></span>\n            <button class=\"slds-button slds-button--icon\" ng-click=\"vm.cancel()\">\n                <i class=\"material-icons\">clear</i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"dialog-content\" layout=\"row\">\n        <div class=\"dialog-left left-tree\" flex=\"40\">\n            <h4 class=\"tree-heading\"> {{vm.selectedOptionBundle.label}} </h4>\n            <div class=\"option-bundle-wrapper\">\n                <div ng-repeat=\"list in vm.models.lists\" class=\"option-group-list\">\n                    <div class=\"dropzone\">\n                        <div ng-include=\"'left-list.html'\"></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"dialog-right\" flex=\"60\">\n            <div data-ng-if=\"vm.selectedNode.ProductOptionGroupSO\">\n                <div layout=\"row\">\n                    <div flex=\"50\" class=\"md-padding\">\n                        <label>{{vm.labels.MinOptions}}</label>\n                        <material-form-field model=\"vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'MinOptions__c']\" field-type=\"string\" is-editable=\"false\">\n                        </material-form-field>\n                    </div>\n                    <div flex=\"50\" class=\"md-padding\">\n                        <label>{{vm.labels.MaxOptions}}</label>\n                        <material-form-field model=\"vm.selectedNode.ProductOptionGroupSO[vm.prefix + 'MaxOptions__c']\" field-type=\"string\" is-editable=\"false\">\n                        </material-form-field>\n                    </div>\n                </div>\n            </div>\n            <div class=\"option-group-header\" data-ng-if=\"vm.selectedNode !== null\">\n                <div layout=\"row\" data-ng-if=\"vm.selectedNode.ChildProductOptionGroupSOs && vm.selectedNode.ChildProductOptionGroupSOs.length > 0\">\n                    <div flex=\"60\">{{vm.labels.OptionGroupName}}</div>\n                    <div flex=\"20\">{{vm.labels.MinOptions}}</div>\n                    <div flex=\"20\">{{vm.labels.MaxOptions}}</div>\n                </div>\n                <div layout=\"row\" data-ng-if=\"vm.selectedNode.ComponentSOs && vm.selectedNode.ComponentSOs.length > 0\">\n                    <div flex=\"60\">{{vm.labels.ComponentProduct}}</div>\n                    <div flex=\"20\">{{vm.labels.MinQty}}</div>\n                    <div flex=\"20\">{{vm.labels.MaxQty}}</div>\n                </div>\n            </div>\n            <div class=\"option-group-body\">\n                <div data-ng-if=\"vm.selectedNode.ChildProductOptionGroupSOs && vm.selectedNode.ChildProductOptionGroupSOs.length > 0\">\n                    <div layout=\"row\" data-ng-repeat=\"productOptionSOList in vm.selectedNode.ChildProductOptionGroupSOs\">\n                        <div flex=\"60\">{{productOptionSOList[vm.prefix + 'OptionGroupId__r'].Name}}</div>\n                        <div flex=\"20\">{{productOptionSOList[vm.prefix + 'MinOptions__c']}}</div>\n                        <div flex=\"20\">{{productOptionSOList[vm.prefix + 'MaxOptions__c']}}</div>\n                    </div>\n                </div>\n                <div data-ng-if=\"vm.selectedNode.ComponentSOs && vm.selectedNode.ComponentSOs.length > 0\">\n                    <div layout=\"row\" data-ng-repeat=\"componentSOList in vm.selectedNode.ComponentSOs\">\n                        <div flex=\"60\">{{componentSOList[vm.prefix + 'ComponentProductId__r'].Name}}</div>\n                        <div flex=\"20\">{{componentSOList[vm.prefix + 'MinQuantity__c']}}</div>\n                        <div flex=\"20\">{{componentSOList[vm.prefix + 'MaxQuantity__c']}}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.DialogCancelButton}}</a>\n        <button class=\"slds-button slds-button_brand\" data-ng-click=\"vm.goToDetails()\">{{vm.labels.GoToDetailsPage}}</button>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 413 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var expressionBuilderController = function($q, $filter, $scope, i18nService, systemConstants, applicationService, $mdDialog, expression, remoteService) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '',
	            visiblePanel = '';
	        vm.labels = i18nService.CustomLabel;
	        vm.properties = {
	            ElementId: 'eb-textarea',
	            FieldLabel: vm.labels.Expression
	        };
	        vm.expression = expression || '';
	        vm.selectedFunction = '';
	        vm.selectedFunctionType = 'All';
	        vm.selectedOperator = '';
	        vm.showInsertFieldDescription = false;
	        vm.alertList = [];
	
	        function getOperatorsList() {
	            return [{
	                label: '+ Add',
	                value: '+'
	            }, {
	                label: '- Subtract',
	                value: '-'
	            }, {
	                label: '* Multiply',
	                value: '*'
	            }, {
	                label: '/ Divide',
	                value: '/'
	            }, {
	                label: '^ Exponentiation',
	                value: '^'
	            }, {
	                label: '( Open parenthesis',
	                value: '('
	            }, {
	                label: ') Close parenthesis',
	                value: ')'
	            }, {
	                label: '& Concatenate',
	                value: '&'
	            }, {
	                label: '== Equal',
	                value: '=='
	            }, {
	                label: '!= Not Equal',
	                value: '!='
	            }, {
	                label: '< Less Than',
	                value: '<'
	            }, {
	                label: '> Greater Than',
	                value: '>'
	            }, {
	                label: '<= Less Than or Equal',
	                value: '<='
	            }, {
	                label: '>= Greater Than or Equal',
	                value: '>='
	            }, {
	                label: '&& And',
	                value: '&&'
	            }, {
	                label: '|| Or',
	                value: '||'
	            }];
	        }
	        vm.operatorsList = getOperatorsList();
	
	        function getFunctionsList() {
	            return [{
	                label: 'ABS',
	                value: 'number',
	                helpText: 'Returns the absolute value of a number, a number without its sign.',
	                type: 'Math'
	            }, {
	                label: 'AND',
	                value: 'logical1,logical2,...',
	                helpText: 'Checks whether all arguments are true and returns TRUE if all arguments are true.',
	                type: 'Logical'
	            }, {
	                label: 'BEGINS',
	                value: 'text, compare_text',
	                helpText: 'Checks if text begins with specified characters and returns TRUE if it does. Otherwise returns FALSE.',
	                type: 'Text'
	            }, {
	                label: 'BLANKVALUE',
	                value: 'expression, substitute_expression',
	                helpText: 'Checks whether expression is blank and returns substitute_expression if it is blank. If expression is not blank, returns the original expression value.',
	                type: 'Math'
	            }, {
	                label: 'CEILING',
	                value: 'number',
	                helpText: 'Rounds a number up to the nearest integer.',
	                type: 'Math'
	            }, {
	                label: 'CONTAINS',
	                value: 'text, compare_text',
	                helpText: 'Checks if text contains specified characters, and returns TRUE if it does. Otherwise, returns FALSE.',
	                type: 'Text'
	            }, {
	                label: 'DATE',
	                value: 'year,month,day',
	                helpText: 'Creates a date from a year, month and day.',
	                type: 'Date & Time'
	            }, {
	                label: 'DATEVALUE',
	                value: 'expression',
	                helpText: 'Creates a date from its datetime or text representation.',
	                type: 'Date & Time'
	            }, {
	                label: 'DAY',
	                value: 'date',
	                helpText: 'Returns the day of the month, a number between 1 and 31.',
	                type: 'Date & Time'
	            }, {
	                label: 'DISCRETEINTERVAL',
	                value: 'start, stop, interval',
	                helpText: 'Returns a discrete array of integers.',
	                type: 'Logical'
	            }, {
	                label: 'EXP',
	                value: 'number',
	                helpText: 'Returns e raised to the power of a given number.',
	                type: 'Math'
	            }, {
	                label: 'FIND',
	                value: 'search_text, text [, start_num]',
	                helpText: 'Returns the position of the search_text string in text.',
	                type: 'Text'
	            }, {
	                label: 'FALSE',
	                value: '',
	                helpText: 'Returns false',
	                type: 'Logical'
	            }, {
	                label: 'FLOOR',
	                value: 'number',
	                helpText: 'Rounds a number down, towards zero to the nearest integer.',
	                type: 'Math'
	            }, {
	                label: 'IF',
	                value: 'logical_test, value_if_true, value_if_false',
	                helpText: 'Checks whether a condition is true, and returns one value if TRUE and another value if FALSE.',
	                type: 'Logical'
	            }, {
	                label: 'ISBLANK',
	                value: 'expression',
	                helpText: 'Checks whether an expression is blank and returns TRUE or FALSE.',
	                type: 'Logical',
	            }, {
	                label: 'ISNULL',
	                value: 'expression',
	                helpText: 'Checks whether an expression is null and returns TRUE or FALSE.',
	                type: 'Logical',
	            }, {
	                label: 'ISNUMBER',
	                value: 'text',
	                helpText: 'Returns TRUE if the text value is a number. Otherwise, it returns FALSE.',
	                type: 'Logical'
	            }, {
	                label: 'JOIN',
	                value: 'array, separator',
	                helpText: 'Returns a concatenated text string of all the elements of an array, using the specified separator between each element.',
	                type: 'Text'
	            }, {
	                label: 'LEFT',
	                value: 'text, num_chars',
	                helpText: 'Returns the specified number of characters from the start of a text string.',
	                type: 'Text',
	            }, {
	                label: 'LEN',
	                value: 'text',
	                helpText: 'Returns the number of characters in a text string.',
	                type: 'Text'
	            }, {
	                label: 'LN',
	                value: 'number',
	                helpText: 'Returns the natural logarithm of a number.',
	                type: 'Math'
	            }, {
	                label: 'LOG',
	                value: 'number',
	                helpText: 'Returns the base 10 logarithm of n.',
	                type: 'Math'
	            }, {
	                label: 'LOWER',
	                value: 'text',
	                helpText: 'Converts all letters in the value to lowercase.',
	                type: 'Text'
	            }, {
	                label: 'LPAD',
	                value: 'text, padded_length [, pad_string]',
	                helpText: 'Pad the left side of the value with spaces or the optional pad string so that the length is padded_length.',
	                type: 'Text'
	            }, {
	                label: 'MAX',
	                value: 'number,number,...',
	                helpText: 'Returns the greatest of all the arguments.',
	                type: 'Math'
	            }, {
	                label: 'MID',
	                value: 'text, start_num, num_chars',
	                helpText: 'Returns character from the middle of a text string, given a starting position and length.',
	                type: 'Text'
	            }, {
	                label: 'MIN',
	                value: 'number,number,...',
	                helpText: 'Returns the least of all the arguments.',
	                type: 'Math'
	            }, {
	                label: 'MOD',
	                value: 'number,divisor',
	                helpText: 'Returns the remainder after a number is divided by a divisor.',
	                type: 'Math'
	            }, {
	                label: 'MONTH',
	                value: 'date',
	                helpText: 'Returns the month, a number between 1 (January) and 12 (December).',
	                type: 'Date & Time'
	            }, {
	                label: 'NOT',
	                value: 'logical',
	                helpText: 'Changes FALSE to TRUE or TRUE to FALSE.',
	                type: 'Logical'
	            }, {
	                label: 'NOW',
	                value: '',
	                helpText: 'Returns a datetime representing the current moment.',
	                type: 'Date & Time',
	            }, {
	                label: 'NULL',
	                value: '',
	                helpText: 'Returns null.',
	                type: 'Logical'
	            }, {
	                label: 'OR',
	                value: 'logical1,logical2,...',
	                helpText: 'Checks whether any of the arguments are true and returns TRUE or FALSE. Returns FALSE only if all arguments are false.',
	                type: 'Logical'
	            }, {
	                label: 'RAND',
	                value: '',
	                helpText: 'Returns a random number.',
	                type: 'Math'
	            }, {
	                label: 'RANGE',
	                value: 'expression, <upper,lower><upper,lower>...',
	                helpText: 'Checks whether the expression is within the any of the specified ranges.',
	                type: 'Logical'
	            }, {
	                label: 'RANGEI',
	                value: 'expression, <upper,lower><upper,lower>...',
	                helpText: 'Checks whether the expression is within the any of the specified ranges (inclusive).',
	                type: 'Logical'
	            }, {
	                label: 'RIGHT',
	                value: 'text, num_chars',
	                helpText: 'Returns the specified number of characters from the end of a text string.',
	                type: 'Text'
	            }, {
	                label: 'ROUND',
	                value: 'number, num_digits',
	                helpText: 'Rounds a number to a specified number of digits.',
	                type: 'Math'
	            }, {
	                label: 'RPAD',
	                value: 'text, padded_length [, pad_string]',
	                helpText: 'Pad the right side of the value with spaces or the optional pad string so that the length is padded_length.',
	                type: 'Text'
	            }, {
	                label: 'SQRT',
	                value: 'number',
	                helpText: 'Returns the positive square root of a number.',
	                type: 'Math'
	            }, {
	                label: 'SUBSTITUTE',
	                value: 'text, old_text, new_text',
	                helpText: 'Substitutes new_text for old_text in a text string. Use SUBSTITUTE when you want to replace specific text in a text string.',
	                type: 'Text'
	            }, {
	                label: 'TEXT',
	                value: 'value',
	                helpText: 'Converts a value to text using standard display format.',
	                type: 'Text'
	            }, {
	                label: 'TODAY',
	                value: '',
	                helpText: 'Returns the current date.',
	                type: 'Date & Time'
	            }, {
	                label: 'TRIM',
	                value: 'text',
	                helpText: 'Removes all spaces from a text string except for single spaces between words.',
	                type: 'Text'
	            }, {
	                label: 'TRUE',
	                value: '',
	                helpText: 'Returns true.',
	                type: 'Logical',
	            }, {
	                label: 'UPPER',
	                value: 'text',
	                helpText: 'Converts all letters in the value to uppercase.',
	                type: 'Text'
	            }, {
	                label: 'VALUE',
	                value: 'text',
	                helpText: 'Converts a text string that represents a number to a number.',
	                type: 'Text'
	            }, {
	                label: 'YEAR',
	                value: 'date',
	                helpText: 'Returns the year of a date, a number between 1900 and 9999.',
	                type: 'Date & Time'
	            }]
	
	        }
	
	        vm.functionsList = vm.originalFunctionsList = getFunctionsList();
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        function prepareEBRequestObj(expression) {
	            var response = [],
	                temp = {};
	            temp[prefix + 'Expression__c'] = expression;
	            temp[prefix + 'UpdateObject__c'] = vm.selectedField ? vm.selectedField.sObjectName : '';
	            response.push(temp);
	
	            return response;
	        }
	
	        function validateExpression(expression) {
	            var deferQ = $q.defer();
	            if (expression === '' || expression === undefined) {
	                deferQ.resolve(true);
	            } else {
	                var product2 = 'Product2.',
	                    lineItem = prefix + 'LineItem__c.',
	                    productAttributeValue = prefix + 'ProductAttributeValue__c.',
	                    product2RegExp = new RegExp(product2, 'g'),
	                    lineItemRegExp = new RegExp(lineItem, 'g'),
	                    productAttributeValueRegExp = new RegExp(productAttributeValue, 'g');
	
	                var preExp = expression.replace(product2RegExp, '$.' + prefix + 'ProductId__r.');
	                preExp = preExp.replace(lineItemRegExp, '$.');
	                preExp = preExp.replace(productAttributeValueRegExp, '$.' + prefix + 'AttributeValueId__r.');
	
	                var requestObj = prepareEBRequestObj(preExp);
	                remoteService.validateExpressions(requestObj)
	                    .then(function(response) {
	                        if (response === null) {
	                            deferQ.resolve(true);
	                        }
	                    }, function(reason) {
	                        deferQ.reject(reason);
	                    });
	            }
	            return deferQ.promise;
	        }
	
	        vm.addExpression = function() {
	            validateExpression(angular.copy(vm.expression))
	                .then(function(response) {
	                    if (response) {
	                        $mdDialog.hide(angular.copy(vm.expression));
	                    }
	                }, function(reason) {
	                    vm.addAlert(vm.labels.EBErrorMessage);
	                });
	        };
	
	        function prepareResponse(data) {
	            var response,
	                parsedData = JSON.parse(data);
	            if (parsedData && parsedData.fields) {
	                response = parsedData.fields;
	            } else {
	                response = [];
	            }
	            return response;
	        }
	
	        function getRequestFirstParam(index) {
	            var requestObj = {};
	            if (index === 0) {
	                /* There is no request for the first object */
	                requestObj = {};
	            } else {
	                requestObj = vm.selectFieldsArr[(index - 1)].targetField.autocomplete.selectedItem;
	            }
	            return requestObj;
	        }
	
	        function fieldSearch(searchText, item) {
	            var deferQ = $q.defer(),
	                itemIndex = item.autocomplete.index,
	                requestFirstParam = getRequestFirstParam(itemIndex);
	
	            var response = {
	                "sObjectName": "root",
	                "refSObjectName": null,
	                "label": "root",
	                "isRef": false,
	                "fieldType": "root",
	                "fields": [{
	                    "sObjectName": prefix + "LineItem__c",
	                    "refSObjectName": prefix + "LineItem__c",
	                    "label": "Line Item",
	                    "isRef": true,
	                    "fieldType": prefix + "LineItem__c",
	                    "fields": [],
	                    "apiName": prefix + "LineItem__c",
	                    "apiDisplayName": "Line Item"
	                }, {
	                    "sObjectName": prefix + "ProductAttributeValue__c",
	                    "refSObjectName": prefix + "ProductAttributeValue__c",
	                    "label": "Product Attribute",
	                    "isRef": true,
	                    "fieldType": prefix + "ProductAttributeValue__c",
	                    "fields": [],
	                    "apiName": prefix + "ProductAttributeValue__c",
	                    "apiDisplayName": "Product Attribute"
	                }, {
	                    "sObjectName": "Product2",
	                    "refSObjectName": "Product2",
	                    "label": "Product",
	                    "isRef": true,
	                    "fieldType": "Product2",
	                    "fields": [],
	                    "apiName": "Product2",
	                    "apiDisplayName": "Product"
	                }],
	                "apiName": "root",
	                "apiDisplayName": "root"
	            };
	            if (itemIndex === 0) {
	                deferQ.resolve(prepareResponse(JSON.stringify(response)));
	            } else {
	                remoteService.getFieldDescribeTypeAhead(requestFirstParam, searchText)
	                    .then(function(response) {
	                        deferQ.resolve(prepareResponse(response));
	                    }, function(reason) {
	                        deferQ.reject(reason);
	                    });
	                return deferQ.promise;
	                deferQ.resolve(prepareResponse(response));
	            }
	
	            return deferQ.promise;
	        }
	
	
	
	        function resetFieldPanel() {
	            vm.selectedField = null;
	            vm.showInsertFieldDescription = false;
	            vm.selectFieldsArr = [{
	                targetField: {
	                    autocomplete: {
	                        'index': 0,
	                        'querySearch': fieldSearch,
	                        'displayName': 'label',
	                        'selectedItemChange': prepareNextField
	                    }
	                }
	            }];
	        }
	
	        function resetOperatorPanel() {
	            vm.selectedOperator = '';
	            for (var i = 0; i < vm.operatorsList.length; i++) {
	                vm.operatorsList[i].selected = false;
	            }
	        }
	
	        function resetFunctionPanel() {
	            vm.selectedFunctionType = 'All';
	            vm.selectedFunction = null;
	            vm.showSelectedFunction = false;
	        }
	
	        function showHideRightPanel(panelToShow) {
	            var containers = ['Field', 'Operator', 'Function'];
	
	            for (var i = 0; i < containers.length; i++) {
	                if (panelToShow === containers[i]) {
	                    vm['show' + panelToShow + 'Container'] = true;
	                } else {
	                    vm['show' + containers[i] + 'Container'] = false;
	                }
	            }
	        }
	
	        vm.toggleRightPanel = function(panelToShow) {
	            if (visiblePanel !== panelToShow) {
	                visiblePanel = panelToShow;
	                switch (panelToShow) {
	                    case 'Field':
	                        {
	                            resetFieldPanel();
	                            break;
	                        }
	                    case 'Operator':
	                        {
	                            resetOperatorPanel();
	                            break;
	                        }
	                    case 'Function':
	                        {
	                            resetFunctionPanel();
	                            break;
	                        }
	                    default:
	                        {
	                            /*Do nothing here*/
	                        }
	                }
	                showHideRightPanel(panelToShow);
	            }
	
	        };
	
	
	
	        vm.selectFunction = function(item) {
	            vm.selectedFunction = item;
	            vm.showSelectedFunction = true;
	            for (var i = 0; i < vm.functionsList.length; i++) {
	                if (item.label === vm.functionsList[i].label) {
	                    vm.functionsList[i].selected = true;
	                } else {
	                    vm.functionsList[i].selected = false;
	                }
	            }
	        };
	        vm.selectOperator = function(item) {
	            vm.selectedOperator = angular.copy(item);
	            for (var i = 0; i < vm.operatorsList.length; i++) {
	                if (item.value === vm.operatorsList[i].value) {
	                    vm.operatorsList[i].selected = true;
	                } else {
	                    vm.operatorsList[i].selected = false;
	                }
	            }
	        };
	
	        $scope.$watch('vm.selectedFunctionType', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                vm.selectedFunction = '';
	                vm.showSelectedFunction = false;
	                for (var i = 0; i < vm.functionsList.length; i++) {
	                    vm.functionsList[i].selected = false;
	                }
	                if (newValue === 'All') {
	                    vm.functionsList = vm.originalFunctionsList;
	                } else {
	                    vm.functionsList = $filter('filter')(vm.originalFunctionsList, {
	                        type: newValue
	                    }, true);
	                }
	            }
	        });
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	        vm.addAlert = function(message) {
	            vm.alertList = [];
	            vm.alertList.push({
	                msg: message
	            });
	        };
	
	        vm.onDrop = function(event, index, item) {
	            var droppedValue = '';
	            if (visiblePanel === 'Operator') {
	                droppedValue = item.value;
	            } else if (visiblePanel === 'Function') {
	                droppedValue = item.label + '(' + item.value + ')';
	            } else if (visiblePanel === 'Field') {
	                vm.selectedField = item;
	                droppedValue = item.apiName;
	            }
	
	            var textarea = document.getElementById('eb-textarea');
	
	            if (document.selection) {
	                //IE support
	                var sel = document.selection.createRange();
	                sel.text = droppedValue;
	                vm.expression = sel.text;
	            } else if (textarea.selectionStart || textarea.selectionStart == '0') {
	                //MOZILLA/NETSCAPE support
	                var startPos = textarea.selectionStart,
	                    endPos = textarea.selectionEnd;
	
	                textarea.value = textarea.value.substring(0, startPos) + droppedValue + textarea.value.substring(endPos, textarea.value.length);
	                textarea.selectionStart = startPos + droppedValue.length;
	                textarea.selectionEnd = startPos + droppedValue.length;
	                vm.expression = textarea.value;
	            } else {
	                textarea.value += droppedValue;
	                vm.expression = textarea.value;
	            }
	
	
	        };
	
	        vm.validateDropPosition = function(event, index, external, type) {
	            return true;
	        };
	
	        function getNextIndex() {
	            return vm.selectFieldsArr.length;
	        }
	        vm.clearFieldSelection = function(index) {
	            if (index === 0) {
	                vm.selectFieldsArr = [];
	            } else {
	                vm.selectFieldsArr.splice(index, (vm.selectFieldsArr.length - 1));
	            }
	            vm.showInsertFieldDescription = false;
	            vm.selectFieldsArr.push({
	                targetField: {
	                    autocomplete: {
	                        'index': getNextIndex(),
	                        'querySearch': fieldSearch,
	                        'displayName': 'label',
	                        'selectedItemChange': prepareNextField
	                    }
	                }
	            });
	        };
	
	        function getItemIndex(item) {
	            var index;
	            for (var i = 0; i < vm.selectFieldsArr.length; i++) {
	                if (vm.selectFieldsArr[i].targetField.autocomplete.selectedItem.label === item.label) {
	                    index = i;
	                    break;
	                }
	            }
	            return index;
	        }
	
	        function prepareNextField(item) {
	            if (item) {
	                if (item.isRef) {
	                    var itemIndex = getItemIndex(item);
	                    if ((itemIndex + 1) !== vm.selectFieldsArr.length) {
	                        vm.selectFieldsArr.splice((itemIndex + 1), (vm.selectFieldsArr.length - 1));
	                    }
	                    vm.showInsertFieldDescription = false;
	                    vm.selectFieldsArr.push({
	                        targetField: {
	                            autocomplete: {
	                                'index': getNextIndex(),
	                                'querySearch': fieldSearch,
	                                'displayName': 'label',
	                                'selectedItemChange': prepareNextField
	                            }
	                        }
	                    });
	
	                } else {
	                    vm.showInsertFieldDescription = true;
	                    vm.selectedField = item;
	                    var itemIndex = getItemIndex(item);
	                    if ((itemIndex + 1) !== vm.selectFieldsArr.length) {
	                        vm.selectFieldsArr.splice((itemIndex + 1), (vm.selectFieldsArr.length - 1));
	                    }
	                }
	            } else {}
	        }
	    };
	
	    expressionBuilderController.$inject = [
	        '$q',
	        '$filter',
	        '$scope',
	        'i18nService',
	        'systemConstants',
	        'applicationService',
	        '$mdDialog',
	        'expression',
	        'remoteService'
	    ];
	
	    module.exports = expressionBuilderController;
	})();


/***/ }),
/* 414 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog aria-label=\"Expression Builder\" ng-cloak class=\"expression-modal\" flex=\"50\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>{{vm.labels.BuildExpression}}</h2>\n            <span flex></span>\n            <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n            </button>\n        </div>\n        <div class=\"error-indicator\">\n            <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"5000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n        </div>\n    </md-toolbar>\n    <md-dialog-content>\n        <div class=\"md-dialog-content\">\n            <div class=\"left-container\">\n                <div class=\"expression-container\">\n                    <material-form-field model=\"vm.expression\" field-type=\"TEXTAREA\" row-no=\"5\" max-length=\"50000\" properties=\"vm.properties\">\n                    </material-form-field>\n                </div>\n                <div class=\"drop-zone-container\" dnd-list=\"vm.pricingItems\" dnd-drop=\"vm.onDrop(event, index, item)\" dnd-dragover=\"vm.validateDropPosition(event, index, external, type)\"></div>\n            </div>\n            <div class=\"right-container\">\n                <div class=\"right-side-panels-container\">\n                    <div class=\"action-container\">\n                        <a ng-click=\"vm.toggleRightPanel('Field')\" class=\"slds-button slds-button_brand\">{{vm.labels.InsertField}}</a>\n                        <a ng-click=\"vm.toggleRightPanel('Operator')\" class=\"slds-button slds-button_brand\">{{vm.labels.InsertOperator}}</a>\n                        <a ng-click=\"vm.toggleRightPanel('Function')\" class=\"slds-button slds-button_brand\">{{vm.labels.InsertFunction}}</a>\n                    </div>\n                    <div class=\"field-container\" data-ng-if=\"vm.showFieldContainer === true\">\n                        <div class=\"autocomplete-container\">\n                            <div data-ng-repeat=\"item in vm.selectFieldsArr\" class=\"each-autocomplete\">\n                                <button class=\"slds-button slds-button--icon\" ng-click=\"vm.clearFieldSelection($index)\"><i class=\"material-icons\">clear</i>\n                                </button>\n                                <material-form-field field-type=\"autocomplete\" field-label=\"'Select an item'\" properties=\"item.targetField\">\n                                </material-form-field>\n                                <div class=\"clearfix\"></div>\n                            </div>\n                        </div>\n                        <div class=\"field-selection-description\" data-ng-if=\"vm.showInsertFieldDescription === true\" dnd-draggable=\"vm.selectedField\" dnd-droppable-in=\".drop-zone-container\" dnd-effect-allowed=\"copy\">\n                            <p class=\"text-right user-hint\">{{vm.labels.Drag_Drop}}</p>\n                            <p>{{vm.labels.YouHaveSelected}} : <b>{{vm.selectedField.apiDisplayName}}</b></p>\n                            <p>{{vm.labels.Type}} : <b>{{vm.selectedField.fieldType}}</b></p>\n                            <p>{{vm.labels.APIName}} : <b>{{vm.selectedField.apiDisplayName}}</b></p>\n                        </div>\n                    </div>\n                    <div class=\"operator-container\" data-ng-if=\"vm.showOperatorContainer === true\">\n                        <p data-ng-if=\"vm.selectedOperator == ''\">Select an Operator from the below list</p>\n                        <p>Selected Operator : <b>{{vm.selectedOperator.label}}</b></p>\n                        <div class=\"operator-list-table-container\">\n                            <table class=\"operator-list-table\">\n                                <tbody>\n                                    <tr ng-repeat=\"operator in vm.operatorsList\" ng-click=\"vm.selectOperator(operator)\" ng-class=\"{ 'selected' : operator.selected === true}\" dnd-draggable=\"operator\" dnd-droppable-in=\".drop-zone-container\" dnd-effect-allowed=\"copy\">\n                                        <td>\n                                            {{ operator.label }}\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <div class=\"function-container\" data-ng-if=\"vm.showFunctionContainer === true\">\n                        <md-radio-group ng-model=\"vm.selectedFunctionType\">\n                            <md-radio-button value=\"All\" class=\"md-primary\">All</md-radio-button>\n                            <md-radio-button value=\"Date & Time\"> Date & Time </md-radio-button>\n                            <md-radio-button value=\"Logical\">Logical</md-radio-button>\n                            <md-radio-button value=\"Math\">Math</md-radio-button>\n                            <md-radio-button value=\"Text\">Text</md-radio-button>\n                        </md-radio-group>\n                        <div class=\"clearfix\"></div>\n                        <p data-ng-if=\"vm.selectedFunction == ''\">Select a Function type from the below list</p>\n                        <div class=\"function-help-text\" data-ng-if=\"vm.showSelectedFunction === true\">\n                            <p class=\"selected-label\">{{vm.selectedFunction.label+'('+vm.selectedFunction.value+')'}}</p>\n                            <p>{{vm.selectedFunction.helpText}}</p>\n                        </div>\n                        <div class=\"function-list-table-container\">\n                            <table class=\"function-list-table\">\n                                <tbody>\n                                    <tr ng-repeat=\"function in vm.functionsList\" ng-click=\"vm.selectFunction(function)\" ng-class=\"{'selected': function.selected === true }\" dnd-draggable=\"function\" dnd-droppable-in=\".drop-zone-container\" dnd-effect-allowed=\"copy\">\n                                        <td>\n                                            {{ function.label }}\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions>\n        <a ng-click=\"vm.cancel()\" class=\"slds-button slds-button--icon-more\">{{vm.labels.Cancel}}</a>\n        <a ng-click=\"vm.addExpression()\" class=\"slds-button slds-button_brand\">{{vm.labels.Ok}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 415 */
/***/ (function(module, exports) {

	module.exports = "<ul dnd-list=\"listAttr\" dnd-drop=\"vm.addAttribute(event, index, item)\" class=\"options-list\" dnd-allowed-types=\"['attribute']\">\n    <li ng-repeat=\"item in listAttr\" dnd-effect-allowed=\"move\" dnd-moved=\"listAttr.splice($index, 1)\" ng-include=\"'attribute-content.html'\" onload=\"vm.checkArray(item)\" \n        dnd-type=\"item.nodeType\" ng-if=\"item.nodeType==='attribute'\" dnd-draggable=\"item\">\n    </li>\n</ul>\n"

/***/ }),
/* 416 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"attribute-group\">\n    <div class=\"attribute-group-block\">\n        <div layout=\"row\">\n            <div flex=\"30\">\n                <material-form-field model=\"itemAttrGrp.AttributeGroupSO.Name\" field-type=\"string\" is-editable=\"true\" field-label=\"vm.labels.GroupName\">\n                </material-form-field>\n            </div>\n            <div flex=\"30\" flex-offset=\"5\">\n                <material-form-field model=\"itemAttrGrp.AttributeGroupSO[vm.prefix + 'TwoColumnAttributeDisplay__c']\" field-type=\"boolean\" is-editable=\"true\" field-label=\"vm.labels.TwoColumnAttributesDisplay\" element-id=\"twoColumn\">\n                </material-form-field>\n            </div>\n            <div flex=\"30\" flex-offset=\"5\">\n                <material-form-field model=\"itemAttrGrp.AttributeGroupSO[vm.prefix + 'Description__c']\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.Description\">\n                </material-form-field>\n            </div>\n        </div>\n    </div>\n    <div class=\"title\">\n        {{vm.labels.ProductAttributes}}\n    </div>\n    <div class=\"attribute-drop-zone panel-body\">\n        <div class=\"page-title\" layout=\"row\">\n            <div class=\"flex-15\">\n                {{vm.labels.Action}}\n                <i class=\"material-icons\" ng-click=\"vm.showMassEditPanelAttributes = !vm.showMassEditPanelAttributes\">mode_edit</i>\n            </div>\n            <div class=\"flex-25\">{{vm.labels.AttributeLabel}}</div>\n            <div class=\"flex-25\">{{vm.labels.Expression}}</div>\n            <div class=\"flex-10 text-center\">{{vm.labels.IsReadOnly}}</div>\n            <div class=\"flex-10 text-center\">{{vm.labels.IsHidden}}</div>\n            <div class=\"flex-10 text-center\">{{vm.labels.IsPrimary}}</div>\n        </div>\n        <div layout=\"row\" class=\"attribute-columns mass-edit-panel\" ng-show=\"vm.showMassEditPanelAttributes\">\n            <div class=\"flex-15 action\">\n                <button type=\"button\" class=\"slds-button slds-button_brand action\" data-ng-click=\"vm.applyMassEditAttributes()\">{{vm.labels.Apply}}</button>\n            </div>\n            <div class=\"flex-25\">\n\n            </div>\n            <div class=\"flex-25 eb-container\">\n                <material-form-field model=\"vm.massEditObjAttributes.Expression\" field-type=\"string\">\n                </material-form-field>\n                <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus('MassEditExpression')\">\n                    <i class=\"fa fa-external-link\"></i>\n                </button>\n            </div>\n            <div class=\"flex-10 text-center\">\n                <material-form-field model=\"vm.massEditObjAttributes.IsReadOnly\" field-type=\"checkbox\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"flex-10 text-center\">\n                <material-form-field model=\"vm.massEditObjAttributes.IsHidden\" field-type=\"checkbox\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"flex-10 text-center\">\n                <material-form-field model=\"vm.massEditObjAttributes.IsPrimary\" field-type=\"checkbox\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div ng-repeat=\"listAttr in vm.displayAttributes\" ng-include=\"'attribute-list.html'\"></div>\n        <div class=\"pagination cf\">\n            <div class=\"next-prev\">\n                <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftCenterBtn\" data-ng-click=\"vm.getAttributes('previous')\">\n                    <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n                </button>\n                <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightCenterBtn\" data-ng-click=\"vm.getAttributes('next')\">\n                    <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                </button>\n            </div>\n        </div>\n    </div>\n    <div class=\"clearfix\"></div>\n\n</div>\n"

/***/ }),
/* 417 */
/***/ (function(module, exports) {

	module.exports = "<div layout=\"row\" class=\"attribute-columns\">\n    <div class=\"flex-15 action\">\n        <div class=\"btn-group text-center\" role=\"group\" aria-label=\"...\">\n            <button type=\"button\" class=\"slds-button slds-button--icon\" ng-click=\"vm.addNewAttribute($index);\">\n                <i class=\"material-icons ng-scope\">add</i>\n            </button>\n            <button type=\"button\" class=\"slds-button slds-button--icon\">\n                <i class=\"material-icons\">more_vert</i>\n            </button>\n            <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.deleteAttribute(item)\">\n                <i class=\"material-icons\" aria-hidden=\"true\">clear</i>\n            </button>\n        </div>\n    </div>\n    <div class=\"flex-25\">\n        <material-form-field model=\"item.Name\" field-type=\"string\" is-disabled=\"true\" field-label=\"Name\" ng-if=\"!item.autocomplete\">\n        </material-form-field>\n        <material-form-field field-type=\"autocomplete\" name=\"attributeName\" properties=\"item\" ng-if=\"item.autocomplete\" is-required=\"true\" field-label=\"'Name'\" class=\"autocomplete-no-label\" data-ng-click=\"vm.trackSelectedRowIndex($index)\">\n        </material-form-field>\n    </div>\n    <div class=\"flex-25 eb-container\">\n        <material-form-field model=\"item.ProductAttributeSO.Expression\" field-type=\"string\" max-length=\"50000\" is-disabled=\"true\">\n        </material-form-field>\n        <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.onFocus('Expression', $index)\" ng-if=\"item.FieldType==='CURRENCY' || item.FieldType==='DOUBLE' || item.FieldType==='PERCENT'\">\n            <i class=\"fa fa-external-link\"></i>\n        </button>\n    </div>\n    <div class=\"flex-10 text-center\">\n        <material-form-field model=\"item.ProductAttributeSO[vm.prefix+'IsReadOnly__c']\" field-type=\"checkbox\" is-editable=\"true\">\n        </material-form-field>\n    </div>\n    <div class=\"flex-10 text-center\">\n        <material-form-field model=\"item.ProductAttributeSO[vm.prefix+'IsHidden__c']\" field-type=\"checkbox\" is-editable=\"true\">\n        </material-form-field>\n    </div>\n    <div class=\"flex-10 text-center\">\n        <material-form-field model=\"item.ProductAttributeSO[vm.prefix+'IsPrimary__c']\" field-type=\"checkbox\" is-editable=\"true\">\n        </material-form-field>\n    </div>\n</div>\n"

/***/ }),
/* 418 */
/***/ (function(module, exports) {

	(function () {
	    'use strict';
	    var createAttributesController = function ($mdDialog, systemConstants, i18nService, attributesService, applicationService, $stateParams, $scope) {
	
	        var vm = this;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        
	        vm.newAttributeGroup = {
	            AttributeGroupSO: {},
	            ProductAttributeSOs: [],
	            ProductAttributeGroupMemberSO: {}
	        };
	        vm.newAttributeGroup.AttributeGroupSO[vm.prefix + 'TwoColumnAttributeDisplay__c'] = false;
	        vm.newAttributeGroup.AttributeGroupSO[vm.prefix + 'ThreeColumnAttributeDisplay__c'] = false;
	        
	          vm.onClickAttributeList = function (index, isValid) {
	            if (isValid || checkForCorrectAttribute()) {
	                vm.selectedIndex = index;
	                vm.selectedAttribute = vm.newAttributeGroup.ProductAttributeSOs[index];                
	            }
	            else {
	                applicationService.showErrorMessage({ type: 'Warning', message: vm.labels.AttributeValidationMessage });
	            }
	        };
	
	        function updateAttributeText(item) {
	            if (item) {
	                vm.selectedAttribute.text = item.label;
	                vm.selectedAttribute[vm.prefix + 'Field__c'] = item.value;
	            } else {
	                delete vm.selectedAttribute.text;
	                delete vm.selectedAttribute[vm.prefix + 'Field__c'];
	            }
	        }
	
	        function getSampleAttribute() {
	            var formObj = {
	                'autocomplete': {
	                    'querySearch': attributesService.targetAttributesFieldSearch,
	                    'displayName': 'label',
	                    'selectedItemChange': updateAttributeText,
	                    'selectedItem': null,
	                }
	            };
	            formObj[vm.prefix + 'IsReadOnly__c'] = false;
	            formObj[vm.prefix + 'IsHidden__c'] = false;
	            formObj[vm.prefix + 'IsPrimary__c'] = false;
	            formObj.text = '';
	            return formObj;
	        }
	
	        vm.addNewAttribute = function () {
	            if (checkForCorrectAttribute() || vm.newAttributeGroup.ProductAttributeSOs.length === 0) {
	                vm.newAttributeGroup.ProductAttributeSOs.push(angular.copy(getSampleAttribute()));
	                var activeIndex = vm.newAttributeGroup.ProductAttributeSOs.length - 1;
	                vm.onClickAttributeList(activeIndex, true);
	            }
	            else {
	                applicationService.showErrorMessage({ type: 'Warning', message: vm.labels.AttributeValidationMessage });
	            }
	        };
	
	        vm.removeAttributeList = function (index) {
	            vm.newAttributeGroup.ProductAttributeSOs.splice(index, 1);
	            if (vm.newAttributeGroup.ProductAttributeSOs.length > 0) {
	                var activeList = (index === 0) ? index : (index - 1);
	                vm.onClickAttributeList(activeList, true);
	            }
	        };
	
	        function prepareCreateProductAttributeGroupRequest() {
	            var request = angular.copy(vm.newAttributeGroup);
	            if (request.ProductAttributeSOs.length > 0) {
	                for (var i = 0; i < request.ProductAttributeSOs.length; i++) {
	                    var temp = request.ProductAttributeSOs[i];
	                    delete temp.autocomplete;
	                }
	            }
	            return request;
	        }
	
	        vm.saveAttribute = function () {
	            if (vm.frmCreateAttributeGroup.$valid) {
	                if (checkForCorrectAttribute()) {
	                    vm.newAttributeGroup.ProductAttributeGroupMemberSO[vm.prefix + 'ProductId__c'] = $stateParams.id;
	                    //prepareCreateProductAttributeGroupRequest();
	                    var payload = prepareCreateProductAttributeGroupRequest();
	                    payload.ProductAttributeGroupMemberSO.Name = payload.AttributeGroupSO.Name;
	                    attributesService.createProductAttributeGroup(payload).then(function (response) {
	                        if (response.AttributeGroupSO) {
	                            $mdDialog.hide(true);
	                        }
	                    },
	                    function (reason) {
	                        applicationService.showErrorMessage(reason);
	                    });
	                }
	                else {
	                    applicationService.showErrorMessage({ type: 'Warning', message: vm.labels.AttributeValidationMessage });
	                }
	            }
	        };
	
	        vm.cancel = function () {
	            $mdDialog.hide();
	        };
	
	        function checkForCorrectAttribute() {
	            if (vm.newAttributeGroup.ProductAttributeSOs.length > 0 &&
	                (vm.selectedAttribute.autocomplete.selectedItem === undefined || vm.selectedAttribute.autocomplete.selectedItem === null)) {
	                return false;
	            }
	            return true;
	        }
	
	        // allow only either Two or Three Column Attribute Display using the following 2 watchers 
	        $scope.$watch(function () {
	            return vm.newAttributeGroup.AttributeGroupSO[vm.prefix + 'TwoColumnAttributeDisplay__c'];
	        }, function(newValue) {
	            if (newValue === true && vm.newAttributeGroup.AttributeGroupSO[vm.prefix + 'ThreeColumnAttributeDisplay__c'] === true) {
	                vm.newAttributeGroup.AttributeGroupSO[vm.prefix + 'ThreeColumnAttributeDisplay__c'] = false;
	            }
	        });
	
	        $scope.$watch(function () {
	            return vm.newAttributeGroup.AttributeGroupSO[vm.prefix + 'ThreeColumnAttributeDisplay__c'];
	        }, function(newValue) {
	            if (newValue === true && vm.newAttributeGroup.AttributeGroupSO[vm.prefix + 'TwoColumnAttributeDisplay__c'] === true) {
	                vm.newAttributeGroup.AttributeGroupSO[vm.prefix + 'TwoColumnAttributeDisplay__c'] = false;
	            }
	        });
	
	    };
	
	    createAttributesController.$inject = [
	        '$mdDialog',
	        'systemConstants',
	        'i18nService',
	        'attributesService',
	        'applicationService',
	        '$stateParams',
	        '$scope'
	    ];
	
	    module.exports = createAttributesController;
	})();

/***/ }),
/* 419 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog ng-cloak class=\"create-attribute-dialog\">\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\">\n        <i class=\"material-icons\">clear</i>\n    </button>\n    <form name=\"vm.frmCreateAttributeGroup\" novalidate>\n        <md-dialog-content class=\"dialog-content\">\n            <md-tabs md-dynamic-height md-border-bottom>\n                <md-tab label=\"Details\" class=\"tab-title\">\n                    <md-content>\n                        <div layout=\"row\">\n                            <div class=\"dialog-col attribute-details-view\" flex=\"100\">\n                                <div layout=\"row\">\n                                    <div class=\"flex\" flex=\"100\">\n                                        <material-form-field field-type=\"string\" model=\"vm.newAttributeGroup.AttributeGroupSO.Name\" field-label=\"vm.labels.GroupName\" is-required=\"true\" name=\"name\">\n                                        </material-form-field>\n                                        <div ng-messages=\"vm.frmCreateAttributeGroup.name.$error\" ng-if=\"vm.frmCreateAttributeGroup.name.$touched || vm.frmCreateAttributeGroup.$submitted \">\n                                            <p ng-message=\"required\" class=\"formError\">\n                                                {{vm.labels.Name}} value must be entered\n                                            </p>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div layout=\"row\">\n                                    <div class=\"flex\" flex=\"45\">\n                                        <material-form-field model=\"vm.newAttributeGroup.AttributeGroupSO[vm.prefix + 'TwoColumnAttributeDisplay__c']\" field-type=\"boolean\" is-editable=\"true\" field-label=\"vm.labels.TwoColumnAttributesDisplay\" element-id=\"twoColumnDisplay\">\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"flex\" flex=\"10\"></div>\n                                    <div class=\"flex\" flex=\"45\">\n                                        <material-form-field model=\"vm.newAttributeGroup.AttributeGroupSO[vm.prefix + 'ThreeColumnAttributeDisplay__c']\" field-type=\"boolean\" is-editable=\"true\" field-label=\"vm.labels.ThreeColumnAttributesDisplay\" element-id=\"threeColumnDisplay\">\n                                        </material-form-field>\n                                    </div>\n                                </div>\n                                <div layout=\"row\">\n                                    <div class=\"flex\" flex=\"100\">\n                                        <material-form-field model=\"vm.newAttributeGroup.AttributeGroupSO[vm.prefix + 'Description__c']\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.Description\">\n                                        </material-form-field>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n                <md-tab label=\"Attributes\" class=\"tab-title\">\n                    <md-content>\n                        <div layout=\"row\">\n                            <div class=\"dialog-col arribute-list-view\" flex=\"35\">\n                                <md-list>\n                                    <md-list-item>\n                                        <h5 class=\"attribute-title\">{{vm.newAttributeGroup.AttributeGroupSO.Name}}</h5>\n                                        <md-icon class=\"md-secondary add-attribute-icon\">\n                                            <i class=\"material-icons\" role=\"button\" data-ng-click=\"vm.addNewAttribute()\">add</i>\n                                        </md-icon>\n                                    </md-list-item>\n                                    <md-divider></md-divider>\n                                </md-list>\n                                <ul class=\"list\" dnd-list=\"vm.newAttributeGroup.ProductAttributeSOs\">\n                                    <li class=\"md-1-line\" ng-click=\"vm.onClickAttributeList($index, false)\" \n                                                  data-ng-repeat=\"list in vm.newAttributeGroup.ProductAttributeSOs\" ng-class=\"{activeList: $index == vm.selectedIndex}\"\n                                                  dnd-effect-allowed=\"move\" dnd-moved=\"vm.newAttributeGroup.ProductAttributeSOs.splice($index, 1)\" dnd-draggable=\"list\">\n                                        <div class=\"md-list-item-text\" layout=\"row\">\n                                            <p>{{ list.text }} </p>\n                                            <md-icon class=\"md-secondary\" ng-click=\"vm.removeAttributeList($index)\"><i class=\"material-icons\">clear</i></md-icon>\n                                        </div>\n                                        <md-divider></md-divider>\n                                    </li>\n                                </ul>\n                            </div>\n                            <div class=\"dialog-col attribute-form-view\" flex=\"65\" data-ng-show=\"vm.selectedAttribute && vm.newAttributeGroup.ProductAttributeSOs.length > 0\">\n                                <material-form-field field-type=\"autocomplete\" field-label=\"vm.labels.AttributeLabel\" name=\"attributeName\" properties=\"vm.selectedAttribute\">\n                                </material-form-field>\n                                <div class=\"read-only-field\">\n                                    <material-form-field model=\"vm.selectedAttribute[vm.prefix+'IsReadOnly__c']\" field-type=\"checkbox\" is-editable=\"true\" field-label=\"vm.labels.IsReadOnly\">\n                                    </material-form-field>\n                                </div>\n                                <material-form-field model=\"vm.selectedAttribute[vm.prefix+'IsHidden__c']\" field-type=\"checkbox\" is-editable=\"true\" field-label=\"vm.labels.IsHidden\">\n                                </material-form-field>\n                                <material-form-field model=\"vm.selectedAttribute[vm.prefix+'IsPrimary__c']\" field-type=\"checkbox\" is-editable=\"true\" field-label=\"vm.labels.IsPrimary\">\n                                </material-form-field>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n            </md-tabs>\n        </md-dialog-content>\n        <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancel()\">{{vm.labels.DialogCancelButton}}</button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.saveAttribute()\">{{vm.labels.DialogSaveButton}}</button>\n        </md-dialog-actions>\n    </form>\n</md-dialog>"

/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.product.pricing', [])
	        .service('productPricingService', __webpack_require__(421))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.product.pricing', {
	                parent: 'app.product',
	                url: '/:id/pricing',
	                views: {
	                    'productContainer': {
	                        template: __webpack_require__(422),
	                        controller: __webpack_require__(423),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    priceList: ['productPricingService', '$stateParams', function(pricingService, $stateParams) {
	                        var request = {
	                            "SearchString": "",
	                            "NumberOfRecordsPerChunk": 25,
	                            "ChunkNumber": 1
	                        };
	                        return pricingService.getPriceList(request);
	                    }],
	                    priceListMetaData: ['productPricingService', function(pricingService) {
	                        return pricingService.getPriceListMetaData();
	                    }],
	                    associatedPricingDetails: ['productPricingService', '$stateParams', function(pricingService, $stateParams) {
	                        return pricingService.getPricingDetailsByCode($stateParams.id);
	                    }]
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 421 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productPricingService = function($q, $timeout, $filter, $location, remoteService, systemConstants, moment) {
	        var prefix = systemConstants.nsPrefix || '';
	        var dateFormat = 'MM/DD/YYYY';
	
	
	        function deletePriceListItems(productId) {
	            var defer = $q.defer();
	            remoteService.deletePriceListItems(productId).then(function(response) {
	                defer.resolve(response);
	            }, function(reason) {
	                defer.reject(reason);
	            });
	
	            return defer.promise;
	        }
	
	
	        function fnFormatDate(date) {
	            if (angular.isDefined(date)) {
	                if (date === null || date === '') {
	                    date = null;
	                } else if (angular.isString(date)) {
	                    date = new Date(date);
	                } else {
	                    date = new Date(date);
	                }
	            }
	            return date ? moment(date).format(dateFormat) : '';
	        }
	
	        function createPriceListItems(productId, payload) {
	            var defer = $q.defer();
	            var request = [];
	            for (var i = 0; i < payload.length; i++) {
	                var priceList = {};
	                priceList[prefix + 'ChargeType__c'] = payload[i][prefix + 'ChargeType__c'];
	                priceList[prefix + 'Cost__c'] = payload[i][prefix + 'Cost__c'];
	                priceList[prefix + 'Sequence__c'] = payload[i][prefix + 'Sequence__c'];
	                priceList[prefix + 'ListPrice__c'] = payload[i][prefix + 'ListPrice__c'];
	                priceList[prefix + 'PriceType__c'] = payload[i][prefix + 'PriceType__c'];
	                //priceList[prefix + 'PriceUom__c'] = payload[i][prefix + 'PriceUom__c'];
	                priceList[prefix + 'Frequency__c'] = payload[i][prefix + 'Frequency__c'];
	                priceList[prefix + 'Active__c'] = payload[i][prefix + 'Active__c'];
	                priceList[prefix + 'PriceListId__c'] = payload[i][prefix + 'PriceListId__c'];
	                priceList[prefix + 'ProductId__c'] = payload[i][prefix + 'ProductId__c'];
	                if (!isNaN(payload[i][prefix + 'ExpirationDate__c']) && payload[i][prefix + 'ExpirationDate__c'] !== '') {
	                    priceList[prefix + 'ExpirationDate__c'] = payload[i][prefix + 'ExpirationDate__c'];
	                }
	                if (!isNaN(payload[i][prefix + 'EffectiveDate__c']) && payload[i][prefix + 'EffectiveDate__c'] !== '') {
	                    priceList[prefix + 'EffectiveDate__c'] = payload[i][prefix + 'EffectiveDate__c'];
	                }
	                request.push(priceList);
	            }
	            remoteService.createPriceListItems(request).then(function(response) {
	                defer.resolve(response);
	            }, function(reason) {
	
	                defer.reject(reason);
	            });
	
	            return defer.promise;
	        }
	
	        function updatePriceListItems(productId, payload) {
	            var defer = $q.defer();
	            var request = [];
	            for (var i = 0; i < payload.length; i++) {
	                var priceList = {};
	                priceList.Id = payload[i].Id;
	                priceList[prefix + 'ChargeType__c'] = payload[i][prefix + 'ChargeType__c'];
	                priceList[prefix + 'Cost__c'] = payload[i][prefix + 'Cost__c'];
	                priceList[prefix + 'Sequence__c'] = payload[i][prefix + 'Sequence__c'];
	                priceList[prefix + 'ListPrice__c'] = payload[i][prefix + 'ListPrice__c'];
	                priceList[prefix + 'PriceType__c'] = payload[i][prefix + 'PriceType__c'];
	                priceList[prefix + 'PriceUom__c'] = payload[i][prefix + 'PriceUom__c'];
	                priceList[prefix + 'Frequency__c'] = payload[i][prefix + 'Frequency__c'];
	                priceList[prefix + 'Active__c'] = payload[i][prefix + 'Active__c'];
	                priceList[prefix + 'PriceMethod__c'] = payload[i][prefix + 'PriceMethod__c'];
	                priceList[prefix + 'Criteria__c'] = payload[i][prefix + 'Criteria__c'] || '';
	
	                if (!isNaN(payload[i][prefix + 'ExpirationDate__c']) && payload[i][prefix + 'ExpirationDate__c'] !== '') {
	                    priceList[prefix + 'ExpirationDate__c'] = payload[i][prefix + 'ExpirationDate__c'];
	                }
	                if (!isNaN(payload[i][prefix + 'EffectiveDate__c']) && payload[i][prefix + 'EffectiveDate__c'] !== '') {
	                    priceList[prefix + 'EffectiveDate__c'] = payload[i][prefix + 'EffectiveDate__c'];
	                }
	                request.push(priceList);
	            }
	            remoteService.updatePriceListItems(request).then(function(response) {
	                defer.resolve(response);
	            }, function(reason) {
	                defer.reject(reason);
	            });
	
	            return defer.promise;
	        }
	
	        function sortByPLName(data) {
	            if (data && data.length > 0) {
	                return $filter('orderBy')(data, 'PriceListSO.Name');
	            } else {
	                return data;
	            }
	        }
	
	        function sortBySequence(data) {
	            if (data && data.length > 0) {
	                for (var item in data) {
	                    data[item].PriceListItemSOs = $filter('orderBy')(data[item].PriceListItemSOs, prefix + 'Sequence__c');
	                }
	            }
	            return data;
	        }
	
	        /* 
	         * - Adds prefix namespace to location origin on demand basis.
	         * - Can be made to available in application scope. 
	         * - Its usage is very limited to this single instance in Pricing Page. 
	         * - Replaces 'c.' with prefix.
	         */
	        function preparePrefixUrl() {
	            var prefix = systemConstants.nsPrefix || '',
	                location = $location.protocol() + '://' + $location.host(),
	                updatedLocation = '';
	
	            if (prefix !== '') {
	                if (location.indexOf('apttus-cpqadmin') > -1) {
	                    /* 
	                     * - For MANAGED ORG with 'apttus-cpqadmin' as part of domain name.
	                     * - Replaces 'apttus-cpqadmin' present in the URL with apttus-nameSpacePrefix 
	                     * - nameSpacePrefix contains something like this Apttus_Namesapce__.
	                     * - So replacing underscores('_') with '-' and conerting them to lower case
	                     * - Final url should have domain as apttus-namespace.visual.force.com.
	                     */
	                    updatedLocation = location.replace('apttus-cpqadmin', prefix.replace('_', '-').replace('__', '').toLowerCase());
	                } else {
	                    /* 
	                     * - For MANAGED ORG without 'apttus-cpqadmin' as part of domain name.
	                     * - Managed org without 'apttus-cpqadmin' will have c.visual.force.com
	                     * - c. has to be replaced with prefix without underscores and in lowercase.
	                     */
	                    updatedLocation = location.replace('c.', prefix.replace('_', '-').replace('__', '').toLowerCase() + '.');
	                }
	            } else {
	                /* 
	                 *  - For UNMANAGED org.
	                 */
	                updatedLocation = location;
	            }
	
	            return updatedLocation;
	        }
	
	        function treeToFlat(data) {
	            var sortedByPlName = sortByPLName(data);
	            var sortedData = sortBySequence(sortedByPlName);
	            var flatList = [];
	            if (sortedData && sortedData.length > 0) {
	                for (var item in sortedData) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        var temp = sortedData[item],
	                            pricingItems = temp.PriceListItemSOs;
	                        for (var pricingItem in pricingItems) {
	                            if (!isNaN(parseInt(pricingItem, 10))) {
	                                if (pricingItems[pricingItem].Id) {
	                                    pricingItems[pricingItem].advLink = preparePrefixUrl() + '/apex/PriceListItem?id=' + pricingItems[pricingItem].Id;
	                                }
	                                if (!pricingItems[pricingItem][prefix + 'Frequency__c']) {
	                                    pricingItems[pricingItem][prefix + 'Frequency__c'] = '';
	                                }
	                                if (!pricingItems[pricingItem][prefix + 'PriceMethod__c']) {
	                                    pricingItems[pricingItem][prefix + 'PriceMethod__c'] = '';
	                                }
	                                if (!pricingItems[pricingItem][prefix + 'PriceType__c']) {
	                                    pricingItems[pricingItem][prefix + 'PriceType__c'] = '';
	                                }
	                                flatList.push(pricingItems[pricingItem]);
	                            }
	
	                        }
	                    }
	
	                }
	            }
	            return flatList;
	        }
	
	        function fnGetPricingDetailsByCode(productId) {
	            var defer = $q.defer();
	            remoteService.getPriceListItems(productId).then(function(response) {
	                defer.resolve(treeToFlat(response));
	            }, function(reason) {
	                defer.reject(reason);
	            });
	
	            return defer.promise;
	        }
	
	
	        function preparePriceList(rawObj) {
	            var response = rawObj.PriceListDOs;
	            var priceList = [];
	            if (angular.isDefined(rawObj)) {
	                for (var item in response) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        priceList.push({
	                            label: response[item].PriceListSO.Name,
	                            value: response[item].PriceListSO.Id
	                        });
	                    }
	                }
	            }
	            return priceList;
	        }
	
	
	
	        function fnGetPriceList(request) {
	            var defer = $q.defer();
	            remoteService.getAllPriceLists(request).then(function(response) {
	                defer.resolve(preparePriceList(response));
	            }, function(reason) {
	                defer.reject(reason);
	            });
	            return defer.promise;
	        }
	
	        function fnGetPriceListMetaData() {
	            var defer = $q.defer();
	            remoteService.getPriceListItemPicklistMetadata().then(function(response) {
	                defer.resolve(response);
	            }, function(reason) {
	                defer.reject(reason);
	            });
	
	            return defer.promise;
	        }
	
	        function fnGetSamplePricingItem() {
	            var sample = {
	                "attributes": {
	                    "type": "PriceListItem__c",
	                    "url": ""
	                },
	                "Id": "",
	                "IsDeleted": false,
	                "Name": "",
	                "CreatedDate": "",
	                "CreatedById": "",
	                "LastModifiedDate": "",
	                "LastModifiedById": "",
	                "SystemModstamp": ""
	            };
	            sample[prefix + 'PriceListId__c'] = '';
	            sample[prefix + 'Active__c'] = false;
	            sample[prefix + 'AllocateGroupAdjustment__c'] = true;
	            sample[prefix + 'AllowManualAdjustment__c'] = true;
	            sample[prefix + 'AllowPriceRampOverlap__c'] = false;
	            sample[prefix + 'AllowProration__c'] = false;
	            sample[prefix + 'AutoCascadeQuantity__c'] = false;
	            sample[prefix + 'AutoCascadeSellingTerm__c'] = false;
	            sample[prefix + 'ChargeType__c'] = "";
	            sample[prefix + 'Cost__c'] = "";
	            sample[prefix + 'EnableCommitment__c'] = false;
	            sample[prefix + 'EnablePriceRamp__c'] = false;
	            sample[prefix + 'Frequency__c'] = "";
	            sample[prefix + 'HasCriteria__c'] = false;
	            sample[prefix + 'IsQuantityReadOnly__c'] = false;
	            sample[prefix + 'IsSellingTermReadOnly__c'] = false;
	            sample[prefix + 'IsUsageTierModifiable__c'] = false;
	            sample[prefix + 'ListPrice__c'] = 0;
	            sample[prefix + 'PriceIncludedInBundle__c'] = false;
	            sample[prefix + 'PriceMethod__c'] = "";
	            sample[prefix + 'PriceType__c'] = "";
	            sample[prefix + 'PriceUom__c'] = "";
	            sample[prefix + 'ProductActive__c'] = true;
	            sample[prefix + 'ProductCode__c'] = "",
	                sample[prefix + 'ProductId__c'] = "";
	            sample[prefix + 'ProductName__c'] = "";
	            sample[prefix + 'RollupPriceToBundle__c'] = true;
	            sample[prefix + 'Sequence__c'] = 0;
	            sample[prefix + 'TaxInclusive__c'] = false;
	            sample[prefix + 'Taxable__c'] = false;
	            sample[prefix + 'NumberOfMatrices__c'] = 0;
	            sample[prefix + 'AutoRenew__c'] = false;
	            sample[prefix + 'PriceListId__r'] = {
	                "attributes": {
	                    "type": "PriceList__c",
	                    "url": ""
	                },
	                "Id": "",
	                "Name": ""
	            };
	            return sample;
	        }
	
	        function getDefaultActiveValue(picklistValues) {
	            var selectedValue = '';
	            if (picklistValues.length > 0) {
	                for (var item in picklistValues) {
	                    if (picklistValues[item].active && picklistValues[item].defaultValue) {
	                        selectedValue = picklistValues[item].value;
	                    }
	
	                }
	            }
	            return selectedValue;
	
	        }
	        var pricingService = {
	            createPriceListItems: createPriceListItems,
	            updatePriceListItems: updatePriceListItems,
	            getPricingDetailsByCode: fnGetPricingDetailsByCode,
	            getSamplePricingItem: fnGetSamplePricingItem,
	            getPriceList: fnGetPriceList,
	            getPriceListMetaData: fnGetPriceListMetaData,
	            treeToFlat: treeToFlat,
	            deletePriceListItems: deletePriceListItems,
	            getDefaultActiveValue: getDefaultActiveValue,
	            getFormatDate: fnFormatDate
	
	        };
	
	        return pricingService;
	    };
	
	    productPricingService.$inject = ['$q', '$timeout', '$filter', '$location', 'remoteService', 'systemConstants', 'moment'];
	
	    module.exports = productPricingService;
	})();


/***/ }),
/* 422 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <!-- dismiss-on-timeout=\"3000\" -->\n    <div class=\"clearfix\"></div>\n    <div class=\"pricing-page\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <header>\n                <h4>{{vm.labels.AllPriceLists}}</h4>\n                <div class=\"search\">\n                    <form ng-submit=\"vm.searchPriceList();\" novalidate>\n                        <div class=\"search-input-container\">\n                            <div class=\"input-group\">\n                                <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required drop-disable>\n                                <label class=\"ng-binding\">Search</label>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </header>\n            <div class=\"list-other-Panel list-table\">\n                <div class=\"price-list\">\n                    <div data-ng-if=\"vm.priceLists.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                        {{vm.labels.NoMatchingPL}} <span><b>{{vm.searchedStr}}</b></span>\n                    </div>\n                    <div data-ng-if=\"vm.priceLists.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                        {{vm.labels.MaxSQLSizeExceedMessage}}\n                    </div>\n                    <table>\n                        <tbody class=\"list\">\n                            <tr data-ng-repeat=\"list in vm.priceLists track by list.value\" ng-class=\"{'drag-disabled': list.dragDisable, 'selected': list.selected}\" dnd-draggable=\"vm.getSelectedItemsToDrag(vm.priceLists, list)\" dnd-droppable-in=\".dropzone\" dnd-effect-allowed=\"copy\" dnd-disable-if=\"list.dragDisable\" dnd-selected=\"list.selected = !list.selected\">\n                                <td>\n                                    {{ list.label }}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class=\"pagination cf\">\n                <div class=\"next-prev\">\n                    <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getPriceList('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n                    </button>\n                    <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getPriceList('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <!-- right side panel -->\n        <div class=\"pricing-form noPadding\">\n            <form name=\"vm.pricingForm\" novalidate>\n                <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n                <div class=\"fixingHeaderPricing\" layout=\"row\">\n                    <div class=\"flex-20 action\">{{::vm.labels.Action}}</div>\n                    <div class=\"flex-20 price-list\">{{::vm.labels.PriceList}}</div>\n                    <div class=\"flex-10 charge-type\">{{::vm.labels.ChargeType}}</div>\n                    <div class=\"flex-10\">{{::vm.labels.ListPrice}}</div>\n                    <div class=\"flex-10\">{{::vm.labels.PriceType}}</div>\n                    <div class=\"flex-10\">{{::vm.labels.Frequency}}</div>\n                    <div class=\"flex-10\">{{::vm.labels.PriceMethod}}</div>\n                    <div class=\"flex-4\">{{::vm.labels.Active}}</div>\n                </div>\n                <div class=\"price-table\">\n                    <div class=\"dropzone\" dnd-list=\"vm.pricingItems\" dnd-drop=\"vm.onDroppedPriceList(event, index, item)\" dnd-dragover=\"vm.validateDropPosition(event, index)\">\n                        <div data-ng-repeat=\"item in vm.pricingItems track by $index\" data-ng-class=\"{horizontalBorder:item.showPriceList, pricingDivBackgroundColor:$index==(vm.pricingItems.length-1) && item.showPriceList, errorBcgColor:item.hasError}\" dnd-disable-if=\"!item.showPriceList\" layout=\"row\">\n                            <div class=\"flex-20 action\">\n                                <div class=\"btn-group\" role=\"group\" aria-label=\"...\" data-ng-if=\"item.showPriceList\">\n                                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addSubItem($index);\"  data-ng-disabled=\"$index === vm.disableButton\">\n                                        <i class=\"material-icons\">add</i>\n                                    </button>\n                                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.openChargeTypeCriteriaPopup($index,item)\">\n                                        <i class=\"material-icons\">flare</i>\n                                    </button>\n                                    <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                                        <i class=\"material-icons\">more_vert</i>\n                                    </button>\n                                    <ul class=\"dropdown-menu\">\n                                        <li data-ng-click=\"vm.removeItem($index,item.Id)\" class=\"action-menu\">\n                                            <span class=\"action-menu-item\">\n                                                <i class=\"material-icons\">clear</i>\n                                                 <span class=\"action-menu-label\">{{vm.labels.Remove}}</span>\n                                            </span>\n                                        </li>\n                                        <li class=\"action-menu\" data-ng-if=\"item.Id\">\n                                            <span class=\"action-menu-item\">\n                                            <i class=\"material-icons\">settings</i>\n                                            <a href=\"{{vm.getPLIAdvancedPageUrl(item.Id)}}\" target=\"_blank\" class=\"action-menu-label\">{{vm.labels.Advanced}}</a>\n                                            </span>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                            <div class=\"flex-20 price-list\" data-ng-class=\"item.showPriceList ? 'no-border' : 'with-border text-right'\">\n                                <a href=\"{{vm.getPLAPageUrl(item[vm.prefix + 'PriceListId__r'].Id)}}\" target=\"_blank\" class=\"clickable-item\"><span data-ng-show=\"item.showPriceList\"> {{item[vm.prefix + 'PriceListId__r'].Name}}  \n                                </span></a>\n                                <div class=\"btn-group\" role=\"group\" aria-label=\"...\" data-ng-if=\"!item.showPriceList\">\n                                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addSubItem($index, item[vm.prefix + 'PriceListId__c'])\" data-ng-disabled=\"$index === vm.disableButton\">\n                                        <i class=\"material-icons\">add</i>\n                                    </button>\n                                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.openChargeTypeCriteriaPopup($index,item)\">\n                                        <i class=\"material-icons\">flare</i>\n                                    </button>\n                                    <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                                        <i class=\"material-icons\">more_vert</i>\n                                    </button>\n                                    <ul class=\"dropdown-menu\">\n                                        <li data-ng-click=\"vm.removeItem($index,item.Id)\" class=\"action-menu\">\n                                            <span class=\"action-menu-item\">\n                                        <i class=\"material-icons\">clear</i>\n                                        <span class=\"action-menu-label\">{{vm.labels.Remove}}</span></span>\n                                        </li>\n                                        <li class=\"action-menu\" data-ng-if=\"item.Id\">\n                                            <span class=\"action-menu-item\">\n                                            <i class=\"material-icons\">settings</i>\n                                            <a href=\"{{vm.getPLIAdvancedPageUrl(item.Id)}}\" target=\"_blank\" class=\"action-menu-label\">{{vm.labels.Advanced}}</a>\n                                            </span>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                            <div class=\"flex-10 charge-type\">\n                                <material-form-field model=\"item[vm.prefix + 'ChargeType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.chargeTypePicklistEntries\" class=\"flex\"></material-form-field>\n                            </div>\n                            <div class=\"flex-10\">\n                                <material-form-field model=\"item[vm.prefix + 'ListPrice__c']\" field-type=\"currency\" is-editable=\"true\"></material-form-field>\n                            </div>\n                            <div class=\"flex-10\">\n                                <material-form-field model=\"item[vm.prefix + 'PriceType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.priceTypePicklistEntries\" data-ng-click=\"vm.trackSelectedRowIndex($index)\"></material-form-field>\n                            </div>\n                            <div class=\"flex-10\">\n                                <material-form-field model=\"item[vm.prefix + 'Frequency__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.frequencyPicklistEntries\" is-disabled=\"{{item[vm.prefix + 'PriceType__c'] === 'One Time' || item[vm.prefix + 'PriceType__c'] === ''}}\"></material-form-field>\n                            </div>\n                            <div class=\"flex-10\">\n                                <material-form-field model=\"item[vm.prefix + 'PriceMethod__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.priceMethodsTypePicklistEntries\"></material-form-field>\n                            </div>\n                            <div class=\"flex-5\">\n                                <material-form-field model=\"item[vm.prefix + 'Active__c']\" field-type=\"checkbox\" is-editable=\"true\"></material-form-field>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"clearfix\"></div>\n                </div>\n            </form>\n            <div class=\"pricing-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToDetailsPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">Save</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\n</div>\n<div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n    <div class=\"modalOverlay\">\n        <div class=\"modalHeaderBody\">\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n            <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n        </div>\n        <div class=\"modal-Footer text-right\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\n                <span class=\"modal-TextColor\">Cancel</span>\n            </button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\n                <span class=\"modal-TextColor\">Ok</span>\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var productPricingController = function($scope, $rootScope, $state, $stateParams, $mdDialog, cpqAdminConstants, pricingService, priceList, priceListMetaData, associatedPricingDetails, applicationService, systemConstants, i18nService, productService, $location) {
	
	        var vm = this,
	            newlyAddedItems = [],
	            _sampleTemplate = pricingService.getSamplePricingItem(),
	            selectedRowIndex, toBeRemovedIndex, toBeRemovedPricelistId;
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        /**
	         * updateState method checks whether meta data about the current selected product is
	         * available or not. Like product name, product code, etc.
	         * For a new product, it wont have any metadata until unless it is saved.
	         * Helps is page refresh and state change activity.
	         */
	        productService.updateState($stateParams.id);
	
	        //Get all the price list 
	        vm.priceLists = priceList;
	        vm.isCancelClicked = false;
	        // Pricelist pagination 
	        vm.pageNumber = 1;
	        vm.disableLeftBtn = true;
	        var getPriceListRequestObj = {
	            "SearchString": "",
	            "NumberOfRecordsPerChunk": 25,
	            "ChunkNumber": vm.pageNumber
	        };
	
	        // Search price list based on the search text
	        vm.searchPriceList = function() {
	            getPriceListRequestObj.SearchString = vm.searchText;
	            getPriceListRequestObj.ChunkNumber = 1;
	            loadPriceList(getPriceListRequestObj);
	        };
	
	        /**
	         * Check the pricelist request chunkNumber
	         */
	        vm.getPriceList = function(type) {
	            vm.priceLists = [];
	            if (type === 'next') {
	                vm.pageNumber++;
	                if (vm.pageNumber !== 1) {
	                    vm.disableLeftBtn = false;
	                }
	            } else {
	                vm.pageNumber--;
	                if (vm.pageNumber === 1) {
	                    vm.disableLeftBtn = true;
	                }
	            }
	            getPriceListRequestObj.ChunkNumber = vm.pageNumber;
	            loadPriceList(getPriceListRequestObj);
	        }
	
	        /** 
	         * Load the priceList value when click previous and next button
	         */
	        function loadPriceList(reqObj) {
	            pricingService.getPriceList(reqObj)
	                .then(function(response) {
	                    vm.priceLists = response;
	                    vm.isMaxSQLSizeExceed = false;
	                    priceList = response;
	                    if (response.length < reqObj.NumberOfRecordsPerChunk) {
	                        vm.disableRightBtn = true;
	                    } else {
	                        vm.disableRightBtn = false;
	                    }
	                    if (response.length === 0) {
	                        vm.searchedStr = vm.searchText;
	                    }
	                    disableLeftPanelPriceLists();
	                    document.querySelector('.list-table').scrollTop = 0;
	                    vm.selectedNodes = []; //To clear selected nodes from left panel
	                }, function(reason) {
	                    if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                        vm.priceLists = [];
	                        vm.isMaxSQLSizeExceed = true;
	                    } else {
	                        applicationService.showErrorMessage(reason);
	                    }
	                    vm.disableRightBtn = true;
	                });
	        }
	
	
	        vm.pricingItems = preparePricingItems(associatedPricingDetails);
	        disableLeftPanelPriceLists();
	        /**
	         * Below scope variables are used up against one one picklist in the view.
	         * Names are self explanatory.s
	         */
	        vm.priceListPicklistEntries = {
	            PicklistValues: priceList
	        };
	
	        vm.uomListPicklistEntries = {
	            PicklistValues: priceListMetaData.PriceUoms
	        };
	
	        priceListMetaData.PriceTypes.unshift({
	            active: true,
	            defaultValue: false,
	            label: vm.labels.NoneAsPickListValue,
	            value: ''
	        });
	        vm.priceTypePicklistEntries = {
	            PicklistValues: priceListMetaData.PriceTypes,
	            methodToCallInController: updateFrequency
	        };
	        vm.chargeTypePicklistEntries = {
	            PicklistValues: priceListMetaData.ChargeTypes,
	            methodToCallInController: updateChargeType
	        };
	        priceListMetaData.PriceMethods.unshift({
	            active: true,
	            defaultValue: false,
	            label: vm.labels.NoneAsPickListValue,
	            value: ''
	        });
	        vm.priceMethodsTypePicklistEntries = {
	            PicklistValues: priceListMetaData.PriceMethods
	        };
	        priceListMetaData.Frequency.unshift({
	            active: true,
	            defaultValue: false,
	            label: vm.labels.NoneAsPickListValue,
	            value: ''
	        });
	        vm.frequencyPicklistEntries = {
	            PicklistValues: priceListMetaData.Frequency,
	            methodToCallInController: updateFrequencyError
	        };
	
	        vm.trackSelectedRowIndex = function(index) {
	            selectedRowIndex = index;
	        };
	
	        function updateFrequency(obj) {
	            if (selectedRowIndex >= 0) {
	                if (obj === 'One Time' || obj === '') {
	                    vm.pricingItems[selectedRowIndex][vm.prefix + 'Frequency__c'] = '';
	                }
	            }
	        }
	
	        function updateChargeType(obj) {
	            if (selectedRowIndex >= 0) {
	                if (obj !== undefined) {
	                    vm.pricingItems[selectedRowIndex].hasError = false;
	                }
	            }
	        }
	
	        function updateFrequencyError(obj) {
	            if (selectedRowIndex >= 0) {
	                if (obj !== undefined) {
	                    vm.pricingItems[selectedRowIndex].hasError = false;
	                }
	            }
	        }
	
	        /**
	         * Get all associated priceItems for particular product 
	         */
	        function getPriceListItems() {
	            pricingService.getPricingDetailsByCode($stateParams.id)
	                .then(function(response) {
	                    vm.pricingItems = preparePricingItems(response);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        /**
	         * Prepare the associated pricelist for display in the middle panel
	         */
	        function preparePricingItems(priceItems) {
	            if (priceItems && priceItems.length) {
	                var uniquePriceListId = [];
	                for (var item in priceItems) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        if (priceItems[item][vm.prefix + 'PriceListId__c']) {
	                            if (uniquePriceListId.indexOf(priceItems[item][vm.prefix + 'PriceListId__c']) > -1) {
	                                priceItems[item].showPriceList = false;
	                            } else {
	                                uniquePriceListId.push(priceItems[item][vm.prefix + 'PriceListId__c']);
	                                priceItems[item].showPriceList = true;
	                            }
	                        }
	                        if (priceItems[vm.prefix + 'EffectiveDate__c'] != null)
	                            priceItems[vm.prefix + 'EffectiveDate__c'] = new Date(pricingService.getFormatDate(priceItems[vm.prefix + 'EffectiveDate__c']));
	                        if (priceItems[vm.prefix + 'ExpirationDate__c'] != null)
	                            priceItems[vm.prefix + 'ExpirationDate__c'] = new Date(pricingService.getFormatDate(priceItems[vm.prefix + 'ExpirationDate__c']));
	
	                        priceItems[item].ElementId = 'pricing-item-' + item;
	                    }
	                }
	            }
	            return priceItems;
	        }
	
	        /**
	         * associate pricelists with the product
	         */
	        function createPriceListItems(newlyAddedPriceItemIndex) {
	            pricingService.createPriceListItems($stateParams.id, newlyAddedItems)
	                .then(function(response) {
	                    appendNewlyAddedPriceItems(newlyAddedPriceItemIndex, newlyAddedItems, response);
	                    newlyAddedItems = [];
	                    vm.disableButton = undefined;
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        /**
	         * Call this method push the newly associated price list with priceItems for middle panel display
	         */
	        function appendNewlyAddedPriceItems(newlyAddedPriceItemIndex, newPriceItems, response) {
	            var index, newPriceItemsLength = newPriceItems.length;
	            if (newPriceItemsLength) {
	                for (index = 0; index < newPriceItemsLength; index++) {
	                    newPriceItems[index].Id = response[index].Id;
	                    newPriceItems[index][vm.prefix + 'PriceListId__r'].Id = response[index][vm.prefix + 'PriceListId__c'];
	                    vm.pricingItems.splice(newlyAddedPriceItemIndex, 0, newPriceItems[index]);
	                    newlyAddedPriceItemIndex++;
	                }
	                addAlert(vm.labels.SaveSuccess, cpqAdminConstants.SUCCESS);
	            }
	        }
	
	        vm.removeItem = function(index, pliId) {
	            /*
	             * Treat the page content as dirty. Because, a new node just got added to the center panel.
	             */
	            vm.confiramtionPopup = true;
	            toBeRemovedIndex = index;
	            toBeRemovedPricelistId = pliId;
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.DeleteMessageBody,
	                messageNote: vm.labels.DeleteMessageNote
	            }
	        };
	
	        vm.confirmRemove = function() {
	            vm.confiramtionPopup = false;
	            var removedPriceList;
	            if (toBeRemovedPricelistId) {
	                pricingService.deletePriceListItems([toBeRemovedPricelistId]).then(function(res) {
	                    var removedPriceItem = vm.pricingItems[toBeRemovedIndex];
	                    vm.pricingItems.splice(toBeRemovedIndex, 1);
	                    vm.pricingItems = preparePricingItems(vm.pricingItems);
	                    if (removedPriceItem.showPriceList)
	                        enableLeftPanelPriceLists(removedPriceItem[vm.prefix + 'PriceListId__c']);
	                    toBeRemovedPricelistId = '';
	                    toBeRemovedIndex = '';
	                }, function(reason) {
	                    toBeRemovedPricelistId = '';
	                    toBeRemovedIndex = '';
	                    applicationService.showErrorMessage(reason);
	                });
	            }
	        };
	
	        vm.cancelRemove = function() {
	            vm.confiramtionPopup = false;
	            toBeRemovedIndex = undefined;
	        };
	
	        /**
	         * - Adds a new parent pricing option to the existing list.
	         */
	        vm.addNewPricingItem = function(index, priceList) {
	            for (var i = 0; i < priceList.length; i++) {
	                var tempTemplate = getSamplePricingItem();
	                tempTemplate.showPriceList = true;
	                tempTemplate.selectedPriceList = {
	                    'label': priceList[i].label,
	                    'value': priceList[i].value
	                };
	                tempTemplate[vm.prefix + 'PriceListId__r']['Name'] = priceList[i].label;
	                tempTemplate[vm.prefix + 'PriceListId__c'] = priceList[i].value;
	                tempTemplate[vm.prefix + 'Sequence__c'] = 1;
	                tempTemplate.showPriceList = true;
	                newlyAddedItems.push(tempTemplate);
	            }
	            createPriceListItems(index);
	        };
	
	        /**
	         * For Making sample priceItem
	         */
	        function getSamplePricingItem() {
	            var tempTemplate = angular.copy(_sampleTemplate);
	            tempTemplate[vm.prefix + 'ProductId__c'] = $stateParams.id;
	            tempTemplate[vm.prefix + 'ChargeType__c'] = vm.labels.StandardPrice;
	            tempTemplate[vm.prefix + 'PriceType__c'] = pricingService.getDefaultActiveValue(priceListMetaData.PriceTypes);
	            tempTemplate[vm.prefix + 'PriceMethod__c'] = pricingService.getDefaultActiveValue(priceListMetaData.PriceMethods);
	            tempTemplate[vm.prefix + 'Active__c'] = true;
	            return tempTemplate;
	        }
	        /**
	         * - Adds a new sub pricing item to a parent pricing item list.
	         * - Needs a parent price list id.
	         * - There is no heirarchy as parent-children. But we are maintaining for easy displaying purpose.
	         */
	        vm.addSubItem = function(index) {
	            var pricingItem = vm.pricingItems[index];
	            if (pricingItem[vm.prefix + 'PriceListId__c']) {
	                vm.disableButton = index;
	                var tempTemplate = getSamplePricingItem();
	                tempTemplate[vm.prefix + 'PriceListId__c'] = pricingItem[vm.prefix + 'PriceListId__c'];
	                var sequence = getPLISequence(pricingItem[vm.prefix + 'PriceListId__c']);
	                tempTemplate[vm.prefix + 'Sequence__c'] = sequence;
	                tempTemplate.showPriceList = false;
	                tempTemplate.selectedPriceList = {
	                    'label': pricingItem[vm.prefix + 'PriceListId__r'].Name,
	                    'value': pricingItem[vm.prefix + 'PriceListId__c']
	                };
	                tempTemplate[vm.prefix + 'PriceListId__r'].Name = tempTemplate.selectedPriceList.label;
	                tempTemplate.showPriceList = false;
	                newlyAddedItems.push(tempTemplate);
	                createPriceListItems(index + 1);
	            } else {
	                addAlert(vm.labels.SelectPricelist, cpqAdminConstants.DANGER);
	            }
	        };
	
	        /**
	         * Creating the sequence number for newly associted pricelist
	         */
	        function getPLISequence(priceListId) {
	            var sequence = 0,
	                nextSequence = 1,
	                sequenceArr = [];
	            for (var i = 0; i < vm.pricingItems.length; i++) {
	                if (vm.pricingItems[i][vm.prefix + 'PriceListId__c'] === priceListId) {
	                    var eachSequence = vm.pricingItems[i][vm.prefix + 'Sequence__c'] || '';
	                    eachSequence = +eachSequence;
	                    if (sequenceArr.indexOf(eachSequence) <= -1) {
	                        sequenceArr.push(eachSequence);
	                    }
	                }
	            }
	            if (sequenceArr.length > 0) {
	                sequence = Math.max.apply(Math, sequenceArr);;
	                if (sequence) {
	                    nextSequence = sequence + 1;
	                }
	            }
	            return nextSequence;
	        }
	
	        /**
	         * This method is used for multiselction(drag and drop) in left panel
	         */
	        vm.getSelectedItemsToDrag = function(list, item) {
	            item.selected = true;
	            return list.filter(function(item) {
	                return item.selected;
	            });
	        };
	
	        /**
	         * Drag and drop price list
	         */
	        vm.onDroppedPriceList = function(event, index, droppedPriceList) {
	            // add the dragDisable attr after drag completeted
	            angular.forEach(vm.priceLists, function(item, key) {
	                angular.forEach(droppedPriceList, function(list) {
	                    if (list.value == item.value) {
	                        item.dragDisable = true;
	                        delete item['selected'];
	                    }
	                });
	            });
	            vm.addNewPricingItem(index, droppedPriceList);
	        };
	
	
	        /**
	         * Validate the drop position is in between child or not
	         */
	        vm.validateDropPosition = function(event, index) {
	            var pricingItem = vm.pricingItems[index];
	            if (pricingItem === undefined || (pricingItem && pricingItem.showPriceList === true)) {
	                return true;
	            } else {
	                return false;
	            }
	        }
	
	        /**
	         * Disabled the price list in the left panel when it is available in the middle panel
	         */
	        function disableLeftPanelPriceLists() {
	            angular.forEach(vm.pricingItems, function(parentItem, parentKey) {
	                if (parentItem.showPriceList) {
	                    angular.forEach(vm.priceLists, function(childItem, childKey) {
	                        if (parentItem[vm.prefix + 'PriceListId__c'] == childItem.value) {
	                            childItem.dragDisable = true;
	                        }
	                    });
	                }
	            });
	        }
	
	
	        /**
	         * Enabled the  price list in the left panel when removed all parent and child of the particular price list in the middle panel
	         */
	        function enableLeftPanelPriceLists(priceItemID) {
	            if (isParticularPriceItemsRemoved(priceItemID)) {
	                for (var item in vm.priceLists) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        if (vm.priceLists[item].value == priceItemID) {
	                            vm.priceLists[item].dragDisable = false;
	                            break;
	                        }
	                    }
	                }
	            }
	        }
	
	        /**
	         * Verifying particular price item(parent and child also) removed from the middle panel or not
	         */
	        function isParticularPriceItemsRemoved(priceItemID) {
	            var isPriceItemsRemoved = true;
	            if (priceItemID) {
	                for (var item in vm.pricingItems) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        if (vm.pricingItems[item][vm.prefix + 'PriceListId__c'] == priceItemID) {
	                            isPriceItemsRemoved = false;
	                            break;
	                        }
	                    }
	                }
	            }
	            return isPriceItemsRemoved;
	        }
	
	        /**
	         * - Utility method to check if any of the final payload doesn't contain a pricelist value
	         * - Used to provide feedback to user based on its return value.
	         * - There can't be a pricing item without a valid price list id.
	         */
	        function isPriceListNotDefined() {
	            var notDefined = false;
	            for (var item in vm.pricingItems) {
	                if (!isNaN(parseInt(item, 10))) {
	                    if (!vm.pricingItems[item][vm.prefix + 'PriceListId__c']) {
	                        notDefined = true;
	                        break;
	                    }
	                }
	            }
	            return notDefined;
	        }
	
	        function isPriceTypeRelationshipNotDefined() {
	            var notMaintained = false,
	                indices = [];
	            for (var item in vm.pricingItems) {
	                if (!isNaN(parseInt(item, 10))) {
	                    /* Find what is the price type and frequence type for each record*/
	                    var priceType = vm.pricingItems[item][vm.prefix + 'PriceType__c'],
	                        frequenceType = vm.pricingItems[item][vm.prefix + 'Frequency__c'];
	                    /* Check if price type is 'Recurring', then there should be a frequency value. Else error*/
	                    if ((priceType === 'Recurring' || priceType === 'Usage') && !frequenceType) {
	                        notMaintained = true;
	                        indices.push(parseInt(item, 10) + 1);
	                    }
	                }
	            }
	            return {
	                notMaintained: notMaintained,
	                indices: indices
	            };
	        }
	
	        /* 
	         * Utility method to add error CSS class to data model objects of they fail to comply with below
	         * 2 conditions.
	         * - For existing price list item, charge can't be empty
	         * - Frequency can't be empty for Price type as 'One Time'
	         **/
	        function updateErrorAttribute(indexArr) {
	            if (indexArr) {
	                for (var i = 0; i < indexArr.length; i++) {
	                    var index = indexArr[i];
	                    vm.pricingItems[index - 1].hasError = true;
	                }
	            }
	        }
	
	        function isChargeTypeBlankForEdit() {
	            var notMaintained = false,
	                indices = [];
	            for (var item in vm.pricingItems) {
	                if (!isNaN(parseInt(item, 10))) {
	                    var chargeType = vm.pricingItems[item][vm.prefix + 'ChargeType__c'];
	
	                    if (chargeType === '' || chargeType == undefined) {
	                        notMaintained = true;
	                        indices.push(parseInt(item, 10) + 1);
	                    }
	                }
	            }
	            return {
	                notMaintained: notMaintained,
	                indices: indices
	            };
	        }
	
	        /*
	         * Save method prepares the final payload.
	         * Checks the pricing item with price list values.
	         * Makes service save call.
	         */
	        function savePage(event, toState, toParams) {
	            if (vm.pricingItems && vm.pricingItems.length && vm.pricingForm.$dirty) {
	                //Find out if there is any item without a selected priceList.
	                if (isPriceListNotDefined()) {
	                    addAlert(vm.labels.NoPricelist, cpqAdminConstants.DANGER);
	                } else if (isChargeTypeBlankForEdit().notMaintained) {
	                    var indices = isChargeTypeBlankForEdit().indices;
	                    indices.length > 0 ? updateErrorAttribute(indices) : angular.noop();
	                    addAlert(vm.labels.NoChargeType + ' : ' + indices.join(','), cpqAdminConstants.DANGER);
	                } else if (isPriceTypeRelationshipNotDefined().notMaintained) {
	                    var indices = isPriceTypeRelationshipNotDefined().indices;
	                    indices.length > 0 ? updateErrorAttribute(indices) : angular.noop();
	                    addAlert(vm.labels.NoFrequency + ' : ' + indices.join(','), cpqAdminConstants.DANGER);
	                } else {
	                    var payload = angular.copy(vm.pricingItems);
	
	                    if (payload && payload.length > 0) {
	                        pricingService.updatePriceListItems($stateParams.id, payload)
	                            .then(function(res) {
	                                vm.pricingForm.$setPristine();
	                                if (!event) {
	                                    getPriceListItems();
	                                }
	                                processUpdateStatus(event, toState, toParams);
	                                addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                    }
	                }
	            } else {
	                processUpdateStatus(event, toState, toParams);
	                addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	            }
	
	        };
	
	        function processUpdateStatus(event, toState, toParams) {
	            if (event) {
	                if (toState) {
	                    vm.alert = [];
	                    $state.go(toState, toParams);
	                }
	            }
	        }
	
	        /**
	         * When user clicks on the 'Save Product' button, an event named 'explicitPageSave' gets broadcasted.
	         * A page has to listen to that event and do the page specific save functionality.
	         */
	        vm.explicitPageSave = function() {
	            savePage();
	        };
	
	        /**
	         * When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed incase of errors in saving the page.
	         *
	         * If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if ((toState.name === 'app.list' || !vm.pricingForm.$dirty) && !vm.isCancelClicked) {
	                return true;
	            } else {
	                vm.isCancelClicked = false;
	                e.preventDefault();
	                savePage(e, toState, toParams);
	            }
	        });
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        /* Managing form container with only CSS turns out to be 
	         * way more difficult than anticipated. So taking the scripting
	         * route.
	         */
	
	        var middleContainer = document.querySelector(".price-table");
	        var scroller = angular.element(middleContainer);
	
	        function setTableHeader() {
	            var tableTitle = document.querySelectorAll(".fixingHeaderPricing");
	            var scrollLeft = scroller.scrollLeft();
	            angular.element(tableTitle).css('right', scrollLeft + 'px');
	        }
	        setTableHeader();
	
	        scroller.bind('scroll', function() {
	            setTableHeader();
	        });
	
	        /**
	         * updateMenuStatus broadcasts "menuStatus" event. Menu directive will be listening to this event.
	         * Based on the page and its current status, either green-check icon will be visible or red-exclamation
	         * icon will be visible right next to the menu.
	         *
	         * This can be done through services and Menu directive will be watching any changes to service variable
	         */
	        function updateMenuStatus(status) {
	            $rootScope.$broadcast('menuStatus', {
	                menu: 'pricing',
	                status: status
	            });
	        }
	
	        vm.goToDetailsPage = function() {
	            vm.isCancelClicked = true;
	            $state.go('app.product.details', {
	                'id': $stateParams.id
	            });
	        };
	
	        vm.goToPriceListItem = function(pliId) {
	            $state.go('app.priceListItem.details', {
	                'id': pliId
	            });
	        };
	
	        vm.getPLIAdvancedPageUrl = function(id) {
	            var absUrl = $location.absUrl(),
	                existingPath = '/product/' + $stateParams.id + '/pricing',
	                toBeUpdatedPath = '/priceListItem/' + id + '/details';
	            return absUrl.replace(existingPath, toBeUpdatedPath);
	        };
	        vm.openChargeTypeCriteriaPopup = function(index, pli) {
	            $mdDialog.show({
	                controller: __webpack_require__(424),
	                template: __webpack_require__(425),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	                    selectedPli: function() {
	                        return { PriceListItemSO: pli };
	                    }
	                }
	            }).then(function(response) {
	                vm.pricingItems[index] = response.pli.PriceListItemSO;
	                vm.pricingForm.$setDirty();
	            });
	        }
	        vm.getPLAPageUrl = function(id) {
	            var absUrl = $location.absUrl(),
	                existingPath = '/product/' + $stateParams.id + '/pricing',
	                toBeUpdatedPath = '/priceList/' + id + '/details';
	            return absUrl.replace(existingPath, toBeUpdatedPath);
	        };
	
	    };
	
	    productPricingController.$inject = ['$scope', '$rootScope', '$state', '$stateParams', '$mdDialog', 'cpqAdminConstants', 'productPricingService', 'priceList', 'priceListMetaData', 'associatedPricingDetails', 'applicationService', 'systemConstants', 'i18nService', 'productService', '$location'];
	
	    module.exports = productPricingController;
	})();


/***/ }),
/* 424 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var priceListItemController = function($scope, $mdDialog, i18nService, cpqAdminConstants, chargeTypeCriteriaService, selectedPli, systemConstants) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	        vm.prefix = prefix;
	        vm.alertList = [];
	        vm.pli = selectedPli;
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        function getChargeTypeCriterias() {
	            var lineItems = vm.pli.PriceListItemSO.chargeTypeCriteria;
	            if (lineItems && lineItems.filter && lineItems.filter.predicates) {
	                var lineItemPredicates = lineItems.filter.predicates;
	                for (var i = 0; i < lineItemPredicates.length; i++) {
	                    var value = getPrefixedAttribute('LineItem__c') + '.' + lineItemPredicates[i]['FieldName'],
	                        fieldType = lineItemPredicates[i].FieldType;
	                    if (fieldType === 'PICKLIST') {
	                        (function(label, j, value) {
	                            chargeTypeCriteriaService.searchTargetAttributesForLineItems(label)
	                                .then(function(response) {
	                                    lineItemPredicates[j]['picklistValues'] = {
	                                        PicklistValues: response.length > 0 ? chargeTypeCriteriaService.getMatchingPicklistValues(response, label) : []
	                                    };
	                                    lineItemPredicates[j]['targetField'] = {
	                                        autocomplete: {
	                                            'selectedItemChange': updateChargeTypesForLineItems,
	                                            'querySearch': chargeTypeCriteriaService.searchTargetAttributesForLineItems,
	                                            'displayName': 'label',
	                                            'selectedItem': {
	                                                'value': value,
	                                                'label': chargeTypeCriteriaService.getChargeTypeFilterLabel(lineItems['sObjectLabel'], lineItemPredicates[j]['FieldName'], lineItemPredicates[j]['FieldLabel'])
	                                            }
	                                        }
	                                    };
	                                });
	                        })(lineItemPredicates[i]['FieldLabel'], i, value);
	                    } else {
	                        if (fieldType === 'DOUBLE' || fieldType === 'CURRENCY') {
	                            lineItemPredicates[i].FieldValue = lineItemPredicates[i].FieldValue ? +lineItemPredicates[i].FieldValue : 0;
	                        }
	                        lineItemPredicates[i]['picklistValues'] = { PicklistValues: [] };
	                        lineItemPredicates[i]['targetField'] = {
	                            autocomplete: {
	                                'selectedItemChange': updateChargeTypesForLineItems,
	                                'querySearch': chargeTypeCriteriaService.searchTargetAttributesForLineItems,
	                                'displayName': 'label',
	                                'selectedItem': {
	                                    'value': value,
	                                    'label': chargeTypeCriteriaService.getChargeTypeFilterLabel(lineItems['sObjectLabel'], lineItemPredicates[i]['FieldName'], lineItemPredicates[i]['FieldLabel'])
	                                }
	                            }
	                        };
	                    }
	
	                }
	            }
	            if (lineItems && lineItems.filter && lineItems.filter.childFilter) {
	                var paItems = lineItems.filter.childFilter.predicates || [];
	                for (var i = 0; i < paItems.length; i++) {
	                    var value = getPrefixedAttribute('ProductAttributeValue__c') + '.' + paItems[i]['FieldName'],
	                        fieldType = paItems[i].FieldType;
	                    if (fieldType === 'PICKLIST') {
	                        (function(label, j, value) {
	                            chargeTypeCriteriaService.searchTargetAttributesForProductAttributes(label)
	                                .then(function(response) {
	                                    paItems[j]['picklistValues'] = {
	                                        PicklistValues: response.length > 0 ? chargeTypeCriteriaService.getMatchingPicklistValues(response, label) : []
	                                    };
	                                    paItems[j]['targetField'] = {
	                                        autocomplete: {
	                                            'selectedItemChange': updateChargeTypesForProductAttributes,
	                                            'querySearch': chargeTypeCriteriaService.searchTargetAttributesForProductAttributes,
	                                            'displayName': 'label',
	                                            'selectedItem': {
	                                                'value': value,
	                                                'label': chargeTypeCriteriaService.getChargeTypeFilterLabel(lineItems.filter.childFilter['childSObjectLabel'], paItems[j]['FieldName'], paItems[j]['FieldLabel'])
	                                            }
	                                        }
	                                    };
	                                });
	                        })(paItems[i]['FieldLabel'], i, value);
	                    } else {
	                        if (fieldType === 'DOUBLE' || fieldType === 'CURRENCY') {
	                            paItems[i].FieldValue = paItems[i].FieldValue ? +paItems[i].FieldValue : 0;
	                        }
	                        paItems[i]['picklistValues'] = { PicklistValues: [] };
	                        paItems[i]['targetField'] = {
	                            autocomplete: {
	                                'selectedItemChange': updateChargeTypesForProductAttributes,
	                                'querySearch': chargeTypeCriteriaService.searchTargetAttributesForProductAttributes,
	                                'displayName': 'label',
	                                'selectedItem': {
	                                    'value': value,
	                                    'label': chargeTypeCriteriaService.getChargeTypeFilterLabel(lineItems.filter.childFilter['childSObjectLabel'], paItems[i]['FieldName'], paItems[i]['FieldLabel'])
	                                }
	                            }
	                        };
	                    }
	                }
	            } else {
	                lineItems.filter.childFilter = {
	                    condExpr: '',
	                    childSObjectLabel: vm.labels.ProductAttributeValue,
	                    childSObjectName: getPrefixedAttribute("ProductAttributeValue__c"),
	                    predicates: [],
	                    relationFieldName: getPrefixedAttribute("LineItemId__c")
	                };
	            }
	        }
	
	        var chargeTypeCriteria = vm.pli.PriceListItemSO[getPrefixedAttribute('Criteria__c')];
	        var chargeTypeCriteriaObj = ((chargeTypeCriteria !== undefined && chargeTypeCriteria !== '') ? JSON.parse(chargeTypeCriteria) : '');
	        if (chargeTypeCriteriaObj) {
	            vm.pli.PriceListItemSO.chargeTypeCriteria = chargeTypeCriteriaObj;
	            getChargeTypeCriterias();
	
	        } else {
	            vm.pli.PriceListItemSO.chargeTypeCriteria = {
	                searchText: null,
	                exprStr: '',
	                sObjectLabel: vm.labels.LineItem,
	                sObjectName: getPrefixedAttribute("LineItem__c"),
	                fields: [],
	                filter: {
	                    condExpr: '',
	                    predicates: [],
	                    hasRHSFields: false,
	                    childFilter: {
	                        condExpr: '',
	                        childSObjectLabel: vm.labels.ProductAttributeValue,
	                        childSObjectName: getPrefixedAttribute("ProductAttributeValue__c"),
	                        predicates: [],
	                        relationFieldName: getPrefixedAttribute("LineItemId__c")
	                    }
	                }
	            };
	        }
	        if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.condExpr !== '') {
	            vm.showLIAdvancedPanel = true;
	        } else {
	            vm.showLIAdvancedPanel = false;
	        }
	        if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.condExpr !== '') {
	            vm.showPARAdvancedPanel = true;
	        } else {
	            vm.showPARAdvancedPanel = false;
	        }
	
	        function prepareCriteria() {
	            var criteria = vm.pli.PriceListItemSO.chargeTypeCriteria;
	            if (criteria) {
	                var linepredicates = criteria.filter.predicates;
	                if (linepredicates.length > 0) {
	                    for (var i = 0; i < linepredicates.length; i++) {
	                        var temp = linepredicates[i];
	                        temp.hasError ? delete temp.hasError : '';
	                        temp.targetField ? delete temp.targetField : '';
	                        temp.picklistValues ? delete temp.picklistValues : '';
	                    }
	                }
	                var productAttributePredicates = criteria.filter.childFilter.predicates;
	                if (productAttributePredicates.length > 0) {
	                    for (var i = 0; i < productAttributePredicates.length; i++) {
	                        var temp = productAttributePredicates[i];
	                        temp.hasError ? delete temp.hasError : '';
	                        temp.targetField ? delete temp.targetField : '';
	                        temp.picklistValues ? delete temp.picklistValues : '';
	                    }
	                }
	                vm.pli.PriceListItemSO[getPrefixedAttribute('Criteria__c')] = JSON.stringify(criteria);
	            } else {
	                vm.pli.PriceListItemSO[getPrefixedAttribute('Criteria__c')] = '';
	            }
	        }
	
	
	        /* Charge Type Criteria */
	        function updateChargeTypesForLineItems(item) {
	            if (item) {
	                var lineItems = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	                for (var i = 0; i < lineItems.length; i++) {
	                    if (item.label === lineItems[i].targetField.autocomplete.selectedItem.label) {
	
	                        if (item.fieldType) {
	                            lineItems[i].FieldType = item.fieldType;
	                            if (item.fieldType === 'BOOLEAN') {
	                                lineItems[i].FieldValue = false;
	                            } else {
	                                lineItems[i].FieldValue = '';
	                            }
	                        }
	                        if (item.picklistValues) {
	                            lineItems[i].picklistValues = {
	                                PicklistValues: item.picklistValues
	                            };
	                        }
	                        break;
	                    }
	                }
	            }
	        }
	
	        function updateChargeTypesForProductAttributes(item) {
	            if (item) {
	                var productAttributes = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	                for (var i = 0; i < productAttributes.length; i++) {
	                    if (item.label === productAttributes[i].targetField.autocomplete.selectedItem.label) {
	                        if (item.fieldType) {
	                            productAttributes[i].FieldType = item.fieldType;
	                            if (item.fieldType === 'BOOLEAN') {
	                                productAttributes[i].FieldValue = false;
	                            } else {
	                                productAttributes[i].FieldValue = '';
	                            }
	                        }
	                        if (item.picklistValues) {
	                            productAttributes[i].picklistValues = {
	                                PicklistValues: item.picklistValues
	                            };
	                        }
	                        break;
	                    }
	                }
	            }
	        }
	
	        vm.operatorPicklistEntries = {
	            PicklistValues: [{
	                label: vm.labels.EqualTo,
	                value: vm.labels.EqualTo
	            }, {
	                label: vm.labels.NotEqualTo,
	                value: vm.labels.NotEqualTo
	            }, {
	                label: vm.labels.StartsWith,
	                value: vm.labels.StartsWith
	            }, {
	                label: vm.labels.Contains,
	                value: vm.labels.Contains
	            }, {
	                label: vm.labels.DoesNotContain,
	                value: vm.labels.DoesNotContain
	            }, {
	                label: vm.labels.LessThan,
	                value: vm.labels.LessThan
	            }, {
	                label: vm.labels.GreaterThan,
	                value: vm.labels.GreaterThan
	            }, {
	                label: vm.labels.LessThanOrEqualTo,
	                value: vm.labels.LessThanOrEqualTo
	            }, {
	                label: vm.labels.GreaterThanOrEqualTo,
	                value: vm.labels.GreaterThanOrEqualTo
	            }, {
	                label: vm.labels.In,
	                value: vm.labels.In
	            }, {
	                label: vm.labels.NotIn,
	                value: vm.labels.NotIn
	            }]
	        };
	
	        function getNextRowNumber(type) {
	            if (type === 'Line Items') {
	                return (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.length + 1);
	            } else if (type === 'Product Attributes') {
	                return (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.length + 1);
	            }
	        }
	
	        vm.addChargeType = function(type) {
	            var targetField = {},
	                querySearch;
	            if (type === 'Line Items') {
	                targetField = {
	                    autocomplete: {
	                        'selectedItemChange': updateChargeTypesForLineItems,
	                        'querySearch': chargeTypeCriteriaService.searchTargetAttributesForLineItems,
	                        'displayName': 'label'
	                    }
	                };
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.push({
	                    'RowNum': getNextRowNumber(type),
	                    'RHSSObjectName': null,
	                    'RHSFieldType': null,
	                    'RHSFieldName': null,
	                    'RHSFieldLabel': null,
	                    'RHSChildFilterName': null,
	                    'RefFieldName': null,
	                    'OffsetValue': null,
	                    'LHSSObjectName': null,
	                    'LHSChildFilterName': null,
	                    'FieldValue': '',
	                    'FieldType': '',
	                    'FieldName': '',
	                    'FieldLabel': '',
	                    'CompOper': '',
	                    'BoolOper': 'AND',
	                    'statementProduct': '',
	                    'targetField': targetField
	                });
	            } else if (type === 'Product Attributes') {
	                targetField = {
	                    autocomplete: {
	                        'selectedItemChange': updateChargeTypesForProductAttributes,
	                        'querySearch': chargeTypeCriteriaService.searchTargetAttributesForProductAttributes,
	                        'displayName': 'label'
	                    }
	                };
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.push({
	                    'RowNum': getNextRowNumber(type),
	                    'RHSSObjectName': null,
	                    'RHSFieldType': null,
	                    'RHSFieldName': null,
	                    'RHSFieldLabel': null,
	                    'RHSChildFilterName': null,
	                    'RefFieldName': null,
	                    'OffsetValue': null,
	                    'LHSSObjectName': null,
	                    'LHSChildFilterName': null,
	                    'FieldValue': '',
	                    'FieldType': '',
	                    'FieldName': '',
	                    'FieldLabel': '',
	                    'CompOper': '',
	                    'BoolOper': 'AND',
	                    'statementProduct': '',
	                    'targetField': targetField
	                });
	            }
	
	        };
	
	        function updateRowNumValue(type) {
	            if (type === 'Line Items') {
	                var filters = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	                for (var i = 0; i < filters.length; i++) {
	                    filters[i].RowNum = (i + 1);
	                }
	            } else if (type === 'Product Attributes') {
	                var filters = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	                for (var i = 0; i < filters.length; i++) {
	                    filters[i].RowNum = (i + 1);
	                }
	            }
	        }
	
	        vm.prepareConditionExpression = function(type) {
	            if (type === 'Line Items') {
	                var expr = '',
	                    predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	
	                for (var i = 0; i < predicates.length; i++) {
	                    if (i === (predicates.length - 1)) {
	                        expr += predicates[i].RowNum;
	                    } else {
	                        expr += predicates[i].RowNum + ' AND ';
	                    }
	                }
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.condExpr = expr;
	            } else if (type === 'Product Attributes') {
	                var expr = '',
	                    predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	
	                for (var i = 0; i < predicates.length; i++) {
	                    if (i === (predicates.length - 1)) {
	                        expr += predicates[i].RowNum;
	                    } else {
	                        expr += predicates[i].RowNum + ' AND ';
	                    }
	                }
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.condExpr = expr;
	            }
	        };
	
	        function isLineConditionValid() {
	            var isValid = true,
	                condExpr = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.condExpr;
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.length > 0) {
	                    var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < rowNumArr.length; i++) {
	                    var value = rowNumArr[i];
	                    if (condExprArr.indexOf(value.toString()) <= -1) {
	                        isValid = false;
	                        break;
	                    }
	                }
	            }
	            return isValid;
	        }
	
	        function lineItemsFilterListContainsError() {
	            var containsError = false;
	            if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.length > 0) {
	                var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	                for (var i = 0; i < predicates.length; i++) {
	                    var targetField = predicates[i].targetField,
	                        operator = predicates[i].CompOper;
	                    if (targetField && targetField.autocomplete && targetField.autocomplete.selectedItem) {
	                        if (!targetField.autocomplete.selectedItem.value || !targetField.autocomplete.selectedItem.label) {
	                            containsError = true;
	                            predicates[i].hasError = true;
	                        } else {
	                            predicates[i].hasError = false;
	                        }
	                    } else {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    }
	                    if (operator === undefined || operator === '') {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    } else {
	                        if (predicates[i].hasError !== true) {
	                            predicates[i].hasError = false;
	                        }
	                    }
	                }
	                if (!isLineConditionValid()) {
	                    containsError = true;
	                    addAlert({
	                        type: cpqAdminConstants.DANGER,
	                        msg: vm.labels.InvalidLIChargeTypeCondition
	                    });
	                }
	            }
	            return containsError;
	        }
	
	        function isProductAttributeConditionValid() {
	            var isValid = true,
	                condExpr = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.condExpr;
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.length > 0) {
	                    var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < rowNumArr.length; i++) {
	                    var value = rowNumArr[i];
	                    if (condExprArr.indexOf(value.toString()) <= -1) {
	                        isValid = false;
	                        break;
	                    }
	                }
	            }
	            return isValid;
	        }
	
	        function productAttributesFilterListContainsError() {
	            var containsError = false;
	            if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.length > 0) {
	                var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	                for (var i = 0; i < predicates.length; i++) {
	                    var targetField = predicates[i].targetField,
	                        operator = predicates[i].CompOper;
	                    if (targetField && targetField.autocomplete && targetField.autocomplete.selectedItem) {
	                        if (!targetField.autocomplete.selectedItem.value || !targetField.autocomplete.selectedItem.label) {
	                            containsError = true;
	                            predicates[i].hasError = true;
	                        } else {
	                            predicates[i].hasError = false;
	                        }
	                    } else {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    }
	                    if (operator === undefined || operator === '') {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    } else {
	                        if (predicates[i].hasError !== true) {
	                            predicates[i].hasError = false;
	                        }
	                    }
	                }
	                if (!isProductAttributeConditionValid()) {
	                    containsError = true;
	                    addAlert({
	                        type: cpqAdminConstants.DANGER,
	                        msg: vm.labels.InvalidPAChargeTypeCondition
	                    });
	                }
	            }
	            return containsError;
	        }
	
	        function prepareExpressionString(label, value, operator) {
	            var str = '';
	            switch (operator) {
	                case vm.labels.EqualTo:
	                    {
	                        str = '(' + label + ' = ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.NotEqualTo:
	                    {
	                        str = '(' + label + ' != ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.StartsWith:
	                    {
	                        str = '(' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.Contains:
	                    {
	                        str = '(' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.DoesNotContain:
	                    {
	                        str = '(NOT ' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.LessThan:
	                    {
	                        str = '(' + label + ' < ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.GreaterThan:
	                    {
	                        str = '(' + label + ' > ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.LessThanOrEqualTo:
	                    {
	                        str = '(' + label + ' <= ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.GreaterThanOrEqualTo:
	                    {
	                        str = '(' + label + ' >= ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.In:
	                    {
	                        str = '(' + label + ' IN ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.NotIn:
	                    {
	                        str = '(' + label + ' NOT IN ' + value + ') ';
	                        break;
	                    }
	            }
	            return str;
	        }
	
	
	        function prepareLineItemsCriteriaExpression(condExpr) {
	
	            var str = '';
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.length > 0) {
	                    var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < condExprArr.length; i++) {
	                    if (!isNaN(+condExprArr[i])) {
	                        var value = +condExprArr[i];
	                        if (value !== 0) {
	                            if (rowNumArr.indexOf(value) <= -1) {
	                                str += '{' + (value - 1) + '}';
	                            } else {
	                                var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	                                var fieldLabel = predicates[(value - 1)].FieldLabel.trim(),
	                                    fieldValue = predicates[(value - 1)].FieldValue,
	                                    operator = predicates[(value - 1)].CompOper,
	                                    fieldType = predicates[(value - 1)].FieldType;
	                                if (angular.isString(fieldValue)) {
	                                    fieldValue = fieldValue.trim();
	                                } else if (angular.isArray(fieldValue)) {
	                                    fieldValue = fieldValue.join(';');
	                                    predicates[(value - 1)].FieldValue = fieldValue;
	                                }
	                                str += prepareExpressionString(fieldLabel, fieldValue, operator);
	                            }
	                        }
	
	                    } else {
	                        str += condExprArr[i] + ' ';
	                    }
	                }
	            }
	
	            return str !== '' ? str.trim() : str;
	        }
	
	        function prepareProductAttributesCriteriaExpression(condExpr) {
	
	            var str = '';
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.length > 0) {
	                    var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < condExprArr.length; i++) {
	                    if (!isNaN(+condExprArr[i])) {
	                        var value = +condExprArr[i];
	                        if (value !== 0) {
	                            if (rowNumArr.indexOf(value) <= -1) {
	                                str += '{' + (value - 1) + '}';
	                            } else {
	                                var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	                                var fieldLabel = predicates[(value - 1)].FieldLabel.trim(),
	                                    fieldValue = predicates[(value - 1)].FieldValue,
	                                    operator = predicates[(value - 1)].CompOper,
	                                    fieldType = predicates[(value - 1)].FieldType;
	                                if (angular.isString(fieldValue)) {
	                                    fieldValue = fieldValue.trim();
	                                } else if (angular.isArray(fieldValue)) {
	                                    fieldValue = fieldValue.join(';');
	                                    predicates[(value - 1)].FieldValue = fieldValue;
	                                }
	                                str += prepareExpressionString(fieldLabel, fieldValue, operator);
	                            }
	                        }
	
	                    } else {
	                        str += condExprArr[i] + ' ';
	                    }
	                }
	            }
	
	            return str !== '' ? str.trim() : str;
	        }
	
	        vm.removeChargeType = function(index, type) {
	            if (type === 'Line Items') {
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.splice(index, 1);
	            } else if (type === 'Product Attributes') {
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.splice(index, 1);
	            }
	            updateRowNumValue(type);
	            vm.prepareConditionExpression(type);
	        };
	
	
	        function getValueType(label) {
	            var response;
	            if (label) {
	                response = label.split(' : ')[0];
	            }
	            return response || label;
	        }
	
	        function updateCriteriaContentForLineItems() {
	            if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.length > 0) {
	                var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates,
	                    exprStr = '';
	
	                var condExpr = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.condExpr;
	                if (!condExpr) {
	                    vm.prepareConditionExpression('Line Items');
	                }
	                for (var i = 0; i < predicates.length; i++) {
	                    var temp,
	                        label,
	                        value,
	                        tempValue,
	                        length,
	                        fieldType = predicates[i].FieldType;
	
	                    if (fieldType === 'MULTIPICKLIST') {
	                        predicates[i].FieldValue = predicates[i].FieldValue.join(';');
	                    }
	                    temp = predicates[i].targetField.autocomplete.selectedItem,
	                        label = temp.label,
	                        tempValue = temp.value;
	                    value = tempValue.split(getPrefixedAttribute('LineItem__c') + '.')[1];
	                    predicates[i]['FieldName'] = value;
	                    predicates[i]['FieldLabel'] = label.split(':').length > 1 ? label.split(':')[1].trim() : label;
	                    vm.pli.PriceListItemSO.chargeTypeCriteria.fields.push(value);
	
	                }
	            } else {
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates = [];
	            }
	        }
	
	        function updateCriteriaContentForProductAttribute() {
	            if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.length > 0) {
	                var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates,
	                    exprStr = '';
	                var condExpr = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.condExpr;
	                if (!condExpr) {
	                    vm.prepareConditionExpression('Product Attributes');
	                }
	                for (var i = 0; i < predicates.length; i++) {
	                    var temp, label, value, tempValue,
	                        fieldType = predicates[i].FieldType;
	
	                    if (fieldType === 'MULTIPICKLIST') {
	                        predicates[i].FieldValue = predicates[i].FieldValue.join(';');
	                    };
	                    temp = predicates[i].targetField.autocomplete.selectedItem,
	                        label = temp.label;
	
	                    tempValue = temp.value;
	                    value = tempValue.replace(getPrefixedAttribute('ProductAttributeValue__c'), getPrefixedAttribute('AttributeValueId__r'));
	
	                    predicates[i]['FieldName'] = value.replace(getPrefixedAttribute('AttributeValueId__r.'), '');
	                    predicates[i]['FieldLabel'] = label.split(':').length > 1 ? label.split(':')[1].trim() : label;
	                    vm.pli.PriceListItemSO.chargeTypeCriteria.fields.push(value);
	
	                }
	            } else {
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates = [];
	            }
	        }
	
	        /* Charge Type Criteria */
	
	        vm.save = function() {
	            if (!lineItemsFilterListContainsError() && !productAttributesFilterListContainsError()) {
	                vm.pli.PriceListItemSO.chargeTypeCriteria.fields = [];
	                updateCriteriaContentForLineItems();
	                updateCriteriaContentForProductAttribute();
	                var lineItemExpStr = prepareLineItemsCriteriaExpression(vm.pli.PriceListItemSO.chargeTypeCriteria.filter.condExpr);
	                var productAttributeExpStr = prepareProductAttributesCriteriaExpression(vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.condExpr);
	                var finalExpression = '';
	                if (lineItemExpStr) {
	                    finalExpression += lineItemExpStr;
	                }
	                if (productAttributeExpStr) {
	                    if (lineItemExpStr) {
	                        finalExpression += ' AND ';
	                    }
	                    finalExpression += productAttributeExpStr;
	                }
	                vm.pli.PriceListItemSO.chargeTypeCriteria.exprStr = finalExpression;
	                vm.pli = chargeTypeCriteriaService.prepareCriteria(vm.pli);
	                delete vm.pli.PriceListItemSO.chargeTypeCriteria;
	                $mdDialog.hide({
	                    pli: angular.copy(vm.pli)
	                });
	            }
	        };
	
	    };
	
	    priceListItemController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'i18nService',
	        'cpqAdminConstants',
	        'chargeTypeCriteriaService',
	        'selectedPli',
	        'systemConstants'
	    ];
	
	    module.exports = priceListItemController;
	})();


/***/ }),
/* 425 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"charge-type-criteria-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>{{::vm.labels.ChargeTypeCriteria}}</h2>\n            <span flex></span>\n            <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n                </i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"charge-type-criteria-dialog-content\">\n        <div class=\"error-indicator\">\n            <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"5000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n        </div>\n        <div class=\"advance-tab\">\n            <md-tabs md-dynamic-height md-border-bottom>\n                <md-tab label=\"Line Items\">\n                    <md-content>\n                        <button class=\"slds-button slds-button_brand\" ng-click=\"vm.addChargeType('Line Items')\">Add New Criteria</button>\n                        <div class=\"filter-container\">\n                            <div class=\"each-row\" data-ng-repeat=\"item in vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates track by $index\" data-ng-class=\"item.hasError === true ? 'error' :''\">\n                                <div class=\"each-row-container\">\n                                    <div class=\"btn-group\">\n                                        <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeChargeType($index,'Line Items')\"><i class=\"material-icons\">clear</i>\n                                        </button>\n                                    </div>\n                                    <div class=\"rowNum\">\n                                        <material-form-field model=\"item.RowNum\" field-type=\"string\" is-editable=\"false\" field-label=\"'Row Num'\" name=\"rowNum\">\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"autocomplete\">\n                                        <material-form-field field-type=\"autocomplete\" field-label=\"'Field'\" name=\"field\" properties=\"item.targetField\" is-required=\"true\">\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"operator\">\n                                        <material-form-field model=\"item.CompOper\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.operatorPicklistEntries\" field-label=\"'Operator'\" name=\"operator\" is-required=\"true\">\n                                        </material-form-field>\n                                    </div>\n                                    <div ng-class=\"{'value': item.FieldType != 'PICKLIST', 'operator': item.FieldType == 'PICKLIST'}\">\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"STRING\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'STRING'\"></material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"DOUBLE\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'DOUBLE'\"></material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'CURRENCY'\">\n                                        </material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'PICKLIST'\">\n                                        </material-form-field>\n                                        <material-form-field class=\"field-checkbox\" model=\"item.FieldValue\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"'Value'\" show-inline=\"true\" data-ng-if=\"item.FieldType === 'BOOLEAN'\">\n                                        </material-form-field>\n                                    </div>\n                                </div>\n                                <div class=\"clearfix\"></div>\n                            </div>\n                        </div>\n                        <div class=\"advance-filter-container\">\n                            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showLIAdvancedPanel = true;\" data-ng-if=\"vm.showLIAdvancedPanel !== true\">Advanced Options</button>\n                            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showLIAdvancedPanel = false;vm.prepareConditionExpression();\" data-ng-if=\"vm.showLIAdvancedPanel === true\">Clear Advanced Options</button>\n                            <div class=\"value\" data-ng-if=\"vm.showLIAdvancedPanel === true\">\n                                <material-form-field model=\"vm.pli.PriceListItemSO.chargeTypeCriteria.filter.condExpr\" field-type=\"string\" is-editable=\"true\" field-label=\"'Advanced Filter Condition'\" name=\"value\">\n                                </material-form-field>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n                <md-tab label=\"Product Attributes\">\n                    <md-content>\n                        <button class=\"slds-button slds-button_brand\" ng-click=\"vm.addChargeType('Product Attributes')\">Add New Criteria</button>\n                        <div class=\"filter-container\">\n                            <div class=\"each-row\" data-ng-repeat=\"item in vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates track by $index\" data-ng-class=\"item.hasError === true ? 'error' :''\">\n                                <div class=\"each-row-container\">\n                                    <div class=\"btn-group\">\n                                        <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeChargeType($index,'Product Attributes')\"><i class=\"material-icons\">clear</i>\n                                        </button>\n                                    </div>\n                                    <div class=\"rowNum\">\n                                        <material-form-field model=\"item.RowNum\" field-type=\"string\" is-editable=\"false\" field-label=\"'Row Num'\" name=\"rowNum\">\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"autocomplete\">\n                                        <material-form-field field-type=\"autocomplete\" field-label=\"'Field'\" name=\"field\" properties=\"item.targetField\" is-required=\"true\">\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"operator\">\n                                        <material-form-field model=\"item.CompOper\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.operatorPicklistEntries\" field-label=\"'Operator'\" name=\"operator\" is-required=\"true\">\n                                        </material-form-field>\n                                    </div>\n                                    <div ng-class=\"{'value': item.FieldType != 'PICKLIST', 'operator': item.FieldType == 'PICKLIST'}\">\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"STRING\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'STRING'\"></material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"DOUBLE\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'DOUBLE'\"></material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'CURRENCY'\">\n                                        </material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'PICKLIST'\">\n                                        </material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" class=\"field-checkbox\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"'Value'\" show-inline=\"true\" data-ng-if=\"item.FieldType === 'BOOLEAN'\">\n                                        </material-form-field>\n                                    </div>\n                                </div>\n                                <div class=\"clearfix\"></div>\n                            </div>\n                        </div>\n                        <div class=\"advance-filter-container\">\n                            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showPARAdvancedPanel = true;\" data-ng-if=\"vm.showPARAdvancedPanel !== true\">Advanced Options</button>\n                            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showPARAdvancedPanel = false;vm.prepareConditionExpression();\" data-ng-if=\"vm.showPARAdvancedPanel === true\">Clear Advanced Options</button>\n                            <div class=\"value\" data-ng-if=\"vm.showPARAdvancedPanel === true\">\n                                <material-form-field model=\"vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.condExpr\" field-type=\"string\" is-editable=\"true\" field-label=\"'Advanced Filter Condition'\" name=\"value\">\n                                </material-form-field>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n            </md-tabs>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 426 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.product.attribute', [])
			.service('attributesService', __webpack_require__(427))
			.config(['$stateProvider', function($stateProvider) {
				$stateProvider.state('app.product.attributes', {
					parent: 'app.product',
					url: '/:id/attributes',
					views: {
						'productContainer': {
							template: __webpack_require__(428),
							controller: __webpack_require__(429),
							controllerAs: 'vm'
						}
					},
					resolve: {
					    updateSelectedProduct: ['attributesService', '$stateParams', function(attributesService, $stateParams) {
							return attributesService.updateSelectedProduct($stateParams.id);
						}]
					}
				});
			}]);
	})();

/***/ }),
/* 427 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
		var productAttributeService = function ($q, $http, $timeout, remoteService, productService, systemConstants, productConstants, applicationService) {
		    var prefix = systemConstants.nsPrefix || '';
			function convertPicklistEntriesToAttributeValues(obj) {
				var updatedObj = {};
				obj.Name = obj.AttributeFieldLabel;
				obj.nodeType = 'attribute';
				if (obj && obj.PicklistValues && obj.PicklistValues.length > 0) {
					updatedObj = obj.PicklistValues;
					for (var item in updatedObj) {
						if (!isNaN(parseInt(item, 10))) {
						    updatedObj[item].Name = updatedObj[item].label;
						    updatedObj[item].nodeType = 'picklistValues';
						}
					}
				} else {
					updatedObj = [];
				}
	
				obj.ProductAttributeDOs = updatedObj;
				return obj;
			}
	
			function updatePicklistToAttribute(obj) {
				if (angular.isArray(obj)) {
					for (var item in obj) {
					    if (!isNaN(parseInt(item, 10))) {
					        obj[item].nodeType = 'attribute-group';
							obj[item].Name = obj[item].AttributeGroupSO.Name;
							var productAttributeDos = obj[item].ProductAttributeDOs;
							productAttributeDos.sort(function (a, b) {
							    if (a.ProductAttributeSO[prefix + 'Sequence__c'] > b.ProductAttributeSO[prefix + 'Sequence__c']) {
							        return 1;
							    }
							    if (a.ProductAttributeSO[prefix + 'Sequence__c'] < b.ProductAttributeSO[prefix + 'Sequence__c']) {
							        return -1;
							    }
							    // a must be equal to b
							    return 0;
							});
							if (obj[item].FieldExpressionSOs && obj[item].FieldExpressionSOs.length > 0) {
							    var fieldExpressionSOs = obj[item].FieldExpressionSOs;
							    for (var i = 0; i < fieldExpressionSOs.length; i++) {
							        for (var j = 0; j < productAttributeDos.length; j++) {
							            if (fieldExpressionSOs[i][prefix + 'UpdateField__c'] &&
	                                        fieldExpressionSOs[i][prefix + 'UpdateField__c'].indexOf('.' + productAttributeDos[j].ProductAttributeSO[prefix + 'Field__c']) > -1) {
							                if (fieldExpressionSOs[i][prefix + 'Expression__c']) {
							                    productAttributeDos[j].ProductAttributeSO.Expression = applicationService.updateExpression(true, fieldExpressionSOs[i][prefix + 'Expression__c']);
							                }
							                productAttributeDos[j].ProductAttributeSO.ExpressionId = fieldExpressionSOs[i].Id;
							            }
							        }
							    }
							}
							for (var node in productAttributeDos) {
								if (!isNaN(parseInt(node, 10))) {
									productAttributeDos[node] = convertPicklistEntriesToAttributeValues(productAttributeDos[node]);
								}
							}
							if (productAttributeDos.length > 0 && productAttributeDos.length === productConstants.MaxNumberOfAttributesPerGroup) {
							    productAttributeDos.push({ Name: 'Load More', nodeType: 'loadMore', ChunkNumber: 1, AttributeGroupId: obj[item].AttributeGroupSO.Id });
							}
						}
	
					}
				}
				return obj;
			}
	
	
			function getAttributesList(productId) {
				var deferQ = $q.defer();
				remoteService.getAssociatedAttributes(productId)
					.then(function(response) {
							deferQ.resolve(updatePicklistToAttribute(response));
						},
						function(reason) {
							deferQ.reject(reason);
						});
				return deferQ.promise;
			}
	
			function getAttributesTreeList(request) {
				var defer = $q.defer();
				remoteService.getAllAttributeGroups(request).then(function (response) {
				    var result = response.AttributeGroupDOs;
					defer.resolve(updatePicklistToAttribute(result));
				}, function(reason) {
					defer.reject(reason);
				});
				return defer.promise;
			}
	
			function saveAttributesByCode(productID, payload) {
				if (payload && payload.length > 0) {
					var request = {
						ProductAttributeDOs: []
					};
					for (var i = 0; i < payload.length; i++) {
						request.ProductAttributeDOs.push({
							ProductId: productID,
							AttributeGroupId: payload[i].AttributeGroupSO.Id,
							AttributeGroupName: payload[i].Name
						});
					}
					return remoteService.associateAttributeGroup(request);
				}
			}
	
			function removeAttributeGroup(productID, payload) {
				if (payload && payload.length > 0) {
					var request = {
						ProductAttributeDOs: []
					};
					for (var i = 0; i < payload.length; i++) {
						request.ProductAttributeDOs.push({
							ProductId: productID,
							AttributeGroupId: payload[i].AttributeGroupSO.Id,
							AttributeGroupName: payload[i].Name
						});
					}
					return remoteService.removeAttributeGroup(request);
				}
			}
	
			/* This utility method handles two use cases. One being navigation from tab to tab and
			 * the other being user refreshes the page. In both cases, it should display the current selected 
			 * product.
			 */
			function updateSelectedProduct(productId) {
				var deferQ = $q.defer();
				/* Check if there is any selected product already available or not*/
				var product = productService.getSelectedProduct();
				if (product && product.ProductName) {
					deferQ.resolve(true);
				} else {
					/* Else load the current selected product info before moving to the page */
					productService.getProductDetailsByCode(productId)
						.then(function() {
							deferQ.resolve(true);
						}, function() {
							deferQ.reject(false);
						});
				}
				return deferQ.promise;
			}
	
			function updateProductAttributeGroup(request, pageNumberCenter) {
			    delete request.AttributeGroupSO[prefix + 'Attributes__r'];
			    var minimum = (pageNumberCenter - 1) * productConstants.MaxNumberOfAttributesPerGroup;
			    var sequenceNo = minimum + 1;
			    request.ProductAttributeDOs.forEach(function (v) {
			        if (v.ProductAttributeSO.ExpressionId) {
			            for (var i = 0; i < request.FieldExpressionSOs.length; i++) {
			                if (v.ProductAttributeSO.ExpressionId === request.FieldExpressionSOs[i].Id) {
			                    request.FieldExpressionSOs[i][prefix + 'Expression__c'] = applicationService.updateExpression(false, v.ProductAttributeSO.Expression);
			                    request.FieldExpressionSOs[i][prefix + 'ExpressionType__c'] = 'Field Update';
			                    request.FieldExpressionSOs[i][prefix + 'EvaluationContext__c'] = 'Record Update';
			                    request.FieldExpressionSOs[i][prefix + 'UpdateObject__c'] = prefix + 'LineItem__c';
			                    request.FieldExpressionSOs[i][prefix + 'SourceObject__c'] = prefix + 'LineItem__c';
			                    request.FieldExpressionSOs[i].Name = 'Expression for ' + v.ProductAttributeSO[prefix + 'Field__c'];
			                }
			            }
			        }
			        else {
			            if (v.ProductAttributeSO.Expression !== undefined && v.ProductAttributeSO.Expression !== '') {
			                var objExpression = {};
			                objExpression[prefix + 'Expression__c'] = applicationService.updateExpression(false, v.ProductAttributeSO.Expression);
			                objExpression[prefix + 'UpdateField__c'] = prefix + 'AttributeValueId__r.' + v.ProductAttributeSO[prefix + 'Field__c'];
	
			                //Expression default field values
			                objExpression[prefix + 'ExpressionType__c'] = 'Field Update';
			                objExpression[prefix + 'EvaluationContext__c'] = 'Record Update';
			                objExpression[prefix + 'UpdateObject__c'] = prefix + 'LineItem__c';
			                objExpression[prefix + 'SourceObject__c'] = prefix + 'LineItem__c';
			                objExpression.Name = 'Expression for ' + v.ProductAttributeSO[prefix + 'Field__c'];
			                request.FieldExpressionSOs.push(objExpression);
			            }
			        }
			        delete v.ProductAttributeSO.isSelected;
			        delete v.ProductAttributeSO.Expression;
			        delete v.ProductAttributeSO.ExpressionId;
			        v.ProductAttributeSO[prefix + 'Sequence__c'] = sequenceNo++;
			    });
			    return remoteService.updateProductAttributeGroups([request]);
			}
	
			function targetAttributesFieldSearch(searchText) {
			    var deferQ = $q.defer();
			    remoteService.searchTargetAttributes(searchText)
	                .then(function (response) {
	                    deferQ.resolve(prepareAttributeListFieldSearch(response));
	                }, function (reason) {
	                    deferQ.reject(reason);
	                });
			    return deferQ.promise;
			}
	
		    function prepareAttributeListFieldSearch(data) {
	            var response = [];
	            for (var key = 0; key < data.length; key++) {
	                var dataLabel = data[key].label.split(":");
	                if (dataLabel[0].trim() === 'Product Attribute Value') {
	                    data[key].label = dataLabel[1];
	                    data[key].value = data[key].value.replace(prefix + 'ProductAttributeValue__c.', '');
	                    data[key].Name = data[key].label;
	                    data[key].nodeType = 'attribute';
	                    response.push(data[key]);
	                }
	            }
	            return response;
	        }
	
			function createProductAttributeGroup(request) {
			    for (var i = 0; i < request.ProductAttributeSOs.length; i++) {
			        request.ProductAttributeSOs[i][prefix + 'Sequence__c'] = i + 1;
			        delete request.ProductAttributeSOs[i].text;
			    }
			    return remoteService.createProductAttributeGroup(request);
			}
	
			function deleteAttributeGroup(request) {
			    return remoteService.deleteAttributeGroup(request);
			}
	
			function getAttributeGroupsForProduct(request) {
			    var deferQ = $q.defer();
			    remoteService.getAttributeGroupsForProduct(request)
					.then(function (response) {
					    deferQ.resolve(updatePicklistToAttribute(response.AttributeGroupDOs));
					},
						function (reason) {
						    deferQ.reject(reason);
						});
			    return deferQ.promise;
			}
	
			function getAttributesForAttributeGroup(request) {
			    var deferQ = $q.defer();
			    remoteService.getAttributesForAttributeGroup(request)
					.then(function (response) {
					    deferQ.resolve(updatePicklistToAttributeLoadMore(response.AttributeDOs, request));
					}, function (reason) {
					    deferQ.reject(reason);
					});
			    return deferQ.promise;
			}
	
			function updatePicklistToAttributeLoadMore(productAttributeDos, request) {
	            productAttributeDos.sort(function (a, b) {
			        if (a.ProductAttributeSO[prefix + 'Sequence__c'] > b.ProductAttributeSO[prefix + 'Sequence__c']) {
			            return 1;
			        }
			        if (a.ProductAttributeSO[prefix + 'Sequence__c'] < b.ProductAttributeSO[prefix + 'Sequence__c']) {
			            return -1;
			        }
			        // a must be equal to b
			        return 0;
			    });
	
			    for (var node in productAttributeDos) {
			        if (!isNaN(parseInt(node, 10))) {
			            productAttributeDos[node] = convertPicklistEntriesToAttributeValues(productAttributeDos[node]);
			        }
			    }
			    if (productAttributeDos.length > 0 && productAttributeDos.length === productConstants.MaxNumberOfAttributesPerGroup) {
			        productAttributeDos.push({ Name: 'Load More', nodeType: 'loadMore', ChunkNumber: request.ChunkNumber, AttributeGroupId: request.AttributeGroupId });
			    }
			    return productAttributeDos;
			}
	
			var attributesService = {
			    getAttributesList: getAttributesList,
			    getAttributesTreeList: getAttributesTreeList,
			    saveAttributesByCode: saveAttributesByCode,
			    removeAttributeGroup: removeAttributeGroup,
			    updateSelectedProduct: updateSelectedProduct,
			    updateProductAttributeGroup: updateProductAttributeGroup,
			    targetAttributesFieldSearch: targetAttributesFieldSearch,
			    createProductAttributeGroup: createProductAttributeGroup,
			    deleteAttributeGroup: deleteAttributeGroup,
			    getAttributeGroupsForProduct: getAttributeGroupsForProduct,
			    getAttributesForAttributeGroup: getAttributesForAttributeGroup
			};
	
			return attributesService;
		};
	
		productAttributeService.$inject = [
	        '$q',
	        '$http',
	        '$timeout',
	        'remoteService',
	        'productService',
	        'systemConstants',
	        'productConstants',
	        'applicationService'
		];
	
		module.exports = productAttributeService;
	})();

/***/ }),
/* 428 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n    <div class=\"attribute-page\" data-ng-class=\"vm.isRightPanelVisible?'attributeSlideRight-tree-panel':'attributeSlideLeft-tree-panel'\">\n        <div class=\"left-attribute-group left-tree tree-view\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <header>\n                <h4>{{vm.labels.AttributeGroups}}</h4>\n                <div class=\"tree-toggle small-body\">\n                    <span ng-click=\"vm.expandCollpaseLeftPanel(false);\">{{vm.labels.Expand}}</span> |\n                    <span ng-click=\"vm.expandCollpaseLeftPanel(true);\">{{vm.labels.Collapse}}</span>\n                </div>\n            </header>\n            <div class=\"product-title\" ng-click=\"vm.clearSelectedNode()\" ng-bind=\"vm.selectedProduct.ProductName\" ng-class=\"{selected: vm.models.selected === null}\"></div>\n            <div ng-repeat=\"list in vm.models.lists\" class=\"attribute-group-list\">\n                <div class=\"dropzone\">\n                    <!-- The dropzone also uses the list template -->\n                    <div ng-include=\"'left-list.html'\"></div>\n                </div>\n            </div>\n            <div class=\"pagination cf\">\n                <div class=\"next-prev\">\n                    <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getAttributeGroups('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n                    </button>\n                    <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getAttributeGroups('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"attribute-container\">\n            <div class=\"attribute-middle-panel\">\n                <form novalidate name=\"vm.productAttributesForm\">\n                    <div class=\"title\">\n                        {{vm.labels.Information}}\n                    </div>\n                    <div ng-repeat=\"list in vm.models.lists\" class=\"\">\n                        <div class=\"dropzone\" ng-repeat=\"item in [vm.selectedNode]\" ng-if=\"vm.selectedNode!=null\">\n                            <div ng-include=\"'container.html'\" onload=\"item = vm.selectedNode\"></div>\n                        </div>\n                    </div>\n                    <div class=\"dropzone\" ng-include=\"'middle-panel.html'\" ng-if=\"vm.selectedNode==null\">\n                    </div>\n                </form>\n                <div class=\"pagination cf\" ng-if=\"vm.selectedNode!=null\">\n                    <div class=\"next-prev\">\n                        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftCenterBtn\" data-ng-click=\"vm.filterAttributesCenter('previous')\">\n                            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n                        </button>\n                        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightCenterBtn\" data-ng-click=\"vm.filterAttributesCenter('next')\" ng-if=\"!vm.loadMoreVisible\">\n                            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                        </button>\n                        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightCenterBtn\" data-ng-click=\"vm.loadMoreCenterPanel()\" ng-if=\"vm.loadMoreVisible\">\n                            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                        </button>\n                    </div>\n                </div>\n                <div class=\"attributes-footer\">\n                    <div class=\"container-fluid\">\n                        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToDetailsPage()\">Cancel</a>\n                        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">Save</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"treePanelToSlide\" ng-click=\"vm.isRightPanelVisible=false\">\n            <i class=\"material-icons\">keyboard_arrow_left</i>\n        </div>\n        <div class=\"attribute-tree-panel\">\n            <div class=\"tree-title\">\n                <header>\n                    <i class=\"material-icons\" style=\"float:right\" data-ng-click=\"vm.isRightPanelVisible=true\" aria-hidden=\"true\" role=\"button\" tabindex=\"0\">clear</i>\n                    <h4>{{vm.headerText}}</h4>\n                    <div class=\"search\" style=\"margin:10px 0;\">\n                        <form ng-submit=\"vm.doSearchAttributes();\" novalidate>\n                            <div class=\"search-input-container\">\n                                <div class=\"input-group\">\n                                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required drop-disable/>\n                                    <label class=\"ng-binding\">Search</label>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <material-form-field model=\"vm.options.value\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.options\">\n                    </material-form-field>\n                </header>\n            </div>\n            <div class=\"clearfix\"></div>\n            <div data-ng-if=\"vm.attributesList.length == 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{vm.labels.NoMatchingAttributes}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.attributesList.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"clearfix\"></div>\n            <tree-container data=\"vm.attributesList\" header-text=\"vm.headerText\" page-type='vm.type' search=\"vm.searchAttributes\" node-children=\"vm.nodeChildren\" \n                            tooltip-field=\"'Name'\" node-label=\"'Name'\" expand-collapse=\"vm.expandCollapse\" options=\"vm.options\" selected-nodes=\"vm.selectedNodes\">\n            </tree-container>\n        </div>\n    </div>\n     <div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\n    </div>\n     <div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n        <div class=\"modalOverlay\">\n            <div class=\"modalHeaderBody\">\n                <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n                <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n                <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n                <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n            </div>\n            <div class=\"modal-Footer text-right\">\n                <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\n                    <span class=\"modal-TextColor\">{{vm.labels.Cancel}}</span>\n                </button>\n                <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\n                    <span class=\"modal-TextColor\">{{vm.labels.Ok}}</span>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var productAttributeController = function($scope, $rootScope, $stateParams, $state, _, $templateCache, attributesService, productService, i18nService, updateSelectedProduct,
	        productDetailService, systemConstants, $q, applicationService, productConstants, $mdDialog) {
	
	        /**
	         * - List of templates used in left side panel and right side attributes tree hierarchy.
	         */
	        $templateCache.put('list.html', __webpack_require__(430));
	        $templateCache.put('container.html', __webpack_require__(431));
	        $templateCache.put('item.html', __webpack_require__(432));
	        $templateCache.put('content.html', __webpack_require__(433));
	
	        $templateCache.put('left-list.html', __webpack_require__(434));
	        $templateCache.put('left-container.html', __webpack_require__(435));
	        $templateCache.put('left-content.html', __webpack_require__(436));
	
	        $templateCache.put('middle-panel.html', __webpack_require__(437));
	
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.isRightPanelVisible = true;
	        /**
	         * - Configuration for right side attributes tree panel
	         */
	        vm.headerText = vm.labels.AttributeGroups;
	        vm.type = 'attributes';
	        vm.currentPage = 1;
	        vm.allowedTypes = ['attribute-group'];
	        vm.nodeChildren = 'ProductAttributeDOs';
	        vm.expandCollapse = function() {
	            vm.isRightPanelVisable = true;
	        }
	        vm.isGetAttrGroupForProductMethodCalled = false;
	        /**
	         * - newlyAddedAttributesList : Will contain newly dropped attributes from right side panel to left
	         * side panel.
	         */
	        var newlyAddedAttributesList = [],
	            /**
	             * - toBeRemovedAttributesList : Will contain to be removed items from the existing list of attributes
	             *  from left side panel.
	             */
	            toBeRemovedAttributesList = [];
	        /**
	         * - vm.models is for left side hierarchical panel
	         */
	        vm.models = {
	            selected: null,
	            lists: {
	                'selectedAttributes': []
	            }
	        };
	
	        /**
	         *  - selectedNode : Will contain the data model for center panel structure.
	         */
	        vm.changeMiddlePanel = function(node) {
	            vm.allowedTypes = [undefined];
	            if (vm.selectedNode == null) {
	                vm.models.selected = node;
	                vm.selectedNode = node;
	                if (vm.selectedNode[vm.nodeChildren] && vm.selectedNode[vm.nodeChildren].length > 0) {
	                    var attributes = getSelectedNodeProductAttributes();
	                    for (var i = 0; i < attributes.length; i++) {
	                        attributes[i].isSelected = true;
	                    }
	                    filterAttributes();
	                    updateTreeOnLoadArray(vm.attributesList);
	                }
	            } else {
	                updateProductAttributeGroup(false).then(function(response) {
	                    if (response) {
	                        vm.pageNumberCenter = 1;
	                        vm.models.selected = node;
	                        vm.selectedNode = node;
	                        if (vm.selectedNode[vm.nodeChildren] && vm.selectedNode[vm.nodeChildren].length > 0) {
	                            var attributes = getSelectedNodeProductAttributes();
	                            for (var i = 0; i < attributes.length; i++) {
	                                attributes[i].isSelected = true;
	                            }
	                            filterAttributes();
	                        }
	                        updateTreeOnLoadArray(vm.attributesList);
	                    }
	                });
	            }
	        };
	
	        function updateChilds(node, isSelected) {
	            if (node[vm.nodeChildren]) {
	                _.each(node[vm.nodeChildren], function(child) {
	                    child.isSelected = isSelected;
	                    updateChilds(child, isSelected);
	                });
	            }
	        }
	
	        /**
	         * - Enable / Disable leaf nodes based on the dropped node or removed node
	         */
	        function updateTree(array, nodeId, isSelected) {
	            _.each(array, function(node) {
	                if ((node.AttributeGroupSO && node.AttributeGroupSO.Id === nodeId) || (node.ProductAttributeSO && node.ProductAttributeSO.Id === nodeId)) {
	                    node.isSelected = isSelected;
	                    return;
	                } else if (node.nodeType === 'attribute-group' && node.ProductAttributeDOs && node.ProductAttributeDOs.length > 0) {
	                    updateTree(node.ProductAttributeDOs, nodeId, isSelected);
	                }
	            });
	        }
	
	
	        /**
	         * - When a node is dropped on the left side panel ,it adds the dropped node to the list.
	         */
	        vm.addAttribute = function (event, index, node) {
	            var isReOrder = false, 
	                payload = [], 
	                isAddingProductAttributes = false;
	            if (Array.isArray(node)) {
	                for (var i = 0; i < node.length; i++) {
	                    if (node[i].isSelected !== true) {
	                        node[i].isSelected = true;
	                        if (node[i].nodeType === 'attribute-group' && vm.selectedNode == null) {
	                            payload.push(node[i]);
	                        } else if (vm.selectedNode != null && node[i].nodeType === 'attribute') {
	                            isAddingProductAttributes = true;
	                            var newAttribute = {
	                                Name: node[i].Name,
	                                isSelected: true,
	                                nodeType: 'attribute',
	                                ProductAttributeSO: {}
	                            };
	                            if (node[i].ProductAttributeSO === undefined) {
	                                newAttribute.ProductAttributeSO[vm.prefix + 'Field__c'] = node[i].value;
	                                newAttribute.ProductAttributeSO[vm.prefix + 'AttributeGroupId__c'] = vm.selectedNode.AttributeGroupSO.Id;
	                                newAttribute.ProductAttributeSO[vm.prefix + 'IsHidden__c'] = false;
	                                newAttribute.ProductAttributeSO[vm.prefix + 'IsPrimary__c'] = false;
	                                newAttribute.ProductAttributeSO[vm.prefix + 'IsReadOnly__c'] = false;
	                                newAttribute.FieldType = node[i].fieldType;
	                                node[i] = newAttribute;
	                            } else {
	                                delete node[i].ProductAttributeSO.Id;
	                                node[i].ProductAttributeSO[vm.prefix + 'AttributeGroupId__c'] = vm.selectedNode.AttributeGroupSO.Id;
	                            }
	                            vm.productAttributesForm.$dirty = true;
	                            var attributes = vm.displayAttributes[0];
	                            attributes.splice(index, 0, node[i]);
	                            var children = vm.models.selected[vm.nodeChildren][0];
	                            children.splice((vm.pageNumberLeft - 1) * productConstants.MaxNumberOfAttributesPerGroup + index, 0, node[i]);
	                            index++;
	                        }
	                    }
	                    else {
	                        isReOrder = true;
	                        break;
	                    }
	                }
	                if (payload.length > 0) {
	                    attributesService.saveAttributesByCode($stateParams.id, payload).then(function (res) {
	                        if (res && res.Success) {
	                            vm.getAttributeGroups('').then(function (success) {
	                                if (success) {
	                                    updateTreeOnLoadArray(vm.attributesList);
	                                }
	                            });
	                        }
	                    }, function (reason) {
	                        applicationService.showErrorMessage(reason);
	                    });
	                }
	                else if (isReOrder) {
	                    if (vm.productAttributesForm) {
	                        vm.productAttributesForm.$dirty = true;
	                    }
	                    if (Array.isArray(node)) {
	                        angular.forEach(node, function (item) { item.selected = false; });
	                        var list = vm.displayAttributes[0];
	                        list = list.slice(0, index)
	                            .concat(node)
	                            .concat(list.slice(index));
	                        vm.displayAttributes[0] = list;
	                        return true;
	                    }
	                    return node;
	                } else if (isAddingProductAttributes) {
	                    // implicitly update product attribute group with dropped attribute
	                    updateProductAttributeGroup(false).then(function(response) {})
	                }
	                vm.selectedNodes = [];
	            } 
	        };
	
	
	        /**
	         * - This method gets called when user clicks on any attribute group on left side panel.
	         * - It displays details of the attribute group on the center panel.
	         */
	        function updateMainContent(array, nodeId) {
	            _.each(array, function(node) {
	                if (node && node.AttributeGroupSO.Id === nodeId) {
	                    array.splice(array.indexOf(node), 1);
	
	                    return;
	                }
	            });
	        }   
	
	        /**
	         * - Search Attributes on right side tree panel search box.
	         * - This method is called and it returns the tree data model.
	         */
	        vm.doSearchAttributes = function() {
	            vm.searchAttributes(vm.options.value, vm.searchText, 1);
	        };
	        vm.searchAttributes = function(typeToBeSearched, searchText, pageNumber) {
	            vm.currentPage = pageNumber;
	            vm.selectedNodes = []; //To clear the selected nodes from tree
	            if (typeToBeSearched == 'attributeGroup') {
	                var request = {
	                    ChunkNumber: pageNumber,
	                    NumberOfAttributeGroupsPerChunk: productConstants.treePanelItemsPerChunk,
	                    SearchString: vm.searchText,
	                    MaxNumberOfAttributesPerGroup: productConstants.MaxNumberOfAttributesPerGroup
	                };
	                /**
	                 * - Make service call and update the value of vm.attributesList.
	                 */
	                attributesService.getAttributesTreeList(request)
	                    .then(function(response) {
	                        /* once vm.attributesList model is updated, it will be automatically bound to right side tree. */
	                        vm.attributesList = response;
	                        if (response.length === 0) {
	                            vm.searchedStr = vm.searchText;
	                        }
	                        updateTreeOnLoadArray(vm.attributesList);
	                    }, function(reason) {
	                        if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                            reason.message = vm.labels.MaxSQLSizeExceedMessage;
	                        }
	                        applicationService.showErrorMessage(reason);
	                    });
	            } else {
	                attributesService.targetAttributesFieldSearch(vm.searchText ? vm.searchText : '')
	                    .then(function(response) {
	                        /* once vm.attributesList model is updated, it will be automatically bound to right side tree. */
	                        vm.attributesList = response;
	                        if (response.length === 0) {
	                            vm.searchedStr = vm.searchText;
	                        }
	                        updateTreeOnLoadArray(vm.attributesList);
	                    }, function(reason) {
	                        if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                            reason.message = vm.labels.MaxSQLSizeExceedMessage;
	                        }
	                        applicationService.showErrorMessage(reason);
	                    });
	            }
	            document.querySelector('.tree-wrapper').scrollTop = 0;
	        };
	
	
	        /**
	         * - Gets called on page load event
	         */
	        vm.checkArray = function(item) {
	            if (item[vm.nodeChildren] && item[vm.nodeChildren].length > 0 && !angular.isArray(item[vm.nodeChildren][0])) {
	
	                item[vm.nodeChildren] = [item[vm.nodeChildren]];
	            } else {
	                item[vm.nodeChildren] = [
	                    []
	                ];
	            }
	        };
	
	        /****** Save functionality **************/
	        /****************************************/
	
	        /**
	         * updateMenuStatus broadcasts "menuStatus" event. Menu directive will be listening to this event.
	         * Based on the page and its current status, either green-check icon will be visible or red-exclamation
	         * icon will be visible right next to the menu.
	         *
	         * This can be done through services and Menu directive will be watching any changes to service variable
	         */
	        function updateMenuStatus(status) {
	            $rootScope.$broadcast('menuStatus', {
	                menu: 'attributes',
	                status: status
	            });
	        }
	
	        /**
	         * Update the details tab HasAttributes value Based on left panel length
	         */
	        function updateHasAttributes() {
	            var deferred = $q.defer();
	            var selectedProduct = productService.getSelectedProduct();
	            var product = {};
	            product.Id = $stateParams.id;
	            product.Name = selectedProduct.productName;
	            if (vm.models.lists.selectedAttributes.length && vm.models.lists.selectedAttributes.length > 0) {
	                if (selectedProduct.hasAttributes === "false" || selectedProduct.hasAttributes === false) {
	                    product[vm.prefix + "HasAttributes__c"] = true;
	                    selectedProduct.hasAttributes = "true";
	                    updateHasAttributesInDetails(product, selectedProduct).then(function() {
	                        deferred.resolve();
	                    });
	                } else {
	                    deferred.resolve();
	                }
	            } else if (vm.models.lists.selectedAttributes.length === 0) {
	                if (selectedProduct.hasAttributes === "true" || selectedProduct.hasAttributes === true) {
	                    product[vm.prefix + "HasAttributes__c"] = false;
	                    selectedProduct.hasAttributes = "false";
	                    updateHasAttributesInDetails(product, selectedProduct).then(function() {
	                        deferred.resolve();
	                    });
	                } else {
	                    deferred.resolve();
	                }
	            }
	            return deferred.promise;
	        }
	
	        function updateHasAttributesInDetails(productObj, selectedProductObj) {
	            var deferred = $q.defer();
	            productDetailService.updateHasAttributes(productObj)
	                .then(function(response) {
	                    deferred.resolve();
	                    productService.setSelectedProduct(selectedProductObj);
	                }, function(error) {
	                    applicationService.showErrorMessage(reason);
	                });
	            return deferred.promise;
	        }
	
	        /**
	         * - When all API calls respond back with success as true, this method gets called
	         */
	        vm.processSuccessState = function(toState, toParams) {
	            if (toState && vm.isGetAttrGroupForProductMethodCalled === true) {
	                /**
	                Call method for Update the details tab HasAttributes value 
	                */
	                updateHasAttributes().then(function(success) {
	                    isFormSaved = true;
	                    $state.go(toState, toParams);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            }
	        };
	
	        /**
	         * - When any API calls respond back with success as false, this method gets called
	         */
	        vm.processErrorState = function() {
	            editedState = '';
	            vm.addAlert('Something went wrong. Please try later', 'error');
	            if (stateInfo.event) {
	                stateInfo.event.preventDefault();
	            }
	        };
	
	        /**
	         * When user clicks on the 'Save Product' button, an event named 'explicitPageSave' gets broadcasted.
	         * A page has to listen to that event and do the page specific save functionality.
	         */
	        $scope.$on('explicitPageSave', function(evts, args) {
	            /**
	             * - Check if any node has to be removed from existing list or added to the existing list.
	             * - If either API calls are not needed, then system shouldnt call the save method.
	             */
	            if (vm.selectedNode != null && vm.productAttributesForm && vm.productAttributesForm.$dirty) {
	                updateProductAttributeGroup(false).then(function(response) {
	                    if (response) {}
	                });
	            }
	        });
	
	        /**
	         * - When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed incase of errors in saving the page.
	         *
	         * - If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	        var isFormSaved = false;
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.list') {
	                return true;
	            } else if (isFormSaved) {
	                return true;
	            } else {
	                e.preventDefault();
	                /**
	                 * - Check if any node has to be removed from existing list or added to the existing list.
	                 * - If either API calls are not needed, then system shouldnt call the save method.
	                 */
	                if (vm.selectedNode != null && vm.productAttributesForm && vm.productAttributesForm.$dirty && !vm.isCancelClicked) {
	                    updateProductAttributeGroup(false).then(function(response) {
	                        if (response && toState) {
	                            vm.processSuccessState(toState, toParams);
	                        }
	                    });
	                } else {
	                    vm.processSuccessState(toState, toParams);
	                    vm.isCancelClicked = false;
	                }
	            }
	
	        });
	
	        /****** Save functionality **************/
	
	        function updateTreeOnLoadArray(arrayToUpdate) {
	            if (arrayToUpdate) {
	                for (var i = 0; i < arrayToUpdate.length; i++) {
	                    var index;
	                    if (vm.selectedNode == null) {
	                        if (vm.options.value === 'attributeGroup') {
	                            index = _.findIndex(vm.models.lists.selectedAttributes, function(field) {
	                                return (field.AttributeGroupSO.Id === arrayToUpdate[i].AttributeGroupSO.Id);
	                            });
	                            if (index > -1) {
	                                arrayToUpdate[i].isSelected = true;
	                            } else {
	                                arrayToUpdate[i].isSelected = false;
	                            }
	                        }
	                    } else {
	                        if (vm.options.value === 'attributeGroup') {
	                            if (arrayToUpdate[i][vm.nodeChildren] && arrayToUpdate[i][vm.nodeChildren].length > 0) {
	                                var attributes = arrayToUpdate[i][vm.nodeChildren];
	                                for (var j = 0; j < attributes.length; j++) {
	                                    if (attributes[j].nodeType === "attribute") {
	                                        index = _.findIndex(getSelectedNodeProductAttributes(), function(field) {
	                                            if (field.nodeType === 'attribute') {
	                                                return (field.ProductAttributeSO[vm.prefix + 'Field__c'] === attributes[j].ProductAttributeSO[vm.prefix + 'Field__c']);
	                                            } else
	                                                return false;
	                                        });
	                                        if (index > -1) {
	                                            attributes[j].isSelected = true;
	                                        } else {
	                                            attributes[j].isSelected = false;
	                                        }
	                                    }
	                                }
	                            }
	                        } else {
	                            index = _.findIndex(getSelectedNodeProductAttributes(), function(field) {
	                                if (field.nodeType === 'attribute') {
	                                    return (field.ProductAttributeSO[vm.prefix + 'Field__c'] === arrayToUpdate[i].value);
	                                }
	                            });
	                            if (index > -1) {
	                                arrayToUpdate[i].isSelected = true;
	                            } else {
	                                arrayToUpdate[i].isSelected = false;
	                            }
	                        }
	                    }
	                }
	            }
	
	        }
	
	        function getSelectedNodeProductAttributes() {
	            return vm.selectedNode !== null && angular.isArray(vm.selectedNode[vm.nodeChildren][0])
	                ? vm.selectedNode[vm.nodeChildren][0]
	                : vm.selectedNode[vm.nodeChildren];
	        }
	        
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	        vm.addAlert = function(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        };
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	        vm.selectedProduct = productService.getSelectedProduct();
	        vm.expandCollpaseLeftPanel = function(isCollapse) {
	            vm.isCollapse = isCollapse;
	            expandCollapseLeftPanelChild(vm.models.lists.selectedAttributes);
	        };
	
	        function expandCollapseLeftPanelChild(array) {
	            for (var i = 0; i < array.length; i++) {
	                var node = array[i];
	                node.collapse = vm.isCollapse;
	                if (node[vm.nodeChildren] && node[vm.nodeChildren].length > 0) {
	                    expandCollapseLeftPanelChild(node[vm.nodeChildren][0]);
	                }
	            }
	        }
	
	        function updateProductAttributeGroup(isLeftPageChanged) {
	            vm.massEditObj = {};
	            varToCheck = {};
	            var deferQ = $q.defer();
	            if (vm.productAttributesForm && vm.productAttributesForm.$dirty && vm.productAttributesForm.$valid) {
	                if (vm.selectedNode[vm.nodeChildren] && vm.selectedNode[vm.nodeChildren].length > 0) {
	                    var payload = {
	                        AttributeGroupSO: vm.selectedNode.AttributeGroupSO,
	                        ProductAttributeDOs: [],
	                        FieldExpressionSOs: vm.selectedNode.FieldExpressionSOs,
	                        ProductAttributeGroupMemberSO: vm.selectedNode.ProductAttributeGroupMemberSO
	                    };
	                    vm.selectedNode.Name = vm.selectedNode.AttributeGroupSO.Name;
	                    var attributes = angular.copy(vm.displayAttributes[0]);
	                    for (var i = 0; i < attributes.length; i++) {
	                        if (attributes[i].nodeType === 'attribute' && !attributes[i].exists) {
	                            payload.ProductAttributeDOs.push({
	                                ProductAttributeSO: attributes[i].ProductAttributeSO
	                            });
	                        }
	                    }
	                    if (isLeftPageChanged === false) {
	                        attributesService.updateProductAttributeGroup(payload, vm.pageNumberCenter).then(function(response) {
	                                if (response) {
	                                    //To stop creating duplicate records
	                                    /*if (vm.selectedNode[vm.nodeChildren] && vm.selectedNode[vm.nodeChildren].length > 0) {
	                                        for (var i = 0; i < attributes.length; i++) {
	                                            if (!attributes[i].ProductAttributeSO.Id) {
	                                                attributes[i].exists = true;
	                                            }
	                                        }
	                                    }*/
	                                    vm.getAttributeGroups('')
	                                        .then(function(res) {
	                                            if (res) {
	                                                var selectedGroupIndex = _.findIndex(vm.models.lists.selectedAttributes, function(node) {
	                                                    return node.AttributeGroupSO.Id === vm.models.selected.AttributeGroupSO.Id;
	                                                });
	                                                if (selectedGroupIndex > -1) {
	                                                    vm.models.selected = vm.models.lists.selectedAttributes[selectedGroupIndex];
	                                                    vm.selectedNode = vm.models.lists.selectedAttributes[selectedGroupIndex];
	                                                }
	                                                updateTreeOnLoadArray(vm.attributesList);
	                                            }
	                                        }, function(reason) {
	                                            applicationService.showErrorMessage(reason);
	                                            deferQ.reject(false);
	                                        })
	                                        .then(function(res) {
	                                            if (vm.models.selected !== null) {
	                                                filterAttributes();
	                                            }
	                                        });
	                                }
	                                if (vm.productAttributesForm) {
	                                    vm.productAttributesForm.$dirty = false;
	                                }
	                                deferQ.resolve(true);
	                            },
	                            function(reason) {
	                                applicationService.showErrorMessage(reason);
	                                deferQ.reject(false);
	                            });
	                    }
	                } else {
	                    deferQ.resolve(true);
	                }
	            } else {
	                deferQ.resolve(true);
	            }
	            return deferQ.promise;
	        }
	
	        vm.clearSelectedNode = function() {
	            vm.allowedTypes = ['attribute-group'];
	            if (vm.selectedNode != null) {
	                updateProductAttributeGroup(false).then(function(response) {
	                    if (response) {
	                        vm.pageNumberCenter = 1;
	                        vm.selectedNode = null;
	                        vm.models.selected = null;
	                        updateTreeOnLoadArray(vm.attributesList);
	                    }
	                });
	            } else {
	                vm.selectedNode = null;
	                vm.models.selected = null;
	                updateTreeOnLoadArray(vm.attributesList);
	            }
	        };
	
	        vm.onFocus = function(field, index) {
	            var attributes = vm.displayAttributes[0];
	            $mdDialog.show({
	                controller: __webpack_require__(413),
	                controllerAs: 'vm',
	                template: __webpack_require__(414),
	                parent: angular.element(document.body),
	                resolve: {
	                    expression: function() {
	                        var expression = '';
	                        if (index > -1) {
	                            expression = angular.copy(attributes[index].ProductAttributeSO[field]);
	                        }
	                        else if (field === 'MassEditExpression') {
	                            expression = vm.massEditObj.Expression;
	                        }
	                        return expression;
	                    }
	                }
	            }).then(function(response) {
	                if (field === 'MassEditExpression') {
	                    vm.massEditObj.Expression = response;
	                } else {
	                    attributes[index].ProductAttributeSO[field] = response;
	                    //vm.selectedNode.ProductAttributeDOs[0][index].ProductAttributeSO[field] = response;
	                }
	                if (vm.productAttributesForm) {
	                    vm.productAttributesForm.$dirty = true;
	                }
	            });
	        };
	        vm.isCancelClicked = false;
	        vm.goToDetailsPage = function() {
	            vm.isCancelClicked = true;
	            $state.go('app.product.details', {
	                'id': $stateParams.id
	            });
	        };
	        vm.explicitPageSave = function() {
	            if (vm.selectedNode != null && vm.productAttributesForm && vm.productAttributesForm.$dirty) {
	                updateProductAttributeGroup(false).then(function(response) {
	                    if (response) {}
	                });
	            }
	        };
	
	        function addAttributes() {
	            $mdDialog.show({
	                controller: __webpack_require__(418),
	                template: __webpack_require__(419),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	
	                }
	            }).then(function(response) {
	                if (response) {
	                    vm.getAttributeGroups('');
	                }
	            });
	        };
	
	        $scope.$on(vm.labels.NewAttributeButton.split(' ').join('-'), function() {
	            addAttributes();
	        });
	
	        vm.options = {
	            'FieldName': 'Attributes_PL',
	            'FieldType': 'PICKLIST',
	            'IsEditable': true,
	            'allowClear': false,
	            'PicklistValues': [{
	                'active': true,
	                'defaultValue': false,
	                'label': 'Attribute Groups',
	                'value': 'attributeGroup'
	            }, {
	                'active': true,
	                'defaultValue': false,
	                'label': 'Attributes',
	                'value': 'attribute'
	            }],
	            'value': 'attributeGroup'
	        };
	
	        var deRegisterFunc = $scope.$watch('vm.options.value', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                //make the request for tree loading here
	                vm.searchAttributes(newValue, vm.searchText, 1);
	            }
	        });
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            vm = null;
	        });
	
	        vm.addNewAttribute = function(index) {
	            var attributes = vm.displayAttributes[0];
	            var newAttribute = {
	                Name: '',
	                nodeType: 'attribute',
	                isSelected: true,
	                ProductAttributeSO: {},
	                autocomplete: {
	                    'querySearch': attributesService.targetAttributesFieldSearch,
	                    'displayName': 'label',
	                    'selectedItemChange': updateAttributeText
	                }
	            };
	            newAttribute.ProductAttributeSO[vm.prefix + 'AttributeGroupId__c'] = vm.selectedNode.AttributeGroupSO.Id;
	            attributes.splice(index + 1, 0, newAttribute);
	        };
	
	        function updateAttributeText(item) {
	            var attributes = vm.displayAttributes[0];
	            if (item) {
	                attributes[selectedRowIndex].ProductAttributeSO[vm.prefix + 'Field__c'] = item.value;
	                attributes[selectedRowIndex].Name = item.label;
	            } else {
	                //delete vm.selectedAttribute.text;
	                delete attributes[selectedRowIndex].ProductAttributeSO[vm.prefix + 'Field__c']
	            }
	        }
	
	        var selectedRowIndex;
	        vm.trackSelectedRowIndex = function(index) {
	            selectedRowIndex = index;
	        };
	        
	         var selectednode,ruleType;
	         vm.showRemoveConfirmation = function(node, ruleTypeSelected) {
	            vm.confiramtionPopup = true;
	            selectednode = node;
	            ruleType = ruleTypeSelected;            
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.DeleteMessageBody                
	            }
	        };
	
	        vm.confirmRemove = function() {
	            if (ruleType === 'attribute') {
	                removeAttributeOrAttributeGroup('attribute');
	            } else if (ruleType === 'attributegroup') {
	                removeAttributeOrAttributeGroup('attributegroup');
	            }            
	
	        };
	        vm.cancelRemove = function() {
	            vm.confiramtionPopup = false;
	        };
	
	        function removeAttributeOrAttributeGroup(type) {
	            if (type === 'attribute') {
	                var payload = { ProductAttributeIds: [selectednode.ProductAttributeSO.Id] };
	                attributesService.deleteAttributeGroup(payload).then(function(response) {
	                if (response) {
	                    var attributes = vm.displayAttributes[0];
	                    attributes.splice(attributes.indexOf(selectednode), 1);
	                    var children = vm.models.selected[vm.nodeChildren][0];
	                    children.splice(children.indexOf(selectednode), 1);
	                    updateTreeOnLoadArray(vm.attributesList);
	                    vm.confiramtionPopup = false;
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	
	            }
	            else if (type === 'attributegroup') {
	                attributesService.removeAttributeGroup($stateParams.id, [selectednode]).then(function(res) {
	                    if (res && res.Success) {
	                        updateMainContent(vm.models.lists.selectedAttributes, selectednode.AttributeGroupSO.Id);
	                        updateTreeOnLoadArray(vm.attributesList);
	                        vm.confiramtionPopup = false;
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            }
	        }
	
	
	        vm.getAttributeGroups = function(type) {
	            var deferQ = $q.defer();
	            if (type === 'next') {
	                vm.pageNumberLeft++;
	            } else if (type === 'previous') {
	                vm.pageNumberLeft--;
	            }
	
	            var request = {
	                SearchString: "",
	                ProductId: $stateParams.id,
	                NumberOfAttributeGroupsPerChunk: productConstants.treePanelItemsPerChunk,
	                MaxNumberOfAttributesPerGroup: productConstants.MaxNumberOfAttributesPerGroup,
	                ChunkNumber: vm.pageNumberLeft
	            };
	            attributesService.getAttributeGroupsForProduct(request).then(function(response) {
	                vm.isGetAttrGroupForProductMethodCalled = true;
	                if (response) {
	                    if (response.length < productConstants.treePanelItemsPerChunk) {
	                        vm.disableRightBtn = true;
	                    } else {
	                        vm.disableRightBtn = false;
	                    }
	                    if (response.length === 0) {
	                        if (vm.pageNumberLeft > 1) {
	                            vm.pageNumberLeft--;
	                        }
	                        else {
	                            vm.disableLeftBtn = true;
	                        }
	                    } else {
	                        vm.models.lists.selectedAttributes = response;
	                        updateTreeOnLoadArray(vm.attributesList);
	                        if (vm.pageNumberLeft === 1) {
	                            vm.disableLeftBtn = true;
	                        } else if (vm.pageNumberLeft !== 1) {
	                            vm.disableLeftBtn = false;
	                        }
	                        if (type !== '' && vm.selectedNode != null) {
	                            vm.changeMiddlePanel(response[0]);
	                        }
	                    }
	                    document.querySelector('.attribute-group-list').scrollTop = 0;
	                }
	                deferQ.resolve(true);
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	                deferQ.resolve(false);
	            });
	            return deferQ.promise;
	        };
	
	        vm.pageNumberLeft = 1;
	        vm.getAttributeGroups('');
	
	        vm.getAttributesForAttributeGroup = function(item) {
	            var deferQ = $q.defer();
	            var request = {
	                "NumberOfRecordsPerChunk": productConstants.MaxNumberOfAttributesPerGroup,
	                "ChunkNumber": ++item.ChunkNumber,
	                "AttributeGroupId": item.AttributeGroupId
	            };
	            attributesService.getAttributesForAttributeGroup(request).then(function(response) {
	                var index = _.findIndex(vm.models.lists.selectedAttributes, function(field) {
	                    return (field.AttributeGroupSO.Id === request.AttributeGroupId);
	                });
	                if (response && response.length > 0) {
	                    if (index > -1) {
	                        vm.models.lists.selectedAttributes[index].ProductAttributeDOs[0].pop();
	                        vm.models.lists.selectedAttributes[index].ProductAttributeDOs[0] = vm.models.lists.selectedAttributes[index].ProductAttributeDOs[0].concat(response);
	                        var selectedAttributeGroup = vm.models.lists.selectedAttributes[index];
	                        if (selectedAttributeGroup.FieldExpressionSOs && selectedAttributeGroup.FieldExpressionSOs.length > 0) {
	                            var fieldExpressionSOs = selectedAttributeGroup.FieldExpressionSOs;
	                            for (var i = 0; i < fieldExpressionSOs.length; i++) {
	                                for (var j = 0; j < response.length && response[j].nodeType === 'attribute'; j++) {
	                                    if (fieldExpressionSOs[i][vm.prefix + 'UpdateField__c'] &&
	                                        fieldExpressionSOs[i][vm.prefix + 'UpdateField__c'].indexOf('.' + response[j].ProductAttributeSO[vm.prefix + 'Field__c']) > -1) {
	                                        if (fieldExpressionSOs[i][vm.prefix + 'Expression__c']) {
	                                            response[j].ProductAttributeSO.Expression = applicationService.updateExpression(true, fieldExpressionSOs[i][vm.prefix + 'Expression__c']);
	                                        }
	                                        response[j].ProductAttributeSO.ExpressionId = fieldExpressionSOs[i].Id;
	                                    }
	                                }
	                            }
	                        }
	                    }
	                } else {
	                    vm.models.lists.selectedAttributes[index].ProductAttributeDOs[0].pop();
	                }
	                deferQ.resolve(true);
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	                deferQ.resolve(false);
	            });
	            return deferQ.promise;
	        };
	
	        function filterAttributes() {
	            var attributes = getSelectedNodeProductAttributes();
	            var max = vm.pageNumberCenter * productConstants.MaxNumberOfAttributesPerGroup;
	            var min = (vm.pageNumberCenter - 1) * productConstants.MaxNumberOfAttributesPerGroup;
	            vm.displayAttributes = [];
	            var filtered = _.filter(attributes, function(item, index) {
	                if (index >= min && index < max) {
	                    return true;
	                } else {
	                    return false;
	                }
	            });
	            vm.displayAttributes.push(filtered);
	            if (attributes.length === max + 1 && attributes[attributes.length - 1].nodeType === 'loadMore') {
	                vm.loadMoreVisible = true;
	            } else {
	                vm.loadMoreVisible = false;
	            }
	            if (vm.pageNumberCenter === 1) {
	                vm.disableLeftCenterBtn = true;
	            } else {
	                vm.disableLeftCenterBtn = false;
	            }
	            if (vm.displayAttributes[0].length < productConstants.MaxNumberOfAttributesPerGroup) {
	                vm.disableRightCenterBtn = true;
	            } else {
	                vm.disableRightCenterBtn = false;
	            }
	        }
	
	        vm.pageNumberCenter = 1;
	        vm.filterAttributesCenter = function(type) {
	            updateProductAttributeGroup(false).then(function(response) {
	                if (response) {
	                    if (type === 'next') {
	                        vm.pageNumberCenter++;
	                    } else if (type === 'previous') {
	                        vm.pageNumberCenter--;
	                    }
	                    filterAttributes();
	                }
	            });
	        };
	
	        vm.loadMoreCenterPanel = function() {
	            updateProductAttributeGroup(false).then(function(response) {
	                if (response) {
	                    var attributes = getSelectedNodeProductAttributes();
	                    vm.getAttributesForAttributeGroup(attributes[attributes.length - 1]).then(function(resolve) {
	                        if (resolve) {
	                            vm.pageNumberCenter++;
	                            filterAttributes();
	                        }
	                    });
	                }
	            });
	        };
	
	        vm.massEditObj = {};
	        var varToCheck = {};
	        vm.applyMassEdit = function() {
	            if (vm.massEditObj) {
	                var attributes = vm.displayAttributes[0];
	                for (var i = 0; i < attributes.length; i++) {
	                    if (attributes[i].nodeType === 'attribute' && (attributes[i].FieldType === 'CURRENCY' || attributes[i].FieldType === 'DOUBLE' || attributes[i].FieldType === 'PERCENT'))
	                        if (vm.massEditObj.Expression !== undefined && vm.massEditObj.Expression !== varToCheck.Expression) {
	                            attributes[i].ProductAttributeSO.Expression = vm.massEditObj.Expression;
	                        }
	                    if (vm.massEditObj.IsReadOnly !== undefined && vm.massEditObj.IsReadOnly !== varToCheck.IsReadOnly) {
	                        attributes[i].ProductAttributeSO[vm.prefix + 'IsReadOnly__c'] = vm.massEditObj.IsReadOnly;
	                    }
	                    if (vm.massEditObj.IsHidden !== undefined && vm.massEditObj.IsHidden !== varToCheck.IsHidden) {
	                        attributes[i].ProductAttributeSO[vm.prefix + 'IsHidden__c'] = vm.massEditObj.IsHidden;
	                    }
	                    if (vm.massEditObj.IsPrimary !== undefined && vm.massEditObj.IsPrimary !== varToCheck.IsPrimary) {
	                        attributes[i].ProductAttributeSO[vm.prefix + 'IsPrimary__c'] = vm.massEditObj.IsPrimary;
	                    }
	                }
	                varToCheck = angular.copy(vm.massEditObj);
	            }
	        };
	
	        vm.getSelectedItemsToDrag = function(list, item) {
	            item.selected = true;
	            return list.filter(function(item) {
	                return item.selected;
	            });
	        };
	
	        vm.onDragstart = function(list, event) {
	            list.dragging = true;
	            if (event.dataTransfer.setDragImage) {
	                var img = new Image();
	                img.src = 'app/common/assets/images/nav-logo.png';
	                event.dataTransfer.setDragImage(img, 0, 0);
	            }
	        };
	
	        vm.onMoved = function() {
	            vm.displayAttributes[0] = vm.displayAttributes[0].filter(function(item) {
	                return !item.selected;
	            });
	        };
	
	        // allow only either Two or Three Column Attribute Display using the following 2 watchers 
	        var deregisterTwoColWatch = $scope.$watch(function () {
	            return angular.isDefined(vm.selectedNode) && vm.selectedNode !== null ? vm.selectedNode.AttributeGroupSO[vm.prefix + 'TwoColumnAttributeDisplay__c'] : false;
	            }, function(newValue) {
	                if (angular.isDefined(vm.selectedNode) && vm.selectedNode !== null && newValue === true && vm.selectedNode.AttributeGroupSO[vm.prefix + 'ThreeColumnAttributeDisplay__c'] === true) {
	                    vm.selectedNode.AttributeGroupSO[vm.prefix + 'ThreeColumnAttributeDisplay__c'] = false;
	                }
	            }
	        );
	
	        var deregisterThreeColWatch = $scope.$watch(function () {
	              return angular.isDefined(vm.selectedNode) && vm.selectedNode !== null ? vm.selectedNode.AttributeGroupSO[vm.prefix + 'ThreeColumnAttributeDisplay__c'] : false;
	            }, function(newValue) {
	                if (angular.isDefined(vm.selectedNode) && vm.selectedNode !== null && newValue === true && vm.selectedNode.AttributeGroupSO[vm.prefix + 'TwoColumnAttributeDisplay__c'] === true) {
	                    vm.selectedNode.AttributeGroupSO[vm.prefix + 'TwoColumnAttributeDisplay__c'] = false;
	                }
	            }
	        );
	
	        // garbage collection
	        $scope.$on('$destroy', function() {
	          deregisterTwoColWatch();
	          deregisterThreeColWatch();
	        });
	
	    };
	
	    productAttributeController.$inject = [
	        '$scope',
	        '$rootScope',
	        '$stateParams',
	        '$state',
	        'lodash',
	        '$templateCache',
	        'attributesService',
	        'productService',
	        'i18nService',
	        'updateSelectedProduct',
	        'productDetailService',
	        'systemConstants',
	        '$q',
	        'applicationService',
	        'productConstants',
	        '$mdDialog'
	    ];
	
	    module.exports = productAttributeController;
	})();


/***/ }),
/* 430 */
/***/ (function(module, exports) {

	module.exports = "<ul dnd-list=\"list\" dnd-drop=\"vm.addAttribute(event, index, item)\" class=\"options-list\" dnd-allowed-types=\"['attribute']\">\n    <li ng-repeat=\"item in list\" dnd-effect-allowed=\"move\" dnd-moved=\"vm.onMoved()\" ng-include=\"'content.html'\" onload=\"vm.checkArray(item)\" \n        dnd-type=\"item.nodeType\" ng-if=\"item.nodeType==='attribute'\" dnd-draggable=\"vm.getSelectedItemsToDrag(list, item)\" \n        dnd-selected=\"item.selected = !item.selected\" ng-class=\"{'selected': item.selected}\" ng-hide=\"list.dragging && item.selected\" \n        dnd-dragstart=\"vm.onDragstart(list, event)\" dnd-dragend=\"list.dragging = false\">\n    </li>\n</ul>\n"

/***/ }),
/* 431 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"attribute-group\">\n    <div class=\"attribute-group-block\">\n        <div layout=\"row\">\n            <div flex=\"66\">\n                <material-form-field model=\"item.AttributeGroupSO.Name\" field-type=\"string\" is-editable=\"true\" field-label=\"vm.labels.GroupName\" is-required=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div layout=\"row\">\n            <div flex=\"33\">\n                <material-form-field model=\"item.AttributeGroupSO[vm.prefix + 'TwoColumnAttributeDisplay__c']\" field-type=\"boolean\" is-editable=\"true\" field-label=\"vm.labels.TwoColumnAttributesDisplay\" element-id=\"twoColumn\">\n                </material-form-field>\n            </div>\n            <div flex=\"33\" flex-offset=\"15\">\n                <material-form-field model=\"item.AttributeGroupSO[vm.prefix + 'ThreeColumnAttributeDisplay__c']\" field-type=\"boolean\" is-editable=\"true\" field-label=\"vm.labels.ThreeColumnAttributesDisplay\" element-id=\"threeColumn\">\n                </material-form-field>\n            </div>\n        </div>\n        <div layout=\"row\">\n            <div flex=\"66\">\n                <material-form-field model=\"item.AttributeGroupSO[vm.prefix + 'Description__c']\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.Description\">\n                </material-form-field>\n            </div>\n        </div>\n    </div>\n    <div class=\"title\">\n        {{vm.labels.ProductAttributes}}\n    </div>\n    <div class=\"attribute-drop-zone panel-body\">\n        <div class=\"page-title\" layout=\"row\">\n            <div class=\"flex-15\">\n                {{vm.labels.Action}}\n                <i class=\"material-icons\" ng-click=\"vm.showMassEditPanel = !vm.showMassEditPanel\">mode_edit</i>\n            </div>\n            <div class=\"flex-25\">{{vm.labels.AttributeLabel}}</div>\n            <div class=\"flex-25\">{{vm.labels.Expression}}</div>\n            <div class=\"flex-10 text-center\">{{vm.labels.IsReadOnly}}</div>\n            <div class=\"flex-10 text-center\">{{vm.labels.IsHidden}}</div>\n            <div class=\"flex-10 text-center\">{{vm.labels.IsPrimary}}</div>\n        </div>\n        <div layout=\"row\" class=\"attribute-columns mass-edit-panel\" ng-show=\"vm.showMassEditPanel\">\n            <div class=\"flex-15 action\">\n                <button type=\"button\" class=\"slds-button slds-button_brand action\" data-ng-click=\"vm.applyMassEdit()\">{{vm.labels.Apply}}</button>\n            </div>\n            <div class=\"flex-25\">\n\n            </div>\n            <div class=\"flex-25 eb-container\">\n                <material-form-field model=\"vm.massEditObj.Expression\" field-type=\"string\">\n                </material-form-field>\n                <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus('MassEditExpression')\">\n                    <i class=\"fa fa-external-link\"></i>\n                </button>\n            </div>\n            <div class=\"flex-10 text-center\">\n                <material-form-field model=\"vm.massEditObj.IsReadOnly\" field-type=\"checkbox\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"flex-10 text-center\">\n                <material-form-field model=\"vm.massEditObj.IsHidden\" field-type=\"checkbox\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"flex-10 text-center\">\n                <material-form-field model=\"vm.massEditObj.IsPrimary\" field-type=\"checkbox\" is-editable=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div ng-repeat=\"list in vm.displayAttributes\" ng-include=\"'list.html'\"></div>\n    </div>\n    <div class=\"clearfix\"></div>\n\n</div>\n"

/***/ }),
/* 432 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"item attribute\">{{item.label}}</div>"

/***/ }),
/* 433 */
/***/ (function(module, exports) {

	module.exports = "<div layout=\"row\" class=\"attribute-columns\">\n    <div class=\"flex-15 action\">\n        <div class=\"btn-group text-center\" role=\"group\" aria-label=\"...\">\n            <button type=\"button\" class=\"slds-button slds-button--icon\" ng-click=\"vm.addNewAttribute($index);\">\n                <i class=\"material-icons ng-scope\">add</i>\n            </button>\n            <button type=\"button\" class=\"slds-button slds-button--icon\">\n                <i class=\"material-icons\">more_vert</i>\n            </button>\n            <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.showRemoveConfirmation(item, 'attribute')\">\n                <i class=\"material-icons\" aria-hidden=\"true\">clear</i>\n            </button>\n        </div>\n    </div>\n    <div class=\"flex-25\">\n        <material-form-field model=\"item.Name\" field-type=\"string\" is-disabled=\"true\" field-label=\"Name\" ng-if=\"!item.autocomplete\">\n        </material-form-field>\n        <material-form-field field-type=\"autocomplete\" name=\"attributeName\" properties=\"item\" ng-if=\"item.autocomplete\" is-required=\"true\" field-label=\"'Name'\" class=\"autocomplete-no-label\" data-ng-click=\"vm.trackSelectedRowIndex($index)\">\n        </material-form-field>\n    </div>\n    <div class=\"flex-25 eb-container\">\n        <material-form-field model=\"item.ProductAttributeSO.Expression\" max-length=\"50000\" field-type=\"string\" is-disabled=\"true\">\n        </material-form-field>\n        <button type=\"button\" \n                class=\"slds-button\" \n                data-ng-click=\"vm.onFocus('Expression', $index)\" \n                ng-if=\"(item.FieldType==='CURRENCY' || item.FieldType==='DOUBLE' || item.FieldType==='PERCENT' || item.FieldType==='MULTIPICKLIST' || item.FieldType==='PICKLIST' || item.FieldType==='STRING' || item.FieldType==='BOOLEAN') && !item.IsFieldCalculated\">\n            <i class=\"fa fa-external-link\"></i>\n        </button>\n    </div>\n    <div class=\"flex-10 text-center\">\n        <material-form-field model=\"item.ProductAttributeSO[vm.prefix+'IsReadOnly__c']\" field-type=\"checkbox\" is-editable=\"true\">\n        </material-form-field>\n    </div>\n    <div class=\"flex-10 text-center\">\n        <material-form-field model=\"item.ProductAttributeSO[vm.prefix+'IsHidden__c']\" field-type=\"checkbox\" is-editable=\"true\">\n        </material-form-field>\n    </div>\n    <div class=\"flex-10 text-center\">\n        <material-form-field model=\"item.ProductAttributeSO[vm.prefix+'IsPrimary__c']\" field-type=\"checkbox\" is-editable=\"true\">\n        </material-form-field>\n    </div>\n</div>\n"

/***/ }),
/* 434 */
/***/ (function(module, exports) {

	module.exports = "<ul dnd-list=\"list\" dnd-allowed-types=\"[]\" dnd-drop=\"vm.addAttribute(event, index, item)\" class=\"attribute-list\">\r\n    <li ng-repeat=\"item in list\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" dnd-moved=\"list.splice($index, 1)\" dnd-selected=\"models.selected = item\" \r\n        ng-class=\"{selected: models.selected === item}\" ng-include=\"item.nodeType=='attribute-group'?'left-container.html' : 'left-content.html'\" onload=\"vm.checkArray(item)\" \r\n        dnd-disable-if=\"true\" dnd-type=\"item.nodeType\">\r\n    </li>\r\n</ul>\r\n"

/***/ }),
/* 435 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"attribute-group\">\r\n    <div class=\"attribute-parent\" ng-class=\"{selected: vm.models.selected === item}\">\r\n    \t<i ng-class=\"item.collapse ? 'fa fa-caret-right' : 'fa fa-caret-down'\" ng-click=\"item.collapse=!item.collapse\"></i>\r\n    \t<a href=\"\" ng-click=\"!item.AttributeGroupSO[vm.prefix + 'BusinessObject__c'] || vm.changeMiddlePanel(item)\">{{item.Name}}</a> \r\n    </div>\r\n    <div ng-repeat=\"list in item[vm.nodeChildren]\" ng-include=\"'left-list.html'\" ng-if='!item.collapse'></div>\r\n    <div class=\"clearfix\"></div>\r\n</div>\r\n"

/***/ }),
/* 436 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-attribute\">\r\n    <p ng-if=\"item.nodeType==='attribute'\">{{item.Name}}</p>\r\n    <a ng-if=\"item.nodeType ==='loadMore'\" ng-click=\"vm.getAttributesForAttributeGroup(item);\" class=\"load-more\">\r\n        <i class=\"material-icons\">refresh</i>\r\n        <span>{{item.Name}}</span>\r\n    </a>\r\n</div>\r\n"

/***/ }),
/* 437 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"\">\n    <ul dnd-list=\"vm.models.lists.selectedAttributes\" dnd-drop=\"vm.addAttribute(event, index, item)\" class=\"attribute-list\" dnd-allowed-types=\"['attribute-group']\">\n        <li ng-repeat=\"item in vm.models.lists.selectedAttributes\" dnd-effect-allowed=\"move\" dnd-moved=\"vm.models.lists.selectedAttributes.splice($index, 1)\">\n            <div class=\"attribute-columns\">\n                <div class=\"action\">\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.showRemoveConfirmation(item, 'attributegroup')\">\n                        <i class=\"material-icons\" aria-hidden=\"true\">clear</i>\n                    </button>\n                </div>\n                <div>\n                    {{item.Name}}\n                </div>\n            </div>\n        </li>\n    </ul>\n</div>\n<div class=\"pagination cf\">\n    <div class=\"next-prev\">\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getAttributeGroups('previous')\">\n            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n        </button>\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getAttributeGroups('next')\">\n            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n        </button>\n    </div>\n</div>\n"

/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.product.rule', [])
	        .service('rulesService', __webpack_require__(439))
	        .filter('userMessage', __webpack_require__(440))
	        .constant('rulesStateConstants', {
	            "productRules": 'app.product.rules',
	            "manageRules": 'app.product.manageRules'
	        })
	        .config(['$stateProvider','rulesStateConstants', function($stateProvider, rulesStateConstants) {
	            $stateProvider.state(rulesStateConstants.productRules, {
	                parent: 'app.product',
	                url: '/:id/rules',
	                views: {
	                    'productContainer': {
	                        template: __webpack_require__(441),
	                        controller: __webpack_require__(442),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    productStructureTree: ['rulesService', '$stateParams', function(rulesService, $stateParams) {
	                        return rulesService.getProductStructure($stateParams.id);
	                    }],
	                    picklistMetaData: ['rulesService', function(rulesService) {
	                        return rulesService.getPicklistMetaData();
	                    }],
	                    allConstraintRuleConditionPicklists: ['rulesService', '$stateParams', function(rulesService, $stateParams) {
	                        return rulesService.getSObjectPicklistFields('ConstraintRuleCondition__c', null);
	                    }],
	                    allConstraintRuleActionPicklists: ['rulesService', '$stateParams', function(rulesService, $stateParams) {
	                        return rulesService.getSObjectPicklistFields('ConstraintRuleAction__c', null);
	                    }],
	                    statementProductAttributes: ['rulesService', function(rulesService) {
	                        return rulesService.targetFieldSearchForActionCriteria('');
	                    }],
	                    allRules: ['rulesService', '$stateParams', function(rulesService, $stateParams) {
	                        return rulesService.getAllRules($stateParams.id);
	                    }],
	                    applicationTypeValues: ['rulesService', function(rulesService) {
	                        return rulesService.getSObjectPicklistFields('AttributeValueMatrix__c', ['ApplicationType__c'])
	                    }],
	                    productDetails: ['productService', '$stateParams', function(productService, $stateParams) {
	                        return productService.getProductDetailsByCode($stateParams.id)
	                    }]
	                }
	            }).state(rulesStateConstants.manageRules, {
	                parent: "app.product",
	                url: "/manageRules",
	                views: {
	                    "pageContent@": {
	                        template: __webpack_require__(441),
	                        controller: __webpack_require__(442),
	                        controllerAs: "vm"
	                    }
	                },
	                resolve: {
	                    productStructureTree: ['rulesService', function (rulesService) {
	                    }],
	                    picklistMetaData: ['rulesService', function (rulesService) {
	                        return rulesService.getPicklistMetaData();
	                    }],
	                    allConstraintRuleConditionPicklists: ['rulesService', function (rulesService) {
	                        return rulesService.getSObjectPicklistFields('ConstraintRuleCondition__c', null);
	                    }],
	                    allConstraintRuleActionPicklists: ['rulesService', function (rulesService) {
	                        return rulesService.getSObjectPicklistFields('ConstraintRuleAction__c', null);
	                    }],
	                    statementProductAttributes: ['rulesService', function (rulesService) {
	                        return rulesService.targetFieldSearchForActionCriteria('');
	                    }],
	                    allRules: ['rulesService', function (rulesService) {
	                        return rulesService.getAllRules();
	                    }],
	                    applicationTypeValues: ['rulesService', function (rulesService) {
	                        return rulesService.getSObjectPicklistFields('AttributeValueMatrix__c', ['ApplicationType__c'])
	                    }],
	                    productDetails: ['productService', function(productService) {
	                    }]
	                }
	            });
	        }]);
	})();


/***/ }),
/* 439 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productRulesService = function($q, $timeout, $stateParams, $filter, remoteService, systemConstants, moment, applicationService, listService, productConstants, cpqAdminConstants, productService, i18nService, _) {
	
	        var dateFormat = 'MM/DD/YYYY',
	            prefix = systemConstants.nsPrefix || '',
	            productFieldA,
	            productFieldB,
	            productFieldC,
	            productFieldD,
	            avmPopupAttributesList = [],
	            allConstraintRuleConditionPicklists = [],
	            allConstraintRuleActionPicklists = [],
	            originalAttributesList = [],
	            labels = i18nService.CustomLabel,
	            filters = {
	                linkClicked: false,
	                slidersClicked: false,
	                tableClicked: false,
	                showRulesForOptions: true
	            };
	
	        /**
	         * Returns the filters object that holds the state of the filters for the rules tab.
	         */
	        function getFilters() {
	            return filters;
	        }
	
	        /**
	         * Sets the filters object to the given value. This is used to update the state of the filters on the rules tab.
	         * @param {*} newFilters Object containing the state of the filters on the rules tab.
	         */
	        function setFilters(newFilters) {
	            filters = newFilters;
	        }
	
	        /* 
	         * Converts a date in string format or in milliseconds to date to format to be used
	         * in datepicker component
	         */
	        function formatDate(date) {
	            if (angular.isDefined(date)) {
	                if (date === null || date === '' || date == 0) {
	                    date = null;
	                } else if (angular.isString(date)) {
	                    date = new Date(date);
	                } else {
	                    date = new Date(date);
	                }
	            }
	            return date ? moment(date).format(dateFormat) : '';
	        }
	
	        /*
	         * Converts an array of product groups to array of items with Name and Id pairs.
	         * This is converted array is used to bind to autocomplete Product Group field.
	         */
	        function prepareProductGroupItems(items) {
	            var finalItems = [];
	            if (angular.isDefined(items) && items.length > 0) {
	                for (var i = 0; i < items.length; i++) {
	                    finalItems.push({
	                        Name: items[i].ProductGroupSO.Name,
	                        Id: items[i].ProductGroupSO.Id
	                    });
	                }
	            }
	            return finalItems;
	        }
	
	        /* 
	         * This is used to return search result of product by product name.
	         */
	        function productSearchByName(searchText) {
	            var defer = $q.defer();
	            var requestObj = {
	                'ViewName': prefix + productConstants.fieldsetProductList,
	                "SortField": 'LastModifiedDate',
	                "SortDirection": cpqAdminConstants.DESCENDING,
	                'SearchString': searchText || '',
	                'ChunkNumber': 1,
	                'NumberOfProductsPerChunk': productConstants.numberOfProductsPerChunk,
	                'ConfigType': ''
	            };
	            listService.getProductListBySelectedView(requestObj, false)
	                .then(function(response) {
	                    defer.resolve(response.ProductSOs);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            return defer.promise;
	        }
	
	        /* 
	         * This is used to bind autocomplete field of Constraint rule condition items.
	         * Based on the scope selected, it returns search results.
	         */
	        function productSearch(searchText, item) {
	            var defer = $q.defer();
	
	            if (item.scope === 'Product') {
	                return productSearchByName(searchText);
	            } else if (item.scope === 'Product Group') {
	                return productGroupSearch(searchText);
	            } else if (item.scope === 'Product Family') {
	                return productFamilySearch(searchText);
	            } else if (item.scope === 'Account Location') {
	                return accountLocationSearch(searchText);
	            } else if (item.scope === 'Product Option Group') {
	                return productOptionGroupSearch(searchText);
	            } 
	
	            return defer.promise;
	        }
	
	        /*
	         * Gets a list of Product Option Groups used in the autocomplete 
	         * functionality in conditions.
	         */
	        function productOptionGroupSearch(searchText) {
	            var deferQ = $q.defer();
	            var requestObj = {
	                "ChunkNumber": 1,
	                "NumberOfOptionGroupsPerChunk": 100,
	                "SearchString": searchText || '',
	                "IsProductOptionGroupRetrieval": true
	            };
	            remoteService.getAllOptionGroups(requestObj)
	              .then(function(response) {
	                  if (response) {
	                      // attach a valid name to each Product Option Group in the response
	                      for (var i = 0; i < response.ProductOptionGroupSOs.length; i++) {
	                          var pogSO = response.ProductOptionGroupSOs[i];
	                          pogSO.Name = pogSO[getPrefixedAttribute('OptionGroupId__r')]['Name'] + ' associated to ' + pogSO[getPrefixedAttribute('ProductId__r')]['Name'];
	                      }
	                      deferQ.resolve(response.ProductOptionGroupSOs);
	                  }
	              }, function(reason) {
	                  deferQ.reject(reason);
	              });
	            return deferQ.promise;
	        }
	        
	        function accountLocationSearch(searchText) {
	            var defer = $q.defer();
	
	            remoteService.searchAccountLocations(searchText)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function getInitials(str) {
	            var response = '';
	            if (str && str.length > 0) {
	                var words = str.split(' ');
	                for (var j = 0; j < words.length; j++) {
	                    response += words[j].charAt(0);
	                }
	            }
	            return response === '' ? str : response;
	        }
	
	
	        function truncateIndividualLabel(label) {
	            if (label) {
	                var temp = label,
	                    leftSide = temp.split(' : ')[0],
	                    rightSide = temp.split(' : ')[1];
	
	                label = getInitials(leftSide) + ' : ' + rightSide;
	            }
	            return label;
	        };
	
	        function truncateNames(obj) {
	            var sampleLabel, str;
	            if (obj && obj.length > 0) {
	                for (var i = 0; i < obj.length; i++) {
	                    if (obj[i].value) {
	                        var temp = obj[i].label,
	                            leftSide = temp.split(' : ')[0],
	                            rightSide = temp.split(' : ')[1];
	                        if (leftSide && leftSide.trim().toLowerCase() === 'product attribute value') {
	                            obj[i].label = 'PAV' + ' : ' + rightSide;
	                        }
	                    } else {
	                        obj.splice(i, 1);
	                    }
	                }
	
	            }
	            return obj;
	        }
	        /* 
	         * Returns search result for auto-complete target field component.
	         */
	
	        function getExpandedName(str) {
	            var finalSearchText = '';
	            switch (str) {
	                case 'li':
	                    {
	                        finalSearchText = 'Line Item :';
	                        break;
	                    }
	                case 'pl':
	                    {
	                        finalSearchText = 'Price List :';
	                        break;
	                    }
	                case 'pav':
	                    {
	                        finalSearchText = 'Product Attribute Value :';
	                        break;
	                    }
	                case 'pc':
	                    {
	                        finalSearchText = 'Product Configuration :';
	                        break;
	                    }
	                case 'p':
	                    {
	                        finalSearchText = 'Product :';
	                        break;
	                    }
	                default:
	                    {
	                        finalSearchText = str;
	                        break;
	                    }
	            }
	            return finalSearchText;
	        }
	
	        function targetFieldSearchForCriteria(searchText) {
	            var finalSearchText = '',
	                firstSection = '';
	            if (searchText && searchText.split(':').length > 1) {
	                var firstSection = searchText.split(':')[0],
	                    expandedName = '';
	                if (firstSection) {
	                    expandedName = getExpandedName(firstSection.trim().toLowerCase());
	                    if (searchText.split(':')[1]) {
	                        finalSearchText = expandedName + ' ' + searchText.split(':')[1].trim();
	                    } else {
	                        finalSearchText = expandedName
	                    }
	                }
	            } else {
	                finalSearchText = searchText;
	            }
	
	            var deferQ = $q.defer();
	            remoteService.getConditionCriteriaFields(finalSearchText)
	                .then(function(response) {
	                    deferQ.resolve(truncateNames(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function targetFieldSearch(searchText) {
	            var finalSearchText = '',
	                firstSection = '';
	            if (searchText && searchText.split(':').length > 1) {
	                var firstSection = searchText.split(':')[0],
	                    expandedName = '';
	                if (firstSection) {
	                    expandedName = getExpandedName(firstSection.trim().toLowerCase());
	                    if (searchText.split(':')[1]) {
	                        finalSearchText = expandedName + searchText.split(':')[1].trim();
	                    } else {
	                        finalSearchText = expandedName
	                    }
	                }
	            } else {
	                finalSearchText = searchText;
	            }
	
	            var deferQ = $q.defer();
	            remoteService.searchTargetAttributes(finalSearchText)
	                .then(function(response) {
	                    deferQ.resolve(truncateNames(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function targetFieldSearchForActionCriteria(searchText) {
	            var deferQ = $q.defer();
	            var finalSearchText = 'Product : ' + searchText;
	            remoteService.getConditionCriteriaFields(finalSearchText)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function preparePF(arr) {
	            var response = [];
	            if (arr) {
	                for (var i = 0; i < arr.length; i++) {
	                    response.push({
	                        Name: arr[i],
	                        Id: arr[i]
	                    });
	                }
	            }
	            return response;
	        }
	        /*
	         * Returns search result for auto-complete product family component.
	         */
	        function productFamilySearch(searchText) {
	            var deferQ = $q.defer();
	            remoteService.searchProductFamily(searchText)
	                .then(function(response) {
	                    deferQ.resolve(preparePF(JSON.parse(response)));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        /*
	         * Returns search result for auto-complete product group component.
	         */
	        function productGroupSearch(searchText) {
	            var defer = $q.defer();
	
	            remoteService.searchProductGroups(searchText)
	                .then(function(response) {
	                    defer.resolve(JSON.parse(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        /* ----------- Utility methods -----------*/
	        function checkIfNewRulePresent(list) {
	            /* TODO : check if any rule doesnt have an Id. Then its a new rule.*/
	            var result = {},
	                newRuleList = [];
	            if (list.length) {
	                for (var item in list) {
	                    if (!list[item].Id) {
	                        newRuleList.push(list[item]);
	                        result.newRulePresent = true;
	                    }
	                }
	                result.newRuleList = newRuleList;
	            }
	            return result;
	        }
	
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        /*
	         * Extracts the constraint rule metadata information from getConstraintRuleDetails API.
	         */
	        function getRuleMetadata(metadata) {
	            var response = {};
	            if (metadata) {
	                response.id = metadata.Id;
	                response.sequence = metadata[getPrefixedAttribute('Sequence__c')];
	                response.isActive = metadata[getPrefixedAttribute('Active__c')];
	                response.name = metadata.Name;
	                response.effectiveDate = metadata[getPrefixedAttribute('EffectiveDate__c')];
	                response.expirationDate = metadata[getPrefixedAttribute('ExpirationDate__c')];
	                response.context = metadata[getPrefixedAttribute('IsBundleContext__c')];
	                response.description = metadata[getPrefixedAttribute('Description__c')];
	                response.createdById = metadata.CreatedBy ? (metadata.CreatedBy.Name || '') : '';
	                response.CreatedDate = metadata.CreatedDate ? (metadata.CreatedDate || '') : '';
	                response.lastModifiedById = metadata.LastModifiedBy ? (metadata.LastModifiedBy.Name || '') : '';
	                response.LastModifiedDate = metadata.LastModifiedDate ? (metadata.LastModifiedDate || '') : '';
	                response.isConstraintRule = true;
	
	                response.conditionAssociation = metadata[getPrefixedAttribute('ConditionAssociation__c')] || '';
	                if (response.conditionAssociation) {
	                    response.conditionAssociation = (response.conditionAssociation !== '' ? 'Custom' : 'All');
	                    if (response.conditionAssociation === 'Custom') {
	                        response.customCondition = metadata[getPrefixedAttribute('ConditionAssociation__c')];
	                    } else {
	                        response.customCondition = 'All';
	                    }
	                } else {
	                    response.conditionAssociation = 'All'
	                }
	            }
	            return response;
	        }
	
	        function extractValue(field, obj) {
	            var response = {};
	            if (field && obj) {
	                var fieldName = rulesService.getPrefixedAttribute('ProductField' + field + '__c'),
	                    fieldNameKey = 'productField' + field,
	                    operatorName = rulesService.getPrefixedAttribute('ProductFieldOperator' + field + '__c'),
	                    operatorNameKey = 'productFieldOperator' + field,
	                    fieldValue = rulesService.getPrefixedAttribute('ProductFieldValue' + field + '__c'),
	                    fieldValueKey = 'productFieldValue' + field;
	
	                if (obj[fieldName]) {
	                    response = {
	                        name: obj[fieldName] || '',
	                        operator: obj[operatorName] || '',
	                        value: obj[fieldValue] || '',
	                        type: field,
	                        picklistEntries: getProductFieldValues(field)
	                    }
	                } else {
	                    response = {}
	                }
	            }
	            return response;
	        }
	
	        function extractProductFieldValues(obj) {
	            var item = [];
	            if (obj) {
	                var productFieldA = extractValue('A', obj);
	                if (productFieldA.name) {
	                    item.push(productFieldA);
	                }
	                var productFieldB = extractValue('B', obj);
	                if (productFieldB.name) {
	                    item.push(productFieldB);
	                }
	                var productFieldC = extractValue('C', obj);
	                if (productFieldC.name) {
	                    item.push(productFieldC);
	                }
	                var productFieldD = extractValue('D', obj);
	                if (productFieldD.name) {
	                    item.push(productFieldD);
	                }
	            }
	            return item;
	        }
	
	        function getConditionFilterLabel(sObjectLabel, fieldName, fieldLabel) {
	            var response = '';
	            /* Check if the name contains any extra pre tag */
	            if (fieldName.split('.').length > 1) {
	                var firstName = fieldName.split('.')[0];
	                if (firstName === getPrefixedAttribute('PriceListId__r')) {
	                    response = 'Price List : ' + fieldLabel;
	                } else if (firstName === getPrefixedAttribute('ProductId__r')) {
	                    response = 'Product : ' + fieldLabel;
	                } else if (firstName === getPrefixedAttribute('AttributeValueId__r')) {
	                    response = 'PAV : ' + fieldLabel;
	                } else if (firstName === getPrefixedAttribute('ConfigurationId__r')) {
	                    response = 'Product Configuration : ' + fieldLabel;
	                }
	            } else {
	                if (sObjectLabel.trim().toLowerCase() === 'product attribute value') {
	                    response = 'PAV : ' + fieldLabel;
	                } else {
	                    response = sObjectLabel + ' : ' + fieldLabel;
	                }
	            }
	            return response;
	        }
	
	        function getConditionCriterias(obj) {
	            if (obj && obj.filter && obj.filter.predicates) {
	                var temp = obj.filter.predicates;
	                for (var i = 0; i < temp.length; i++) {
	                    var fieldName = temp[i]['FieldName'],
	                        value;
	
	                    if (fieldName.indexOf(getPrefixedAttribute('AttributeValueId__r')) <= -1) {
	                        value = obj['sObjectName'] + '.' + temp[i]['FieldName'];
	                    } else {
	                        value = temp[i]['FieldName'];
	                    }
	                    temp[i]['targetField'] = {
	                        autocomplete: {
	                            'selectedItemChange': updateChargeTypes,
	                            'querySearch': targetFieldSearchForCriteria,
	                            'displayName': 'label',
	                            'selectedItem': {
	                                'value': value,
	                                'label': getConditionFilterLabel(obj['sObjectLabel'], fieldName, temp[i]['FieldLabel'])
	                            }
	                        }
	                    };
	                }
	            }
	            return obj;
	        }
	
	        /* 
	         * Extract only conditions data from getConstraintRuleDetails API.
	         */
	        function getConditions(conditionObj) {
	            var response = [];
	            if (conditionObj) {
	                for (var i = 0; i < conditionObj.length; i++) {
	                    var temp = {},
	                        selected = {
	                            Name: '',
	                            Id: ''
	                        };
	                    temp.scope = conditionObj[i][getPrefixedAttribute('ProductScope__c')];
	                    if (temp.scope === 'Product') {
	                        temp.product = selected = {
	                            Name: conditionObj[i][getPrefixedAttribute('ProductId__r')]['Name'],
	                            Id: conditionObj[i][getPrefixedAttribute('ProductId__r')]['Id']
	                        };
	                        temp.productField = [];
	                    } else if (temp.scope === 'Product Family') {
	                        selected = {
	                            Name: conditionObj[i][getPrefixedAttribute('ProductFamily__c')],
	                            Id: conditionObj[i][getPrefixedAttribute('ProductFamily__c')]
	                        };
	                        temp.productField = [];
	                    } else if (temp.scope === 'Product Group') {
	                        selected = {
	                            Name: conditionObj[i][getPrefixedAttribute('ProductGroupId__r')]['Name'],
	                            Id: conditionObj[i][getPrefixedAttribute('ProductGroupId__r')]['Id']
	                        };
	                        temp.productField = [];
	                    } else if (temp.scope === 'Product Field Set') {
	                        temp.productField = extractProductFieldValues(conditionObj[i]);
	                    } else if (temp.scope === 'Product Option Group') {
	                        var pogField = conditionObj[i][getPrefixedAttribute('ProductOptionGroupId__r')];
	                        selected = {
	                            Name: pogField[getPrefixedAttribute('OptionGroupId__r')]['Name'] + ' associated to ' + pogField[getPrefixedAttribute('ProductId__r')]['Name'],
	                            Id: conditionObj[i][getPrefixedAttribute('ProductOptionGroupId__r')]['Id']
	                        };
	                        
	                        temp.productField = [];
	                    }
	
	                    temp.name = conditionObj[i].Name;
	                    temp.label = angular.copy(temp.name);
	                    temp.id = conditionObj[i].Id;
	                    temp.matchInAsset = conditionObj[i][getPrefixedAttribute('MatchInAsset__c')];
	                    temp.matchInCartOptions = conditionObj[i][getPrefixedAttribute('MatchInCartOptions__c')];
	                    temp.matchInLocation = conditionObj[i][getPrefixedAttribute('MatchInLocation__c')];
	                    temp.matchInOptions = conditionObj[i][getPrefixedAttribute('MatchInOptions__c')];
	                    temp.matchInPrimaryLines = conditionObj[i][getPrefixedAttribute('MatchInPrimaryLines__c')];
	                    temp.matchInRelatedLines = conditionObj[i][getPrefixedAttribute('MatchInRelatedLines__c')];
	                    temp.matchRule = conditionObj[i][getPrefixedAttribute('MatchRule__c')];
	                    temp.matchMinProducts = conditionObj[i][getPrefixedAttribute('MatchMinProducts__c')] || '';
	                    temp.matchMaxProducts = conditionObj[i][getPrefixedAttribute('MatchMaxProducts__c')] || '';
	                    temp.operator = 'equal to';
	                    temp.sequence = conditionObj[i][getPrefixedAttribute('Sequence__c')];
	                    temp.isCondition = true;
	                    temp.autocomplete = {
	                        'querySearch': productSearch,
	                        'displayName': 'Name', 
	                        'selectedItem': selected
	                    };
	                    temp.conditionCriteria = conditionObj[i][getPrefixedAttribute('ConditionCriteria__c')];
	
	                    response.push(temp);
	                }
	            }
	
	            return $filter('orderBy')(response, 'sequence');
	        }
	
	
	        function getActionCriterias(obj, actionType) {
	
	            if (obj && obj.filter && obj.filter.predicates) {
	                var temp = obj.filter.predicates;
	                for (var i = 0; i < temp.length; i++) {
	                    var value;
	                    if (actionType && actionType === 'Validation') {
	                        var fieldTypeFromName = temp[i]['FieldName'];
	                        if (fieldTypeFromName.indexOf('AttributeValueId__r') <= -1) {
	                            value = getPrefixedAttribute('LineItem__c') + '.' + temp[i]['FieldName'];
	                            temp[i]['statementProduct'] = getPrefixedAttribute('LineItem__c') + '.' + temp[i]['FieldName'];
	                        } else {
	                            value = temp[i]['FieldName'];
	                            temp[i]['statementProduct'] = temp[i]['FieldName'];
	                        }
	
	                    } else {
	                        var samplePrefix = getPrefixedAttribute('LineItem__c') + '.' + getPrefixedAttribute('ProductId__r');
	                        temp[i]['statementProduct'] = samplePrefix + '.' + temp[i]['FieldName'];
	                    }
	
	                    temp[i]['targetField'] = {
	                        autocomplete: {
	                            'querySearch': targetFieldSearchForCriteria,
	                            'displayName': 'label',
	                            'selectedItem': {
	                                'value': value,
	                                'label': getConditionFilterLabel(obj['sObjectLabel'], temp[i]['FieldName'], temp[i]['FieldLabel'])
	                            }
	                        }
	                    };
	                }
	            }
	            return obj;
	        }
	
	        /* 
	         * - Extract only statements data from getConstraintRuleDetails API.
	         */
	        function getStatements(stmtObj) {
	            var response = [];
	            if (stmtObj) {
	                for (var i = 0; i < stmtObj.length; i++) {
	                    var temp = {},
	                        selected = {
	                            Name: '',
	                            Id: ''
	                        };
	                    temp.scope = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('ProductScope__c')];
	
	                    if (temp.scope === 'Product') {
	                        temp.product = selected = {
	                            Name: stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('ProductId__r')]['Name'],
	                            Id: stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('ProductId__r')]['Id']
	                        };
	                    } else if (temp.scope === 'Product Family') {
	                        selected = {
	                            Name: stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('ProductFamily__c')],
	                            Id: stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('ProductFamily__c')]
	                        };
	                    } else if (temp.scope === 'Product Group') {
	                        selected = {
	                            Name: stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('ProductGroupId__r')]['Name'],
	                            Id: stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('ProductGroupId__r')]['Id']
	                        };
	                    }
	
	                    temp.name = stmtObj[i].ConstraintRuleActionSO.Name;
	                    temp.label = angular.copy(temp.name);
	                    temp.actionIntent = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('ActionIntent__c')];
	                    temp.actionType = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('ActionType__c')];
	                    temp.getActionTypes = temp.actionType ? {
	                        PicklistValues: getActionIntent(temp.actionType)
	                    } : {
	                        PicklistValues: []
	                    };
	                    temp.id = stmtObj[i].ConstraintRuleActionSO.Id;
	                    temp.matchInAsset = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('MatchInAsset__c')];
	                    temp.matchInCartOptions = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('MatchInCartOptions__c')];
	                    temp.matchInOptions = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('MatchInOptions__c')];
	                    temp.matchInPrimaryLines = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('MatchInPrimaryLines__c')];
	                    temp.minMaxMatchRule = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('IncludeMatchRule__c')];
	                    temp.minProducts = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('IncludeMinProducts__c')];
	                    temp.maxProducts = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('IncludeMaxProducts__c')];
	                    temp.messageType = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('ActionDisposition__c')] || 'Error';
	                    temp.sequence = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('Sequence__c')];
	                    temp.messageDetails = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('Message__c')];
	                    temp.RepeatInclusion = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('RepeatInclusion__c')];
	                    temp.isStatement = true;
	                    temp.autocomplete = {
	                        'querySearch': productSearch,
	                        'displayName': 'Name',
	                        'selectedItem': selected
	                    }
	                    temp.actionCriteria = stmtObj[i].ConstraintRuleActionSO[getPrefixedAttribute('ActionCriteria__c')];
	
	                    response.push(temp);
	                }
	            }
	            return $filter('orderBy')(response, 'sequence');
	        }
	
	        /*
	         * Method to find and get list of product groups
	         */
	        function getAllProductGroups(requestObj) {
	            var deferQ = $q.defer();
	
	            remoteService.getAllProductGroups(requestObj)
	                .then(function(response) {
	                        if (response) {
	                            deferQ.resolve(response);
	                        }
	                    },
	                    function(reason) {
	                        deferQ.reject(reason);
	                    });
	            return deferQ.promise;
	        }
	
	        /* 
	         * Method to get the product structure for currently selected product
	         */
	        function getProductStructure(productId) {
	            var deferQ = $q.defer();
	            var request = {
	                ProductIds: [productId]
	            };
	
	            remoteService.getProductStructure(request)
	                .then(function(response) {
	                        if (response) {
	                            deferQ.resolve(flat2TreeRightPanel(JSON.parse(response.ProductStructureJSONs[0].Value)));
	                        }
	                    },
	                    function(reason) {
	                        deferQ.reject(reason);
	                    });
	            return deferQ.promise;
	        }
	
	        function flat2TreeRightPanel(result) {
	            var map = {},
	                node, roots = [];
	            var nodes = result;
	            for (var i = 0; i < nodes.length; i += 1) {
	                node = nodes[i];
	                node.Name = node.label;
	                node.children = [];
	                map[node.nodeId] = i;
	                if (node.parentId !== "0" && nodes[map[node.parentId]]) {
	                    nodes[map[node.parentId]].children.push(node);
	                } else {
	                    roots.push(node);
	                }
	            }
	            return roots;
	        }
	
	        /*
	         * - These picklist data might come from some API. But till then ,they are hard coded
	         */
	        function getPicklistMetaData() {
	            var defer = $q.defer();
	            $timeout(function() {
	                defer.resolve({
	                    'scope': [{
	                        label: 'Product',
	                        value: 'Product'
	                    }, {
	                        label: 'Product Family',
	                        value: 'Product Family'
	                    }, {
	                        label: 'Product Group',
	                        value: 'Product Group'
	                    }],
	                    'avmScope': [{
	                        label: 'Product',
	                        value: 'Product'
	                    }, {
	                        label: 'Product Family',
	                        value: 'Product Family'
	                    }, {
	                        label: 'Product Group',
	                        value: 'Product Group'
	                    }, {
	                        label: 'Account Location',
	                        value: 'Account Location'
	                    }],
	                    'conditionScope': [{
	                        label: 'Product',
	                        value: 'Product'
	                    }, {
	                        label: 'Product Family',
	                        value: 'Product Family'
	                    }, {
	                        label: 'Product Group',
	                        value: 'Product Group'
	                    }, {
	                        label: 'Product Field Set',
	                        value: 'Product Field Set'
	                    }, {
	                        label: "Product Option Group",
	                        value: "Product Option Group"
	                    }],
	                    'statementScope': [{
	                        label: 'Product',
	                        value: 'Product'
	                    }, {
	                        label: 'Product Family',
	                        value: 'Product Family'
	                    }, {
	                        label: 'Product Group',
	                        value: 'Product Group'
	                    }, {
	                        label: 'Action Criteria',
	                        value: 'Action Criteria'
	                    }],
	                    'operator': [{
	                        label: 'equal to',
	                        value: 'equal to'
	                    }],
	                    'avmOperator': [{
	                        label: 'equal to',
	                        value: 'in'
	                    }],
	                    'actionType': [{
	                        label: 'Inclusion',
	                        value: 'Inclusion'
	                    }, {
	                        label: 'Exclusion',
	                        value: 'Exclusion'
	                    }, {
	                        label: 'Validation',
	                        value: 'Validation'
	                    }, {
	                        label: 'Recommendation',
	                        value: 'Recommendation'
	                    }, {
	                        label: 'Replacement',
	                        value: 'Replacement'
	                    }],
	                    'actionIntent': [{
	                        label: 'Auto Include',
	                        value: 'Auto Include'
	                    }, {
	                        label: 'Prompt',
	                        value: 'Prompt'
	                    }, {
	                        label: 'Show Message',
	                        value: 'Show Message'
	                    }, {
	                        label: 'Check on Finalization',
	                        value: 'Check on Finalization'
	                    }, {
	                        label: 'Disable Selection',
	                        value: 'Disable Selection'
	                    }],
	                    'paActionType': [{
	                        label: 'Allow',
	                        value: 'Allow'
	                    }, {
	                        label: 'Default',
	                        value: 'Default'
	                    }, {
	                        label: 'Hidden',
	                        value: 'Hidden'
	                    }, {
	                        label: 'Disabled',
	                        value: 'Disabled'
	                    }, {
	                        label: 'Required',
	                        value: 'Required'
	                    }, {
	                        label: 'Reset',
	                        value: 'Reset'
	                    }],
	                    'productFamily': [{
	                        value: "Sales Cloud",
	                        label: "Sales Cloud"
	                    }, {
	                        value: "Service Cloud",
	                        label: "Service Cloud"
	                    }, {
	                        value: "Marketing Cloud",
	                        label: "Marketing Cloud"
	                    }],
	                    'contextDisposition': [{
	                        value: "None",
	                        label: "None"
	                    }, {
	                        value: "Warning",
	                        label: "Warning",
	                    }, {
	                        value: "Error",
	                        label: "Error"
	                    }],
	                    'csRuleConditionCriteria': [{
	                        label: 'equal to',
	                        value: 'equal to'
	                    }, {
	                        label: 'not equal to',
	                        value: 'not equal to'
	                    }, {
	                        label: 'starts with',
	                        value: 'starts with'
	                    }, {
	                        label: 'contains',
	                        value: 'contains'
	                    }, {
	                        label: 'does not contain',
	                        value: 'does not contain'
	                    }, {
	                        label: 'less than',
	                        value: 'less than'
	                    }, {
	                        label: 'greater than',
	                        value: 'greater than'
	                    }, {
	                        label: 'less than or equal to',
	                        value: 'less than or equal to'
	                    }, {
	                        label: 'greater than or equal to',
	                        value: 'greater than or equal to'
	                    }, {
	                        label: 'in',
	                        value: 'in'
	                    }, {
	                        label: 'not in',
	                        value: 'not in'
	                    }]
	
	                });
	            }, 0);
	
	            return defer.promise;
	        }
	
	        function getActionIntent(actionType) {
	            var response = [];
	            switch (actionType) {
	                case 'Inclusion':
	                    response = [{
	                        label: 'Auto Include',
	                        value: 'Auto Include'
	                    }, {
	                        label: 'Prompt',
	                        value: 'Prompt'
	                    }, {
	                        label: 'Show Message',
	                        value: 'Show Message'
	                    }, {
	                        label: 'Check on Finalization',
	                        value: 'Check on Finalization'
	                    }];
	                    break;
	                case 'Exclusion':
	                    response = [{
	                        label: 'Prompt',
	                        value: 'Prompt'
	                    }, {
	                        label: 'Show Message',
	                        value: 'Show Message'
	                    }, {
	                        label: 'Check on Finalization',
	                        value: 'Check on Finalization'
	                    }, {
	                        label: 'Disable Selection',
	                        value: 'Disable Selection'
	                    }, {
	                        label: 'Hide',
	                        value: 'Hide'
	                    }];
	                    break;
	                case 'Validation':
	                    response = [{
	                        label: 'Show Message',
	                        value: 'Show Message'
	                    }, {
	                        label: 'Check on Finalization',
	                        value: 'Check on Finalization'
	                    }];
	                    break;
	                case 'Replacement':
	                case 'Recommendation':
	                    response = [{
	                        label: 'Prompt',
	                        value: 'Prompt'
	                    }, {
	                        label: 'Show Message',
	                        value: 'Show Message'
	                    }, {
	                        label: 'Check on Finalization',
	                        value: 'Check on Finalization'
	                    }];
	                    break;
	                default:
	                    response = [{
	                        label: 'Auto Include',
	                        value: 'Auto Include'
	                    }, {
	                        label: 'Prompt',
	                        value: 'Prompt'
	                    }, {
	                        label: 'Show Message',
	                        value: 'Show Message'
	                    }, {
	                        label: 'Check on Finalization',
	                        value: 'Check on Finalization'
	                    }, {
	                        label: 'Disable Selection',
	                        value: 'Disable Selection'
	                    }];
	                    break;
	
	            }
	            return response;
	        }
	
	        function getConditionAssociationTypes() {
	            var response = [];
	
	            response = [{
	                label: 'All',
	                value: 'All'
	            }, {
	                label: 'Custom',
	                value: 'Custom'
	            }];
	
	            return response;
	        }
	
	
	        function getProductFieldOperators() {
	            var response = [];
	
	            response = [{
	                label: 'equal to',
	                value: 'equal to'
	            }, {
	                label: 'not equal to',
	                value: 'not equal to'
	            }, {
	                label: 'starts with',
	                value: 'starts with'
	            }, {
	                label: 'contains',
	                value: 'contains'
	            }, {
	                label: 'does not contain',
	                value: 'does not contain'
	            }];
	
	            return response;
	        }
	
	        /* -------------- Constraint Rule APIs ------------*/
	
	        function isDefined(obj) {
	            return angular.isDefined(obj) && obj !== '' && obj !== null;
	        }
	
	        function isDuplicateEntriesPresent(conditions) {
	            var duplicatePresent = false;
	
	            if (angular.isDefined(conditions)) {
	                var uniqueIds = [];
	                for (var i = 0; i < conditions.length; i++) {
	                    var product = (conditions[i].autocomplete.selectedItem ? conditions[i].autocomplete.selectedItem.Id : '');
	                    if (isDefined(product)) {
	                        if (uniqueIds.indexOf(product) <= -1) {
	                            uniqueIds.push(product);
	                        } else {
	                            duplicatePresent = true;
	                            break;
	                        }
	                    }
	                }
	            }
	            return duplicatePresent;
	        }
	        /*
	         * - Utility method to find out whether all the mandatory fields for conditions and statements are
	         * filled or not.
	         */
	        function isConstraintRuleNotComplete(conditions, statements) {
	            var isValid = false;
	            if (angular.isDefined(conditions)) {
	                for (var i = 0; i < conditions.length; i++) {
	                    var scope = conditions[i].scope,
	                        operator = conditions[i].operator,
	                        product = (conditions[i].autocomplete.selectedItem ? conditions[i].autocomplete.selectedItem.Id : '');
	                    if (isDefined(scope) && scope === 'Product Field Set') {
	                        isValid = true;
	                    } else if (isDefined(scope) && scope !== 'Product Field Set' && isDefined(operator) && isDefined(product)) {
	                        isValid = true;
	                    } else {
	                        isValid = false;
	                    }
	                    if (!isValid) {
	                        break;
	                        return false;
	                    }
	                }
	            } else {
	                isValid = true;
	            }
	            if (isValid) {
	                if (angular.isDefined(statements)) {
	                    for (var i = 0; i < statements.length; i++) {
	                        var actionType = statements[i].actionType,
	                            actionIntent = statements[i].actionIntent,
	                            scope = statements[i].scope,
	                            product;
	                        if (scope) {
	                            product = (statements[i].autocomplete.selectedItem ? statements[i].autocomplete.selectedItem.Id : '');
	                        } else {
	                            product = '';
	                        }
	                        if (scope !== 'Action Criteria') {
	                            if (isDefined(scope) && isDefined(actionType) && isDefined(actionIntent) && isDefined(product)) {
	                                isValid = true;
	                            } else {
	                                isValid = false;
	                            }
	                        } else {
	                            if (isDefined(scope) && isDefined(actionType) && isDefined(actionIntent)) {
	                                isValid = true;
	                            } else {
	                                isValid = false;
	                            }
	                        }
	
	                        if (!isValid) {
	                            break;
	                            return false;
	                        }
	                    }
	                } else {
	                    isValid = true;
	                }
	            }
	
	            if (!isValid && !conditions.length && !statements.length) {
	                isValid = true;
	            }
	
	            return isValid;
	
	        }
	        /*
	         * - Prepare Constraint rule request payload and API call.
	         */
	        function createConstraintRule(request) {
	            var deferQ = $q.defer(),
	                obj = {};
	            obj[getPrefixedAttribute('Sequence__c')] = request.sequence;
	            obj[getPrefixedAttribute('Active__c')] = request.isActive;
	            obj.Name = request.name;
	
	            obj[getPrefixedAttribute('EffectiveDate__c')] = request.effectiveDate;
	            obj[getPrefixedAttribute('ExpirationDate__c')] = request.expirationDate;
	
	            obj[getPrefixedAttribute('IsBundleContext__c')] = request.context;
	            obj[getPrefixedAttribute('Description__c')] = request.description;
	
	            var requestObj = {
	                ConstraintRuleSO: obj,
	                ConstraintRuleActionDOs: []
	            };
	
	            if ($stateParams.id) {
	                requestObj.ConstraintRuleConditionSOs = [{
	                    'Name': request.name.slice(0, 68) + '-Condition-1'
	                }];
	                requestObj.ConstraintRuleConditionSOs[0][getPrefixedAttribute('ProductScope__c')] = 'Product';
	                requestObj.ConstraintRuleConditionSOs[0][getPrefixedAttribute('ProductId__c')] = $stateParams.id;
	                var selectedProduct = productService.getSelectedProduct(),
	                    productType = selectedProduct.configType;
	                if (productType === 'Bundle') {
	                    requestObj.ConstraintRuleConditionSOs[0][getPrefixedAttribute('MatchInPrimaryLines__c')] = true;
	                } else {
	                    requestObj.ConstraintRuleConditionSOs[0][getPrefixedAttribute('MatchInOptions__c')] = true;
	                }
	                requestObj.ConstraintRuleConditionSOs[0][getPrefixedAttribute('Sequence__c')] = 1;
	            }
	
	            remoteService.createConstraintRule(requestObj)
	                .then(function(response) {
	                        deferQ.resolve(response);
	                    },
	                    function(reason) {
	                        deferQ.reject(reason);
	                    });
	            return deferQ.promise;
	        }
	        /*
	         * - Method to extract only rule details from getAllAssociatedConstrainedRules API.
	         * - This data is visible on left side rule list panel
	         */
	        function prepareConstraintRulesList(rulesObj) {
	            var response = [];
	            if (rulesObj) {
	                for (var i = 0; i < rulesObj.length; i++) {
	                    var temp = {};
	                    temp.Name = rulesObj[i].Name;
	                    temp.Id = rulesObj[i].Id;
	                    temp.selected = false;
	                    temp.RuleType = 'ConstraintRule';
	                    response.push(temp);
	                }
	            }
	            return response;
	        }
	
	        /*
	         * Get all rules attached to a product ID. These rules will be part of the
	         * left side rules list.
	         */
	        function getAllAssociatedConstraintRules(productId, searchedStr, chunkNumber, showRulesOfOptions) {
	
	            var deferQ = $q.defer(),
	                requestObj = {
	                    "SearchString": searchedStr || '',
	                    "NumberOfConstraintRulesPerChunk": productConstants.numberOfProductsPerChunk,
	                    "ChunkNumber": chunkNumber || 1,
	                    "IncludeRulesForBundleOptions": showRulesOfOptions || false
	                };
	
	            /*
	             * TODO : Implementation of pagination on UI side.
	             *  - NumberOfConstraintRulesPerChunk value can be read from a configuration file.
	             *  - Once UI pagination is implmented, ChunkNumber value can be dynamically controlled.
	             */
	            let requestPromise;
	            if (_.isEmpty(productId)) {
	                requestPromise = remoteService.getAllConstraintRules(requestObj);
	            } else {
	                requestObj.ProductIds = [productId];
	                requestPromise = remoteService.getAllAssociatedConstraintRules(requestObj);
	            }
	           
	            requestPromise.then(function(response) {
	                        deferQ.resolve(prepareConstraintRulesList(response.ConstraintRuleSOs));
	                    },
	                    function(reason) {
	                        deferQ.reject(reason);
	                    });
	            return deferQ.promise;
	        }
	        /*
	         * - When user selects a constraint rule from left side rule panel list, it makes API
	         * call to load it's details on the center panel.
	         */
	        function getConstraintRuleDetails(constraintRuleId) {
	            var deferQ = $q.defer();
	
	            remoteService.getConstraintRuleDetails(constraintRuleId)
	                .then(function(response) {
	                    /* TODO : Process the data to be usable in central panel, before resolving */
	                    var res = {
	                        conditionsList: getConditions(response.ConstraintRuleConditionSOs),
	                        statementList: getStatements(response.ConstraintRuleActionDOs),
	                        ruleMetadata: getRuleMetadata(response.ConstraintRuleSO)
	                    };
	                    deferQ.resolve(res);
	                }, function(reason) {
	                    //TODO : Show error message to user.
	                    deferQ.reject(reason);
	                });
	
	            return deferQ.promise;
	        }
	        /*
	         * - Prepares the Update Constriant Rule API payload.
	         */
	
	        function isPARuleNotComplete(scopeList, actionList) {
	            var isValid = true;
	            for (var i = 0; i < actionList.length; i++) {
	                var temp = {};
	                if (!actionList[i].actionType) {
	                    isValid = false;
	                    break;
	                }
	                if (!actionList[i].targetField.autocomplete.selectedItem || !actionList[i].targetField.autocomplete.selectedItem.value) {
	                    isValid = false;
	                    break;
	                }
	            }
	            return isValid;
	        }
	
	        function getNextSequence(arr) {
	            var nextSequence,
	                maxSequence,
	                tempSeqArr = [];
	            if (arr && arr.length) {
	                for (var i = 0; i < arr.length; i++) {
	                    if (arr[i].sequence) {
	                        tempSeqArr.push(+arr[i].sequence);
	                    }
	                }
	                if (tempSeqArr.length > 0) {
	                    maxSequence = Math.max.apply(Math, tempSeqArr);;
	                    if (maxSequence) {
	                        nextSequence = maxSequence + 1;
	                    }
	                }
	
	            }
	            return nextSequence || 1;
	        }
	
	        function prepareAnyRule(arr) {
	            var response = '',
	                temp = [];
	            if (arr && arr.length) {
	                for (var i = 0; i < arr.length; i++) {
	                    temp.push(arr[i].sequence);
	                }
	            }
	            response = temp.length ? temp.join(' OR ') : '';
	            return response;
	        }
	
	        function checkAssociation(rule, cnList) {
	            var rightAssociation = true,
	                association = rule.conditionAssociation,
	                associationValue = rule.customCondition;
	            if (association === 'All') {
	                rightAssociation = true;
	            }
	            if (association === 'Custom') {
	                if (associationValue) {
	                    var numbers = [],
	                        temp = associationValue.replace(/[OR AND \( \)]/g, ' ').split(' ');
	                    for (var i = 0; i < temp.length; i++) {
	                        if (!isNaN(parseInt(temp[i]))) {
	                            numbers.push(parseInt(temp[i]));
	                        }
	                    }
	
	                    var sequenceArr = [],
	                        present = true;
	                    for (var i = 0; i < cnList.length; i++) {
	                        sequenceArr.push(cnList[i].sequence);
	                    }
	                    if (numbers.length) {
	                        for (var i = 0; i < numbers.length; i++) {
	                            if (sequenceArr.indexOf(numbers[i]) <= -1) {
	                                present = false;
	                                break;
	                            }
	                        }
	                        rightAssociation = present ? true : false;
	                    }
	                } else {
	                    rightAssociation = false;
	                }
	            }
	            return rightAssociation;
	        }
	
	        function prepareFieldSetObject(productFieldArr) {
	            var response = {},
	                fields = ['A', 'B', 'C', 'D'],
	                present = [],
	                notPresent = [];
	            if (productFieldArr.length > 0) {
	                for (var i = 0; i < productFieldArr.length; i++) {
	                    var type = productFieldArr[i].type;
	                    present.push(type);
	                    response[getPrefixedAttribute('ProductField' + type + '__c')] = productFieldArr[i].name;
	                    response[getPrefixedAttribute('ProductFieldOperator' + type + '__c')] = productFieldArr[i].operator;
	                    response[getPrefixedAttribute('ProductFieldValue' + type + '__c')] = productFieldArr[i].value;
	                }
	                /* Find which is to be next */
	                for (var i = 0; i < fields.length; i++) {
	                    if (present.indexOf(fields[i]) <= -1) {
	                        notPresent.push(fields[i]);
	                    }
	                }
	
	                for (var i = 0; i < notPresent.length; i++) {
	                    response[getPrefixedAttribute('ProductField' + notPresent[i] + '__c')] = '';
	                    response[getPrefixedAttribute('ProductFieldOperator' + notPresent[i] + '__c')] = '';
	                    response[getPrefixedAttribute('ProductFieldValue' + notPresent[i] + '__c')] = '';
	                }
	
	            } else {
	                for (var i = 0; i < fields.length; i++) {
	                    response[getPrefixedAttribute('ProductField' + fields[i] + '__c')] = '';
	                    response[getPrefixedAttribute('ProductFieldOperator' + fields[i] + '__c')] = '';
	                    response[getPrefixedAttribute('ProductFieldValue' + fields[i] + '__c')] = '';
	                }
	            }
	            return response;
	        }
	
	        function prepareConditionCriteria(criteria) {
	            if (angular.isString(criteria)) {
	                criteria = JSON.parse(criteria);
	            }
	            var response;
	            if (criteria) {
	                if (criteria.actionType) {
	                    delete criteria.actionType;
	                }
	                var predicates = criteria.filter.predicates;
	                if (predicates.length > 0) {
	                    for (var i = 0; i < predicates.length; i++) {
	                        var temp = predicates[i];
	                        if (temp.FieldType === 'MULTIPICKLIST') {
	                            if (angular.isArray(temp.FieldValue)) {
	                                temp.FieldValue = temp.FieldValue.join(';');
	                            }
	                        }
	                        if (temp.FieldType === 'BOOLEAN') {
	                            temp.FieldValue = temp.FieldValue.toString();
	                        }
	                        delete temp.picklistValues;
	                        delete temp.hasError;
	                        delete temp.statementProduct;
	                        delete temp.targetField;
	                    }
	                } else {
	                    response = '';
	                }
	            }
	            return response === undefined ? JSON.stringify(criteria, null, ' ') : '';
	        }
	
	        function prepareConstraintRuleRequest(rule, cnList, stmtList) {
	            var requestObj = {
	                ConstraintRuleSO: {},
	                ConstraintRuleConditionSOs: [],
	                ConstraintRuleActionDOs: []
	            };
	            /* requestObj.ConstraintRuleSO obj formation */
	            requestObj.ConstraintRuleSO[getPrefixedAttribute('Sequence__c')] = rule.sequence || '';
	            requestObj.ConstraintRuleSO[getPrefixedAttribute('Active__c')] = rule.isActive || false;
	            requestObj.ConstraintRuleSO.Name = rule.name || '';
	            requestObj.ConstraintRuleSO.Id = rule.id;
	
	            if (rule.conditionAssociation === 'All') {
	                requestObj.ConstraintRuleSO[getPrefixedAttribute('ConditionAssociation__c')] = '';
	            } else if (rule.conditionAssociation === 'Custom') {
	                requestObj.ConstraintRuleSO[getPrefixedAttribute('ConditionAssociation__c')] = rule.customCondition;
	            }
	            requestObj.ConstraintRuleSO[getPrefixedAttribute('EffectiveDate__c')] = rule.effectiveDate;
	            requestObj.ConstraintRuleSO[getPrefixedAttribute('ExpirationDate__c')] = rule.expirationDate;
	            requestObj.ConstraintRuleSO[getPrefixedAttribute('IsBundleContext__c')] = rule.context || false;
	            requestObj.ConstraintRuleSO[getPrefixedAttribute('Description__c')] = rule.description || '';
	
	
	
	            for (var item = 0; item < cnList.length; item++) {
	                var temp = {};
	                temp[getPrefixedAttribute('MatchInCartOptions__c')] = cnList[item].matchInCartOptions;
	                temp[getPrefixedAttribute('MatchInOptions__c')] = cnList[item].matchInOptions;
	                temp[getPrefixedAttribute('MatchInPrimaryLines__c')] = cnList[item].matchInPrimaryLines;
	                temp[getPrefixedAttribute('MatchInRelatedLines__c')] = cnList[item].matchInRelatedLines;
	                temp[getPrefixedAttribute('MatchInLocation__c')] = cnList[item].matchInLocation;
	                temp[getPrefixedAttribute('MatchRule__c')] = cnList[item].matchRule;
	                temp[getPrefixedAttribute('MatchMinProducts__c')] = cnList[item].matchMinProducts;
	                temp[getPrefixedAttribute('MatchMaxProducts__c')] = cnList[item].matchMaxProducts || '';
	                temp[getPrefixedAttribute('ProductScope__c')] = cnList[item].scope;
	                temp.Name = cnList[item].name;
	                temp[getPrefixedAttribute('Sequence__c')] = cnList[item].sequence;
	                temp[getPrefixedAttribute('ProductFieldOperatorA__c')] = cnList[item].operator;
	                if (cnList[item].scope === 'Product') {
	                    temp[getPrefixedAttribute('ProductId__c')] = cnList[item].autocomplete.selectedItem.Id;
	                    temp[getPrefixedAttribute('ProductFamily__c')] = '';
	                    temp[getPrefixedAttribute('ProductGroupId__c')] = '';
	                    temp[getPrefixedAttribute('ProductOptionGroupId__c')] = '';
	                } else if (cnList[item].scope === 'Product Family') {
	                    temp[getPrefixedAttribute('ProductFamily__c')] = cnList[item].autocomplete.selectedItem.Id;
	                    temp[getPrefixedAttribute('ProductId__c')] = '';
	                    temp[getPrefixedAttribute('ProductGroupId__c')] = '';
	                    temp[getPrefixedAttribute('ProductOptionGroupId__c')] = '';
	                } else if (cnList[item].scope === 'Product Group') {
	                    temp[getPrefixedAttribute('ProductGroupId__c')] = cnList[item].autocomplete.selectedItem.Id;
	                    temp[getPrefixedAttribute('ProductId__c')] = '';
	                    temp[getPrefixedAttribute('ProductFamily__c')] = '';
	                    temp[getPrefixedAttribute('ProductOptionGroupId__c')] = '';
	                } else if (cnList[item].scope === 'Product Option Group') {
	                    temp[getPrefixedAttribute('ProductOptionGroupId__c')] = cnList[item].autocomplete.selectedItem.Id;
	                    temp[getPrefixedAttribute('ProductGroupId__c')] = '';
	                    temp[getPrefixedAttribute('ProductId__c')] = '';
	                    temp[getPrefixedAttribute('ProductFamily__c')] = '';
	                } else if (cnList[item].scope === 'Product Field Set') {
	                    var productFieldSetObj = prepareFieldSetObject(cnList[item].productField);
	                    angular.merge(temp, productFieldSetObj);
	                }
	
	                if (cnList[item].id) {
	                    temp['Id'] = cnList[item].id
	                } else {
	                    temp[getPrefixedAttribute('ConstraintRuleId__c')] = rule.id;
	                    temp[getPrefixedAttribute('MatchInOptions__c')] = true;
	                }
	
	                temp[getPrefixedAttribute('ConditionCriteria__c')] = prepareConditionCriteria(angular.copy(cnList[item].conditionCriteria));
	
	                requestObj.ConstraintRuleConditionSOs.push(temp);
	
	            }
	
	            for (var item = 0; item < stmtList.length; item++) {
	                var temp = {};
	                temp[getPrefixedAttribute('ActionIntent__c')] = stmtList[item].actionIntent;
	                temp[getPrefixedAttribute('ActionType__c')] = stmtList[item].actionType;
	                temp[getPrefixedAttribute('MatchInAsset__c')] = stmtList[item].matchInAsset;
	                temp[getPrefixedAttribute('MatchInCartOptions__c')] = stmtList[item].matchInCartOptions;
	                temp[getPrefixedAttribute('MatchInOptions__c')] = stmtList[item].matchInOptions;
	                temp[getPrefixedAttribute('MatchInPrimaryLines__c')] = stmtList[item].matchInPrimaryLines;
	                temp[getPrefixedAttribute('IncludeMinProducts__c')] = stmtList[item].minProducts;
	                temp[getPrefixedAttribute('IncludeMaxProducts__c')] = stmtList[item].maxProducts;
	                temp[getPrefixedAttribute('IncludeMatchRule__c')] = stmtList[item].minMaxMatchRule;
	                temp[getPrefixedAttribute('ProductScope__c')] = stmtList[item].scope;
	                temp[getPrefixedAttribute('RepeatInclusion__c')] = stmtList[item].RepeatInclusion;
	
	                temp.Name = stmtList[item].name;
	
	                if (stmtList[item].scope === 'Product') {
	                    temp[getPrefixedAttribute('ProductId__c')] = stmtList[item].autocomplete.selectedItem.Id;
	                    temp[getPrefixedAttribute('ProductFamily__c')] = '';
	                    temp[getPrefixedAttribute('ProductGroupId__c')] = '';
	                } else if (stmtList[item].scope === 'Product Family') {
	                    temp[getPrefixedAttribute('ProductFamily__c')] = stmtList[item].autocomplete.selectedItem.Id;
	                    temp[getPrefixedAttribute('ProductId__c')] = '';
	                    temp[getPrefixedAttribute('ProductGroupId__c')] = '';
	                } else if (stmtList[item].scope === 'Product Group') {
	                    temp[getPrefixedAttribute('ProductGroupId__c')] = stmtList[item].autocomplete.selectedItem.Id;
	                    temp[getPrefixedAttribute('ProductId__c')] = '';
	                    temp[getPrefixedAttribute('ProductFamily__c')] = '';
	                } 
	
	                temp[getPrefixedAttribute('ActionDisposition__c')] = stmtList[item].messageType;
	                temp[getPrefixedAttribute('Sequence__c')] = stmtList[item].sequence;
	                temp[getPrefixedAttribute('Message__c')] = stmtList[item].messageDetails;
	
	                if (stmtList[item].id) {
	                    temp.Id = stmtList[item].id
	                } else {
	                    temp[getPrefixedAttribute('ConstraintRuleId__c')] = rule.id;
	                }
	
	                temp[getPrefixedAttribute('ActionCriteria__c')] = prepareConditionCriteria(stmtList[item].actionCriteria);
	
	                requestObj.ConstraintRuleActionDOs.push({
	                    ConstraintRuleActionSO: temp,
	                    ConstraintRuleActionExpressionSOs: []
	                });
	
	            }
	
	            return requestObj;
	        }
	        /*
	         * - Makes update constraint rule API call and returns the response if success.
	         */
	        function updateConstraintRule(requestObj) {
	            var deferQ = $q.defer();
	            remoteService.updateConstraintRule(requestObj)
	                .then(function(response) {
	                        deferQ.resolve(response);
	                    },
	                    function(reason) {
	                        deferQ.reject(reason);
	                    });
	            return deferQ.promise;
	        }
	
	        function removeConstraintRules(ruleId) {
	            var requestObj = [],
	                defer = $q.defer();
	            requestObj.push(ruleId);
	            remoteService.removeConstraintRules(requestObj)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function removeConstraintRuleConditions(ConditionId) {
	            var requestObj = [],
	                defer = $q.defer();
	            requestObj.push(ConditionId);
	            remoteService.removeConstraintRuleConditions(requestObj)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function removeConstraintRuleActions(actionId) {
	            var requestObj = [],
	                defer = $q.defer();
	            requestObj.push(actionId);
	            remoteService.removeConstraintRuleActions(requestObj)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	        /* -------------- Product Attribute Rule APIs ------------*/
	
	        function removeConstraintRuleActionExpressions(expressionId) {
	            var requestObj = [],
	                deferQ = $q.defer();
	
	            requestObj.push(expressionId);
	
	            remoteService.removeConstraintRuleActionExpressions(requestObj)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function removeProductAttributeRules(ruleId) {
	            var requestObj = [],
	                deferQ = $q.defer();
	
	            requestObj.push(ruleId);
	
	            remoteService.removeProductAttributeRules(requestObj)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function removeProductAttributeRuleActions(actionId) {
	            var requestObj = [],
	                deferQ = $q.defer();
	
	            requestObj.push(actionId);
	
	            remoteService.removeProductAttributeRuleActions(requestObj)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	        /*
	         * - Prepares name and id of all the PAR items to be shown in left side panel.
	         */
	        function prepareProductAttributeRulesList(rulesObj) {
	            var response = [];
	            if (rulesObj) {
	                for (var i = 0; i < rulesObj.length; i++) {
	                    var temp = {};
	                    temp.Name = rulesObj[i]['Name'];
	                    temp.Id = rulesObj[i]['Id'];
	                    temp.selected = false;
	                    temp.RuleType = 'ProductAttributeRule';
	                    response.push(temp);
	                }
	            }
	            return response;
	        }
	
	        /*
	         * - Gets all the PAR items related to the current product.
	         */
	        function getAllProductAttributeRules(productId, searchedStr, chunkNumber, showRulesOfOptions) {
	
	            var deferQ = $q.defer(),
	                requestObj = {
	                    "SearchString": searchedStr || '',
	                    "NumberOfAttributeRulesPerChunk": productConstants.numberOfProductsPerChunk,
	                    "ChunkNumber": chunkNumber || 1,
	                    "IncludeRulesForBundleOptions": showRulesOfOptions || false
	                };
	
	            let requestPromise;
	            if (_.isEmpty(productId)) {
	                requestPromise = remoteService.getAllProductAttributeRules(requestObj);
	            } else {
	                requestObj.ProductIds = [productId];
	                requestPromise = remoteService.getAllAssociatedProductAttributeRules(requestObj);
	            }
	           
	            requestPromise.then(function(response) {
	                        deferQ.resolve(prepareProductAttributeRulesList(response.AttributeRuleSOs));
	                    },
	                    function(reason) {
	                        deferQ.reject(reason);
	                    });
	            return deferQ.promise;
	        }
	
	        function getLabelFromValue(key) {
	            var deferQ = $q.defer();
	
	            remoteService.getLabelFromValue(key)
	                .then(function(response) {
	                        response.length > 0 ? deferQ.resolve(response[0]) : deferQ.resolve({
	                            label: '',
	                            value: ''
	                        });
	                    },
	                    function(reason) {
	                        deferQ.reject(reason);
	                    });
	            return deferQ.promise;
	        }
	
	        /*
	         * - Extracts only the action items from the PAR item
	         */
	        function getParActions(obj) {
	            var response = [],
	                deferQ = $q.defer();
	
	            if (angular.isArray(obj)) {
	                for (var i = 0; i < obj.length; i++) {
	
	                    var temp = {};
	                    temp.id = obj[i]['Id'];
	                    temp.isActive = obj[i][getPrefixedAttribute('Active__c')] || !obj[i]['IsDeleted'];
	                    temp.name = obj[i]['Name'];
	                    temp.actionType = obj[i][getPrefixedAttribute('Action__c')];
	
	                    temp.targetField = {
	                        autocomplete: {
	                            'querySearch': targetFieldSearch,
	                            'displayName': 'label',
	                            'selectedItem': {
	                                'value': obj[i][getPrefixedAttribute('Field__c')],
	                                'label': obj[i][getPrefixedAttribute('Field__c')]
	                            }
	                        }
	                    };
	
	                    temp.valueExpression = applicationService.updateExpression(true, obj[i][getPrefixedAttribute('ValueExpression__c')]);
	
	                    response.push(temp);
	                }
	
	                var current = 0;
	                if (obj.length > 0) {
	                    for (var i = 0; i < obj.length; i++) {
	                        (function(i) {
	                            getLabelFromValue(obj[i][getPrefixedAttribute('Field__c')])
	                                .then(function(res) {
	                                    current++;
	                                    response[i].targetField = {
	                                        autocomplete: {
	                                            'querySearch': targetFieldSearch,
	                                            'displayName': 'label',
	                                            'selectedItem': {
	                                                'value': res.value,
	                                                'label': truncateIndividualLabel(res.label)
	                                            }
	                                        }
	                                    };
	                                    if (current === obj.length) {
	                                        deferQ.resolve(response);
	                                    }
	                                }, function(reason) {
	                                    current++;
	                                    response[i].targetField = {
	                                        autocomplete: {
	                                            'querySearch': targetFieldSearch,
	                                            'displayName': 'label',
	                                            'selectedItem': {
	                                                'value': reason.value,
	                                                'label': truncateIndividualLabel(reason.label)
	                                            }
	                                        }
	                                    };
	                                    if (current === obj.length) {
	                                        deferQ.resolve(response);
	                                    }
	                                })
	                        })(i);
	                    }
	                } else {
	                    deferQ.resolve([]);
	                }
	
	
	            }
	            return deferQ.promise;
	        }
	
	        /*
	         * - Extract product family, groups and products from the PAR metadata
	         */
	        function getIndividualItems(object) {
	            var response = [],
	                temp = object.split(';');
	
	            response = temp;
	            return response;
	
	        }
	
	        /*
	         * - Extracts the metadata about the PAR item.
	         */
	        function getParMetadata(obj) {
	            var response = {};
	            if (angular.isDefined(obj)) {
	
	                response.id = obj['Id'];
	                response.isActive = obj[getPrefixedAttribute('Active__c')];
	                response.name = obj['Name'];
	                response.productFamilyScope = obj[getPrefixedAttribute('ProductFamilyScope__c')];
	                response.productGroupScope = obj[getPrefixedAttribute('ProductGroupScope__c')];
	                response.effectiveDate = obj[getPrefixedAttribute('EffectiveDate__c')];
	                response.expirationDate = obj[getPrefixedAttribute('ExpirationDate__c')];
	                response.productScope = obj[getPrefixedAttribute('ProductScope__c')];
	                response.createdById = obj.CreatedBy ? (obj.CreatedBy.Name || '') : '';
	                response.CreatedDate = obj.CreatedDate ? (obj.CreatedDate || '') : '';
	                response.lastModifiedById = obj.LastModifiedBy ? (obj.LastModifiedBy.Name || '') : '';
	                response.LastModifiedDate = obj.LastModifiedDate ? (obj.LastModifiedDate || '') : '';
	                response.isPARule = true;
	                response.conditionCriteria = applicationService.updateExpression(true, obj[getPrefixedAttribute('ConditionCriteriaExpression__c')]);
	
	            }
	            return response;
	        }
	
	        /*
	         * -
	         */
	        function getParScopeList(obj, productSo, productGroupSo) {
	            var response = [];
	            if (angular.isDefined(obj)) {
	                response.push({
	                    model: [],
	                    scope: 'Product',
	                    operator: 'equal to',
	                    autocomplete: {
	                        querySearch: rulesService.productSearch,
	                        displayName: 'Name'
	
	                    }
	                });
	                response.push({
	                    model: [],
	                    scope: 'Product Family',
	                    operator: 'equal to',
	                    autocomplete: {
	                        querySearch: rulesService.productSearch,
	                        displayName: 'Name'
	
	                    }
	                });
	                response.push({
	                    model: [],
	                    scope: 'Product Group',
	                    operator: 'equal to',
	                    autocomplete: {
	                        querySearch: rulesService.productSearch,
	                        displayName: 'Name'
	
	                    }
	                });
	
	                var productFamilyScope = obj[getPrefixedAttribute('ProductFamilyScope__c')];
	                var productGroupScope = obj[getPrefixedAttribute('ProductGroupScope__c')];
	                response.isScope = true;
	
	                var productFamilyScopeArr = productFamilyScope ? getIndividualItems(productFamilyScope) : [];
	
	                var tempProductFamily = [];
	                for (var j = 0; j < productFamilyScopeArr.length; j++) {
	                    tempProductFamily.push({
	                        Name: productFamilyScopeArr[j],
	                        Id: productFamilyScopeArr[j]
	                    });
	                }
	                response[0].model = productSo.length > 0 ? productSo : [];
	                response[1].model = tempProductFamily;
	                let tempProductGroup = [];
	                if (productGroupScope === 'All') {
	                    tempProductGroup = [{
	                                            Name : 'All',
	                                            Id : 'All'
	                                        }];
	                }
	                response[2].model = productGroupSo.length > 0 ? productGroupSo : tempProductGroup;
	            }
	            return response;
	        }
	        /*
	         * - Prepares an object for PAR item with extracted actionitems and metadata.
	         */
	        function getProductAttributeRuleDetails(attributeRuleDetailId) {
	            var deferQ = $q.defer();
	
	            remoteService.getProductAttributeRuleDetails(attributeRuleDetailId)
	                .then(function(response) {
	
	                    var actions = [],
	                        res;
	                    getParActions(response.ProductAttributeRuleActionSOs)
	                        .then(function(res) {
	                            actions = res;
	                            res = {
	                                actions: actions,
	                                scopeList: getParScopeList(response.ProductAttributeRuleSO, response.ProductSOsInScope, response.ProductGroupSOsInScope),
	                                ruleMetadata: getParMetadata(response.ProductAttributeRuleSO)
	                            };
	                            deferQ.resolve(res);
	                        }, function(reason) {
	                            deferQ.reject(reason);
	                        });
	                    /* TODO : Process the data to be usable in central panel, before resolving */
	
	
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	
	            return deferQ.promise;
	        }
	
	        function getIds(arr, str) {
	            var ids = [];
	            if (arr.length > 0) {
	                if (arr.length === 1 && arr[0][str] === 'All') {
	                    ids.push('All');
	                } else if (arr.length === 1 && arr[0][str] !== 'All') {
	                    ids.push(arr[0][str]);
	                }
	                if (arr.length > 1) {
	                    for (var i = 0; i < arr.length; i++) {
	                        if (arr[i][str].toLowerCase() !== 'all') {
	                            ids.push(arr[i][str]);
	                        }
	                    }
	                }
	
	            } else {
	                ids.push(null);
	            }
	            return ids;
	        }
	        /*
	         * - Creating request payload for update PAR API.
	         */
	        function prepareProductAttributeRuleRequest(rule, scopeList, actionList) {
	            var obj = {
	                "ProductAttributeRuleSO": {
	                    "Id": "",
	                    "Name": ""
	                },
	                "ProductAttributeRuleActionSOs": []
	            };
	            obj.ProductAttributeRuleSO['Name'] = rule.name;
	            obj.ProductAttributeRuleSO['Id'] = rule.id;
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('ProductScope__c')] = '';
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('Active__c')] = false;
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('ConditionCriteriaExpression__c')] = applicationService.updateExpression(false, rule.conditionCriteria);
	
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('EffectiveDate__c')] = rule.effectiveDate;
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('ExpirationDate__c')] = rule.expirationDate;
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('Active__c')] = rule.isActive;
	            //obj.ProductAttributeRuleSO[getPrefixedAttribute('ProductScope__c')] = $stateParams.id;
	
	            var productScopeArr = [],
	                productFamilyScopeArr = [],
	                productGroupScopeArr = [];
	            for (var i = 0; i < scopeList.length; i++) {
	                if (scopeList[i].scope === 'Product') {
	                    productScopeArr = getIds(scopeList[i].model, 'Id');
	                }
	                if (scopeList[i].scope === 'Product Family') {
	                    productFamilyScopeArr = getIds(scopeList[i].model, 'Id');
	                }
	                if (scopeList[i].scope === 'Product Group') {
	                    productGroupScopeArr = getIds(scopeList[i].model, 'Id');
	                }
	            }
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('ProductScope__c')] = productScopeArr.length > 0 ? productScopeArr.join(';') : '';
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('ProductFamilyScope__c')] = productFamilyScopeArr.length > 0 ? productFamilyScopeArr.join(';') : '';
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('ProductGroupScope__c')] = productGroupScopeArr.length > 0 ? productGroupScopeArr.join(';') : '';
	
	            for (var i = 0; i < actionList.length; i++) {
	                var temp = {};
	                temp['IsDeleted'] = actionList[i].isActive;
	                temp['Name'] = actionList[i].name;
	                temp[getPrefixedAttribute('Action__c')] = actionList[i].actionType;
	                temp[getPrefixedAttribute('Field__c')] = actionList[i].targetField.autocomplete.selectedItem.value;
	                /* TODO : Check if first and last charcters are "'" or not. if not just add them*/
	                var exp = actionList[i].valueExpression,
	                    expFinalValue = '';
	                if (exp) {
	                    var first = exp.charAt(0),
	                        last = exp.charAt(exp.length - 1);
	                    if (first != "'") {
	                        expFinalValue += "'" + exp;
	                    } else {
	                        expFinalValue += exp;
	                    }
	                    if (last != "'") {
	                        expFinalValue += "'";
	                    }
	                }
	                //temp[getPrefixedAttribute('ValueExpression__c')] = expFinalValue;
	                temp[getPrefixedAttribute('ValueExpression__c')] = exp ? applicationService.updateExpression(false, exp) : '';
	
	                if (actionList[i].id) {
	                    temp['Id'] = actionList[i].id;
	                } else {
	                    temp[getPrefixedAttribute('ProductAttributeRuleId__c')] = rule.id;
	                }
	                obj.ProductAttributeRuleActionSOs.push(temp);
	            }
	
	            return obj;
	        }
	
	        /*
	         * - Update API call for PAR item.
	         */
	        function updateProductAttributeRule(requestObj) {
	            var deferQ = $q.defer();
	            remoteService.updateProductAttributeRule(requestObj)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        /*
	         * - Create API call for PAR item
	         */
	        function createProductAttributeRule(request) {
	            var deferQ = $q.defer(),
	                obj = {
	                    "ProductAttributeRuleSO": {
	                        "Name": ""
	                    },
	                    "ProductAttributeRuleActionSOs": []
	                };
	            obj.ProductAttributeRuleSO['Name'] = request.name;
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('ProductScope__c')] = '';
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('Active__c')] = false;
	
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('EffectiveDate__c')] = request.effectiveDate;
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('ExpirationDate__c')] = request.expirationDate;
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('Active__c')] = request.isActive;
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('ProductScope__c')] = $stateParams.id;
	            obj.ProductAttributeRuleActionSOs = [];
	            remoteService.createProductAttributeRule(obj)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function updateConstraintRuleJob(ruleId) {
	            return remoteService.updateConstraintRuleJob(ruleId);
	        }
	
	        function getSObjectPicklistFields(sObjectName, fields) {
	            var defer = $q.defer(),
	                picklistFieldNames;
	            sObjectName = getPrefixedAttribute(sObjectName);
	            if (fields && fields.length) {
	                for (var i = 0; i < fields.length; i++) {
	                    fields[i] = getPrefixedAttribute(fields[i]);
	                }
	                picklistFieldNames = fields;
	            } else {
	                picklistFieldNames = null;
	            }
	            remoteService.getSObjectPicklistFields(sObjectName, picklistFieldNames)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function setProductFieldValues(field, values) {
	            var field = field;
	            switch (field) {
	                case 'A':
	                    {
	                        productFieldA = {
	                            PicklistValues: values
	                        }
	                        break;
	                    }
	                case 'B':
	                    {
	                        productFieldB = {
	                            PicklistValues: values
	                        }
	                        break;
	                    }
	                case 'C':
	                    {
	                        productFieldC = {
	                            PicklistValues: values
	                        }
	                        break;
	                    }
	                case 'D':
	                    {
	                        productFieldD = {
	                            PicklistValues: values
	                        }
	                        break;
	                    }
	            }
	        }
	
	        function getProductFieldValues(field) {
	            var field = field,
	                value;
	            switch (field) {
	                case 'A':
	                    {
	                        value = productFieldA;
	                        break;
	                    }
	                case 'B':
	                    {
	                        value = productFieldB;
	                        break;
	                    }
	                case 'C':
	                    {
	                        value = productFieldC;
	                        break;
	                    }
	                case 'D':
	                    {
	                        value = productFieldD;
	                        break;
	                    }
	            }
	            return value;
	        }
	
	        function getMessageDetails(actionType) {
	            var response = '';
	
	            switch (actionType) {
	                case 'Inclusion':
	                    {
	                        response = labels.RuleInclusionDefaultMessage;
	                        break;
	                    }
	                case 'Exclusion':
	                    {
	                        response = labels.RuleExclusionDefaultMessage;
	                        break;
	                    }
	                case 'Validation':
	                    {
	                        response = labels.RuleValidationDefaultMessage;
	                        break;
	                    }
	                case 'Recommendation':
	                    {
	                        response = labels.RuleRecommendationDefaultMessage;
	                        break;
	                    }
	                case 'Replacement':
	                    {
	                        response = labels.RuleReplacementDefaultMessage;
	                        break;
	                    }
	
	                default:
	                    {
	                        response = '';
	                    }
	            }
	
	            return response;
	        }
	        /**
	         * Gets product details for the given product id.
	         * @param {*} Id The id of the product to get the details for.
	         */
	        function getProductDetails(Id) {
	            return remoteService.getProductDetails(Id, 'Apttus_Config2__ProductDetailFields');
	        }
	
	        function getSampleAvm() {
	            return {
	                name: '',
	                isActive: true,
	                effectiveDate: undefined,
	                expirationDate: undefined,
	                description: '',
	                appType: 'Default',
	                treatNullAsWildCard: false
	            };
	        }
	
	        function prepareCreateAvmRequest(obj) {
	            var response = {
	                "AttributeValueMatrixSO": {},
	                "AttributeFieldNames": [],
	                "AttributeValueMatrixEntrySOs": []
	            };
	
	            if (obj.avm) {
	                var temp = obj.avm;
	                response.AttributeValueMatrixSO['Name'] = temp.name;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('Active__c')] = temp.isActive;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('EffectiveDate__c')] = temp.effectiveDate;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ExpirationDate__c')] = temp.expirationDate;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('Description__c')] = temp.description || '';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ApplicationType__c')] = temp.appType;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('TreatNullAsWildcard__c')] = temp.treatNullAsWildCard;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductScope__c')] = $stateParams.id;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductScopeOper__c')] = 'in';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductFamilyScope__c')] = 'All';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductFamilyScopeOper__c')] = 'in';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductGroupScope__c')] = 'All';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductGroupScopeOper__c')] = 'in';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('AccountScope__c')] = 'All';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('AccountScopeOper__c')] = 'in';
	            }
	
	            if (obj.avmAttributesList.length > 0) {
	                for (var i = 0; i < obj.avmAttributesList.length; i++) {
	                    var temp = obj.avmAttributesList[i].autocomplete.selectedItem;
	                    response.AttributeFieldNames.push(temp.value);
	                }
	            }
	            return response;
	        }
	
	        function prepareUpdateAvmRequest(obj, scopeList, matrixList) {
	            var response = {
	                "AttributeValueMatrixSO": {},
	                "AttributeFieldNamesToAdd": [],
	                "AttributeFieldNamesToRemove": [],
	                "AttributeValueMatrixEntrySOs": []
	            };
	
	            if (obj.avm) {
	                var temp = obj.avm;
	                response.AttributeValueMatrixSO['Name'] = temp.name;
	                response.AttributeValueMatrixSO['Id'] = temp.id;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('Active__c')] = temp.isActive;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('EffectiveDate__c')] = temp.effectiveDate;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ExpirationDate__c')] = temp.expirationDate;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('Description__c')] = temp.description || '';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ApplicationType__c')] = temp.appType;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('TreatNullAsWildcard__c')] = temp.treatNullAsWildCard;
	
	                var productScopeArr = [],
	                    productFamilyScopeArr = [],
	                    productGroupScopeArr = [],
	                    accountLocationScopeArr = [];
	                for (var i = 0; i < scopeList.length; i++) {
	                    if (scopeList[i].scope === 'Product') {
	                        productScopeArr = getIds(scopeList[i].model, 'Id');
	                    }
	                    if (scopeList[i].scope === 'Product Family') {
	                        productFamilyScopeArr = getIds(scopeList[i].model, 'Id');
	                    }
	                    if (scopeList[i].scope === 'Product Group') {
	                        productGroupScopeArr = getIds(scopeList[i].model, 'Id');
	                    }
	                    if (scopeList[i].scope === 'Account Location') {
	                        accountLocationScopeArr = getIds(scopeList[i].model, 'Id');
	                    }
	                }
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductScope__c')] = productScopeArr.length > 0 ? productScopeArr.join(';') : '';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductScopeOper__c')] = 'in';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductFamilyScope__c')] = productFamilyScopeArr.length > 0 ? productFamilyScopeArr.join(';') : '';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductFamilyScopeOper__c')] = 'in';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductGroupScope__c')] = productGroupScopeArr.length > 0 ? productGroupScopeArr.join(';') : '';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductGroupScopeOper__c')] = 'in';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('AccountScope__c')] = accountLocationScopeArr.length > 0 ? accountLocationScopeArr.join(';') : '';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('AccountScopeOper__c')] = 'in';
	            }
	
	            /*if (obj.avmAttributesList && obj.avmAttributesList.length > 0) {
	                for (var i = 0; i < obj.avmAttributesList.length; i++) {
	                    if (obj.avmAttributesList[i].autocomplete) {
	                        var temp = obj.avmAttributesList[i].autocomplete.selectedItem;
	                        response.AttributeFieldNames.push(temp.value);
	                    } else {
	                        response.AttributeFieldNames.push(obj.avmAttributesList[i].field);
	                    }
	                }
	            }*/
	            var currentAttrList = obj.avmAttributesList,
	                attributesToBeRemoved = [],
	                attributesToBeAdded = [];
	
	            if (originalAttributesList.length) {
	                if (currentAttrList.length) {
	                    /* Check for to be added  */
	                    for (var i = 0; i < currentAttrList.length; i++) {
	                        var present = false;
	                        for (var j = 0; j < originalAttributesList.length; j++) {
	                            if (currentAttrList[i].autocomplete) {
	                                if (currentAttrList[i].autocomplete.selectedItem.value === originalAttributesList[j].field) {
	                                    present = true;
	                                    break;
	                                }
	                            } else {
	                                if (currentAttrList[i].field === originalAttributesList[j].field) {
	                                    present = true;
	                                    break;
	                                }
	                            }
	
	                        }
	                        if (!present) {
	                            if (currentAttrList[i].autocomplete) {
	                                attributesToBeAdded.push(currentAttrList[i].autocomplete.selectedItem.value);
	                            } else {
	                                attributesToBeAdded.push(currentAttrList[i].field);
	                            }
	
	                        }
	                    }
	                    /* Check for to be removed  */
	                    for (var i = 0; i < originalAttributesList.length; i++) {
	                        var present = false;
	                        for (var j = 0; j < currentAttrList.length; j++) {
	                            if (currentAttrList[j].autocomplete) {
	                                if (originalAttributesList[i].field === currentAttrList[j].autocomplete.selectedItem.value) {
	                                    present = true;
	                                    break;
	                                }
	                            } else {
	                                if (originalAttributesList[i].field === currentAttrList[j].field) {
	                                    present = true;
	                                    break;
	                                }
	                            }
	                        }
	                        if (!present) {
	                            attributesToBeRemoved.push(originalAttributesList[i].field);
	                        }
	                    }
	                } else {
	                    for (var i = 0; i < originalAttributesList.length; i++) {
	                        attributesToBeRemoved.push(originalAttributesList[i].field);
	                    }
	                }
	
	            } else {
	                if (currentAttrList.length) {
	                    for (var i = 0; i < currentAttrList.length; i++) {
	                        attributesToBeAdded.push(currentAttrList[i].autocomplete.selectedItem.value);
	                    }
	                }
	            }
	            response.AttributeFieldNamesToAdd = attributesToBeAdded;
	            response.AttributeFieldNamesToRemove = attributesToBeRemoved;
	
	            if (matrixList.length > 0) {
	                for (var i = 0; i < matrixList.length; i++) {
	                    angular.forEach(matrixList[i], function(value, key) {
	                        if (value && angular.isArray(value)) {
	                            if (value.length === 0) {
	                                matrixList[i][key] = '';
	                            } else {
	                                matrixList[i][key] = value.join(';');
	                            }
	                        }
	                    });
	                }
	            }
	            response.AttributeValueMatrixEntrySOs = matrixList;
	            return response;
	        }
	
	        function createAvm(requestObj) {
	            var defer = $q.defer(),
	                finalRequestObj;
	            finalRequestObj = prepareCreateAvmRequest(requestObj);
	            remoteService.createAttributeValueMatrix(finalRequestObj)
	                .then(function(response) {
	                    defer.resolve({ metadata: getAVMMetadata(response.AttributeValueMatrixSO) });
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function updateAvm(requestObj, scopeList, matrixList) {
	            var defer = $q.defer(),
	                finalRequestObj;
	            finalRequestObj = prepareUpdateAvmRequest(requestObj, scopeList, matrixList);
	            remoteService.updateAttributeValueMatrix(finalRequestObj)
	                .then(function(response) {
	                    defer.resolve({ metadata: getAVMMetadata(response.AttributeValueMatrixSO) });
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function getAVMMetadata(obj) {
	            var response = {};
	            response.id = obj.Id;
	            response.name = obj.Name;
	            response.isActive = obj[getPrefixedAttribute('Active__c')];
	            response.appType = obj[getPrefixedAttribute('ApplicationType__c')];
	            response.treatNullAsWildCard = obj[getPrefixedAttribute('TreatNullAsWildcard__c')];
	            response.expirationDate = obj[getPrefixedAttribute('ExpirationDate__c')];
	            response.effectiveDate = obj[getPrefixedAttribute('EffectiveDate__c')];
	            response.description = obj[getPrefixedAttribute('Description__c')];
	            response.createdById = obj.CreatedBy ? (obj.CreatedBy.Name || '') : '';
	            response.CreatedDate = obj.CreatedDate ? (obj.CreatedDate || '') : '';
	            response.lastModifiedById = obj.LastModifiedBy ? (obj.LastModifiedBy.Name || '') : '';
	            response.LastModifiedDate = obj.LastModifiedDate ? (obj.LastModifiedDate || '') : '';
	            response.isAVM = true;
	            return response;
	        }
	
	        function getAVMScopeList(obj, productSo, productGroupSo, accountLocationSo) {
	            var response = [];
	            if (angular.isDefined(obj)) {
	                response.push({
	                    model: [],
	                    scope: 'Product',
	                    operator: 'in',
	                    autocomplete: {
	                        querySearch: rulesService.productSearch,
	                        displayName: 'Name'
	                    }
	                });
	                response.push({
	                    model: [],
	                    scope: 'Product Family',
	                    operator: 'in',
	                    autocomplete: {
	                        querySearch: rulesService.productSearch,
	                        displayName: 'Name'
	                    }
	                });
	                response.push({
	                    model: [],
	                    scope: 'Product Group',
	                    operator: 'in',
	                    autocomplete: {
	                        querySearch: rulesService.productSearch,
	                        displayName: 'Name'
	                    }
	                });
	                response.push({
	                    model: [],
	                    scope: 'Account Location',
	                    operator: 'in',
	                    autocomplete: {
	                        querySearch: rulesService.productSearch,
	                        displayName: 'Name'
	                    }
	                });
	
	                var productFamilyScope = obj[getPrefixedAttribute('ProductFamilyScope__c')];
	                var productGroupScope = obj[getPrefixedAttribute('ProductGroupScope__c')];
	                response.isScope = true;
	
	                var productFamilyScopeArr = productFamilyScope ? getIndividualItems(productFamilyScope) : [];
	
	                var tempProductFamily = [];
	                for (var j = 0; j < productFamilyScopeArr.length; j++) {
	                    tempProductFamily.push({
	                        Name: productFamilyScopeArr[j],
	                        Id: productFamilyScopeArr[j]
	                    });
	                }
	                response[0].model = productSo.length > 0 ? productSo : [{
	                    Name: 'All',
	                    Id: 'All'
	                }];
	                response[1].model = tempProductFamily;
	                response[2].model = productGroupSo.length > 0 ? productGroupSo : [{
	                    Name: 'All',
	                    Id: 'All'
	                }];
	
	                var tempAccountLocation = [];
	                response[3].model = accountLocationSo.length > 0 ? accountLocationSo : [{
	                    Name: 'All',
	                    Id: 'All'
	                }];
	            }
	            return response;
	        }
	
	        function getColumnList(obj) {
	            /* Get the column names and values first */
	            var columns = [];
	            if (obj.ProductAttributeGroupDO) {
	                var productAttributeDOs = obj.ProductAttributeGroupDO.ProductAttributeDOs;
	                for (var i = 0; i < productAttributeDOs.length; i++) {
	                    var temp = productAttributeDOs[i];
	                    columns.push({
	                        name: temp.AttributeFieldLabel,
	                        type: temp.FieldType ? temp.FieldType : 'PICKLIST',
	                        field: temp.ProductAttributeSO[getPrefixedAttribute('Field__c')],
	                        picklistEntries: { PicklistValues: temp.PicklistValues }
	                    });
	                }
	            }
	            return columns;
	        }
	
	        function prepareAttributeValueMatrixEntrySOs(obj, fieldTypeMapping) {
	            for (var i = 0; i < obj.length; i++) {
	                angular.forEach(obj[i], function(value, key) {
	                    var fieldType = fieldTypeMapping[key];
	                    if (fieldType === 'MULTIPICKLIST') {
	                        obj[i][key] = value.split(';');
	                    }
	                });
	            }
	            return obj;
	        }
	
	        function getFieldTypeMapping(columns) {
	            var result = {};
	            if (columns.length > 0) {
	                for (var i = 0; i < columns.length; i++) {
	                    var finalKey, finalValue;
	                    angular.forEach(columns[i], function(value, key) {
	                        if (key === 'field') {
	                            finalKey = value;
	                        }
	                        if (key === 'type') {
	                            finalValue = value;
	                        }
	                    });
	                    if (finalKey && finalValue) {
	                        result[finalKey] = finalValue;
	                    }
	                }
	            }
	            return result;
	        }
	
	        function loadAttributeValueMatrixRuleDetails(avmId, chunkNumber, numberOfEntriesPerChunk) {
	            var defer = $q.defer(),
	                requestObj = {
	                    "AttributeValueMatrixId": avmId,
	                    "ChunkNumber": chunkNumber || 1,
	                    "NumberOfEntriesPerChunk": numberOfEntriesPerChunk || productConstants.treePanelItemsPerChunk
	                };
	            remoteService.getAttributeValueMatrixDetails2(requestObj)
	                .then(function(response) {
	                    var columns = getColumnList(response),
	                        fieldTypeMapping = getFieldTypeMapping(columns);
	                    defer.resolve({
	                        metadata: getAVMMetadata(response.AttributeValueMatrixSO),
	                        scopeList: getAVMScopeList(response.AttributeValueMatrixSO, response.ProductSOsInScope, response.ProductGroupSOsInScope, response.AccountLocationSOsInScope),
	                        matrixList: prepareAttributeValueMatrixEntrySOs(response.AttributeValueMatrixEntrySOs, fieldTypeMapping),
	                        columnList: columns
	                    });
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function getAVMAttributes(searchText) {
	            var defer = $q.defer(),
	                thirdParam = '';
	
	            /* TODO : get all other previuos selected items to an array */
	            if (avmPopupAttributesList.length > 0) {
	                var temp = [];
	                for (var i = 0; i < avmPopupAttributesList.length; i++) {
	                    temp.push(avmPopupAttributesList[i].value);
	                }
	                thirdParam = temp.join(';');
	            }
	
	            remoteService.searchMatrixEntryAttributes(searchText, '', thirdParam)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	
	        }
	
	        function setAVMPopupAttributesList(list) {
	            avmPopupAttributesList = [];
	            if (list.length > 0) {
	                var tempList = [];
	                for (var i = 0; i < list.length; i++) {
	                    if (list[i].autocomplete.selectedItem) {
	                        tempList.push(list[i].autocomplete.selectedItem);
	                    }
	                }
	                avmPopupAttributesList = tempList;
	            }
	        }
	
	        function prepareAttributeValueMatricesList(rulesObj) {
	            var response = [];
	            if (rulesObj) {
	                for (var i = 0; i < rulesObj.length; i++) {
	                    var temp = {};
	                    temp.Name = rulesObj[i]['Name'];
	                    temp.Id = rulesObj[i]['Id'];
	                    temp.selected = false;
	                    temp.RuleType = 'AttributeValueMatrix';
	                    response.push(temp);
	                }
	            }
	            return response;
	        }
	
	        function getAllAssociatedAttributeValueMatrices(productId, searchStr, chunkNumber, showRulesOfOptions) {
	
	            var requestObj = {
	                "SearchString": searchStr || '',
	                "NumberOfRecordsPerChunk": productConstants.numberOfProductsPerChunk,
	                "ChunkNumber": chunkNumber || 1,
	                "IncludeRulesForBundleOptions": showRulesOfOptions || false
	            };
	
	            let requestPromise;
	            if (_.isEmpty(productId) || _.isEmpty($stateParams.id)) {
	                requestPromise = remoteService.getAllAttributeValueMatrices(requestObj);
	            } else {
	                requestObj.ProductId = productId || $stateParams.id;
	                requestPromise = remoteService.getAllAssociatedAttributeValueMatrices(requestObj);
	            }
	
	            var defer = $q.defer();
	            
	            requestPromise.then(function(response) {
	                    defer.resolve(prepareAttributeValueMatricesList(response.AttributeValueMatrixSOs));
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	
	            return defer.promise;
	        }
	
	        function removeAttributeValueMatrix(avmId) {
	            var defer = $q.defer();
	            remoteService.deleteAttributeValueMatrices([avmId])
	                .then(function(response) {
	                    defer.resolve(true);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	
	            return defer.promise;
	        }
	
	        function removeAttributeMatrixEntries(avmId) {
	            var defer = $q.defer();
	            remoteService.deleteAttributeValueMatrixEntries([avmId])
	                .then(function(response) {
	                    defer.resolve(true);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	
	            return defer.promise;
	        }
	
	        function getAllRules(productId, searchStr, chunkNumber, showRulesOfOptions) {
	            var requestObj = {
	                "SearchString": searchStr || '',
	                "NumberOfRecordsPerChunk": productConstants.numberOfProductsPerChunk,
	                "ChunkNumber": chunkNumber || 1,
	                "IncludeRulesForBundleOptions": showRulesOfOptions || false
	            };
	
	            let requestPromise;
	            if (_.isEmpty(productId) || _.isEmpty($stateParams.id)) {
	                requestPromise = remoteService.getAllRules(requestObj);
	            } else {
	                requestObj.ProductId = productId || $stateParams.id;
	                requestPromise = remoteService.getAllRulesForProduct(requestObj);
	            }
	
	            var defer = $q.defer();
	            requestPromise.then(function (response) {
	                defer.resolve(response.GenericRuleDOs);
	            }, function (reason) {
	                defer.reject(reason);
	            });
	
	            return defer.promise;
	        }
	
	        function setAllConstraintRuleConditionPicklists(items) {
	            allConstraintRuleConditionPicklists = items;
	        }
	
	        function setAllConstraintRuleActionPicklists(items) {
	            allConstraintRuleActionPicklists = items;
	        }
	
	        function getConstraintRuleConditionPicklistValues(type) {
	            var response = [];
	            if (allConstraintRuleConditionPicklists.length && type) {
	                for (var i = 0; i < allConstraintRuleConditionPicklists.length; i++) {
	                    if (allConstraintRuleConditionPicklists[i].FieldName === getPrefixedAttribute(type)) {
	                        response = allConstraintRuleConditionPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            return response;
	        }
	
	        function getConstraintRuleActionPicklistValues(type) {
	            var response = [];
	            if (allConstraintRuleActionPicklists.length && type) {
	                for (var i = 0; i < allConstraintRuleActionPicklists.length; i++) {
	                    if (allConstraintRuleActionPicklists[i].FieldName === getPrefixedAttribute(type)) {
	                        response = allConstraintRuleActionPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            return response;
	        }
	
	        function setOriginalAttributesList(items) {
	            originalAttributesList = items;
	        }
	
	        function getOriginalAttributesList(items) {
	            return originalAttributesList;
	        }
	
	        function cloneConstraintRule(id, name) {
	            var defer = $q.defer();
	            remoteService.cloneConstraintRule(id, name)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	
	            return defer.promise;
	        }
	
	        function getMatchingPicklistValues(obj, searchText) {
	            var response = [];
	            if (obj && obj.length > 0) {
	                for (var i = 0; i < obj.length; i++) {
	                    var temp = obj[i],
	                        label = temp.label,
	                        secondPart = '';
	                    if (label && label.split(':').length > 1) {
	                        secondPart = label.split(':')[1];
	                    }
	                    if (secondPart && secondPart.trim() === searchText) {
	                        response = temp.picklistValues || [];
	                        break;
	                    }
	
	                }
	            }
	            return response;
	        }
	
	        var rulesService = {
	            /* All Rules */
	            getAllRules: getAllRules,
	
	            /* Constraint Rule APIs */
	            getAllAssociatedConstraintRules: getAllAssociatedConstraintRules,
	            getConstraintRuleDetails: getConstraintRuleDetails,
	            updateConstraintRule: updateConstraintRule,
	            createConstraintRule: createConstraintRule,
	            prepareConstraintRuleRequest: prepareConstraintRuleRequest,
	            removeConstraintRules: removeConstraintRules,
	            removeConstraintRuleConditions: removeConstraintRuleConditions,
	            removeConstraintRuleActions: removeConstraintRuleActions,
	            removeConstraintRuleActionExpressions: removeConstraintRuleActionExpressions,
	            isConstraintRuleNotComplete: isConstraintRuleNotComplete,
	            getRuleMetadata: getRuleMetadata,
	            getConditionAssociationTypes: getConditionAssociationTypes,
	            getNextSequence: getNextSequence,
	            checkAssociation: checkAssociation,
	            getProductFieldOperators: getProductFieldOperators,
	            setProductFieldValues: setProductFieldValues,
	            getProductFieldValues: getProductFieldValues,
	            setAllConstraintRuleConditionPicklists: setAllConstraintRuleConditionPicklists,
	            setAllConstraintRuleActionPicklists: setAllConstraintRuleActionPicklists,
	            getConstraintRuleConditionPicklistValues: getConstraintRuleConditionPicklistValues,
	            getConstraintRuleActionPicklistValues: getConstraintRuleActionPicklistValues,
	            isDuplicateEntriesPresent: isDuplicateEntriesPresent,
	            cloneConstraintRule: cloneConstraintRule,
	            getMatchingPicklistValues: getMatchingPicklistValues,
	            getConditionFilterLabel: getConditionFilterLabel,
	
	            /* Product Attribute Rule APIs */
	            getAllProductAttributeRules: getAllProductAttributeRules,
	            getProductAttributeRuleDetails: getProductAttributeRuleDetails,
	            updateProductAttributeRule: updateProductAttributeRule,
	            createProductAttributeRule: createProductAttributeRule,
	            prepareProductAttributeRuleRequest: prepareProductAttributeRuleRequest,
	            getLabelFromValue: getLabelFromValue,
	            isPARuleNotComplete: isPARuleNotComplete,
	            getActionIntent: getActionIntent,
	            removeProductAttributeRules: removeProductAttributeRules,
	            removeProductAttributeRuleActions: removeProductAttributeRuleActions,
	            targetFieldSearch: targetFieldSearch,
	            targetFieldSearchForCriteria: targetFieldSearchForCriteria,
	            targetFieldSearchForActionCriteria: targetFieldSearchForActionCriteria,
	
	            /* Attribute Value Matrix APIs */
	            getSampleAvm: getSampleAvm,
	            createAvm: createAvm,
	            updateAvm: updateAvm,
	            loadAttributeValueMatrixRuleDetails: loadAttributeValueMatrixRuleDetails,
	            getAVMAttributes: getAVMAttributes,
	            setAVMPopupAttributesList: setAVMPopupAttributesList,
	            getAllAssociatedAttributeValueMatrices: getAllAssociatedAttributeValueMatrices,
	            removeAttributeValueMatrix: removeAttributeValueMatrix,
	            removeAttributeMatrixEntries: removeAttributeMatrixEntries,
	            setOriginalAttributesList: setOriginalAttributesList,
	            getOriginalAttributesList: getOriginalAttributesList,
	
	            /* Common utility methods */
	            getProductStructure: getProductStructure,
	            getAllProductGroups: getAllProductGroups,
	            getPicklistMetaData: getPicklistMetaData,
	            getPrefixedAttribute: getPrefixedAttribute,
	            checkIfNewRulePresent: checkIfNewRulePresent,
	            productSearch: productSearch,
	            productFamilySearch: productFamilySearch,
	            productGroupSearch: productGroupSearch,
	            productSearchByName: productSearchByName,
	            getSObjectPicklistFields: getSObjectPicklistFields,
	            getMessageDetails: getMessageDetails,
	            getProductDetails: getProductDetails,
	            getFilters: getFilters,
	            setFilters: setFilters,
	
	            /* Maintenance Job */
	            updateConstraintRuleJob: updateConstraintRuleJob
	
	
	        };
	
	        return rulesService;
	    };
	
	    productRulesService.$inject = ['$q',
	        '$timeout',
	        '$stateParams',
	        '$filter',
	        'remoteService',
	        'systemConstants',
	        'moment',
	        'applicationService',
	        'listService',
	        'productConstants',
	        'cpqAdminConstants',
	        'productService',
	        'i18nService',
	        'lodash'
	    ];
	
	    module.exports = productRulesService;
	})();


/***/ }),
/* 440 */
372,
/* 441 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"product-main-Container\" ng-if=\"vm.isManageRules\">\n    <div class=\"product-header title-bar\">\n        <div class=\"product-title-container title\">\n            <div class=\"product-info\" href=\"#\" title=\"{{vm.labels.ManageRules}}\">\n                <i class=\"fa fa-image\" ng-if=\"!vm.selectedProduct.icon\"></i>\n                <img ng-src=\"{{'/servlet/servlet.FileDownload?file='+vm.selectedProduct.iconId}}\" alt=\"Icon\" ng-if=\"vm.selectedProduct.iconId\" />\n                <span class=\"title\">{{vm.labels.ManageRules}}</span>\n            </div>\n        </div>\n        <div id=\"navbar\">\n            <!-- Product menu bar with its values -->\n            <ul class=\"nav navbar-nav navbar-right\">\n                <div class=\"list-product-btn\">\n                    <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabFirstMenu)\" data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                    <div class=\"drop drop-menu\" data-ng-if=\"vm.tabMenuItems.length > 0\">\n                        <md-menu md-position-mode=\"target-right target\" md-offset=\"100 50\">\n                            <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                <i class=\"material-icons\">more_vert</i>\n                            </button>\n                            <md-menu-content class=\"product-tab-menu\">\n                                <md-menu-item data-ng-repeat=\"menu in vm.tabMenuItems\">\n                                    <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                        <div layout=\"row\" flex>\n                                            <p flex>{{menu}}</p>\n                                        </div>\n                                    </md-button>\n                                </md-menu-item>\n                            </md-menu-content>\n                        </md-menu>\n                    </div>\n                </div>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n</div>\n\n<div class=\"sub-page-container\">\n    <div class=\"rule-page\" data-ng-class=\"vm.isRightPanelVisible?'ruleSlideRight-tree-panel':'ruleSlideLeft-tree-panel'\">\n        <div class=\"left-tree tree-view left-panel\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <div class=\"rule-left-container\">\n                <header>\n                    <h4>{{vm.labels.Rules}}</h4>\n                    <div class=\"button-container\">\n                        <md-button class=\"md-raised rules-icon-button icon-button\" data-ng-class=\"{'active': vm.linkClicked === true}\" title=\"Constraint Rule\" data-ng-click=\"vm.filterRulesBy('ConstraintRule');\" aria-label=\"Constraint Rule\">\n                            <md-icon><i class=\"fa fa-link\"></i></md-icon>\n                        </md-button>\n                        <md-button class=\"md-raised rules-icon-button icon-button\" data-ng-class=\"{'active': vm.slidersClicked === true}\" title=\"Product Attribute Rule\" data-ng-click=\"vm.filterRulesBy('ProductAttributeRule');\" aria-label=\"Product Attribute Rule\">\n                            <md-icon><i class=\"fa fa-sliders\"></i></md-icon>\n                        </md-button>\n                        <md-button class=\"md-raised rules-icon-button icon-button\" data-ng-class=\"{'active': vm.tableClicked === true}\" title=\"Attribute Value Matrix\" data-ng-click=\"vm.filterRulesBy('AttributeValueMatrix');\" aria-label=\"Attribute Value Matrix\">\n                            <md-icon><i class=\"fa fa-table\"></i></md-icon>\n                        </md-button>\n                    </div>\n                    <div class=\"search\">\n                        <material-form-field model=\"vm.showRulesForOptions\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.ShowRulesForOptions\" show-inline=\"true\" ng-if=\"vm.showRulesForOptionsField === true\">\n                        </material-form-field>\n                        <form ng-submit=\"vm.searchRule();\" novalidate>\n                            <div class=\"search-input-container\">\n                                <div class=\"input-group\">\n                                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchedStr\" name=\"searchText\" required>\n                                    <label class=\"ng-binding\">Search</label>\n                                </div>\n                            </div>\n                        </form>\n                        <div class=\"clearfix\"></div>\n                    </div>\n                </header>\n                <div class=\"left-main-container\">\n                    <div class=\"left-rule-group\">\n                        <div class=\"block-container\">\n                            <div class=\"rules-list-container\">\n                                <div class=\"rulelListPanel\">\n                                    <div class=\"list-table\">\n                                        <div data-ng-if=\"vm.isMaxSQLSizeExceed !== true && vm.noRecords\" class=\"search-result\">\n                                            {{vm.labels.NoMatchingRule}} <span><b>{{vm.searchStr}}</b></span>\n                                        </div>\n                                        <div data-ng-if=\"vm.isMaxSQLSizeExceed === true && !vm.noRecords\" class=\"search-result\">\n                                            {{vm.labels.MaxSQLSizeExceedMessage}}\n                                        </div>\n                                        <table data-ng-if=\"!vm.noRecords\">\n                                            <tbody>\n                                                <tr ng-repeat=\"rule in vm.appliedRules track by $index\" ng-click=\"vm.saveAndLoadDetails(rule)\" ng-class=\"rule.selected === true ? 'selected':''\" title=\"{{ rule.Name }}\">\n                                                    <td>\n                                                        <i class=\"fa fa-sliders\" aria-hidden=\"true\" data-ng-if=\"rule.RuleType === 'ProductAttributeRule'\"></i>\n                                                        <i class=\"fa fa-link\" aria-hidden=\"true\" data-ng-if=\"rule.RuleType === 'ConstraintRule'\"></i>\n                                                        <i class=\"fa fa-table\" aria-hidden=\"true\" data-ng-if=\"rule.RuleType === 'AttributeValueMatrix'\"></i> {{ rule.Name }}\n                                                    </td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"pagination product-details-list-pagination\">\n                    <div class=\"next-prev\">\n                        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getRules('previous')\">\n                            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n                        </button>\n                        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getRules('next')\">\n                            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <!-- Left side panel ends here -->\n        <div class=\"rule-container\">\n            <div class=\"rule-panels\">\n                <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n                <div class=\"fixingHeaderRules fixingHeaderRules-cs\" data-ng-if=\"vm.typeOfRuleSelected === 'constraint'\">\n                    <div class=\"remove-rule remove-rule-cs\"></div>\n                    <div class=\"flex-3 rule-name\">{{vm.labels.RuleName}}</div>\n                    <div class=\"flex-1\">{{vm.labels.Sequence}}</div>\n                    <div class=\"flex-1\">{{vm.labels.EffectiveDate}}</div>\n                    <div class=\"flex-2\">{{vm.labels.ExpirationDate}}</div>\n                    <div class=\"flex-1\">{{vm.labels.Context}}</div>\n                    <div class=\"flex-1\">{{vm.labels.Active}}</div>\n                    <div class=\"flex-3\">{{vm.labels.Description}}</div>\n                </div>\n                <div class=\"fixingHeaderRules\" data-ng-if=\"vm.typeOfRuleSelected === 'productAttribute'\">\n                    <div class=\"remove-rule\"></div>\n                    <div class=\"flex-3 rule-name\">{{vm.labels.RuleName}}</div>\n                    <div class=\"flex-1\">{{vm.labels.Active}}</div>\n                    <div class=\"flex-2\">{{vm.labels.EffectiveDate}}</div>\n                    <div class=\"flex-2\">{{vm.labels.ExpirationDate}}</div>\n                </div>\n                <div class=\"fixingHeaderRules\" data-ng-if=\"vm.typeOfRuleSelected === 'attributeValueMatrix'\">\n                    <div class=\"remove-rule\"></div>\n                    <div class=\"flex-3 rule-name\">{{vm.labels.RuleName}}</div>\n                    <div class=\"flex-1\">{{vm.labels.EffectiveDate}}</div>\n                    <div class=\"flex-2\">{{vm.labels.ExpirationDate}}</div>\n                    <div class=\"flex-1\">{{vm.labels.Active}}</div>\n                    <div class=\"flex-3\">{{vm.labels.Description}}</div>\n                </div>\n                <div class=\"dropzone\">\n                    <div ng-include=\"'constraint-rule-container.html'\" data-ng-if=\"vm.typeOfRuleSelected === 'constraint'\"></div>\n                    <div ng-include=\"'product-attribute-rule-container.html'\" data-ng-if=\"vm.typeOfRuleSelected === 'productAttribute'\"></div>\n                    <div ng-include=\"'attribute-value-matrix-container.html'\" data-ng-if=\"vm.typeOfRuleSelected === 'attributeValueMatrix'\"></div>\n                </div>\n            </div>\n            <div class=\"rules-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToDetailsPage()\">Cancel</a>\n                    <button class=\"slds-button slds-button_brand\" data-ng-disabled=\"vm.disableSaveBtn\" data-ng-click=\"vm.explicitPageSave()\">Save</button>\n                </div>\n            </div>\n        </div>\n        <div class=\"treePanelToSlide\" ng-click=\"vm.isRightPanelVisible=false\" data-ng-if=\"vm.typeOfRuleSelected === 'constraint' && !vm.isManageRules\">\n            <i class=\"material-icons\">keyboard_arrow_left</i>\n        </div>\n        <div class=\"rule-tree-panel\" data-ng-if=\"vm.typeOfRuleSelected === 'constraint'\">\n            <div class=\"tree-title\">\n                <header>\n                    <i class=\"material-icons pull-right\" data-ng-click=\"vm.isRightPanelVisible=true\" aria-hidden=\"true\" role=\"button\" tabindex=\"0\">clear</i>\n                    <h4>{{vm.rulesHeader}}</h4>\n                    <div class=\"search\">\n                        <form ng-submit=\"vm.searchProductStructureOrGroup()\" novalidate>\n                            <div class=\"search-input-container\">\n                                <div class=\"input-group\">\n                                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required drop-disable>\n                                    <label class=\"ng-binding\">Search</label>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <material-form-field model=\"vm.options[0].value\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.options[0]\">\n                    </material-form-field>\n                </header>\n            </div>\n            <div class=\"clearfix\"></div>\n            <div data-ng-if=\"vm.rulesTreeList.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{vm.labels.NoMatchingRecords}} <span><b>{{vm.searchText}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.rulesTreeList.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <tree-container data=\"vm.rulesTreeList\" header-text=\"vm.rulesHeader\" page-type='vm.type' node-children=\"vm.nodeChildren\" tooltip-field=\"vm.tooltipField\" node-label=\"vm.nodeLabel\" enable-detail-panel=\"true\" options=\"vm.options\" search=\"vm.search\"></tree-container>\n        </div>\n    </div>\n    <div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\n    </div>\n    <div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n        <div class=\"modalOverlay\">\n            <div class=\"modalHeaderBody\">\n                <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n                <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n                <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n                <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n            </div>\n            <div class=\"modal-Footer text-right\">\n                <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\n                    <span class=\"modal-TextColor\">{{vm.labels.Cancel}}</span>\n                </button>\n                <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\n                    <span class=\"modal-TextColor\">{{vm.labels.Ok}}</span>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    var productRulesController = function($q, $mdDialog, $mdMedia, $scope, $filter, $templateCache, $state, $stateParams, rulesService, picklistMetaData, productStructureTree, applicationService, i18nService, cpqAdminConstants, allConstraintRuleConditionPicklists, allConstraintRuleActionPicklists, statementProductAttributes, allRules, productConstants, applicationTypeValues, productService, productDetails, systemConstants, rulesStateConstants) {
	        $templateCache.put('constraint-rule-container.html', __webpack_require__(443));
	        $templateCache.put('constraint-rule-conditions.html', __webpack_require__(444));
	        $templateCache.put('constraint-rule-statements.html', __webpack_require__(445));
	        $templateCache.put('product-attribute-rule-container.html', __webpack_require__(446));
	        $templateCache.put('product-attribute-rule-scope.html', __webpack_require__(447));
	        $templateCache.put('product-attribute-rule-actions.html', __webpack_require__(448));
	        $templateCache.put('attribute-value-matrix-container.html', __webpack_require__(449));
	        $templateCache.put('avm-conditions.html', __webpack_require__(450));
	        $templateCache.put('avm-statements.html', __webpack_require__(451));
	
	        var vm = this,
	            matrixPageNo = 0,
	            noOfRowsPerPage = productConstants.treePanelItemsPerChunk,
	            newlyAddedAttributes = [],
	            toBeRemovedAttributes = [];
	        vm.labels = i18nService.CustomLabel;
	        vm.isRightPanelVisible = true;
	        vm.typeOfRuleSelected = 'none';
	        vm.avms = [];
	        vm.allRules = allRules;
	        vm.appliedRules = allRules;
	        checkNoRecordsWarning();
	        vm.numberOfProductsPerChunk = productConstants.treePanelItemsPerChunk;
	        vm.showRulesForOptionsField = false;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.disableSaveBtn = false;
	        vm.isCancelClicked = false;
	
	        /* Manage Rules Section */
	        vm.title = vm.labels.ManageRules;
	        vm.tabFirstMenu = vm.labels.NewConstraintRule;
	        vm.tabMenuItems = [vm.labels.NewProductAttributeRule, vm.labels.NewAttributeValueMatrix];
	        vm.tabMenuClicked = function (menuName) {
	            const eventName = menuName.split(" ").join("-");
	            $scope.$broadcast(eventName);
	        };
	
	        vm.isManageRules = false;
	        let productId = $stateParams.id;
	        if ($state.current.name === rulesStateConstants.manageRules) {
	            vm.isManageRules = true;
	            productId = '';
	        }
	
	        if (!vm.isManageRules) {
	            productService.updateState(productId);
	        }
	
	        vm.disableLeftBtn = true;
	        rulesService.setAllConstraintRuleConditionPicklists(allConstraintRuleConditionPicklists);
	        rulesService.setAllConstraintRuleActionPicklists(allConstraintRuleActionPicklists);
	        vm.avmScopeList = [{
	            scope: 'Product',
	            autocomplete: {
	                querySearch: rulesService.productSearch,
	                displayName: 'Name'
	
	            }
	        }, {
	            scope: 'Product Family',
	            autocomplete: {
	                querySearch: rulesService.productSearch,
	                displayName: 'Name'
	
	            }
	        }, {
	            scope: 'Product Group',
	            autocomplete: {
	                querySearch: rulesService.productSearch,
	                displayName: 'Name'
	
	            }
	        }, {
	            scope: 'Account Location',
	            autocomplete: {
	                querySearch: rulesService.productSearch,
	                displayName: 'Name'
	
	            }
	        }];
	        vm.avmAttributesList = [];
	        vm.matrixList = [];
	
	        const filters = rulesService.getFilters();
	        // Call the product rule service and get the values
	        rulesService.getFilters();
	        // Initialize filter variables
	        vm.linkClicked = filters.linkClicked;
	        vm.slidersClicked = filters.slidersClicked;
	        vm.tableClicked = filters.tableClicked;
	        vm.showRulesForOptions = filters.showRulesForOptions;
	        // List of conditions that have loaded product details used for showing on tooltip.
	        let loadedTooltipsForConditions = [];
	        // List of statements that have loaded product details used for showing on tooltip.
	        let loadedTooltipsForStatements = [];
	
	        /**
	         * Every time the filter values change the product rule service will be be updated.
	         */
	        function saveFilters() {
	            rulesService.setFilters({
	                linkClicked: vm.linkClicked,
	                slidersClicked: vm.slidersClicked,
	                tableClicked: vm.tableClicked,
	                showRulesForOptions: vm.showRulesForOptions
	            });
	        }
	
	        vm.expandCollapse = function() {
	            vm.isRightPanelVisible = true;
	        }
	
	        /**
	         * Loads the full product details for the given selected item.
	         * @param {*} item The item in the list of constraints that contains the product autocomplete field's current selection.
	         */
	        vm.loadProductDetails = function(item) {
	            rulesService.getProductDetails(item.autocomplete.selectedItem.Id)
	            .then(response => {
	                item.autocomplete.selectedItem = response.ProductSO;
	            });
	        }
	
	        /**
	         * Checks if the item in the list of conditions has already loaded product details.
	         * If it hasn't then makes an api call to fetch details.
	         * @param {*} item The item in the list of conditions that contains the product autocomplete field's current selection.
	         */
	        vm.checkTooltipForConditions = function(item) {
	            if (!loadedTooltipsForConditions.includes(item.id) || !vm.selectedItemHasDetails(item)) {
	                vm.loadProductDetails(item);
	                loadedTooltipsForConditions.push(item.id);
	            }
	        }
	
	        /**
	         * Checks if the item in the list of statements has already loaded product details.
	         * If it hasn't then makes an api call to fetch details.
	         * @param {*} item The item in the list of statements that contains the product autocomplete field's current selection.
	         */
	        vm.checkTooltipForStatements = function(item) {
	            if (!loadedTooltipsForStatements.includes(item.id) || !vm.selectedItemHasDetails(item)) {
	                vm.loadProductDetails(item);
	                loadedTooltipsForStatements.push(item.id);
	            }
	        }
	
	        /**
	         * Checks if the current selected item has product details.
	         * @param {*} item The item in the list of constraints that contains the product autocomplete field's current selection.
	         */
	        vm.selectedItemHasDetails = function(item) {
	            return item.autocomplete.selectedItem && Object.keys(item.autocomplete.selectedItem).length > 2;
	        }
	
	        vm.models = {
	            selected: null,
	            lists: {
	                'selectedAttributes': []
	            }
	        };
	        /* Constraint Rule Section */
	        vm.conditionsList = [];
	        vm.statementList = [];
	
	        vm.productFieldOperatorPicklistEntries = {
	            PicklistValues: rulesService.getProductFieldOperators()
	        };
	
	
	        var productFields = ['A', 'B', 'C', 'D'];
	        /* Get the Product fields picklist values from the allConstraintRuleConditionPicklists resolved object.*/
	        for (var i = 0; i < productFields.length; i++) {
	            for (var j = 0; j < allConstraintRuleConditionPicklists.length; j++) {
	                if (allConstraintRuleConditionPicklists[j].FieldName === rulesService.getPrefixedAttribute('ProductField' + productFields[i] + '__c')) {
	                    rulesService.setProductFieldValues(productFields[i], allConstraintRuleConditionPicklists[j].PicklistValues);
	                }
	            }
	        }
	
	        function setIsErrorInLoadingDetails(status, message) {
	            vm.isErrorInLoadingDetails = status;
	            if (status) {
	                if (message) {
	                    vm.errorMessageWhileLoadingRule = '"' + message + '"  - ' + vm.labels.ErrorWhileLoadingRule;
	                } else {
	                    vm.errorMessageWhileLoadingRule = vm.labels.ErrorWhileLoadingRule;
	                }
	
	            } else {
	                vm.errorMessageWhileLoadingRule = '';
	            }
	        }
	        vm.operatorPicklistEntries = function(type) {
	            var response = {
	                PicklistValues: []
	            };
	            for (var j = 0; j < allConstraintRuleConditionPicklists.length; j++) {
	                if (allConstraintRuleConditionPicklists[j].FieldName === rulesService.getPrefixedAttribute('ProductFieldOperator' + type + '__c')) {
	                    response.PicklistValues = allConstraintRuleConditionPicklists[j].PicklistValues;
	                    break;
	                }
	            }
	            return response;
	        };
	
	        var sampleCondition = {
	                'name': '',
	                'label': '',
	                'scope': '',
	                'operator': '',
	                'product': {
	                    'name': '',
	                    'id': ''
	                },
	                'productField': [],
	                'matchInAsset': false,
	                'matchInCartOptions': false,
	                'matchInLocation': false,
	                'matchInOptions': true,
	                'matchInPrimaryLines': false,
	                'sequence': '',
	                'id': '',
	                'isCondition': true,
	                'autocomplete': {
	                    'querySearch': rulesService.productSearch,
	                    'displayName': 'Name'
	                },
	                'conditionCriteria': {
	                    'filter': {
	                        'predicates': []
	                    }
	                }
	            },
	            sampleStatement = {
	                'name': '',
	                'label': '',
	                'actionType': '',
	                'actionIntent': '',
	                'scope': '',
	                'product': {
	                    'name': '',
	                    'id': ''
	                },
	                'id': '',
	                'isStatement': true,
	                'matchInCartOptions': false,
	                'matchInOptions': true,
	                'matchInPrimaryLines': false,
	                'messageDetails': '',
	                'sequence': '',
	                'messageType': 'Error',
	                'autocomplete': {
	                    'querySearch': rulesService.productSearch,
	                    'displayName': 'Name'
	                },
	                'actionCriteria': {
	                    'filter': {
	                        'predicates': []
	                    }
	                }
	            };
	
	        function resetModel(typeOfRule) {
	            if (typeOfRule === 'constraint') {
	                vm.conditionsList = [];
	                vm.statementList = [];
	            } else if (typeOfRule === 'productAttribute') {
	                vm.paScopeList = [];
	                vm.paActionList = [];
	            } else if (typeOfRule === 'attributeValueMatrix') {
	                vm.avmScopeList = [];
	                vm.avmAttributesList = [];
	            }
	
	        }
	
	        function updateConstraintModel(cnList, stList) {
	            cnList.length ? vm.conditionsList = cnList : vm.conditionsList = [];
	            stList.length ? vm.statementList = stList : vm.statementList = [];
	        }
	
	        function saveConstraintRuleDetails() {
	            var deferQ = $q.defer();
	            if (!rulesService.isConstraintRuleNotComplete(vm.conditionsList, vm.statementList)) {
	                addAlert(vm.labels.FillAllFields, cpqAdminConstants.DANGER);
	                deferQ.reject({
	                    type: 'Error',
	                    message: vm.labels.FillAllFields
	                });
	
	            } else {
	                if (rulesService.isDuplicateEntriesPresent(vm.conditionsList)) {
	                    deferQ.reject({
	                        type: 'Error',
	                        message: vm.labels.DuplicateCSConditions
	                    });
	                } else {
	                    var checkAssociation = rulesService.checkAssociation(vm.selectedRule, vm.conditionsList);
	                    if (checkAssociation) {
	                        var requestObj = rulesService.prepareConstraintRuleRequest(vm.selectedRule, vm.conditionsList, vm.statementList);
	
	                        rulesService.updateConstraintRule(requestObj)
	                            .then(function(response) {
	                                runConstraintRuleJob(vm.selectedRule.id);
	                                deferQ.resolve(response);
	                            }, function(reason) {
	                                deferQ.reject(reason);
	                            });
	                    } else {
	                        addAlert(vm.labels.CustomConditionMisMatch, cpqAdminConstants.DANGER);
	                    }
	                }
	            }
	            return deferQ.promise;
	        }
	
	        function loadConstraintRuleDetails(rule) {
	            rulesService.getConstraintRuleDetails(rule.Id || rule.id)
	                .then(function(response) {
	                    setIsErrorInLoadingDetails(false);
	                    updateSelectedAttribute(rule.Id || rule.id);
	                    resetModel('constraint');
	                    updateSelectedRuleMetadata(response.ruleMetadata);
	                    updateConstraintModel(response.conditionsList, response.statementList);
	                }, function(reason) {
	                    setIsErrorInLoadingDetails(true, reason.message);
	                    updateSelectedAttribute(rule.Id || rule.id);
	                    resetModel('constraint');
	                    updateSelectedRuleMetadata({});
	                    updateConstraintModel([], []);
	                })
	                .finally(function() {
	                    vm.disableSaveBtn = false;
	                });
	        }
	
	        function reSequenceStatements() {
	            for (var i = 0; i < vm.statementList.length; i++) {
	                vm.statementList[i].sequence = (i + 1);
	            }
	        }
	        vm.addDroppedStatement = function(event, index, item) {
	            if (!item.isStatement && !item.isCondition) {
	                var sampleCopy = angular.copy(sampleStatement);
	                sampleCopy.name = vm.selectedRule.name + '- Statement -' + (vm.statementList.length + 1);
	                if (vm.rulesHeader === 'Product Structure') {
	                    sampleCopy.autocomplete.selectedItem = {
	                        Id: item.componentProductId,
	                        Name: item.Name
	                    };
	                } else {
	                    sampleCopy.autocomplete.selectedItem = {
	                        Id: item.ProductGroupSO.Id,
	                        Name: item.ProductGroupSO.Name
	                    };
	                }
	
	                sampleCopy.scope = getDroppedType(item);
	                sampleCopy.operator = 'equal to';
	                sampleCopy.sequence = rulesService.getNextSequence(vm.statementList);
	                vm.statementList.splice(index, 0, sampleCopy);
	                return true;
	            } else if (item.isStatement && !item.isCondition) {
	                /* - Remove from the orignial location */
	                var location = findIndex(angular.copy(vm.statementList), item);
	                if (location) {
	                    vm.statementList.splice(parseInt(location), 1);
	                }
	                /* Add to the new index location */
	                if (item.autocomplete) {
	                    item.autocomplete['querySearch'] = rulesService.productSearch;
	                }
	                vm.statementList.splice(parseInt(index), 0, item);
	                /* Re-sequence statements here */
	                reSequenceStatements();
	                $scope.$apply();
	                return true;
	            } else {
	                return false;
	            }
	
	        };
	
	        function checkIfDraggedItemNotPresent(draggedType, item) {
	            var notPresent = true;
	            for (var i = 0; i < vm.conditionsList.length; i++) {
	                var tempObj = vm.conditionsList[i];
	                if (tempObj.scope === draggedType && tempObj.autocomplete.selectedItem) {
	                    if (draggedType === 'Product' && tempObj.autocomplete.selectedItem.Id === item.componentProductId) {
	                        notPresent = false;
	                        break;
	                    }
	                    if (draggedType === 'Product Group' && tempObj.autocomplete.selectedItem.Id === item.ProductGroupSO.Id) {
	                        notPresent = false;
	                        break;
	                    }
	                }
	            }
	            return notPresent;
	        }
	
	        function reSequenceConditions() {
	            for (var i = 0; i < vm.conditionsList.length; i++) {
	                vm.conditionsList[i].sequence = (i + 1);
	            }
	        }
	
	        function getShortName(scopeName) {
	            var abbr = '';
	
	            switch (scopeName) {
	                case 'Product':
	                    {
	                        abbr = 'P';
	                        break;
	                    }
	                case 'Product Family':
	                    {
	                        abbr = 'PF';
	                        break;
	                    }
	                case 'Product Group':
	                    {
	                        abbr = 'PG';
	                        break;
	                    }
	                case 'Product Field Set':
	                    {
	                        abbr = 'PFS';
	                        break;
	                    }
	                case 'Product Option Group':
	                    {
	                        abbr = 'POG';
	                        break;
	                    }    
	                default:
	                    {
	                        abbr = '';
	                        break;
	                    }
	            }
	            return abbr;
	        }
	
	        function generateNewConditionOrStatementName(type) {
	            var name;
	            var ruleName = vm.selectedRule.name;
	            var diff;
	
	            switch (type) {
	                case 'condition':
	                    var conditionSeparator = '- Condition -';
	                    var newConditionsLength = vm.conditionsList.length + 1;
	                    diff = 80 - (conditionSeparator.length + (newConditionsLength + '').length);
	                    name = ruleName.slice(0, diff) + conditionSeparator + (newConditionsLength);
	                    break;
	                case 'statement':
	                    var statementSeparator = '- Statement -';
	                    var newStatementsLength = vm.statementList.length + 1;
	                    diff = 80 - (statementSeparator.length + (newStatementsLength + '').length);
	                    name = ruleName.slice(0, diff) + statementSeparator + (newStatementsLength);
	                    break;
	                case 'pa-statement':
	                    var paStatementSeparator = '- PA-Statement -';
	                    var newPaStatementsLength = vm.paActionList.length + 1;
	                    diff = 80 - (paStatementSeparator.length + (newPaStatementsLength + '').length);
	                    name = ruleName.slice(0, diff) + paStatementSeparator + (newPaStatementsLength);
	                    break;
	                default:
	                    name = '';
	            }
	
	            return name;
	        }
	
	        vm.addDroppedCondition = function(event, index, item) {
	            if (!item.isCondition && !item.isStatement) {
	                var draggedType = (vm.rulesHeader === 'Product Structure') ? 'Product' : 'Product Group';
	                if (checkIfDraggedItemNotPresent(draggedType, item)) {
	                    var sampleCopy = angular.copy(sampleCondition);
	                    sampleCopy.name = generateNewConditionOrStatementName('condition');
	                    sampleCopy.label = angular.copy(sampleCopy.name);
	                    if (vm.rulesHeader === 'Product Structure') {
	                        sampleCopy.autocomplete.selectedItem = {
	                            Id: item.componentProductId,
	                            Name: item.Name
	                        };
	                    } else {
	                        sampleCopy.autocomplete.selectedItem = {
	                            Id: item.ProductGroupSO.Id,
	                            Name: item.ProductGroupSO.Name
	                        };
	                    }
	                    sampleCopy.scope = getDroppedType(item);
	                    sampleCopy.operator = 'equal to';
	                    sampleCopy.sequence = rulesService.getNextSequence(vm.conditionsList);
	                    vm.conditionsList.splice(index, 0, sampleCopy);
	                    return true;
	                } else {
	                    addAlert(draggedType + ' ' + vm.labels.ScopeAlreadyPresent, cpqAdminConstants.DANGER);
	                    applicationService.showErrorMessage({
	                        type: 'Error',
	                        message: draggedType + ' ' + vm.labels.ScopeAlreadyPresent
	                    });
	                    return false;
	                }
	
	            } else if (item.isCondition && !item.isStatement) {
	                /* - Remove from the original location */
	                var location = findIndex(angular.copy(vm.conditionsList), item);
	                if (location) {
	                    vm.conditionsList.splice(parseInt(location), 1);
	                }
	                /* Add to the new index location */
	                if (item.autocomplete) {
	                    item.autocomplete['querySearch'] = rulesService.productSearch;
	                }
	                vm.conditionsList.splice(parseInt(index), 0, item);
	                /* Re-sequence all the conditions here */
	                reSequenceConditions();
	                $scope.$apply();
	                return true;
	            } else {
	                return false;
	            }
	        };
	
	        vm.addConditionSubItem = function(index) {
	            var item = angular.copy(sampleCondition);
	            item.scope = 'Product';
	            item.operator = 'equal to';
	            item.name = generateNewConditionOrStatementName('condition');
	            item.label = angular.copy(item.name);
	            item.sequence = rulesService.getNextSequence(vm.conditionsList);
	            if (index + 1) {
	                vm.conditionsList.splice(parseInt(index + 1), 0, item);
	            } else {
	                vm.conditionsList.push(item);
	            }
	            if (index && (vm.conditionsList.length - 2 !== index)) {
	                reSequenceConditions();
	            }
	        };
	
	        function resetCenterPanel() {
	            vm.typeOfRuleSelected = 'none';
	            updateSelectedRuleMetadata({});
	        }
	
	        function removeRule(type) {
	            if (type === 'constraint') {
	                rulesService.removeConstraintRules(vm.selectedRule.id)
	                    .then(function(response) {
	                        resetCenterPanel();
	                        //loadConstraintRules();
	                        vm.searchRule();
	                        addAlert(vm.labels.DeleteSuccessful, cpqAdminConstants.SUCCESS);
	                    }, function(reason) {
	                        applicationService.showErrorMessage(reason);
	                    });
	            } else if (type === 'productAttribute') {
	                rulesService.removeProductAttributeRules(vm.selectedRule.id).
	                then(function(response) {
	                    resetCenterPanel();
	                    //loadProductAttributeRules(false);
	                    vm.searchRule();
	                    addAlert(vm.labels.DeleteSuccessful, cpqAdminConstants.SUCCESS);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else if (type === 'attributeValueMatrix') {
	                rulesService.removeAttributeValueMatrix(vm.selectedRule.id).
	                then(function(response) {
	                    resetCenterPanel();
	                    vm.searchRule();
	                    addAlert(vm.labels.DeleteSuccessful, cpqAdminConstants.SUCCESS);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            }
	        }
	
	        function removeCondition(ruleType, index, id) {
	            if (ruleType === 'constraint') {
	                if (id) {
	                    rulesService.removeConstraintRuleConditions(id)
	                        .then(function(response) {
	                            vm.conditionsList.splice(index, 1);
	                            addAlert(vm.labels.DeleteSuccessful, cpqAdminConstants.SUCCESS);
	                            if (vm.conditionsList.length !== index) {
	                                reSequenceConditions();
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	
	                } else {
	                    vm.conditionsList.splice(index, 1);
	                    if (vm.conditionsList.length !== index) {
	                        reSequenceConditions();
	                    }
	                }
	            }
	        }
	
	        vm.addStatementSubItem = function(index) {
	            var item = angular.copy(sampleStatement);
	            item.name = generateNewConditionOrStatementName('statement');
	            item.label = angular.copy(item.name);
	            item.sequence = rulesService.getNextSequence(vm.statementList);
	            if (index + 1) {
	                vm.statementList.splice(parseInt(index + 1), 0, item);
	            } else {
	                vm.statementList.push(item);
	            }
	            if (index && (vm.statementList.length - 2) !== index) {
	                reSequenceStatements();
	            }
	
	        };
	
	        function removeStatement(ruleType, index, id) {
	            if (ruleType === 'constraint') {
	                if (id) {
	                    rulesService.removeConstraintRuleActions(id)
	                        .then(function(response) {
	                            vm.statementList.splice(index, 1);
	                            addAlert(vm.labels.DeleteSuccessful, cpqAdminConstants.SUCCESS);
	                            if (vm.statementList.length !== index) {
	                                reSequenceStatements();
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                } else {
	                    vm.statementList.splice(index, 1);
	                    if (vm.statementList.length !== index) {
	                        reSequenceStatements();
	                    }
	                }
	            } else if (ruleType === 'productAttribute') {
	                if (id) {
	                    rulesService.removeProductAttributeRuleActions(id)
	                        .then(function(response) {
	                            vm.paActionList.splice(index, 1);
	                            addAlert(vm.labels.DeleteSuccessful, cpqAdminConstants.SUCCESS);
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	
	                } else {
	                    vm.paActionList.splice(index, 1);
	                }
	            }
	
	        }
	
	        function prepareNewConstraintRule() {
	            var item = {};
	            item.sequence = '';
	            item.isActive = true;
	            item.name = '';
	            item.label = '';
	            item.effectiveDate = undefined;
	            item.expirationDate = undefined;
	            item.context = false;
	            item.description = '';
	            return item;
	        }
	        vm.openConstraintPopup = function(type, tabToOpen, indexToHighlight) {
	            $mdDialog.show({
	                    controller: __webpack_require__(452),
	                    template: __webpack_require__(453),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    controllerAs: 'vm',
	                    resolve: {
	                        selectedRule: function() {
	                            return type && type == 'new' ? angular.copy(prepareNewConstraintRule()) : angular.copy(vm.selectedRule);
	                        },
	                        type: function() {
	                            return type ? type : 'edit';
	                        },
	                        tabToOpen: function() {
	                            return tabToOpen ? tabToOpen : 0;
	                        },
	                        conditionsList: function() {
	                            return type && type == 'new' ? [] : angular.copy(vm.conditionsList);
	                        },
	                        statementsList: function() {
	                            return type && type == 'new' ? [] : angular.copy(vm.statementList);
	                        },
	                        indexToHighlight: function() {
	                            return indexToHighlight !== '' ? (indexToHighlight === 0 ? 0 : indexToHighlight) : '';
	                        }
	                    }
	                })
	                .then(function(requestObj, type) {
	                    if (requestObj.type === 'new') {
	                        createConstraintRule(requestObj.rule);
	                    } else {
	                        updateConstraintRule(requestObj);
	                    }
	                }, function() {});
	        };
	
	        function runConstraintRuleJob(ruleId) {
	            rulesService.updateConstraintRuleJob(ruleId)
	                .then(function(response) {
	                    /* Do nothing */
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function createConstraintRule(requestObj) {
	
	            rulesService.createConstraintRule(requestObj)
	                .then(function(response) {
	                    /* TODO : Clear all the button selections and add this to the first item */
	                    vm.searchRule()
	                        .then(function(res) {
	                            var temp = {
	                                    "RuleType": "ConstraintRule",
	                                    "Id": response.ConstraintRuleSO.Id,
	                                    "Name": response.ConstraintRuleSO.Name
	                                },
	                                index = findIndex(vm.appliedRules, temp);
	                            if (+index < 0) {
	                                vm.appliedRules.unshift(temp);
	                            }
	                            runConstraintRuleJob(response.ConstraintRuleSO.Id);
	                            vm.typeOfRuleSelected = 'constraint';
	                            updateSelectedRuleMetadata(rulesService.getRuleMetadata(response.ConstraintRuleSO));
	                            //loadConstraintRules(true);
	                            loadRuleDetails(vm.selectedRule);
	                        }, function(reason) {});
	
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function updateConstraintRule(obj) {
	            if (!rulesService.isConstraintRuleNotComplete(vm.conditionsList, vm.statementList)) {
	                addAlert(vm.labels.FillAllFields, cpqAdminConstants.DANGER);
	                applicationService.showErrorMessage({
	                    type: 'Error',
	                    message: vm.labels.FillAllFields
	                });
	            } else {
	                var requestObj = rulesService.prepareConstraintRuleRequest(obj.rule, obj.conditionsList, obj.statementList);
	                vm.disableSaveBtn = true;
	                rulesService.updateConstraintRule(requestObj)
	                    .then(function(response) {
	                        runConstraintRuleJob(obj.rule.id);
	                        loadRuleDetails(vm.selectedRule);
	                    }, function(reason) {
	                        var constraintRuleCheck = reason.data[0].ConstraintRuleConditionSOs; 
	                        if(reason.statusCode === 400 && (!constraintRuleCheck[0].MatchInPrimaryLines__c && !constraintRuleCheck[0].MatchInOptions__c)) {
	                            addAlert(vm.labels.ProductConstraintRuleError, cpqAdminConstants.DANGER);
	                            return;
	                        }
	                        applicationService.showErrorMessage(reason);
	                        vm.disableSaveBtn = false;
	                    });
	            }
	
	        }
	
	        function loadConstraintRules(toLoadRuleDetails) {
	            rulesService.getAllAssociatedConstraintRules(productId, vm.searchedStr, pageNumber, vm.showRulesForOptions)
	                .then(function(response) {
	                    vm.appliedRules = response;
	                    if (response.length === 0 && vm.searchedStr !== '') {
	                        vm.searchStr = vm.searchedStr;
	                    }
	                    updatePaginationBtnStatus(response.length);
	                    if (toLoadRuleDetails) {
	                        loadRuleDetails(vm.selectedRule);
	                    }
	                    checkNoRecordsWarning();
	                }, function(reason) {
	                    if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                        vm.appliedRules = [];
	                        vm.isMaxSQLSizeExceed = true;
	                    } else {
	                        applicationService.showErrorMessage(reason);
	                    }
	                });
	        }
	        /*********** Constraint Rule Section ******************/
	
	        /*********** Product Attribute Rule Section ***********/
	
	        vm.paScopeList = [];
	        vm.paActionList = [];
	
	        var paSampleAction = {
	            'name': '',
	            'targetField': {
	                'autocomplete': {
	                    'querySearch': rulesService.targetFieldSearch,
	                    'displayName': 'label'
	                }
	            },
	            'actionType': '',
	            'valueExpression': ''
	        };
	
	        function saveProductAttributeRuleDetails() {
	            var deferQ = $q.defer();
	            if (!rulesService.isPARuleNotComplete(vm.paScopeList, vm.paActionList)) {
	                /* TODO : Show error message to the user */
	                addAlert(vm.labels.FillAllFields, cpqAdminConstants.DANGER);
	                deferQ.reject({
	                    type: 'Error',
	                    message: vm.labels.FillAllFields
	                });
	            } else {
	                var requestObj = rulesService.prepareProductAttributeRuleRequest(vm.selectedRule, vm.paScopeList, vm.paActionList);
	
	                rulesService.updateProductAttributeRule(requestObj)
	                    .then(function(response) {
	                        deferQ.resolve(response);
	                    }, function(reason) {
	                        deferQ.reject(reason);
	                    });
	            }
	            return deferQ.promise;
	
	        }
	
	        function loadProductAttributeRuleDetails(rule) {
	            rulesService.getProductAttributeRuleDetails(rule.Id || rule.id)
	                .then(function(response) {
	                    setIsErrorInLoadingDetails(false);
	                    updateSelectedAttribute(rule.Id || rule.id);
	                    resetModel('productAttribute');
	                    updateSelectedRuleMetadata(response.ruleMetadata);
	                    updateProductAttributeModel(response.scopeList, response.actions);
	                }, function(reason) {
	                    setIsErrorInLoadingDetails(true, reason.message);
	                    updateSelectedAttribute(rule.Id || rule.id);
	                    resetModel('productAttribute');
	                    updateSelectedRuleMetadata({});
	                    updateProductAttributeModel([], []);
	                });
	        }
	
	        function updateProductAttributeModel(scopeList, stList) {
	            scopeList.length ? vm.paScopeList = scopeList : vm.paScopeList = [];
	            stList.length ? vm.paActionList = stList : vm.paActionList = [];
	        }
	
	        function prepareNewProductAttributeRule() {
	            var item = {};
	            item.isActive = true;
	            item.name = '';
	            item.effectiveDate = undefined;
	            item.expirationDate = undefined;
	            return item;
	        }
	        vm.openProductAttributePopup = function(type, tabToOpen, indexToHighlight) {
	            $mdDialog.show({
	                    controller: __webpack_require__(454),
	                    template: __webpack_require__(455),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    controllerAs: 'vm',
	                    resolve: {
	                        selectedRule: function() {
	                            return type && type == 'new' ? angular.copy(prepareNewProductAttributeRule()) : angular.copy(vm.selectedRule);
	                        },
	                        type: function() {
	                            return type ? type : 'edit';
	                        },
	                        tabToOpen: function() {
	                            return tabToOpen ? tabToOpen : 0;
	                        },
	                        indexToHighlight: function() {
	                            return indexToHighlight !== '' ? (indexToHighlight === 0 ? 0 : indexToHighlight) : '';
	                        },
	                        scopesList: function() {
	                            return type && type == 'new' ? [] : angular.copy(vm.paScopeList);
	                        },
	                        actionsList: function() {
	                            return type && type == 'new' ? [] : angular.copy(vm.paActionList);
	                        }
	                    }
	                })
	                .then(function(requestObj) {
	                    if (requestObj.type === 'new') {
	                        createProductAttributeRule(requestObj.rule);
	                    } else {
	                        updateProductAttributeRule(requestObj);
	                    }
	                }, function() {});
	        };
	
	        function createProductAttributeRule(requestObj) {
	            rulesService.createProductAttributeRule(requestObj)
	                .then(function(response) {
	                    vm.searchRule()
	                        .then(function(res) {
	                            var temp = {
	                                    "RuleType": "ProductAttributeRule",
	                                    "Id": response.ProductAttributeRuleSO.Id,
	                                    "Name": response.ProductAttributeRuleSO.Name
	                                },
	                                index = findIndex(vm.appliedRules, temp);
	                            if (+index < 0) {
	                                vm.appliedRules.unshift(temp);
	                            }
	                            vm.typeOfRuleSelected = 'productAttribute';
	                            updateSelectedRuleMetadata(rulesService.getRuleMetadata(response.ProductAttributeRuleSO));
	                            loadProductAttributeRules(true);
	                        }, function(reason) {});
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function updateProductAttributeRule(obj) {
	            var requestObj = rulesService.prepareProductAttributeRuleRequest(obj.rule, obj.scopeList, obj.statementList);
	            rulesService.updateProductAttributeRule(requestObj)
	                .then(function(response) {
	                    loadProductAttributeRules(true);
	                }, function(reason) {
	                    applicationService.showErrorMessage();
	                });
	        }
	
	        function loadProductAttributeRules(toLoadRuleDetails) {
	            rulesService.getAllProductAttributeRules(productId, vm.searchedStr, pageNumber, vm.showRulesForOptions)
	                .then(function(response) {
	                    vm.appliedRules = response;
	                    if (response.length === 0 && vm.searchedStr !== '') {
	                        vm.searchStr = vm.searchedStr;
	                    }
	                    updatePaginationBtnStatus(response.length);
	                    if (toLoadRuleDetails) {
	                        loadProductAttributeRuleDetails(vm.selectedRule);
	                    }
	                    checkNoRecordsWarning();
	                }, function(reason) {
	                    if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                        vm.appliedRules = [];
	                        vm.isMaxSQLSizeExceed = true;
	                    } else {
	                        applicationService.showErrorMessage(reason);
	                    }
	                });
	        }
	
	        vm.addPaActionSubItem = function(index) {
	            var item = angular.copy(paSampleAction);
	            item.name = generateNewConditionOrStatementName('pa-statement');
	            if (index >= 0) {
	                vm.paActionList.splice((parseInt(index) + 1), 0, item);
	            } else {
	                vm.paActionList.push(item);
	            }
	        }
	
	        /* Product Atrribute Rule Section */
	
	        /* Common Code between Constraint and Product Attribute */
	
	        vm.type = 'rules';
	        vm.allowedTypes = ['false'];
	        vm.nodeChildren = 'children';
	        vm.nodeLabel = 'Name';
	        vm.tooltipField = 'Name';
	        vm.rulesHeader = 'Product Structure';
	        vm.rulesTreeList = productStructureTree;
	        checkNoRecordsWarning();
	        /*get middle panel container data*/
	        vm.productScopePicklistEntries = {
	            PicklistValues: picklistMetaData.scope
	        };
	        vm.productScopeAVMPicklistEntries = {
	            PicklistValues: picklistMetaData.avmScope
	        };
	        vm.conditionScopePicklistEntries = {
	            PicklistValues: picklistMetaData.conditionScope
	        };
	        vm.statementScopePicklistEntries = {
	            PicklistValues: picklistMetaData.statementScope
	        };
	        vm.operatorPicklistEntries = {
	            PicklistValues: picklistMetaData.operator
	        };
	        vm.avmOperatorPicklistEntries = {
	            PicklistValues: picklistMetaData.avmOperator
	        };
	        vm.actionTypePicklistEntries = {
	            PicklistValues: picklistMetaData.actionType,
	            methodToCallInController: updateConstraintRuleActionIntent
	        };
	        vm.paActionTypePicklistEntries = {
	            PicklistValues: picklistMetaData.paActionType
	        };
	        vm.actionIntentPicklistEntries = {
	            PicklistValues: picklistMetaData.actionIntent
	        };
	        vm.productFamilyPicklistEntries = {
	            PicklistValues: picklistMetaData.productFamily
	        };
	        vm.dispositionPicklistEntries = {
	            PicklistValues: picklistMetaData.contextDisposition
	        };
	        vm.conditionAssociationPicklistEntries = {
	            PicklistValues: rulesService.getConditionAssociationTypes()
	        };
	
	
	        vm.getActionIntentProperties = function(actionType) {
	            if (actionType) {
	                return {
	                    PicklistValues: rulesService.getActionIntent(actionType)
	                }
	            } else {
	                return {
	                    PicklistValues: []
	                }
	            }
	
	        };
	
	        function updateConstraintRuleActionIntent(actionType) {
	            if (selectedRowIndex >= 0) {
	                var actionIntent = rulesService.getActionIntent(actionType);
	                var item = vm.statementList[selectedRowIndex];
	                item.getActionTypes = {
	                    PicklistValues: actionIntent
	                };
	                item.actionIntent = '';
	                item.messageDetails = rulesService.getMessageDetails(actionType);
	            }
	        }
	        var selectedRowIndex;
	        vm.trackSelectEvent = function(index) {
	            selectedRowIndex = index;
	        };
	        vm.options = [{
	            'FieldName': 'Options_PL',
	            'FieldType': 'PICKLIST',
	            'IsEditable': true,
	            'allowClear': false,
	            'PicklistValues': [{
	                'active': true,
	                'defaultValue': false,
	                'label': 'Product Structure',
	                'value': 'Product Structure'
	            }, {
	                'active': true,
	                'defaultValue': false,
	                'label': 'Product Groups',
	                'value': 'Product Groups'
	            }],
	            'value': 'Product Structure'
	        }];
	
	        function updateSelectedRuleMetadata(metadata) {
	            vm.selectedRule = metadata;
	        }
	
	        function updateSelectedAttribute(ruleId) {
	            for (var rule = 0; rule < vm.appliedRules.length; rule++) {
	                vm.appliedRules[rule].selected = false;
	            }
	
	            for (var rule = 0; rule < vm.appliedRules.length; rule++) {
	                if (vm.appliedRules[rule].Id === ruleId) {
	                    vm.appliedRules[rule].selected = true;
	                } else {
	                    vm.appliedRules[rule].selected = false;
	                }
	            }
	        }
	
	        vm.saveAndLoadDetails = function(rule) {
	            /* 
	             * - TODO : Check if there is any updated items  and any newly added items to the list.
	             * - call Save API for newly added one
	             * - Update API for updated API
	             */
	
	            var requestObj,
	                typeOfRule = '';
	            if (rule.RuleType === 'ConstraintRule') {
	                typeOfRule = 'constraint';
	            } else if (rule.RuleType === 'ProductAttributeRule') {
	                typeOfRule = 'productAttribute';
	            } else if (rule.RuleType === 'AttributeValueMatrix') {
	                typeOfRule = 'attributeValueMatrix';
	            }
	            if (vm.selectedRule && vm.selectedRule.id) {
	                if (typeOfRule === 'constraint') {
	                    if (vm.typeOfRuleSelected === 'productAttribute') {
	                        saveProductAttributeRuleDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'constraint';
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	
	                    } else if (vm.typeOfRuleSelected === 'attributeValueMatrix') {
	                        saveAttributeValueMatrixDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'constraint';
	                                vm.numberOfProductsPerChunk = productConstants.treePanelItemsPerChunk;
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                    } else {
	
	                        if (!rulesService.isConstraintRuleNotComplete(vm.conditionsList, vm.statementList)) {
	                            addAlert(vm.labels.FillAllFields, cpqAdminConstants.DANGER);
	                        } else {
	                            saveConstraintRuleDetails()
	                                .then(function(response) {
	                                    vm.typeOfRuleSelected = 'constraint';
	                                    loadRuleDetails(rule);
	                                }, function(reason) {
	                                    applicationService.showErrorMessage(reason);
	                                });
	                        }
	
	                    }
	
	
	                } else if (typeOfRule === 'productAttribute') {
	                    if (vm.typeOfRuleSelected === 'constraint') {
	                        saveConstraintRuleDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'productAttribute';
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	
	                    } else if (vm.typeOfRuleSelected === 'attributeValueMatrix') {
	                        saveAttributeValueMatrixDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'productAttribute';
	                                vm.numberOfProductsPerChunk = productConstants.treePanelItemsPerChunk;
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                    } else {
	                        if (!rulesService.isPARuleNotComplete(vm.paScopeList, vm.paActionList)) {
	                            addAlert(vm.labels.FillAllFields, cpqAdminConstants.DANGER);
	                        } else {
	                            saveProductAttributeRuleDetails()
	                                .then(function(response) {
	                                    vm.typeOfRuleSelected = 'productAttribute';
	                                    loadRuleDetails(rule);
	                                }, function(reason) {
	                                    applicationService.showErrorMessage(reason);
	                                });
	                        }
	
	                    }
	                } else if (typeOfRule === 'attributeValueMatrix') {
	                    if (vm.typeOfRuleSelected === 'constraint') {
	                        saveConstraintRuleDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'attributeValueMatrix';
	                                matrixPageNo = 0;
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	
	                    } else if (vm.typeOfRuleSelected === 'productAttribute') {
	                        saveProductAttributeRuleDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'attributeValueMatrix';
	                                matrixPageNo = 0;
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	
	                    } else {
	                        saveAttributeValueMatrixDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'attributeValueMatrix';
	                                matrixPageNo = 0;
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                    }
	
	                }
	            } else {
	                vm.typeOfRuleSelected = typeOfRule;
	                loadRuleDetails(rule);
	            }
	
	        };
	
	        function saveAttributeValueMatrixDetails() {
	            var deferQ = $q.defer();
	            rulesService.updateAvm({ avm: angular.copy(vm.selectedRule), avmAttributesList: angular.copy(vm.avmMatrixColumnList) }, angular.copy(vm.avmScopeList), angular.copy(vm.matrixList))
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function saveRuleDetails(typeOfRule, toState, toParams) {
	            if (typeOfRule === 'constraint') {
	                vm.disableSaveBtn = true;
	                saveConstraintRuleDetails()
	                    .then(function(response) {
	                        isFormSaved = true;
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        } else {
	                            addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                            loadConstraintRuleDetails(vm.selectedRule);
	                        }
	                    }, function(reason) {
	                        isFormSaved = false;
	                        applicationService.showErrorMessage(reason);
	                    })
	                    .finally(function() {
	                        vm.disableSaveBtn = false;
	                    });
	            } else if (typeOfRule === 'productAttribute') {
	                saveProductAttributeRuleDetails()
	                    .then(function(response) {
	                        isFormSaved = true;
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        } else {
	                            addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                            loadProductAttributeRuleDetails(vm.selectedRule);
	                        }
	                    }, function(reason) {
	                        isFormSaved = false;
	                        applicationService.showErrorMessage(reason);
	                    });
	            } else if (typeOfRule === 'attributeValueMatrix') {
	                saveAttributeValueMatrixDetails()
	                    .then(function(response) {
	                        isFormSaved = true;
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        } else {
	                            addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                            loadAttributeValueMatrixRuleDetails(vm.selectedRule);
	                        }
	                    }, function(reason) {
	                        isFormSaved = false;
	                        applicationService.showErrorMessage(reason);
	                    });
	            }
	        }
	
	        function prepareAndUpdateAttributesList() {
	            var attributesList = [],
	                columns = angular.copy(vm.avmMatrixColumnList);
	            for (var i = 0; i < columns.length; i++) {
	                var temp = {
	                    autocomplete: {
	                        selectedItem: {
	                            label: columns[i].name,
	                            value: columns[i].field
	                        }
	                    }
	                }
	                attributesList.push(temp);
	            }
	            rulesService.setAVMPopupAttributesList(angular.copy(attributesList));
	        }
	
	        function updateAVMModel(scopeList, matrixList, columns) {
	            vm.avmScopeList = scopeList;
	            vm.avmMatrixColumnList = columns;
	            prepareAndUpdateAttributesList();
	            vm.matrixList = matrixList;
	            rulesService.setOriginalAttributesList(angular.copy(columns));
	            updateMatrixPagination();
	        }
	        vm.getMatrixTableData = function(type) {
	            if (type === 'previous') {
	                matrixPageNo--;
	            } else if (type === 'next') {
	                matrixPageNo++;
	            }
	            saveAttributeValueMatrixDetails()
	                .then(function(response) {
	                    loadAttributeValueMatrixRuleDetails(vm.selectedRule);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            /* TODO : Make the call here with update API first */
	        };
	
	        var deRegisterPaginationFunc = $scope.$watch('vm.numberOfProductsPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                vm.selectedRule['RuleType'] = 'AttributeValueMatrix';
	                vm.saveAndLoadDetails(vm.selectedRule);
	            }
	        });
	
	        function updateMatrixPagination() {
	            var pageNumber = matrixPageNo,
	                endCount = vm.matrixList.length;
	
	            if (matrixPageNo === 0) {
	                vm.disableMatrixLeftBtn = true;
	            } else {
	                vm.disableMatrixLeftBtn = false;
	            }
	            if (endCount >= vm.numberOfProductsPerChunk) {
	                vm.disableMatrixRightBtn = false;
	            } else {
	                vm.disableMatrixRightBtn = true;
	            }
	
	            if (endCount < vm.numberOfProductsPerChunk) {
	                vm.MatrixPaginationCenterText = '(' + (matrixPageNo * vm.numberOfProductsPerChunk + 1) + '-' + (matrixPageNo * vm.numberOfProductsPerChunk + endCount) + ')';
	            } else {
	                vm.MatrixPaginationCenterText = '(' + (matrixPageNo * vm.numberOfProductsPerChunk + 1) + '-' + ((matrixPageNo + 1) * vm.numberOfProductsPerChunk) + ')';
	            }
	        }
	
	        function loadAttributeValueMatrixRuleDetails(rule) {
	            rulesService.loadAttributeValueMatrixRuleDetails(rule.Id || rule.id, (matrixPageNo + 1), vm.numberOfProductsPerChunk)
	                .then(function(response) {
	                    setIsErrorInLoadingDetails(false);
	                    updateSelectedAttribute(rule.Id || rule.id);
	                    resetModel('attributeValueMatrix');
	                    updateSelectedRuleMetadata(response.metadata);
	                    updateAVMModel(response.scopeList, response.matrixList, response.columnList);
	                }, function(reason) {
	                    setIsErrorInLoadingDetails(true, reason.message);
	                    updateSelectedAttribute(rule.Id || rule.id);
	                    resetModel('attributeValueMatrix');
	                    updateAVMModel([], [], []);
	                    updateSelectedRuleMetadata({});
	                });
	        }
	
	        function loadRuleDetails(rule) {
	            var typeOfRule = getRuleType(rule);
	            if (typeOfRule === 'constraint') {
	                loadConstraintRuleDetails(rule);
	            } else if (typeOfRule === 'productAttribute') {
	                loadProductAttributeRuleDetails(rule);
	            } else if (typeOfRule === 'attributeValueMatrix') {
	                loadAttributeValueMatrixRuleDetails(rule);
	            }
	
	        }
	
	        var deRegisterFunc = $scope.$watch('vm.options[0].value', function(newValue, oldValue) {
	
	            if (newValue && oldValue && newValue !== oldValue) {
	                if (angular.isDefined(newValue) && newValue === 'Product Structure') {
	                    vm.rulesHeader = 'Product Structure';
	                    vm.search(newValue, vm.searchText, 1);
	                } else if (angular.isDefined(newValue) && newValue === 'Product Groups') {
	                    vm.rulesHeader = 'Product Groups';
	                    vm.search(newValue, vm.searchText, 1);
	                }
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            deRegisterPaginationFunc();
	            deRegisterRulesForOptions();
	            vm = null;
	        });
	        vm.searchProductStructureOrGroup = function() {
	            vm.search(null, vm.searchText, 1);
	        };
	
	        function filterProductStructure(items, searchText) {
	            var response = [];
	            for (var i = 0; i < items.length; i++) {
	                var eachItem = items[i],
	                    childrenItems = eachItem.children;
	                if (childrenItems && childrenItems.length) {
	                    var filteredItems = $filter('filter')(childrenItems, { Name: searchText });
	                    if (filteredItems && filteredItems.length) {
	                        eachItem.children = filteredItems;
	                        response.push(eachItem);
	                    }
	                }
	            }
	            return response;
	        }
	        vm.search = function(typeToBeSearched, searchText, rightSidePageNumber) {
	            if (vm.rulesHeader === 'Product Structure' && productId) {
	                rulesService.getProductStructure(productId)
	                    .then(function(response) {
	                        vm.nodeChildren = 'children';
	                        vm.nodeLabel = 'Name';
	                        vm.rulesHeader = 'Product Structure';
	                        vm.rulesTreeList = response;
	                        vm.isMaxSQLSizeExceed = false;
	                        vm.rulesTreeList = filterProductStructure(response, searchText);
	                    }, function(reason) {
	                        vm.rulesTreeList = [];
	                        if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                            vm.isMaxSQLSizeExceed = true;
	                        } else {
	                            applicationService.showErrorMessage(reason);
	                        }
	                    });
	            } else if (vm.rulesHeader === 'Product Groups') {
	                vm.rulesHeader = 'Product Groups';
	                var requestedObj = {
	                    SearchString: searchText || '',
	                    NumberOfRecordsPerChunk: 25,
	                    ChunkNumber: rightSidePageNumber
	                };
	                rulesService.getAllProductGroups(requestedObj)
	                    .then(function(response) {
	                        vm.nodeChildren = 'children';
	                        vm.nodeLabel = '';
	                        vm.rulesHeader = 'Product Groups';
	                        vm.rulesTreeList = response.ProductGroupDOs;
	                        vm.isMaxSQLSizeExceed = false;
	                    }, function(reason) {
	                        vm.rulesTreeList = [];
	                        if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                            vm.isMaxSQLSizeExceed = true;
	                        } else {
	                            applicationService.showErrorMessage(reason);
	                        }
	                    });
	            }
	            checkNoRecordsWarning();
	        };
	
	        /* Common Code between Constraint and Product Attribute */
	
	        function findIndex(arr, obj) {
	            var index;
	            for (var item in arr) {
	                if (angular.equals(arr[item], obj)) {
	                    index = item;
	                }
	            }
	            return index;
	        }
	
	        function getDroppedType(droppedItem) {
	            var type,
	                selectedType = vm.rulesHeader;
	            if(droppedItem.nodeType === 'optionGroup') {
	                type = 'Product Option Group';
	            } else {
	                type = angular.isDefined(selectedType) && selectedType === 'Product Structure' ? 'Product' : 'Product Group';    
	            }    
	            
	
	            return type;
	        }
	
	
	
	        var toBeRemovedIndex, toBeRemovedId, toBeRemovedType, ruleType;
	
	        vm.showRemoveConfirmation = function(index, id, ruleTypeSelected, blockType) {
	            vm.confiramtionPopup = true;
	            toBeRemovedIndex = index;
	            toBeRemovedId = id;
	            toBeRemovedType = blockType;
	            ruleType = ruleTypeSelected;
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.DeleteMessageBody,
	                messageNote: vm.labels.DeleteMessageNote
	            }
	        };
	
	        vm.confirmRemove = function() {
	            vm.confiramtionPopup = false;
	            if (ruleType === 'constraint') {
	                if (toBeRemovedType === 'rule') {
	                    removeRule('constraint');
	                } else {
	                    toBeRemovedType === 'condition' ? removeCondition(ruleType, toBeRemovedIndex, toBeRemovedId) : removeStatement(ruleType, toBeRemovedIndex, toBeRemovedId);
	                }
	            } else if (ruleType === 'productAttribute') {
	                if (toBeRemovedType === 'rule') {
	                    removeRule('productAttribute');
	                } else {
	                    toBeRemovedType === 'scope' ? removeCondition(ruleType, toBeRemovedIndex, toBeRemovedId) : removeStatement(ruleType, toBeRemovedIndex, toBeRemovedId);
	                }
	            } else if (ruleType === 'attributeValueMatrix') {
	                if (toBeRemovedType === 'rule') {
	                    removeRule('attributeValueMatrix');
	                }
	            }
	
	        };
	
	        vm.cancelRemove = function() {
	            vm.confiramtionPopup = false;
	            toBeRemovedIndex = toBeRemovedId = toBeRemovedType = ruleType = undefined;
	        };
	
	
	
	        /****** Save functionality goes here ******/
	        /**
	         * When user clicks on the 'Save Product' button, an event named 'explicitPageSave' gets broadcasted.
	         * A page has to listen to that event and do the page specific save functionality.
	         */
	        var isFormSaved = false;
	
	        /**
	         * When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed incase of errors in saving the page.
	         *
	         * If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.list') {
	                return true;
	            } else if (isFormSaved === true) {
	                return true;
	            } else if (!vm.isCancelClicked) {
	                e.preventDefault();
	                savePage(e, toState, toParams);
	            } else {
	                vm.isCancelClicked = false;
	            }
	
	        });
	
	        function savePage(e, toState, toParams) {
	            if (vm.selectedRule && vm.selectedRule.id) {
	                saveRuleDetails(getRuleType(vm.selectedRule), toState, toParams);
	            } else {
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                }
	            }
	        }
	
	        function getRuleIndex() {
	            var selectedRuleId = vm.selectedRule.id,
	                index = undefined;
	            for (var item = 0; item < vm.appliedRules.length; item++) {
	                if (vm.appliedRules[item].id == selectedRuleId) {
	                    index = item;
	                }
	            }
	
	            return index;
	        }
	
	        function getRuleType(rule) {
	            var selectedRule = vm.selectedRule,
	                type = '';
	            if (rule.RuleType) {
	                if (rule.RuleType === 'ConstraintRule') {
	                    type = 'constraint';
	                } else if (rule.RuleType === 'ProductAttributeRule') {
	                    type = 'productAttribute';
	                } else if (rule.RuleType === 'AttributeValueMatrix') {
	                    type = 'attributeValueMatrix';
	                }
	                return type;
	            } else if (selectedRule) {
	                if (selectedRule.isConstraintRule) {
	                    type = 'constraint';
	                } else if (selectedRule.isPARule) {
	                    type = 'productAttribute';
	                } else if (selectedRule.isAVM) {
	                    type = 'attributeValueMatrix';
	                }
	                return type;
	            }
	            return vm.typeOfRuleSelected;
	        }
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        vm.getFormattedContent = function(isActive) {
	            var modifiedValue = '';
	            if (isActive) {
	                modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	            } else {
	                modifiedValue = "<i class='material-icons show'>check_circle</i>";
	            }
	            return modifiedValue;
	        };
	
	        vm.addProductField = function(parentIndex) {
	            var fields = ['A', 'B', 'C', 'D'],
	                notPresent = [],
	                present = [],
	                toBeNextItem = '',
	                temp = vm.conditionsList[parentIndex].productField;
	
	            /*  Find which product fields are available. */
	            for (var i = 0; i < temp.length; i++) {
	                present.push(temp[i].type);
	            }
	
	            /* Find which is to be next */
	            for (var i = 0; i < fields.length; i++) {
	                if (present.indexOf(fields[i]) <= -1) {
	                    notPresent.push(fields[i]);
	                }
	            }
	            toBeNextItem = notPresent.length > 0 ? notPresent[0] : null;
	
	            /* Add the to be next to the array. */
	            temp.push({
	                name: '',
	                operator: 'equal to',
	                value: '',
	                type: toBeNextItem,
	                picklistEntries: angular.copy(rulesService.getProductFieldValues(toBeNextItem))
	            });
	
	
	
	        };
	        vm.removeProductField = function(row, index, parentIndex) {
	            vm.conditionsList[parentIndex].productField.splice(index, 1);
	        };
	
	        vm.getProductFieldLabel = function(label) {
	            return vm.labels.ProductField + ' ' + label;
	        };
	
	        vm.goToDetailsPage = function () {
	            vm.isCancelClicked = true;
	            if (vm.isManageRules) {
	                resetCenterPanel();
	            } else {
	                $state.go('app.product.details', {
	                    'id': productId
	                });
	            }
	        };
	
	        vm.explicitPageSave = function() {
	            savePage();
	        };
	        $scope.$on(vm.labels.NewConstraintRule.split(' ').join('-'), function() {
	            vm.openConstraintPopup('new', 1);
	        });
	        $scope.$on(vm.labels.NewProductAttributeRule.split(' ').join('-'), function() {
	            vm.openProductAttributePopup('new', 1);
	        });
	        $scope.$on(vm.labels.NewAttributeValueMatrix.split(' ').join('-'), function() {
	            vm.openAVMPopup('new', 1);
	        });
	
	
	        /* Pagination for rules goes here */
	        var pageNumber = 1,
	            rightSidePageNumber = 1,
	            noOfRulesPerChunk = productConstants.NumberOfRecordsPerChunk;
	
	
	        vm.openConditionCriteriaPopup = function(index, type, criteria) {
	            vm.openCriteriaPopup(index, type, criteria);
	        };
	        vm.openActionCriteriaPopup = function(index, type, criteria, actionType) {
	            if (actionType === undefined || actionType === '') {
	                applicationService.showErrorMessage({
	                    type: 'error',
	                    message: vm.labels.ActionTypeRequired
	                });
	            } else {
	                vm.openCriteriaPopup(index, type, criteria, actionType);
	            }
	        };
	        vm.openCriteriaPopup = function(index, type, criteria, actionType) {
	
	            $mdDialog.show({
	                controller: __webpack_require__(456),
	                template: __webpack_require__(457),
	                parent: angular.element(document.body),
	                clickOutsideToClose: false,
	                controllerAs: 'vm',
	                resolve: {
	                    type: function() {
	                        return type;
	                    },
	                    criteria: function() {
	                        return angular.copy(criteria);
	                    },
	                    picklistEntries: function() {
	                        return picklistMetaData.csRuleConditionCriteria;
	                    },
	                    statementPicklistEntries: function() {
	                        return statementProductAttributes;
	                    },
	                    criteriaIndex: function() {
	                        return index;
	                    },
	                    actionType: function() {
	                        return actionType || undefined;
	                    }
	                }
	            }).then(function(requestObj) {
	                updateRuleCriteria(requestObj.index, requestObj.type, requestObj.criteria);
	            }, function(error) {
	                console.log(error);
	            });
	        };
	
	        function updateRuleCriteria(index, type, criteria) {
	
	            if (type === 'Condition') {
	                vm.conditionsList[index].conditionCriteria = criteria;
	            } else {
	                vm.statementList[index].actionCriteria = criteria;
	            }
	        }
	
	        function createAvm(obj) {
	            rulesService.createAvm(obj)
	                .then(function(response) {
	                    if (response.metadata && response.metadata.id) {
	                        vm.searchRule()
	                            .then(function(res) {
	                                var temp = {
	                                        "RuleType": "AttributeValueMatrix",
	                                        "Id": response.metadata.id,
	                                        "Name": response.metadata.name
	                                    },
	                                    index = findIndex(vm.appliedRules, temp);
	                                if (+index < 0) {
	                                    vm.appliedRules.unshift(temp);
	                                }
	                                vm.typeOfRuleSelected = 'attributeValueMatrix';
	                                updateSelectedRuleMetadata(response.metadata);
	                                loadRuleDetails(vm.selectedRule);
	                            }, function(reason) {});
	
	                    } else {
	                        // applicationService.showErrorMessage({});
	                    }
	
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function updateAvm(obj) {
	            rulesService.updateAvm(obj, angular.copy(vm.avmScopeList), angular.copy(vm.matrixList))
	                .then(function(response) {
	                    loadAttributeValueMatrixRuleDetails(response.metadata)
	                }, function(reason) {
	                    applicationService.showErrorMessage();
	                });
	        }
	
	
	        vm.openAVMPopup = function(type, index) {
	            var type = type;
	            $mdDialog.show({
	                controller: __webpack_require__(458),
	                template: __webpack_require__(459),
	                parent: angular.element(document.body),
	                clickOutsideToClose: false,
	                controllerAs: 'vm',
	                resolve: {
	                    selectedAVM: function() {
	                        return type === 'new' ? angular.copy({
	                            avm: rulesService.getSampleAvm(),
	                            avmAttributesList: []
	                        }) : angular.copy({
	                            avm: vm.selectedRule,
	                            avmAttributesList: vm.avmMatrixColumnList
	                        });
	                    },
	                    avmType: function() {
	                        return type === 'new' ? 'new' : 'edit';
	                    },
	                    applicationTypeValues: function() {
	                        return applicationTypeValues;
	                    }
	
	                }
	            }).then(function(obj) {
	                if (obj.type === 'new') {
	                    createAvm(obj);
	                } else {
	                    updateAvm(obj);
	                }
	            }, function(error) {
	                console.log(error);
	            });
	        };
	
	        vm.clearMatrix = function() {
	            vm.avmAttributesList = [];
	            vm.matrixList = [];
	        };
	        vm.addMatrixEntry = function(index) {
	            if (index) {
	                vm.matrixList.splice((index + 1), 0, {});
	                updateMatrixPagination();
	            } else {
	                vm.matrixList.push({});
	                updateMatrixPagination();
	            }
	
	        };
	        vm.removeMatrixEntry = function(index) {
	            var matrixEntryId = vm.matrixList[index].Id;
	            if (matrixEntryId) {
	                rulesService.removeAttributeMatrixEntries(matrixEntryId)
	                    .then(function(response) {
	                        vm.matrixList.splice(index, 1);
	                        updateMatrixPagination();
	                    }, function(reason) {});
	            } else {
	                vm.matrixList.splice(index, 1);
	                updateMatrixPagination();
	            }
	        };
	
	        function resetLeftSidePagination() {
	            pageNumber = 1;
	        }
	
	        vm.filterRulesBy = function(type) {
	            var showAll = false;
	
	            if (type === 'ConstraintRule') {
	                vm.linkClicked = !vm.linkClicked;
	                showAll = !vm.linkClicked;
	                vm.slidersClicked = false;
	                vm.tableClicked = false;
	                vm.tabFirstMenu = vm.labels.NewConstraintRule;
	                vm.tabMenuItems = [vm.labels.NewProductAttributeRule, vm.labels.NewAttributeValueMatrix];
	            } else if (type === 'ProductAttributeRule') {
	                vm.slidersClicked = !vm.slidersClicked;
	                showAll = !vm.slidersClicked;
	                vm.tableClicked = false;
	                vm.linkClicked = false;
	                vm.tabFirstMenu = vm.labels.NewProductAttributeRule;
	                vm.tabMenuItems = [vm.labels.NewConstraintRule, vm.labels.NewAttributeValueMatrix];
	            } else if (type === 'AttributeValueMatrix') {
	                vm.tableClicked = !vm.tableClicked;
	                showAll = !vm.tableClicked;
	                vm.linkClicked = false;
	                vm.slidersClicked = false;
	                vm.tabFirstMenu = vm.labels.NewAttributeValueMatrix;
	                vm.tabMenuItems = [vm.labels.NewConstraintRule, vm.labels.NewProductAttributeRule];
	            }
	            vm.appliedRules = [];
	            resetLeftSidePagination();
	            if (showAll) {
	                loadAllRules();
	            } else {
	                switch (type) {
	                    case 'ConstraintRule':
	                        {
	                            loadConstraintRules();
	                            break;
	                        }
	                    case 'ProductAttributeRule':
	                        {
	                            loadProductAttributeRules();
	                            break;
	                        }
	                    case 'AttributeValueMatrix':
	                        {
	                            loadAssociatedAttributeValueMatrices();
	                            break;
	                        }
	                }
	            }
	            document.querySelector('.list-table').scrollTop = 0;
	            saveFilters();
	        };
	
	        function loadAssociatedAttributeValueMatrices() {
	            rulesService.getAllAssociatedAttributeValueMatrices(productId, vm.searchedStr, pageNumber, vm.showRulesForOptions)
	                .then(function(response) {
	                    vm.appliedRules = response;
	                    if (response.length === 0 && vm.searchedStr !== '') {
	                        vm.searchStr = vm.searchedStr;
	                    }
	                    updatePaginationBtnStatus(response.length);
	                    checkNoRecordsWarning();
	                }, function(reason) {
	                    if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                        vm.appliedRules = [];
	                        vm.isMaxSQLSizeExceed = true;
	                    } else {
	                        applicationService.showErrorMessage(reason);
	                    }
	                });
	        }
	
	        function updatePaginationBtnStatus(resultCount) {
	            if (pageNumber === 1) {
	                vm.disableLeftBtn = true;
	            } else {
	                vm.disableLeftBtn = false;
	            }
	            var maxPerPage = productConstants.numberOfProductsPerChunk;
	            if (resultCount < maxPerPage) {
	                vm.disableRightBtn = true;
	            } else {
	                vm.disableRightBtn = false;
	            }
	        }
	
	        updatePaginationBtnStatus(allRules.length);
	
	        vm.getRules = function(type) {
	            if (type === 'previous') {
	                pageNumber--;
	            } else if (type === 'next') {
	                pageNumber++;
	            }
	            if (vm.linkClicked === true) {
	                loadConstraintRules();
	            } else if (vm.slidersClicked === true) {
	                loadProductAttributeRules();
	            } else if (vm.tableClicked === true) {
	                loadAssociatedAttributeValueMatrices();
	            } else {
	                vm.searchRule(true).then(function(response) {
	
	                });
	            }
	
	        };
	
	        function loadAllRules() {
	            var defered = $q.defer();
	            vm.appliedRules = [];
	            rulesService.getAllRules(productId, vm.searchedStr || '', pageNumber, vm.showRulesForOptions)
	                .then(function(response) {
	                    vm.appliedRules = response;
	                    if (response.length === 0 && vm.searchedStr !== '') {
	                        vm.searchStr = vm.searchedStr;
	                    }
	                    updatePaginationBtnStatus(response.length);
	                    document.querySelector('.list-table').scrollTop = 0;
	                    defered.resolve(true);
	                    checkNoRecordsWarning();
	                }, function(reason) {
	                    if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                        vm.appliedRules = [];
	                        vm.isMaxSQLSizeExceed = true;
	                    } else {
	                        applicationService.showErrorMessage(reason);
	                    }
	                    defered.reject(true);
	                });
	
	            return defered.promise;
	        }
	
	        function getTypeOfRuleSelected() {
	            var typeSelected = 'All';
	            if (vm.linkClicked) {
	                typeSelected = 'ConstraintRule';
	            } else if (vm.slidersClicked) {
	                typeSelected = 'ProductAttributeRule';
	            } else if (vm.tableClicked) {
	                typeSelected = 'AttributeValueMatrix';
	            }
	            return typeSelected;
	        }
	        vm.searchRule = function(donotReset) {
	
	            var defered = $q.defer();
	            if (!donotReset) {
	                vm.linkClicked = false;
	                vm.slidersClicked = false;
	                vm.tableClicked = false;
	                resetLeftSidePagination();
	            }
	            loadAllRules()
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(true);
	                });
	            return defered.promise;
	        };
	
	        vm.addAttribute = function() {
	            $mdDialog.show({
	                controller: __webpack_require__(460),
	                template: __webpack_require__(461),
	                parent: angular.element(document.body),
	                clickOutsideToClose: false,
	                controllerAs: 'vm'
	            }).then(function(obj) {
	                if (obj.attribute.autocomplete.selectedItem) {
	                    var temp = obj.attribute.autocomplete.selectedItem,
	                        newAttribute = {
	                            name: temp.label,
	                            field: temp.value
	                        };
	                    vm.avmMatrixColumnList.push(newAttribute);
	                }
	                prepareAndUpdateAttributesList();
	                updateAvm({ avm: angular.copy(vm.selectedRule), avmAttributesList: angular.copy(vm.avmMatrixColumnList) });
	            });
	        };
	        vm.doCSClone = function(event, rule) {
	            $mdDialog.show({
	                    controller: __webpack_require__(462),
	                    template: __webpack_require__(463),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    controllerAs: 'vm',
	                    resolve: {
	                        ruleName: function() {
	                            return rule.name;
	                        }
	                    }
	                })
	                .then(function(finalText) {
	                    rulesService.cloneConstraintRule(rule.id, finalText.newName)
	                        .then(function(response) {
	                            if (response) {
	                                vm.searchRule()
	                                    .then(function(res) {
	                                        var temp = {
	                                                "RuleType": "ConstraintRule",
	                                                "Id": response,
	                                                "Name": finalText.newName
	                                            },
	                                            index = findIndex(vm.appliedRules, temp);
	                                        if (+index < 0) {
	                                            vm.appliedRules.unshift(temp);
	                                        }
	                                        runConstraintRuleJob(response);
	                                        loadConstraintRuleDetails({ id: response })
	                                    }, function(reason) {});
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                }, function() {});
	        };
	
	        vm.onFocus = function(field, index) {
	            $mdDialog.show({
	                controller: __webpack_require__(413),
	                controllerAs: 'vm',
	                template: __webpack_require__(414),
	                parent: angular.element(document.body),
	                clickOutsideToClose: false,
	                resolve: {
	                    expression: function() {
	                        var expression = '';
	                        switch (field) {
	                            case 'ConditionCriteria':
	                                expression = vm.selectedRule.conditionCriteria;
	                                break;
	                        }
	                        return expression;
	                    }
	                }
	            }).then(function(response) {
	                switch (field) {
	                    case 'ConditionCriteria':
	                        vm.selectedRule.conditionCriteria = response;
	                        break;
	                }
	            });
	        };
	        var deRegisterRulesForOptions = $scope.$watch('vm.showRulesForOptions', function(newValue, oldValue) {
	            if (vm.linkClicked) {
	                loadConstraintRules();
	            } else if (vm.slidersClicked) {
	                loadProductAttributeRules();
	            } else if (vm.tableClicked) {
	                loadAssociatedAttributeValueMatrices();
	            } else {
	                loadAllRules();
	            }
	            saveFilters();
	        });
	
	        function isBundleProduct() {
	            var selectedProduct = productService.getSelectedProduct();
	            if (selectedProduct.configType === 'Bundle') {
	                vm.showRulesForOptionsField = true;
	            }
	        }
	        
	        if (!vm.isManageRules) {
	            isBundleProduct();
	        }
	
	        /**
	         * After API call returns applied rules data check for number of records and show no records found warning
	         */
	        function checkNoRecordsWarning() {
	            vm.noRecords = !(vm.appliedRules && vm.appliedRules.length);
	        }
	    };
	    productRulesController.$inject = [
	        '$q',
	        '$mdDialog',
	        '$mdMedia',
	        '$scope',
	        '$filter',
	        '$templateCache',
	        '$state',
	        '$stateParams',
	        'rulesService',
	        'picklistMetaData',
	        'productStructureTree',
	        'applicationService',
	        'i18nService',
	        'cpqAdminConstants',
	        'allConstraintRuleConditionPicklists',
	        'allConstraintRuleActionPicklists',
	        'statementProductAttributes',
	        'allRules',
	        'productConstants',
	        'applicationTypeValues',
	        'productService',
	        'productDetails',
	        'systemConstants',
	        'rulesStateConstants'
	    ];
	
	    module.exports = productRulesController;
	})();


/***/ }),
/* 443 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"individual-rule-container\">\r\n    <div class=\"col-xs-12 rule-table-panel\">\r\n        <!-- User message goes here incase of error while loading rules data -->\r\n        <div class=\"error-while-loading-rule\" ng-if=\"vm.isErrorInLoadingDetails === true\">\r\n            {{vm.errorMessageWhileLoadingRule}}\r\n        </div>\r\n        <!-- User message goes here incase of error while loading rules data -->\r\n        <div class=\"rules-table-body\">\r\n            <uib-accordion close-others=\"oneAtATime\" ng-if=\"vm.selectedRule && vm.typeOfRuleSelected == 'constraint' && vm.isErrorInLoadingDetails === false\">\r\n                <uib-accordion-group data-ng-init=\"status = {isOpen: true}\" is-open=\"status.isOpen\" is-disabled=\"true\">\r\n                    <uib-accordion-heading>\r\n                        <div class=\"remove-rule remove-rule-cs\">\r\n                            <i class=\"material-icons\" data-ng-click=\"vm.showRemoveConfirmation('',vm.selectedRule.id,'constraint','rule')\" aria-hidden=\"true\">clear</i>\r\n                            <md-menu md-offset=\"5 5\" class=\"clone-menu\">\r\n                                <button class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\r\n                                    <i class=\"material-icons\">more_vert</i>\r\n                                </button>\r\n                                <md-menu-content width=\"4\">\r\n                                    <md-menu-item>\r\n                                        <md-button data-ng-click=\"vm.doCSClone($event,vm.selectedRule)\">\r\n                                            <div layout=\"row\" flex>\r\n                                                <p flex>Clone Rule</p>\r\n                                            </div>\r\n                                        </md-button>\r\n                                    </md-menu-item>\r\n                                </md-menu-content>\r\n                            </md-menu>\r\n                        </div>\r\n                        <div class=\"flex-3 rule-name\">\r\n                            <span class=\"pull-left padding-right-5px\" data-ng-click=\"status.isOpen=!status.isOpen\">\r\n                            <i class=\"material-icons\" data-ng-if=\"status.isOpen\">keyboard_arrow_down</i>\r\n                            <i class=\"material-icons\" data-ng-if=\"!status.isOpen\">keyboard_arrow_right</i>\r\n                        </span><a href=\"\" class=\"text-primary\" data-ng-click=\"vm.openConstraintPopup('edit',0)\">{{vm.selectedRule.name || ''}} </a></div>\r\n                        <div class=\"flex-1\">{{vm.selectedRule.sequence || ''}}</div>\r\n                        <div class=\"flex-1\">\r\n                            <material-form-field model=\"vm.selectedRule.effectiveDate\" field-type=\"DATE\" is-editable=\"false\" is-richtext=\"false\">\r\n                            </material-form-field>\r\n                        </div>\r\n                        <div class=\"flex-2\">\r\n                            <material-form-field model=\"vm.selectedRule.expirationDate\" field-type=\"DATE\" is-editable=\"false\" is-richtext=\"false\">\r\n                            </material-form-field>\r\n                        </div>\r\n                        <div class=\"flex-1\">\r\n                            <span ng-bind-html=\"vm.getFormattedContent(vm.selectedRule.context)\"></span>\r\n                        </div>\r\n                        <div class=\"flex-1\">\r\n                            <span ng-bind-html=\"vm.getFormattedContent(vm.selectedRule.isActive)\"></span>\r\n                        </div>\r\n                        <div class=\"flex-3\">{{vm.selectedRule.description || ''}}</div>\r\n                    </uib-accordion-heading>\r\n                    <div class=\"template-container\">\r\n                        <div class=\"condition-title\">\r\n                            <div class=\"if-container\"> IF</div>\r\n                            <div class=\"condition-drop-down-container\">\r\n                                <div class=\"condition-drop-down-container-item all-picklist\">\r\n                                    <material-form-field model=\"vm.selectedRule.conditionAssociation\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.conditionAssociationPicklistEntries\" label=\"Condition Association\" name=\"conditionAssociation\">\r\n                                    </material-form-field>\r\n                                </div>\r\n                                <div class=\"condition-drop-down-container-item custom-rule-txt-field\" data-ng-if=\"vm.selectedRule.conditionAssociation === 'Custom'\">\r\n                                    <material-form-field model=\"vm.selectedRule.customCondition\" field-type=\"string\" is-editable=\"true\" label=\"Custom Condition\" name=\"customCondition\">\r\n                                    </material-form-field>\r\n                                </div>\r\n                                <div class=\"condition-user-message\"> of these conditions are met </div>\r\n                            </div>\r\n                        </div>\r\n                        <div ng-include=\"'constraint-rule-conditions.html'\"></div>\r\n                        <div class=\"condition-title\">\r\n                            <div class=\"if-container\">{{vm.labels.ThenStatement}}</div>\r\n                        </div>\r\n                        <div ng-include=\"'constraint-rule-statements.html'\"></div>\r\n                    </div>\r\n                </uib-accordion-group>\r\n            </uib-accordion>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),
/* 444 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"btn-group align-right\" role=\"group\" aria-label=\"...\" data-ng-if=\"vm.conditionsList.length == 0\">\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addConditionSubItem()\">\n        <i class=\"material-icons\">add</i>\n    </button>\n</div>\n<ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedCondition(event, index, item)\" class=\"attribute-list\" ng-class=\"{noItem : vm.conditionsList.length == 0}\">\n    <li ng-repeat=\"item in vm.conditionsList track by $index\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" dnd-moved=\"vm.conditionsList.splice($index, 1)\" dnd-selected=\"models.selected = item\" ng-class=\"{selected: models.selected === item}\">\n        <div class=\"conditions slds-m-bottom_large\">\n            <div class=\"\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addConditionSubItem($index)\">\n                        <i class=\"material-icons\">add</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.showRemoveConfirmation($index,item.id,'constraint','condition')\">\n                        <i class=\"material-icons\">clear</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.openConstraintPopup('edit',1, $index)\">\n                        <i class=\"material-icons\">settings</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.openConditionCriteriaPopup($index,'Condition',item.conditionCriteria)\">\n                        <i class=\"material-icons\">flare</i>\n                    </button>\n                </div>\n            </div>\n            <div class=\"csr-cnd-sequence slds-m-horizontal--x-small\">\n                <material-form-field model=\"item.sequence\" field-type=\"quantity\" is-editable=\"true\" field-label=\"vm.labels.ConditionNo\" name=\"conditionNo\" drop-disable>\n                </material-form-field>\n            </div>\n            <div class=\"slds-m-horizontal--x-small\">\n                <material-form-field model=\"item.scope\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.conditionScopePicklistEntries\" field-label=\"vm.labels.Scope\" name=\"scope\" is-required=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"slds-m-horizontal--x-small\" data-ng-if=\"item.scope !== 'Product Field Set'\">\n                <material-form-field model=\"item.operator\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.operatorPicklistEntries\" field-label=\"vm.labels.Operator\" name=\"operator\" is-required=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"slds-m-horizontal--x-small\" data-ng-if=\"item.scope !== 'Product Field Set'\">\n                <div class=\"detailedAutocompleteField\">\n                    <material-form-field field-type=\"autocomplete\" properties=\"item\" field-label=\"item.scope\" name=\"product\" is-required=\"true\" drop-disable>\n                    </material-form-field>\n                    <div ng-if=\"item.autocomplete.selectedItem\" class=\"infoTooltipIcon\">\n                        <i data-ng-mouseover=\"vm.checkTooltipForConditions(item)\" data-ng-mouseenter=\"vm['showing'+$index] = true\" data-ng-mouseleave=\"vm['showing'+$index] = false\" class=\"large material-icons\">info</i>\n                        <div\n                            class=\"slds-popover slds-popover_tooltip customTooltip slds-nubbin_top\"\n                            data-ng-class=\"{'slds-fall-into-ground': !vm['showing'+$index], 'slds-rise-from-ground': vm['showing'+$index]}\"\n                            role=\"tooltip\"\n                        >\n                          <div class=\"slds-popover__body\">\n                              <div ng-if=\"vm.selectedItemHasDetails(item)\">\n                                <p>{{item.autocomplete.selectedItem.Name}}</p>\n                                <p class=\"slds-m-vertical_x-small\">Id: {{item.autocomplete.selectedItem.Id}}</p>\n                                <p class=\"slds-m-vertical_x-small\" ng-if=\"item.autocomplete.selectedItem.ProductCode\">Code: {{item.autocomplete.selectedItem.ProductCode}}</p>\n                                <p class=\"slds-m-vertical_x-small\" ng-if=\"item.autocomplete.selectedItem.Description\">Description: {{item.autocomplete.selectedItem.Description}}</p>\n                              </div>\n                              <div ng-if=\"!vm.selectedItemHasDetails(item)\" class=\"slds-text-align_center\">Loading product details...</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"product-field-set-container\" data-ng-if=\"item.scope === 'Product Field Set'\">\n            <ul>\n                <li data-ng-repeat=\"row in item.productField\" class=\"inner-li\">\n                    <div class=\"product-field-row\">\n                        <div class=\"btn-group-container\">\n                            <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                                <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeProductField(row, $index, $parent.$index)\">\n                                    <i class=\"material-icons\">clear</i>\n                                </button>\n                            </div>\n                        </div>\n                        <div class=\"name-container\">\n                            <material-form-field model=\"row.name\" field-type=\"picklist\" is-editable=\"true\" properties=\"row.picklistEntries\" field-label=\"vm.getProductFieldLabel(row.type)\" name=\"name\" >\n                            </material-form-field>\n                        </div>\n                        <div class=\"operator-container\">\n                            <material-form-field model=\"row.operator\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.productFieldOperatorPicklistEntries\" field-label=\"vm.labels.Operator\" name=\"operator\">\n                            </material-form-field>\n                        </div>\n                        <div class=\"value-container\">\n                            <material-form-field model=\"row.value\" field-type=\"string\" is-editable=\"true\" field-label=\"vm.labels.Value\" name=\"value\" drop-disable>\n                            </material-form-field>\n                        </div>\n                    </div>\n                </li>\n                <div data-ng-if=\"item.productField.length < 4\" class=\"add-btn-container\">\n                    <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                        <button type=\"button\" class=\"slds-button slds-button--icons\" data-ng-click=\"vm.addProductField($parent.$index)\">\n                            <i class=\"material-icons\">add</i>\n                        </button>\n                    </div>\n                </div>\n            </ul>\n        </div>\n    </li>\n</ul>\n"

/***/ }),
/* 445 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"btn-group align-right\" role=\"group\" aria-label=\"...\" data-ng-if=\"vm.statementList.length == 0\">\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addStatementSubItem()\">\n        <i class=\"material-icons\">add</i>\n    </button>\n</div>\n<ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedStatement(event, index, item)\" class=\"attribute-list\" ng-class=\"{noItem : vm.statementList.length == 0}\">\n    <li ng-repeat=\"item in vm.statementList\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" dnd-selected=\"models.selected = item\" ng-class=\"{selected: models.selected === item}\">\n        <div class=\"statements slds-m-bottom_large\">\n            <div class=\"\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addStatementSubItem($index)\">\n                        <i class=\"material-icons\">add</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.showRemoveConfirmation($index,item.id,'constraint','statement')\">\n                        <i class=\"material-icons\">clear</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.openConstraintPopup('edit',2,$index)\">\n                        <i class=\"material-icons\">settings</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.openActionCriteriaPopup($index,'Action',item.actionCriteria,item.actionType)\">\n                        <i class=\"material-icons\">flare</i>\n                    </button>\n                </div>\n            </div>\n            <div class=\"csr-st-sequence\">\n                <material-form-field model=\"item.sequence\" field-type=\"quantity\" is-editable=\"true\" field-label=\"vm.labels.ActionNo\" name=\"actionNo\" drop-disable>\n                </material-form-field>\n            </div>\n            <div>\n                <material-form-field model=\"item.actionType\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.actionTypePicklistEntries\" field-label=\"vm.labels.ActionType\" name=\"actionType\" data-ng-click=\"vm.trackSelectEvent($index)\" is-required=\"true\">\n                </material-form-field>\n            </div>\n            <div>\n                <material-form-field model=\"item.actionIntent\" field-type=\"picklist\" is-editable=\"true\" properties=\"item.getActionTypes\" field-label=\"vm.labels.ActionIntent\" name=\"actionIntent\" is-required=\"true\">\n                </material-form-field>\n            </div>\n            <div>\n                <material-form-field model=\"item.scope\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.statementScopePicklistEntries\" field-label=\"vm.labels.Scope\" name=\"scope\" is-required=\"true\">\n                </material-form-field>\n            </div>\n            <div data-ng-if=\"item.scope !== 'Action Criteria'\">\n                <div class=\"detailedAutocompleteField\">\n                    <material-form-field field-type=\"autocomplete\" field-label=\"item.scope\" name=\"product\" properties=\"item\" is-required=\"true\" drop-disable>\n                    </material-form-field>\n                    <div ng-if=\"item.autocomplete.selectedItem\" class=\"infoTooltipIcon\">\n                        <i data-ng-mouseover=\"vm.checkTooltipForStatements(item)\" data-ng-mouseenter=\"vm['statementShowing'+$index] = true\" data-ng-mouseleave=\"vm['statementShowing'+$index] = false\" class=\"large material-icons\">info</i>\n                        <div\n                            class=\"slds-popover slds-popover_tooltip customTooltip slds-nubbin_bottom\"\n                            data-ng-class=\"{'slds-fall-into-ground': !vm['statementShowing'+$index], 'slds-rise-from-ground': vm['statementShowing'+$index]}\"\n                            role=\"tooltip\"\n                        >\n                          <div class=\"slds-popover__body\">\n                              <div ng-if=\"vm.selectedItemHasDetails(item)\">\n                                <p>{{item.autocomplete.selectedItem.Name}}</p>\n                                <p class=\"slds-m-vertical_x-small\">Id: {{item.autocomplete.selectedItem.Id}}</p>\n                                <p class=\"slds-m-vertical_x-small\" ng-if=\"item.autocomplete.selectedItem.ProductCode\">Code: {{item.autocomplete.selectedItem.ProductCode}}</p>\n                                <p class=\"slds-m-vertical_x-small\" ng-if=\"item.autocomplete.selectedItem.Description\">Description: {{item.autocomplete.selectedItem.Description}}</p>\n                              </div>\n                              <div ng-if=\"!vm.selectedItemHasDetails(item)\" class=\"slds-text-align_center\">Loading product details...</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"edit-criteria-btn\" data-ng-if=\"item.scope === 'Action Criteria'\">\n                <button class=\"slds-button slds-button_brand\" ng-click=\"vm.openActionCriteriaPopup($index,'Action',item.actionCriteria,item.actionType)\">{{::vm.labels.EditActionCriteria}}</button>\n            </div>\n        </div>\n    </li>\n</ul>\n"

/***/ }),
/* 446 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"individual-rule-container\">\r\n    <div class=\"col-xs-12 rule-table-panel\">\r\n        <!-- User message goes here incase of error while loading rules data -->\r\n        <div class=\"error-while-loading-rule\" ng-if=\"vm.isErrorInLoadingDetails === true\">\r\n            {{vm.errorMessageWhileLoadingRule}}\r\n        </div>\r\n        <!-- User message goes here incase of error while loading rules data -->\r\n        <div class=\"rules-table-body\">\r\n            <uib-accordion close-others=\"oneAtATime\" ng-if=\"vm.selectedRule && vm.typeOfRuleSelected == 'productAttribute' && vm.isErrorInLoadingDetails === false\">\r\n                <uib-accordion-group data-ng-init=\"status = {isOpen: true}\" is-open=\"status.isOpen\" is-disabled=\"true\">\r\n                    <uib-accordion-heading>\r\n                        <div class=\"remove-rule\">\r\n                            <i class=\"material-icons\" data-ng-click=\"vm.showRemoveConfirmation('',vm.selectedRule.id,'productAttribute','rule')\" aria-hidden=\"true\">clear</i>\r\n                        </div>\r\n                        <div class=\"flex-3 rule-name\"><span class=\"pull-left padding-right-5px\" data-ng-click=\"status.isOpen=!status.isOpen\">\r\n                             <i class=\"material-icons\" data-ng-if=\"status.isOpen\">keyboard_arrow_down</i>\r\n                            <i class=\"material-icons\" data-ng-if=\"!status.isOpen\">keyboard_arrow_right</i>\r\n                        </span><a href=\"\" class=\"text-primary\" data-ng-click=\"vm.openProductAttributePopup('edit',0)\">{{vm.selectedRule.name || ''}} </a></div>\r\n                        <div class=\"flex-1\">\r\n                            <span ng-bind-html=\"vm.getFormattedContent(vm.selectedRule.isActive)\"></span>\r\n                        </div>\r\n                        <div class=\"flex-2\">\r\n                            <material-form-field model=\"vm.selectedRule.effectiveDate\" field-type=\"DATE\" is-editable=\"false\" is-richtext=\"false\">\r\n                            </material-form-field>\r\n                        </div>\r\n                        <div class=\"flex-2\">\r\n                            <material-form-field model=\"vm.selectedRule.expirationDate\" field-type=\"DATE\" is-editable=\"false\" is-richtext=\"false\">\r\n                            </material-form-field>\r\n                        </div>\r\n                    </uib-accordion-heading>\r\n                    <div class=\"template-container\">\r\n                        <div class=\"condition-title par-condition-title\">{{vm.labels.IfScope}}</div>\r\n                        <div ng-include=\"'product-attribute-rule-scope.html'\"></div>\r\n                        <div class=\"condition-title par-condition-title\">{{vm.labels.Criteria}}</div>\r\n                        <h5>{{vm.labels.RuleCriteriaMessage}}</h5>\r\n                        <div class=\"eb-container-details\" layout=\"row\">\r\n                            <material-form-field model=\"vm.selectedRule.conditionCriteria\" field-type=\"string\" is-editable=\"true\" flex=\"75\">\r\n                            </material-form-field>\r\n                            <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus('ConditionCriteria', null)\">\r\n                                <i class=\"fa fa-external-link\"></i>\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"condition-title par-condition-title\">{{vm.labels.ThenStatement}}</div>\r\n                        <div ng-include=\"'product-attribute-rule-actions.html'\"></div>\r\n                    </div>\r\n                </uib-accordion-group>\r\n            </uib-accordion>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),
/* 447 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"btn-group align-right\" role=\"group\" aria-label=\"...\" data-ng-if=\"vm.paScopeList.length == 0\">\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addScopeSubItem()\">\n        <i class=\"material-icons\">add</i>\n    </button>\n</div>\n<ul class=\"attribute-list\">\n    <li ng-repeat=\"item in vm.paScopeList\" ng-class=\"{selected: models.selected === item}\">\n        <div class=\"conditions\">\n            <div class=\"align-top\">\n                <material-form-field model=\"item.scope\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.productScopePicklistEntries\" field-label=\"vm.labels.Scope\" name=\"scope\" is-disabled=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"align-top\">\n                <material-form-field model=\"item.operator\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.operatorPicklistEntries\" field-label=\"vm.labels.Operator\" name=\"operator\">\n                </material-form-field>\n            </div>\n            <div class=\"align-top multiselect-autocomplete-container\">\n                <material-form-field model=\"item.model\" field-type=\"multiselect-autocomplete\" field-label=\"item.scope\" properties=\"item\" drop-disable>\n                </material-form-field>\n            </div>\n        </div>\n    </li>\n</ul>\n"

/***/ }),
/* 448 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"btn-group align-right\" role=\"group\" aria-label=\"...\" data-ng-if=\"vm.paActionList.length == 0\">\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addPaActionSubItem()\">\n        <i class=\"material-icons\">add</i>\n    </button>\n</div>\n<ul class=\"attribute-list\">\n    <li ng-repeat=\"item in vm.paActionList\" ng-class=\"{selected: models.selected === item}\" class=\"second-row\">\n        <div class=\"statements\">\n            <div class=\"par\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                    <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                        <i class=\"material-icons\">more_vert</i>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li data-ng-click=\"vm.showRemoveConfirmation($index,item.id,'productAttribute','action')\" class=\"action-Menu\">\n                            <i class=\"material-icons\">clear</i>\n                            <span class=\"remove-label\">{{::vm.labels.Remove}}</span>\n                        </li>\n                        <li class=\"action-Menu\" data-ng-click=\"vm.addPaActionSubItem($index)\">\n                            <i class=\"material-icons\">add</i>\n                            <span class=\"add-label\">Add</span>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <div class=\"target-field-container\">\n                <material-form-field model=\"item.targetField\" field-type=\"autocomplete\" field-label=\"vm.labels.TargetField\" name=\"targetField\" properties=\"item.targetField\" drop-disable>\n                </material-form-field>\n            </div>\n            <div class=\"par-st-actionType\">\n                <material-form-field model=\"item.actionType\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.paActionTypePicklistEntries\" field-label=\"vm.labels.ActionType\" name=\"actionType\">\n                </material-form-field>\n            </div>\n            <div class=\"par-st-valueExpression\">\n                <material-form-field model=\"item.valueExpression\" field-type=\"string\" max-length=\"50000\" is-editable=\"true\" field-label=\"vm.labels.ValueExpression\" name=\"valueExpression\" drop-disable>\n                </material-form-field>\n            </div>\n        </div>\n    </li>\n</ul>\n"

/***/ }),
/* 449 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"individual-rule-container\">\n    <div class=\"col-xs-12 rule-table-panel\">\n        <!-- User message goes here incase of error while loading rules data -->\n        <div class=\"error-while-loading-rule\" ng-if=\"vm.isErrorInLoadingDetails === true\">\n            {{vm.errorMessageWhileLoadingRule}}\n        </div>\n        <!-- User message goes here incase of error while loading rules data -->\n        <div class=\"rules-table-body\">\n            <uib-accordion close-others=\"oneAtATime\" ng-if=\"vm.selectedRule && vm.typeOfRuleSelected === 'attributeValueMatrix' && vm.isErrorInLoadingDetails === false\">\n                <uib-accordion-group data-ng-init=\"status = {isOpen: true}\" is-open=\"status.isOpen\" is-disabled=\"true\">\n                    <uib-accordion-heading>\n                        <div class=\"remove-rule\">\n                            <i class=\"material-icons\" data-ng-click=\"vm.showRemoveConfirmation('',vm.selectedRule.id,'attributeValueMatrix','rule')\" aria-hidden=\"true\">clear</i>\n                        </div>\n                        <div class=\"flex-3 rule-name\">\n                            <span class=\"pull-left padding-right-5px\" data-ng-click=\"status.isOpen=!status.isOpen\">\n                            <i class=\"material-icons\" data-ng-if=\"status.isOpen\">keyboard_arrow_down</i>\n                            <i class=\"material-icons\" data-ng-if=\"!status.isOpen\">keyboard_arrow_right</i>\n                        </span><a href=\"\" class=\"text-primary\" data-ng-click=\"vm.openAVMPopup('edit')\">{{vm.selectedRule.name || ''}} </a></div>\n                        <div class=\"flex-1\">\n                            <material-form-field model=\"vm.selectedRule.effectiveDate\" field-type=\"DATE\" is-editable=\"false\" is-richtext=\"false\">\n                            </material-form-field>\n                        </div>\n                        <div class=\"flex-2\">\n                            <material-form-field model=\"vm.selectedRule.expirationDate\" field-type=\"DATE\" is-editable=\"false\" is-richtext=\"false\">\n                            </material-form-field>\n                        </div>\n                        <div class=\"flex-1\">\n                            <span ng-bind-html=\"vm.getFormattedContent(vm.selectedRule.isActive)\"></span>\n                        </div>\n                        <div class=\"flex-3\">{{vm.selectedRule.description || ''}}</div>\n                    </uib-accordion-heading>\n                    <div class=\"template-container\">\n                        <div class=\"condition-title\">\n                            <div class=\"if-container\">{{vm.labels.IfScope}}</div>\n                        </div>\n                        <div ng-include=\"'avm-conditions.html'\"></div>\n                        <div class=\"condition-title\">\n                            <div class=\"if-container\">{{vm.labels.ThenStatement}}</div>\n                            <div class=\"button-container\">\n                                <button class=\"slds-button\" data-ng-click=\"vm.addMatrixEntry()\" data-ng-if=\"vm.matrixList.length === 0 && vm.avmMatrixColumnList.length > 0\">{{vm.labels.AddRow}}\n                                </button>\n                            </div>\n                        </div>\n                        <div ng-include=\"'avm-statements.html'\"></div>\n                    </div>\n                </uib-accordion-group>\n            </uib-accordion>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 450 */
/***/ (function(module, exports) {

	module.exports = "<div ng-repeat=\"item in vm.avmScopeList\" class=\"slds-m-bottom_large\">\n    <div class=\"avm-scope-list\">\n        <div class=\"align-top\">\n            <material-form-field model=\"item.scope\" field-type=\"picklist\" is-editable=\"true\" is-disabled=\"true\" properties=\"vm.productScopeAVMPicklistEntries\" field-label=\"vm.labels.Scope\" name=\"scope\">\n            </material-form-field>\n        </div>\n        <div class=\"align-top\">\n            <material-form-field model=\"item.operator\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.avmOperatorPicklistEntries\" field-label=\"vm.labels.Operator\" name=\"operator\">\n            </material-form-field>\n        </div>\n        <div class=\"align-top multiselect-autocomplete-container\">\n            <material-form-field model=\"item.model\" field-type=\"multiselect-autocomplete\" field-label=\"item.scope\" properties=\"item\" drop-disable></material-form-field>\n        </div>\n    </div>\n    <div class=\"clearfix\"></div>\n</div>\n"

/***/ }),
/* 451 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"matrix-container\">\n    <div class=\"matrix-header-container\">\n        <div data-ng-repeat=\"column in vm.avmMatrixColumnList\" class=\"matrix-header\">\n            <div class=\"matrix-header-name\" data-ng-class=\"{'last-column': $index === (vm.avmMatrixColumnList.length - 1)}\" title=\"{{column.name}}\">{{column.name}}</div>\n            <button class=\"slds-button\" data-ng-if=\"$index === (vm.avmMatrixColumnList.length - 1)\" data-ng-click=\"vm.addAttribute()\"> {{vm.labels.AddColumn}}\n            </button>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n    <div data-ng-repeat=\"matrix in vm.matrixList\" class=\"matrix-row\" data-ng-if=\"vm.matrixList.length > 0\">\n        <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n            <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                <i class=\"material-icons\">more_vert</i>\n            </button>\n            <ul class=\"dropdown-menu\">\n                <li data-ng-click=\"vm.removeMatrixEntry($index)\" class=\"action-Menu\">\n                    <i class=\"material-icons\">clear</i>\n                    <span class=\"remove-label\">{{vm.labels.Remove}}</span>\n                </li>\n                <li class=\"action-Menu\" data-ng-click=\"vm.addMatrixEntry($index)\">\n                    <i class=\"material-icons\">add</i>\n                    <span class=\"add-label\">Add</span>\n                </li>\n            </ul>\n        </div>\n        <div data-ng-repeat=\"column in vm.avmMatrixColumnList\" class=\"matrix-column\">\n            <material-form-field model=\"matrix[column.field]\" field-type=\"{{column.type}}\" is-editable=\"true\" properties=\"column.picklistEntries\" drop-disable>\n            </material-form-field>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n    <div class=\"pagination-container text-center\" data-ng-if=\"vm.avmMatrixColumnList.length > 0\">\n        <div class=\"navigation-control\">\n            <div class=\"btn-group dropup text-right\" role=\"group\">\n                <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                    {{vm.labels.RecordsPerPage | userMessage:vm.numberOfProductsPerChunk}}\n                    <span class=\"caret\"></span>\n                </button>\n                <ul class=\"dropdown-menu\">\n                    <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 5\">5</a></li>\n                    <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 10\">10</a></li>\n                    <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 15\">15</a></li>\n                    <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 20\">20</a></li>\n                    <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 25\">25</a></li>\n                    <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 50\">50</a></li>\n                    <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 100\">100</a></li>\n                </ul>\n            </div>\n            <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableMatrixLeftBtn\" data-ng-click=\"vm.getMatrixTableData('previous')\">\n                <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n            <span class=\"disabled\">{{vm.MatrixPaginationCenterText}}</span>\n            <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableMatrixRightBtn\" data-ng-click=\"vm.getMatrixTableData('next')\">\n                <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 452 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var constraintRuleController = function($mdDialog, selectedRule, type, conditionsList, statementsList, tabToOpen, indexToHighlight, i18nService, rulesService,$scope) {
	
	        var vm = this;
	
	        vm.selectedRule = selectedRule;
	        vm.conditionsList = conditionsList;
	        vm.statementsList = statementsList;
	        vm.type = type;
	        vm.selctedTabIndex = tabToOpen;
	        vm.indexToHighlight = indexToHighlight;
	        vm.labels = i18nService.CustomLabel;
	        vm.alertList = [];
	
	        vm.dispositionPicklistEntries = {
	            PicklistValues: rulesService.getConstraintRuleActionPicklistValues('ActionDisposition__c'),
	            methodToCallInController: updateMessageDetails
	        };
	
	        vm.matchRulePicklistEntries = {
	            PicklistValues: rulesService.getConstraintRuleConditionPicklistValues('MatchRule__c')
	        };
	
	
	        vm.inclusionMinMaxMatchPicklistEntries = {
	            PicklistValues: [{
	                label: 'Include Any',
	                value: 'Include Any'
	            }, {
	                label: 'Include All',
	                value: 'Include All'
	            }, {
	                label: 'Include Min/Max',
	                value: 'Include Min/Max'
	            }]
	        };
	        vm.exclusionMinMaxMatchPicklistEntries = {
	            PicklistValues: [{
	                label: 'Exclude All',
	                value: 'Exclude All'
	            }, {
	                label: 'Exclude After One',
	                value: 'Exclude After One'
	            }, {
	                label: 'Exclude After Max',
	                value: 'Exclude After Max'
	            }]
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        function updateMessageDetails(messageTypeSelected) {
	            var currentMessage = vm.selectedStatement.messageDetails,
	                hasOriginalMessage = false;
	            if (currentMessage === vm.labels.RuleValidationErrorDefaultMessage || currentMessage === vm.labels.RuleValidationWarningDefaultMessage) {
	                hasOriginalMessage = true;
	            }
	            if (hasOriginalMessage && messageTypeSelected === 'Error') {
	                vm.selectedStatement.messageDetails = vm.labels.RuleValidationErrorDefaultMessage;
	            } else if (hasOriginalMessage && messageTypeSelected === 'Warning') {
	                vm.selectedStatement.messageDetails = vm.labels.RuleValidationWarningDefaultMessage;
	            }
	        }
	
	        function prepareContent() {
	            for (var i = 0; i < vm.conditionsList.length; i++) {
	                var tempCondition = vm.conditionsList[i],
	                    matchRule = tempCondition.matchRule,
	                    matchMinProducts = tempCondition.matchMinProducts,
	                    matchMaxProducts = tempCondition.matchMaxProducts;
	                if (matchRule !== 'Min/Max') {
	                    vm.conditionsList[i].matchMinProducts = '';
	                    vm.conditionsList[i].matchMaxProducts = '';
	                }
	            }
	            for (var i = 0; i < vm.statementsList.length; i++) {
	                var tempStatement = vm.statementsList[i],
	                    minMaxMatchRule = tempStatement.minMaxMatchRule,
	                    statementType = tempStatement.actionType;
	                if (statementType === 'Inclusion') {
	                    if (minMaxMatchRule !== 'Include Min/Max') {
	                        vm.statementsList[i].minProducts = '';
	                        vm.statementsList[i].maxProducts = '';
	                    }
	                } else if (statementType === 'Exclusion') {
	                    if (minMaxMatchRule !== 'Exclude After Max') {
	                        vm.statementsList[i].maxProducts = '';
	                    }
	                }
	            }
	        }
	
	        function isContentValid() {
	            var response = {
	                isValid: true,
	                conditionErrorType: '',
	                statementErrorType: ''
	            };
	            /* For Conditions list */
	            for (var i = 0; i < vm.conditionsList.length; i++) {
	                var tempCondition = vm.conditionsList[i],
	                    matchRule = tempCondition.matchRule,
	                    matchMinProducts = tempCondition.matchMinProducts,
	                    matchMaxProducts = tempCondition.matchMaxProducts;
	                if (matchRule === 'Min/Max') {
	                    if (!matchMinProducts || !matchMaxProducts) {
	                        response.isValid = false;
	                        response.conditionErrorType = 'mandatoryFieldsMissing';
	                        break;
	                    }
	                    if (matchMinProducts > matchMaxProducts) {
	                        response.isValid = false;
	                        response.conditionErrorType = vm.labels.MinProductCannotExceedMaxProducts;
	                        break;
	                    }
	                }
	                /* For checking the checkboxes*/
	                if(!tempCondition.matchInPrimaryLines && !tempCondition.matchInOptions) {
	                    response.isValid = false; 
	                    response.conditionErrorType = 'checkboxesMissing';
	                    break;
	                }
	            }
	            if (response.isValid) {
	                /* For Statements list */
	                for (var i = 0; i < vm.statementsList.length; i++) {
	                    var tempStatement = vm.statementsList[i],
	                        minMaxMatchRule = tempStatement.minMaxMatchRule,
	                        minProducts = tempStatement.minProducts,
	                        maxProducts = tempStatement.maxProducts;
	                    if (minMaxMatchRule === 'Include Min/Max') {
	                        if (!minProducts || !maxProducts) {
	                            response.isValid = false;
	                            response.statementErrorType = 'mandatoryFieldsMissing';
	                            break;
	                        }
	                        if (minProducts > maxProducts) {
	                            response.isValid = false;
	                            response.statementErrorType = vm.labels.MinProductCannotExceedMaxProducts;
	                            break;
	                        }
	                    } else if (minMaxMatchRule === 'Exclude After Max') {
	                        if (!maxProducts) {
	                            response.isValid = false;
	                            response.statementErrorType = 'mandatoryFieldsMissing';
	                            break;
	                        }
	                    }
	                }
	            }
	
	            return response;
	        }
	        vm.save = function() {
	            vm.constraintRuleForm.$setSubmitted();
	            if (vm.type === 'new') {
	                if (vm.constraintRuleForm.$valid) {
	                    $mdDialog.hide({
	                        rule: vm.selectedRule ? angular.copy(vm.selectedRule) : {},
	                        conditionsList: vm.conditionsList ? angular.copy(vm.conditionsList) : [],
	                        statementList: vm.statementsList ? angular.copy(vm.statementsList) : [],
	                        type: vm.type
	                    });
	                } else {
	                    addAlert({
	                        type: 'error',
	                        msg: getRuleNameValidationErrorMsg()
	                    });
	                }
	            } else {
	                if (vm.constraintRuleForm.$valid) {
	                    var response = isContentValid();
	                    if (response.isValid) {
	                        prepareContent();
	                        $mdDialog.hide({
	                            rule: vm.selectedRule ? angular.copy(vm.selectedRule) : {},
	                            conditionsList: vm.conditionsList ? angular.copy(vm.conditionsList) : [],
	                            statementList: vm.statementsList ? angular.copy(vm.statementsList) : [],
	                            type: vm.type
	                        });
	                    } else {
	                        /* Error in data content */
	                        var errorType = response.conditionErrorType,
	                            errorMsg = '';
	                        if (!errorType) {
	                            errorType = response.statementErrorType;
	                        }
	
	                        if (errorType === 'mandatoryFieldsMissing') {
	                            errorMsg = vm.labels.RulesMissingFieldUserMessage;
	                        } else if (errorType === vm.labels.MinProductCannotExceedMaxProducts) {
	                            errorMsg = vm.labels.MinProductCannotExceedMaxProducts;
	                        } else if(errorType === 'checkboxesMissing') {
	                            errorMsg = vm.labels.ProductConstraintRuleError;
	                        }
	                        addAlert({
	                            type: 'error',
	                            msg: errorMsg
	                        });
	                    }
	                } else if ((!angular.isDefined(vm.selectedRule.name) || vm.selectedRule.name === '') || (angular.isDefined(vm.selectedRule.name) && vm.selectedRule.name.length > 80)) {
	                    addAlert({
	                      type: 'error',
	                      msg: getRuleNameValidationErrorMsg()
	                    });
	                } else {
	                    /* Mandatory fields are not filled up */
	                    addAlert({
	                        type: 'error',
	                        msg: vm.labels.RulesMissingFieldUserMessage
	                    });
	                }
	            }
	
	
	        };
	
	        function getRuleNameValidationErrorMsg() {
	          return angular.isDefined(vm.selectedRule.name) && vm.selectedRule.name.length > 80
	              ? vm.labels.RuleNameTooLong
	              : vm.labels.RuleNameMissing;
	        }
	
	        vm.selectedCondition = {};
	        vm.selectCondition = function(index, item) {
	            updateSelectedItem(index, 'condition');
	            vm.selectedCondition = item;
	        };
	
	        vm.selectedStatement = {};
	        vm.selectStatement = function(index, item) {
	            updateSelectedItem(index, 'statement');
	            vm.selectedStatement = item;
	        };
	
	        function updateSelectedItem(selectedIndex, typeOfItem) {
	            /* TODO : unselect everything and select one from the current selected one */
	            var items = [];
	
	            if (typeOfItem === 'condition') {
	                items = vm.conditionsList;
	            } else {
	                items = vm.statementsList;
	            }
	            for (var index = 0; index < items.length; index++) {
	                items[index].selected = false;
	            }
	            for (var index = 0; index < items.length; index++) {
	                if (index === selectedIndex) {
	                    items[index].selected = true;
	                } else {
	                    items[index].selected = false;
	                }
	            }
	
	        }
	
	        function preSelectItem() {
	            if (tabToOpen > 0 && indexToHighlight >= 0) {
	                if (tabToOpen == 1) {
	                    updateSelectedItem(indexToHighlight, 'condition');
	                    vm.selectedCondition = vm.conditionsList[indexToHighlight];
	                } else if (tabToOpen == 2) {
	                    updateSelectedItem(indexToHighlight, 'statement');
	                    vm.selectedStatement = vm.statementsList[indexToHighlight];
	                }
	            }
	        }
	        preSelectItem();
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	        // Watches for checkbox changes for match case in constraint form
	        $scope.$watch('vm.selectedCondition.matchInPrimaryLines', function(newValue, oldValue) {
	            if(!vm.selectedCondition.matchInPrimaryLines && !vm.selectedCondition.matchInOptions) {
	                vm.selectedCondition.matchInOptions = true;
	           }
	        });
	        $scope.$watch('vm.selectedCondition.matchInOptions', function(newValue, oldValue) {
	            if(!vm.selectedCondition.matchInPrimaryLines && !vm.selectedCondition.matchInOptions) {
	                vm.selectedCondition.matchInPrimaryLines = true;
	           }
	        });
	    };
	    constraintRuleController.$inject = [
	        '$mdDialog',
	        'selectedRule',
	        'type',
	        'conditionsList',
	        'statementsList',
	        'tabToOpen',
	        'indexToHighlight',
	        'i18nService',
	        'rulesService',
	        '$scope'
	    ];
	
	    module.exports = constraintRuleController;
	})();


/***/ }),
/* 453 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"rules-dialog\">\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n        </i>\n    </button>\n    <form name=\"vm.constraintRuleForm\">\n        <md-dialog-content class=\"rule-dialog-content\">\n            <div class=\"error-indicator\">\n                <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"5000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n            </div>\n            <md-tabs md-selected=\"vm.selctedTabIndex\" md-dynamic-height md-border-bottom>\n                <md-tab label=\"Rule\">\n                    <md-content>\n                        <div layout=\"row\">\n                            <div class=\"md-padding content-wide\">\n                                <form class=\"product-detail-form\" novalidate name=\"vm.ruleDetailsForm\">\n                                    <div layout=\"row\">\n                                        <h4 class=\"dialog-right-heading\"><strong>{{vm.labels.Details}}</strong></h4>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.RuleName\" is-required=\"true\" name=\"ruleName\" max-length=\"80\" allow-invalid=\"true\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.constraintRuleForm.ruleName.$error\" ng-if=\"vm.constraintRuleForm.ruleName.$touched || vm.constraintRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.MandatoryField }}\n                                                </p>\n                                                <p ng-message=\"maxlength\" class=\"formError\">\n                                                    {{ vm.labels.InputMaxLimit80 }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.isActive\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.IsActive\" element-id=\"isActive\">\n                                            </material-form-field>\n                                        </div>\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.context\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.Context\" element-id=\"context\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.sequence\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"::vm.labels.Sequence\">\n                                            </material-form-field>\n                                        </div>\n                                        <div class=\"flex\">\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\" class=\"metadata-date-container\">\n                                        <div class=\"flex\" flex=\"45\">\n                                            <material-form-field model=\"vm.selectedRule.effectiveDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.EffectiveDate\">\n                                            </material-form-field>\n                                        </div>\n                                        <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                            <material-form-field model=\"vm.selectedRule.expirationDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.ExpirationDate\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\" class=\"metadata-description-container\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.description\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"::vm.labels.ShortDescription\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\" data-ng-if=\"vm.type !== 'new' \">\n                                        <div class=\"flex\" flex=\"45\">\n                                            <activity-log field-label=\"vm.labels.CreatedBy\" field-edit-by=\"vm.selectedRule.createdById\" field-edit-date=\"vm.selectedRule.CreatedDate\"></activity-log>\n                                        </div>\n                                        <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                            <activity-log field-label=\"::vm.labels.LastModifiedBy\" field-edit-by=\"vm.selectedRule.lastModifiedById\" field-edit-date=\"vm.selectedRule.LastModifiedDate\"></activity-log>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n                <md-tab label=\"Conditions\" data-ng-if=\"vm.type !== 'new' \">\n                    <md-content>\n                        <div layout=\"row\">\n                            <div flex=\"30\" class=\"dialog-left\">\n                                <div class=\"list-table\">\n                                    <table>\n                                        <tbody>\n                                            <tr ng-repeat=\"item in vm.conditionsList\" ng-click=\"vm.selectCondition($index, item)\" data-ng-class=\"item.selected === true ? 'selected':''\">\n                                                <td>\n                                                    {{::item.label }}\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                            <div flex=\"70\" class=\"dialog-right\">\n                                <div class=\"md-padding\" data-ng-if=\"vm.selectedCondition.label\">\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedCondition.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.ConditionName\" is-required=\"true\" name=\"conditionName\" max-length=\"80\" allow-invalid=\"true\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.constraintRuleForm.conditionName.$error\" ng-if=\"vm.constraintRuleForm.conditionName.$touched || vm.constraintRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.MandatoryField }}\n                                                </p>\n                                                <p ng-message=\"maxlength\" class=\"formError\">\n                                                    {{ vm.labels.InputMaxLimit80 }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <material-form-field model=\"vm.selectedCondition.matchInPrimaryLines\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.MatchPrimaryLines\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedCondition.matchInOptions\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.MatchInOptions\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedCondition.matchInCartOptions\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.MatchInCartOptions\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedCondition.matchInLocation\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.MatchInLocation\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedCondition.matchInRelatedLines\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.MatchInRelatedLines\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedCondition.matchRule\" field-type=\"picklist\" is-editable=\"true\" field-label=\"::vm.labels.MatchRule\" properties=\"vm.matchRulePicklistEntries\">\n                                    </material-form-field>\n                                    <div layout=\"row\" data-ng-if=\"vm.selectedCondition.matchRule === 'Min/Max'\">\n                                        <div class=\"flex\" flex=\"45\">\n                                            <material-form-field model=\"vm.selectedCondition.matchMinProducts\" field-type=\"QUANTITY\" is-editable=\"true\" is-required=\"true\" field-label=\"::vm.labels.MatchMinProducts\" name=\"matchMinProducts\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.constraintRuleForm.matchMinProducts.$error\" ng-if=\"vm.constraintRuleForm.matchMinProducts.$touched || vm.constraintRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.MandatoryField }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                        <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                            <material-form-field model=\"vm.selectedCondition.matchMaxProducts\" field-type=\"QUANTITY\" is-editable=\"true\" is-required=\"true\" field-label=\"::vm.labels.MatchMaxProducts\" name=\"matchMaxProducts\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.constraintRuleForm.matchMaxProducts.$error\" ng-if=\"vm.constraintRuleForm.matchMaxProducts.$touched || vm.constraintRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.MandatoryField }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n                <md-tab label=\"STATEMENTS\" data-ng-if=\"vm.type !== 'new' \">\n                    <md-content>\n                        <div layout=\"row\">\n                            <div flex=\"30\" class=\"dialog-left\">\n                                <div class=\"list-table\">\n                                    <table>\n                                        <tbody>\n                                            <tr ng-repeat=\"item in vm.statementsList\" ng-click=\"vm.selectStatement($index, item)\" data-ng-class=\"item.selected === true ? 'selected':''\">\n                                                <td>\n                                                    {{::item.label }}\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                            <div flex=\"70\" class=\"dialog-right\">\n                                <div class=\"md-padding content-wide\" data-ng-if=\"vm.selectedStatement.label\">\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedStatement.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.StatementName\" is-required=\"true\" name=\"statementName\" max-length=\"80\" allow-invalid=\"true\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.constraintRuleForm.statementName.$error\" ng-if=\"vm.constraintRuleForm.statementName.$touched || vm.constraintRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.MandatoryField }}\n                                                </p>\n                                                <p ng-message=\"maxlength\" class=\"formError\">\n                                                    {{ vm.labels.InputMaxLimit80 }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <material-form-field model=\"vm.selectedStatement.matchInPrimaryLines\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.MatchPrimaryLines\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedStatement.matchInOptions\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.MatchInOptions\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedStatement.matchInCartOptions\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.MatchInCartOptions\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedStatement.matchInAsset\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.MatchInAsset\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedStatement.RepeatInclusion\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.RepeatInclusion\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedStatement.minMaxMatchRule\" field-type=\"picklist\" is-editable=\"true\" field-label=\"::vm.labels.MinMaxMatchingRule\" properties=\"vm.inclusionMinMaxMatchPicklistEntries\" data-ng-if=\"vm.selectedStatement.actionType === 'Inclusion'\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedStatement.minMaxMatchRule\" field-type=\"picklist\" is-editable=\"true\" field-label=\"::vm.labels.MinMaxMatchingRule\" properties=\"vm.exclusionMinMaxMatchPicklistEntries\" data-ng-if=\"vm.selectedStatement.actionType === 'Exclusion'\">\n                                    </material-form-field>\n                                    <div layout=\"row\" data-ng-if=\"vm.selectedStatement.minMaxMatchRule === 'Include Min/Max'\">\n                                        <div class=\"flex\" flex=\"45\">\n                                            <material-form-field model=\"vm.selectedStatement.minProducts\" field-type=\"QUANTITY\" is-editable=\"true\" is-required=\"true\" field-label=\"::vm.labels.MinProducts\" name=\"minProducts\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.constraintRuleForm.minProducts.$error\" ng-if=\"vm.constraintRuleForm.minProducts.$touched || vm.constraintRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.MandatoryField }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                        <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                            <material-form-field model=\"vm.selectedStatement.maxProducts\" field-type=\"QUANTITY\" is-editable=\"true\" is-required=\"true\" field-label=\"::vm.labels.MaxProducts\" name=\"maxProducts\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.constraintRuleForm.maxProducts.$error\" ng-if=\"vm.constraintRuleForm.maxProducts.$touched || vm.constraintRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.MandatoryField }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\" data-ng-if=\"vm.selectedStatement.minMaxMatchRule === 'Exclude After Max'\">\n                                        <div class=\"flex\" flex=\"45\">\n                                            <material-form-field model=\"vm.selectedStatement.maxProducts\" field-type=\"QUANTITY\" is-editable=\"true\" is-required=\"true\" field-label=\"::vm.labels.MaxProducts\" name=\"maxProducts\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.constraintRuleForm.maxProducts.$error\" ng-if=\"vm.constraintRuleForm.maxProducts.$touched || vm.constraintRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.MandatoryField }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                        <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedStatement.sequence\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"::vm.labels.Sequence\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedStatement.messageType\" field-type=\"picklist\" is-editable=\"true\" field-label=\"::vm.labels.MessagingType\" properties=\"vm.dispositionPicklistEntries\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\" class=\"statement-message-details\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedStatement.messageDetails\" field-type=\"textarea\" is-editable=\"true\" field-label=\"::vm.labels.MessageDetails\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n            </md-tabs>\n        </md-dialog-content>\n        <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n            <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n            <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n        </md-dialog-actions>\n    </form>\n</md-dialog>\n"

/***/ }),
/* 454 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productAttributeRuleController = function($mdDialog, selectedRule, type, tabToOpen, indexToHighlight, scopesList, actionsList, i18nService) {
	        var vm = this;
	
	        vm.selectedRule = selectedRule;
	        vm.scopeList = scopesList;
	        vm.statementsList = actionsList;
	        vm.type = type;
	        vm.selctedTabIndex = tabToOpen;
	        vm.indexToHighlight = indexToHighlight;
	        vm.labels = i18nService.CustomLabel;
	        vm.alertList = [];
	
	
	        vm.save = function() {
	            vm.productAttributeRuleForm.$setSubmitted();
	            if (vm.productAttributeRuleForm.$valid) {
	                $mdDialog.hide({
	                    rule: vm.selectedRule ? angular.copy(vm.selectedRule) : {},
	                    scopeList: vm.scopeList ? angular.copy(vm.scopeList) : [],
	                    statementList: vm.statementsList ? angular.copy(vm.statementsList) : [],
	                    type: vm.type
	                });
	            } else {
	                addAlert({
	                    type: 'error',
	                    msg: vm.labels.RuleNameMissing
	                });
	            }
	        };
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	    };
	    productAttributeRuleController.$inject = [
	        '$mdDialog',
	        'selectedRule',
	        'type',
	        'tabToOpen',
	        'indexToHighlight',
	        'scopesList',
	        'actionsList',
	        'i18nService'
	    ];
	
	    module.exports = productAttributeRuleController;
	})();


/***/ }),
/* 455 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"rules-dialog\">\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n        </i>\n    </button>\n    <form name=\"vm.productAttributeRuleForm\">\n        <md-dialog-content class=\"rule-dialog-content\">\n            <div class=\"error-indicator\">\n                <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"5000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n            </div>\n            <md-tabs md-selected=\"vm.selctedTabIndex\" md-dynamic-height md-border-bottom>\n                <md-tab label=\"RULE\">\n                    <md-content>\n                        <div layout=\"row\">\n                            <div class=\"md-padding content-wide\">\n                                <form class=\"product-detail-form\" novalidate name=\"vm.ruleDetailsForm\">\n                                    <div layout=\"row\">\n                                        <h4 class=\"dialog-right-heading\"><strong>{{vm.labels.Details}}</strong></h4>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.RuleName\" name=\"parName\" is-required=\"true\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.productAttributeRuleForm.parName.$error\" ng-if=\"vm.productAttributeRuleForm.parName.$touched || vm.productAttributeRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.FootnotesIsMandatory }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.isActive\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.IsActive\" element-id=\"active\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\" flex=\"45\">\n                                            <material-form-field model=\"vm.selectedRule.effectiveDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"vm.labels.EffectiveDate\">\n                                            </material-form-field>\n                                        </div>\n                                        <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                            <material-form-field model=\"vm.selectedRule.expirationDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"vm.labels.ExpirationDate\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\" data-ng-if=\"vm.type !== 'new' \">\n                                        <div class=\"flex\" flex=\"45\">\n                                            <activity-log field-label=\"vm.labels.CreatedBy\" field-edit-by=\"vm.selectedRule.createdById\" field-edit-date=\"vm.selectedRule.CreatedDate\"></activity-log>\n                                        </div>\n                                        <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                            <activity-log field-label=\"::vm.labels.LastModifiedBy\" field-edit-by=\"vm.selectedRule.lastModifiedById\" field-edit-date=\"vm.selectedRule.LastModifiedDate\"></activity-log>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n            </md-tabs>\n        </md-dialog-content>\n        <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n            <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n            <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n        </md-dialog-actions>\n    </form>\n</md-dialog>\n"

/***/ }),
/* 456 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var ruleCriteriaEditorController = function($mdDialog, i18nService, type, criteria, picklistEntries, statementPicklistEntries, criteriaIndex, rulesService, actionType) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	        vm.alertList = [];
	        vm.actionType = actionType;
	        var selectedRowIndex;
	        vm.trackSelectEvent = function(index) {
	            selectedRowIndex = index;
	        };
	
	        function getConditionCriterias(obj) {
	            if (obj && obj.filter && obj.filter.predicates) {
	                var temp = obj.filter.predicates;
	                for (var i = 0; i < temp.length; i++) {
	                    var fieldName = temp[i]['FieldName'],
	                        value,
	                        fieldType = temp[i].FieldType;
	
	                    if (fieldName.indexOf(rulesService.getPrefixedAttribute('AttributeValueId__r')) <= -1) {
	                        value = temp[i]['FieldName'];
	                    } else {
	                        value = temp[i]['FieldName'];
	                    }
	
	                    if (fieldType === 'PICKLIST' || fieldType === 'MULTIPICKLIST') {
	                        (function(label, j, value, fieldType) {
	                            rulesService.targetFieldSearchForCriteria(label)
	                                .then(function(response) {
	                                    temp[j]['picklistValues'] = {
	                                        PicklistValues: response.length > 0 ? rulesService.getMatchingPicklistValues(response, label) : []
	                                    };
	                                    if (fieldType === 'MULTIPICKLIST') {
	                                        if (angular.isString(temp[j].FieldValue)) {
	                                            temp[j].FieldValue = temp[j].FieldValue.split(';');
	                                        }
	                                    }
	                                    temp[j]['targetField'] = {
	                                        autocomplete: {
	                                            'selectedItemChange': updateChargeTypes,
	                                            'querySearch': rulesService.targetFieldSearchForCriteria,
	                                            'displayName': 'label',
	                                            'selectedItem': {
	                                                'value': value,
	                                                'label': rulesService.getConditionFilterLabel(obj['sObjectLabel'], fieldName, temp[j]['FieldLabel'])
	                                            }
	                                        }
	                                    };
	                                });
	                        })(temp[i]['FieldLabel'], i, value, fieldType);
	                    } else {
	                        if (fieldType === 'DOUBLE' || fieldType === 'CURRENCY' || fieldType === 'PERCENT') {
	                            temp[i].FieldValue = temp[i].FieldValue ? +temp[i].FieldValue : 0;
	                        } else if (fieldType === 'DATETIME' || fieldType === 'DATE') {
	                            temp[i].FieldValue = temp[i].FieldValue ? new Date(temp[i].FieldValue) : undefined;
	                        }
	                        temp[i]['picklistValues'] = { PicklistValues: [] };
	                        temp[i]['targetField'] = {
	                            autocomplete: {
	                                'selectedItemChange': updateChargeTypes,
	                                'querySearch': rulesService.targetFieldSearchForCriteria,
	                                'displayName': 'label',
	                                'selectedItem': {
	                                    'value': value,
	                                    'label': rulesService.getConditionFilterLabel(obj['sObjectLabel'], fieldName, temp[i]['FieldLabel'])
	                                }
	                            }
	                        };
	                    }
	
	                }
	            }
	            return obj;
	        }
	
	        function getActionCriterias(obj, actionType) {
	
	            if (obj && obj.filter && obj.filter.predicates) {
	                var temp = obj.filter.predicates;
	                for (var i = 0; i < temp.length; i++) {
	                    var value,
	                        fieldType = temp[i].FieldType;
	                    if (actionType && actionType === 'Validation') {
	                        var fieldTypeFromName = temp[i]['FieldName'];
	                        if (fieldTypeFromName.indexOf('AttributeValueId__r') <= -1) {
	                            value = temp[i]['FieldName'];
	                            temp[i]['statementProduct'] = temp[i]['FieldName'];
	                        } else {
	                            value = temp[i]['FieldName'];
	                            temp[i]['statementProduct'] = temp[i]['FieldName'];
	                        }
	
	                    } else {
	                        var samplePrefix = rulesService.getPrefixedAttribute('ProductId__r');
	                        temp[i]['statementProduct'] = samplePrefix + '.' + temp[i]['FieldName'];
	                    }
	                    if (fieldType === 'PICKLIST' || fieldType === 'MULTIPICKLIST') {
	                        if (actionType && actionType === 'Validation') {
	                            (function(label, k, value, fieldType) {
	                                rulesService.targetFieldSearchForCriteria(label)
	                                    .then(function(response) {
	                                        temp[k]['picklistValues'] = {
	                                            PicklistValues: response.length > 0 ? rulesService.getMatchingPicklistValues(response, label) : []
	                                        };
	                                        if (fieldType === 'MULTIPICKLIST') {
	                                            if (angular.isString(temp[k].FieldValue)) {
	                                                temp[k].FieldValue = temp[k].FieldValue.split(';');
	                                            }
	                                        }
	                                        temp[k]['targetField'] = {
	                                            autocomplete: {
	                                                'selectedItemChange': updateChargeTypes,
	                                                'querySearch': rulesService.targetFieldSearchForCriteria,
	                                                'displayName': 'label',
	                                                'selectedItem': {
	                                                    'value': value,
	                                                    'label': rulesService.getConditionFilterLabel(obj['sObjectLabel'], temp[k]['FieldName'], temp[k]['FieldLabel'])
	                                                }
	                                            }
	                                        };
	                                    });
	                            })(temp[i]['FieldLabel'], i, value, fieldType);
	                        } else {
	                            var items = statementPicklistEntries,
	                                selectedItem;
	                            for (var item = 0; item < items.length; item++) {
	                                if (items[item].value === temp[i].statementProduct) {
	                                    selectedItem = items[item];
	                                    break;
	                                }
	                            }
	                            temp[i]['picklistValues'] = {
	                                PicklistValues: selectedItem.picklistValues
	                            };
	                            if (fieldType === 'MULTIPICKLIST') {
	                                temp[i].FieldValue = temp[i].FieldValue.split(';');
	                            }
	                            temp[i]['targetField'] = {
	                                autocomplete: {
	                                    'selectedItemChange': updateChargeTypes,
	                                    'querySearch': rulesService.targetFieldSearchForCriteria,
	                                    'displayName': 'label',
	                                    'selectedItem': {
	                                        'value': value,
	                                        'label': rulesService.getConditionFilterLabel(obj['sObjectLabel'], temp[i]['FieldName'], temp[i]['FieldLabel'])
	                                    }
	                                }
	                            };
	                        }
	                    } else {
	                        if (fieldType === 'DOUBLE' || fieldType === 'CURRENCY' || fieldType === 'PERCENT') {
	                            temp[i].FieldValue = temp[i].FieldValue ? +temp[i].FieldValue : 0;
	                        } else if (fieldType === 'DATETIME' || fieldType === 'DATE') {
	                            temp[i].FieldValue = temp[i].FieldValue ? new Date(temp[i].FieldValue) : undefined;
	                        }
	                        temp[i]['picklistValues'] = { PicklistValues: [] };
	                        temp[i]['targetField'] = {
	                            autocomplete: {
	                                'selectedItemChange': updateChargeTypes,
	                                'querySearch': rulesService.targetFieldSearchForCriteria,
	                                'displayName': 'label',
	                                'selectedItem': {
	                                    'value': value,
	                                    'label': rulesService.getConditionFilterLabel(obj['sObjectLabel'], temp[i]['FieldName'], temp[i]['FieldLabel'])
	                                }
	                            }
	                        };
	                    }
	
	                }
	            }
	
	            return obj;
	        }
	
	        var criteriaObj = '';
	        if (criteria) {
	            if (angular.isString(criteria)) {
	                criteriaObj = JSON.parse(criteria);
	                if (criteriaObj) {
	                    var predicates = criteriaObj.filter.predicates;
	                    if (predicates.length > 0) {
	                        for (var i = 0; i < predicates.length; i++) {
	                            var temp = predicates[i];
	                            if (temp.FieldType === 'BOOLEAN') {
	                                temp.FieldValue = (temp.FieldValue === 'true');
	                            }
	                        }
	                    }
	                }
	            } else {
	                criteriaObj = criteria;
	            }
	        }
	        if (criteriaObj) {
	            if (type === 'Condition') {
	                criteriaObj['sObjectName'] = rulesService.getPrefixedAttribute("LineItem__c");
	                criteriaObj['sObjectLabel'] = "Line Item";
	                vm.criteria = getConditionCriterias(criteriaObj);
	            } else if (type === 'Action') {
	                criteriaObj['actionType'] = actionType;
	                if (actionType === 'Validation') {
	                    criteriaObj['sObjectName'] = rulesService.getPrefixedAttribute("LineItem__c");
	                    criteriaObj['sObjectLabel'] = "Line Item";
	                } else {
	                    criteriaObj['sObjectName'] = "Product2";
	                    criteriaObj['sObjectLabel'] = "Product";
	                }
	                vm.criteria = getActionCriterias(criteriaObj, actionType);
	            }
	        } else {
	            if (type === 'Condition') {
	                vm.criteria = {
	                    sObjectName: rulesService.getPrefixedAttribute("LineItem__c"),
	                    sObjectLabel: "Line Item",
	                    searchText: null,
	                    filter: {
	                        predicates: [],
	                        hasRHSFields: false,
	                        childFilter: null
	                    }
	                };
	            } else if (type === 'Action') {
	                vm.criteria = {
	                    searchText: null,
	                    filter: {
	                        predicates: [],
	                        hasRHSFields: false,
	                        childFilter: null
	                    }
	                };
	            }
	        }
	        if (vm.criteria.filter.condExpr !== '') {
	            vm.showAdvancedPanel = true;
	        } else {
	            vm.showAdvancedPanel = false;
	        }
	        vm.type = type;
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        function getNextRowNumber() {
	            return (vm.criteria.filter.predicates.length + 1);
	        }
	        vm.conditionAssociationPicklistEntries = {
	            PicklistValues: picklistEntries
	        };
	        vm.statementProductPicklistEntries = {
	            PicklistValues: statementPicklistEntries,
	            methodToCallInController: updateFieldTypeAndValues
	        };
	
	        function updateFieldTypeAndValues(value) {
	            var selectedItem, items = vm.statementProductPicklistEntries.PicklistValues;
	            for (var item = 0; item < items.length; item++) {
	                if (items[item].value === value) {
	                    selectedItem = items[item];
	                    break;
	                }
	            }
	            vm.criteria.filter.predicates[selectedRowIndex]['FieldType'] = selectedItem.fieldType;
	            vm.criteria.filter.predicates[selectedRowIndex]['picklistValues'] = { PicklistValues: selectedItem.picklistValues || [] };
	        }
	
	        vm.addFilter = function() {
	            var targetField, nextRowNumber;
	            if (vm.type === 'Action') {
	                if (actionType && actionType === 'Validation') {
	                    targetField = {
	                        autocomplete: {
	                            'selectedItemChange': updateChargeTypes,
	                            'querySearch': rulesService.targetFieldSearchForCriteria,
	                            'displayName': 'label'
	                        }
	                    }
	                } else {
	                    targetField = {
	                        autocomplete: {
	                            'selectedItemChange': updateChargeTypes,
	                            'querySearch': rulesService.targetFieldSearchForActionCriteria,
	                            'displayName': 'label'
	                        }
	                    }
	                }
	            } else {
	                targetField = {
	                    autocomplete: {
	                        'selectedItemChange': updateChargeTypes,
	                        'querySearch': rulesService.targetFieldSearchForCriteria,
	                        'displayName': 'label'
	                    }
	                }
	            }
	            nextRowNumber = getNextRowNumber();
	            vm.criteria.filter.predicates.push({
	                'RowNum': nextRowNumber,
	                'RHSSObjectName': null,
	                'RHSFieldType': null,
	                'RHSFieldName': null,
	                'RHSFieldLabel': null,
	                'RHSChildFilterName': null,
	                'RefFieldName': null,
	                'OffsetValue': null,
	                'LHSSObjectName': null,
	                'LHSChildFilterName': null,
	                'FieldValue': '',
	                'FieldType': '',
	                'FieldName': '',
	                'FieldLabel': '',
	                'CompOper': '',
	                'BoolOper': 'AND',
	                'statementProduct': '',
	                'targetField': targetField
	            });
	            updateAdvancedCondition(nextRowNumber);
	        };
	
	        function updateRowNumValue() {
	            var filters = vm.criteria.filter.predicates;
	            for (var i = 0; i < filters.length; i++) {
	                filters[i].RowNum = (i + 1);
	            }
	        }
	
	        function updateAdvancedCondition(nextRowNumber) {
	            var expr = vm.criteria.filter.condExpr,
	                finalExpression = '';
	            if (expr) {
	                finalExpression = expr + ' AND ' + nextRowNumber;
	            } else {
	                finalExpression = nextRowNumber;
	            }
	            vm.criteria.filter.condExpr = finalExpression;
	
	        }
	        vm.removeFilter = function(index) {
	            vm.criteria.filter.predicates.splice(index, 1);
	            updateRowNumValue();
	            vm.prepareConditionExpression();
	        };
	
	        function filterListContainsError() {
	            var containsError = false;
	            if (vm.criteria.filter.predicates.length > 0) {
	                var predicates = vm.criteria.filter.predicates;
	                for (var i = 0; i < predicates.length; i++) {
	
	                    var targetField = predicates[i].targetField,
	                        operator = predicates[i].CompOper;
	                    if (vm.type === 'Action' && actionType !== 'Validation') {
	                        var statementProduct = predicates[i].statementProduct;
	                        if (angular.isDefined(statementProduct) && statementProduct !== '' && statementProduct !== null && (operator !== undefined && operator !== '')) {
	                            containsError = false;
	                            predicates[i].hasError = false;
	                        } else {
	                            containsError = true;
	                            predicates[i].hasError = true;
	                        }
	                    } else {
	                        if (targetField && targetField.autocomplete && targetField.autocomplete.selectedItem) {
	                            if (!targetField.autocomplete.selectedItem.value || !targetField.autocomplete.selectedItem.label) {
	                                containsError = true;
	                                predicates[i].hasError = true;
	                            } else {
	                                predicates[i].hasError = false;
	                            }
	                        } else {
	                            containsError = true;
	                            predicates[i].hasError = true;
	                        }
	                        if (operator === undefined || operator === '') {
	                            containsError = true;
	                            predicates[i].hasError = true;
	                        } else {
	                            if (predicates[i].hasError !== true) {
	                                predicates[i].hasError = false;
	                            }
	
	                        }
	                    }
	
	                }
	            }
	            return containsError;
	        }
	
	        function prepareCriteriaExpression(condExpr) {
	
	            var str = '';
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.criteria.filter.predicates.length > 0) {
	                    var predicates = vm.criteria.filter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < condExprArr.length; i++) {
	                    if (!isNaN(+condExprArr[i])) {
	                        var value = +condExprArr[i];
	                        if (value !== 0) {
	                            if (rowNumArr.indexOf(value) <= -1) {
	                                str += '{' + (value - 1) + '}';
	                            } else {
	                                var predicates = vm.criteria.filter.predicates;
	                                var fieldLabel = predicates[(value - 1)].FieldLabel,
	                                    fieldValue = predicates[(value - 1)].FieldValue,
	                                    fieldType = predicates[(value - 1)].FieldType,
	                                    operator = predicates[(value - 1)].CompOper;
	                                if (angular.isString(fieldLabel)) {
	                                    fieldLabel = fieldLabel.trim();
	                                }
	                                if (angular.isString(fieldValue)) {
	                                    fieldValue = fieldValue.trim();
	                                }
	                                str += prepareExpressionString(fieldLabel, fieldValue, operator);
	                            }
	                        }
	
	                    } else {
	                        str += condExprArr[i] + ' ';
	                    }
	                }
	            }
	
	            return str !== '' ? str.trim() : str;
	        }
	
	        function prepareExpressionString(label, value, operator) {
	            var str = '';
	            switch (operator) {
	                case 'equal to':
	                    {
	                        str = '(' + label + ' = ' + value + ') ';
	                        break;
	                    }
	                case 'not equal to':
	                    {
	                        str = '(' + label + ' != ' + value + ') ';
	                        break;
	                    }
	                case 'starts with':
	                    {
	                        str = '(' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case 'contains':
	                    {
	                        str = '(' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case 'does not contain':
	                    {
	                        str = '(NOT ' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case 'less than':
	                    {
	                        str = '(' + label + ' < ' + value + ') ';
	                        break;
	                    }
	                case 'greater than':
	                    {
	                        str = '(' + label + ' > ' + value + ') ';
	                        break;
	                    }
	                case 'less than or equal to':
	                    {
	                        str = '(' + label + ' <= ' + value + ') ';
	                        break;
	                    }
	                case 'greater than or equal to':
	                    {
	                        str = '(' + label + ' >= ' + value + ') ';
	                        break;
	                    }
	                case 'in':
	                    {
	                        str = '(' + label + ' IN ' + value + ') ';
	                        break;
	                    }
	                case 'not in':
	                    {
	                        str = '(' + label + ' NOT IN ' + value + ') ';
	                        break;
	                    }
	            }
	            return str;
	        }
	
	        vm.prepareConditionExpression = function() {
	            var expr = '';
	            var predicates = vm.criteria.filter.predicates;
	
	            for (var i = 0; i < predicates.length; i++) {
	                if (i === (predicates.length - 1)) {
	                    expr += predicates[i].RowNum;
	                } else {
	                    expr += predicates[i].RowNum + ' AND ';
	                }
	            }
	            vm.criteria.filter.condExpr = expr;
	        };
	
	        function getProduct2Label(value) {
	            var label;
	            for (var i = 0; i < statementPicklistEntries.length; i++) {
	                if (statementPicklistEntries[i].value === value) {
	                    label = statementPicklistEntries[i].label;
	                }
	            }
	            return label;
	        }
	
	        function getValueType(label) {
	            var response;
	            if (label) {
	                response = label.split(' : ')[0];
	            }
	            return response || label;
	        }
	
	        function updateCriteriaContent() {
	            if (vm.criteria.filter.predicates.length > 0) {
	                var predicates = vm.criteria.filter.predicates,
	                    exprStr = '';
	                vm.criteria.fields = [];
	                var condExpr = vm.criteria.filter.condExpr;
	                if (!condExpr) {
	                    vm.prepareConditionExpression();
	                }
	                for (var i = 0; i < predicates.length; i++) {
	                    var temp, label, value, length;
	                    if (vm.type === 'Action' && actionType !== 'Validation') {
	                        value = predicates[i].statementProduct,
	                            label = getProduct2Label(value);
	                        if (value) {
	                            var samplePrefix = rulesService.getPrefixedAttribute('ProductId__r') + '.';
	                            value = value.split(samplePrefix)[1];
	                        }
	                    } else {
	                        temp = predicates[i].targetField.autocomplete.selectedItem,
	                            label = temp.label;
	                        var valueType = getValueType(label);
	                        switch (valueType) {
	                            case 'PAV':
	                                {
	                                    value = temp.value;
	                                    value = value.replace('ProductAttributeValue__c', 'AttributeValueId__r');
	                                    break;
	                                }
	                            default:
	                                value = temp.value;
	                        }
	
	                    }
	
	                    predicates[i]['FieldName'] = value;
	                    predicates[i]['FieldLabel'] = label.split(':').length > 1 ? label.split(':')[1].trim() : label;
	                    vm.criteria.fields.push(value);
	                }
	
	                vm.criteria.exprStr = prepareCriteriaExpression(vm.criteria.filter.condExpr);
	
	
	            } else {
	                vm.criteria.filter.predicates = [];
	            }
	        }
	
	        vm.save = function() {
	            /* TODO : Check here if the half-filled rows are proper or not .else ask user to remove them 
	             * check for target field and operator values only.
	             */
	            if (!filterListContainsError()) {
	                updateCriteriaContent();
	
	                //convert vm.criteria.filter.condExpr to string
	                if(vm.criteria.filter && vm.criteria.filter.condExpr){
	                    vm.criteria.filter.condExpr = vm.criteria.filter.condExpr.toString();
	                }
	                
	                $mdDialog.hide({
	                    criteria: angular.copy(vm.criteria),
	                    type: type,
	                    index: criteriaIndex
	                });
	            } else {
	                vm.alertList = [];
	                vm.alertList.push({
	                    msg: 'Filter list contains error. Fix them before saving.'
	                })
	            }
	
	
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        function updateChargeTypes(item) {
	            if (item && item.fieldType) {
	                var predicates = vm.criteria.filter.predicates;
	                for (var i = 0; i < predicates.length; i++) {
	                    var selectedItem = predicates[i].targetField.autocomplete.selectedItem;
	                    if (selectedItem && (item.label === selectedItem.label)) {
	                        predicates[i].CompOper = '';
	                        if (item.fieldType) {
	                            predicates[i].FieldType = item.fieldType;
	                            if (item.fieldType === 'BOOLEAN') {
	                                predicates[i].FieldValue = false;
	                            } else if (item.fieldType === 'DATE' || item.fieldType === 'DATETIME') {
	                                predicates[i].FieldValue = undefined;
	                            } else {
	                                predicates[i].FieldValue = '';
	                            }
	                        }
	                        predicates[i].picklistValues = {
	                            PicklistValues: (item.picklistValues && item.picklistValues.length) ? item.picklistValues : []
	                        };
	                        break;
	                    }
	                }
	            }
	        }
	    };
	
	    ruleCriteriaEditorController.$inject = [
	        '$mdDialog',
	        'i18nService',
	        'type',
	        'criteria',
	        'picklistEntries',
	        'statementPicklistEntries',
	        'criteriaIndex',
	        'rulesService',
	        'actionType'
	    ];
	
	    module.exports = ruleCriteriaEditorController;
	})();


/***/ }),
/* 457 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"product-rule-criteria-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>{{vm.type}} Criteria</h2>\n            <span flex></span>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.addFilter()\">New Filter</button>\n            <button class=\"dialog-close-button slds-button\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n                </i>\n            </button>\n        </div>\n        <div class=\"error-indicator\">\n            <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"4000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"rule-criteria-dialog-content\">\n        <div class=\"filter-container\">\n            <div class=\"each-row\" data-ng-repeat=\"item in vm.criteria.filter.predicates\" data-ng-class=\"item.hasError === true ? 'error' :''\">\n                <div class=\"each-row-container\">\n                    <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                        <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                            <i class=\"material-icons\">more_vert</i>\n                        </button>\n                        <ul class=\"dropdown-menu\">\n                            <li data-ng-click=\"vm.removeFilter($index)\" class=\"action-Menu\">\n                                <i class=\"material-icons\">clear</i>\n                                <span class=\"remove-label\">{{::vm.labels.Remove}}</span>\n                            </li>\n                            <li class=\"action-Menu\" data-ng-click=\"vm.addFilter()\">\n                                <i class=\"material-icons\">add</i>\n                                <span class=\"add-label\">Add</span>\n                            </li>\n                        </ul>\n                    </div>\n                    <div class=\"rowNum\">\n                        <material-form-field model=\"item.RowNum\" field-type=\"string\" is-editable=\"false\" field-label=\"'Row Num'\" name=\"rowNum\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"autocomplete\" data-ng-if=\"(vm.type === 'Condition' || vm.type === 'Action') && (vm.actionType === undefined || vm.actionType === 'Validation')\">\n                        <material-form-field field-type=\"autocomplete\" field-label=\"'Field'\" name=\"field\" properties=\"item.targetField\" is-required=\"true\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"autocomplete\" data-ng-if=\"vm.type === 'Action' && vm.actionType !== 'Validation'\">\n                        <material-form-field model=\"item.statementProduct\" field-type=\"picklist\" field-label=\"'Field'\" name=\"field\" properties=\"vm.statementProductPicklistEntries\" is-required=\"true\" is-editable=\"true\" data-ng-click=\"vm.trackSelectEvent($index)\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"operator\">\n                        <material-form-field model=\"item.CompOper\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.conditionAssociationPicklistEntries\" field-label=\"'Operator'\" name=\"operator\" is-required=\"true\">\n                        </material-form-field>\n                    </div>\n                    <div ng-class=\"{'value': item.FieldType != 'PICKLIST' && item.FieldType != 'MULTIPICKLIST' && item.FieldType != 'DATETIME' && item.FieldType != 'DATE', 'operator': item.FieldType === 'PICKLIST' || item.FieldType === 'MULTIPICKLIST', 'datetime-field': item.FieldType === 'DATETIME' || item.FieldType === 'DATE'}\">\n                        <material-form-field model=\"item.FieldValue\" field-type=\"STRING\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'STRING' || (item.FieldType !== 'PICKLIST' && item.FieldType !== 'MULTIPICKLIST' && item.FieldType !== 'DATE' && item.FieldType !== 'DATETIME' && item.FieldType !== 'DOUBLE' && item.FieldType !== 'CURRENCY' && item.FieldType !== 'PERCENT' && item.FieldType !== 'BOOLEAN')\"></material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"DOUBLE\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'DOUBLE'\"></material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'CURRENCY'\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"PERCENT\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'PERCENT'\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'PICKLIST'\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'MULTIPICKLIST'\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"'Value'\" show-inline=\"true\" data-ng-if=\"item.FieldType === 'BOOLEAN'\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'DATETIME' || item.FieldType === 'DATE'\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div class=\"clearfix\"></div>\n            </div>\n        </div>\n        <div class=\"advance-filter-container\">\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showAdvancedPanel = true;\" data-ng-if=\"vm.showAdvancedPanel !== true\">Advanced Options</button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showAdvancedPanel = false;vm.prepareConditionExpression();\" data-ng-if=\"vm.showAdvancedPanel === true\">Clear Advanced Options</button>\n            <div class=\"value\" data-ng-if=\"vm.showAdvancedPanel === true\">\n                <material-form-field model=\"vm.criteria.filter.condExpr\" field-type=\"string\" is-editable=\"true\" field-label=\"'Advanced Filter Condition'\" name=\"value\">\n                </material-form-field>\n            </div>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 458 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var avmController = function(i18nService, $mdDialog, selectedAVM, avmType, applicationTypeValues, rulesService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	        vm.selectedAvm = selectedAVM.avm;
	        vm.type = avmType;
	        vm.appTypePicklistEntries = {
	            PicklistValues: (applicationTypeValues.length ? applicationTypeValues[0].PicklistValues : [])
	        };
	        vm.avmAttributesList = [];
	
	        function prepateAvmAttributesList() {
	            if (selectedAVM.avmAttributesList && selectedAVM.avmAttributesList.length) {
	                for (var i = 0; i < selectedAVM.avmAttributesList.length; i++) {
	                    vm.avmAttributesList.push({
	                        autocomplete: {
	                            querySearch: rulesService.getAVMAttributes,
	                            displayName: 'label',
	                            selectedItem: {
	                                label: selectedAVM.avmAttributesList[i].name,
	                                value: selectedAVM.avmAttributesList[i].field
	                            }
	                        }
	                    });
	                }
	                rulesService.setAVMPopupAttributesList(angular.copy(vm.avmAttributesList));
	            }
	        }
	        prepateAvmAttributesList();
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        vm.save = function() {
	            if (vm.avmForm.$valid && vm.avmForm.ruleName.$viewValue !== '') {
	                $mdDialog.hide({
	                    type: avmType,
	                    avm: angular.copy(vm.selectedAvm),
	                    avmAttributesList: angular.copy(vm.avmAttributesList)
	                });
	            } else {
	                vm.avmForm.ruleName.$setTouched();
	            }
	
	        };
	
	        function updateSelectedItem(item) {
	            rulesService.setAVMPopupAttributesList(angular.copy(vm.avmAttributesList));
	        }
	        vm.addAttribute = function(index) {
	            vm.avmAttributesList.push({
	                autocomplete: {
	                    querySearch: rulesService.getAVMAttributes,
	                    displayName: 'label',
	                    selectedItemChange: updateSelectedItem
	                }
	            });
	            rulesService.setAVMPopupAttributesList(angular.copy(vm.avmAttributesList));
	        };
	        vm.removeAttribute = function(index) {
	            vm.avmAttributesList.splice(index, 1);
	            rulesService.setAVMPopupAttributesList(angular.copy(vm.avmAttributesList));
	        };
	
	    };
	
	    avmController.$inject = [
	        'i18nService',
	        '$mdDialog',
	        'selectedAVM',
	        'avmType',
	        'applicationTypeValues',
	        'rulesService'
	    ];
	
	    module.exports = avmController;
	})();


/***/ }),
/* 459 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"avm-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>Attribute Value Matrix</h2>\n            <span flex></span>\n            <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n                </i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"avm-dialog-content\">\n        <div class=\"md-padding content-wide\">\n            <form class=\"avm-detail-form\" novalidate name=\"vm.avmForm\">\n                <div layout=\"row\">\n                    <h4 class=\"dialog-right-heading\"><strong>{{vm.labels.Details}}</strong></h4>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\">\n                        <material-form-field model=\"vm.selectedAvm.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.RuleName\" is-required=\"true\" name=\"ruleName\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.avmForm.ruleName.$error\" ng-if=\"vm.avmForm.ruleName.$touched || vm.avmForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">\n                                {{ vm.labels.FootnotesIsMandatory }}\n                            </p>\n                        </div>\n                    </div>\n                    <div class=\"flex is-active\">\n                        <material-form-field model=\"vm.selectedAvm.isActive\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.IsActive\" element-id=\"avm-isActive\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedAvm.effectiveDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"vm.labels.EffectiveDate\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedAvm.expirationDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"vm.labels.ExpirationDate\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex description\">\n                        <material-form-field model=\"vm.selectedAvm.description\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"'Description'\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\">\n                        <material-form-field model=\"vm.selectedAvm.appType\" field-type=\"picklist\" properties=\"vm.appTypePicklistEntries\" field-label=\"'Application Type'\" name=\"appType\" is-editable=\"true\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex avm-pop-up-checkbox\">\n                        <material-form-field model=\"vm.selectedAvm.treatNullAsWildCard\" field-type=\"checkbox\" field-label=\"'Trust a null value as wild character'\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\" data-ng-if=\"vm.type !== 'new' \">\n                    <div class=\"flex\" flex=\"45\">\n                        <activity-log field-label=\"vm.labels.CreatedBy\" field-edit-by=\"vm.selectedAvm.createdById\" field-edit-date=\"vm.selectedAvm.CreatedDate\"></activity-log>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <activity-log field-label=\"::vm.labels.LastModifiedBy\" field-edit-by=\"vm.selectedAvm.lastModifiedById\" field-edit-date=\"vm.selectedAvm.LastModifiedDate\"></activity-log>\n                    </div>\n                </div>\n            </form>\n            <div class=\"avm-attributes-container\">\n                <p><b>Matrix Fields</b></p>\n                <div data-ng-if=\"vm.avmAttributesList.length === 0\" class=\"addIcon\">\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addAttribute()\">\n                        <i class=\"material-icons\">add</i>\n                    </button>\n                </div>\n                <div class=\"attribute-container\" data-ng-if=\"vm.avmAttributesList.length > 0\">\n                    <div class=\"each-attribute\" data-ng-repeat=\"item in vm.avmAttributesList\">\n                        <material-form-field model=\"item.model\" field-type=\"autocomplete\" field-label=\"'Attribute'\" properties=\"item\"></material-form-field>\n                        <button class=\"slds-button slds-button--icon\" ng-click=\"vm.removeAttribute($index)\"><i class=\"material-icons\">clear</i></button>\n                        <button class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addAttribute()\" data-ng-if=\"$index === (vm.avmAttributesList.length -1)\"><i class=\"material-icons\">add</i></button>\n                    </div>\n                </div>\n                <div class=\"clearfix\"></div>\n            </div>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 460 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var addAttributeController = function($mdDialog, $scope, rulesService, i18nService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	
	        vm.item = {
	            autocomplete: {
	                querySearch: rulesService.getAVMAttributes,
	                displayName: 'label'
	            }
	        };
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        vm.save = function() {
	            if (vm.item.autocomplete.selectedItem && vm.item.autocomplete.selectedItem.value !== '') {
	                vm.showErrorMsg = false;
	                $mdDialog.hide({
	                    attribute: angular.copy(vm.item)
	                });
	            } else {
	                vm.showErrorMsg = true;
	                vm.errorMsg = vm.labels.SelectValidAttribute;
	            }
	        };
	    };
	
	    addAttributeController.$inject = [
	        '$mdDialog',
	        '$scope',
	        'rulesService',
	        'i18nService',
	    ];
	    module.exports = addAttributeController;
	})();


/***/ }),
/* 461 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"avmAttribute-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>Add Attribute</h2>\n            <span flex></span>\n            <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n                </i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"avmAttribute-dialog-content\">\n        <div class=\"md-padding content-wide\">\n            <div class=\"autocomplete-container\">\n                <material-form-field model=\"vm.item.model\" field-type=\"autocomplete\" field-label=\"'Attribute'\" properties=\"vm.item\"></material-form-field>\n            </div>\n            <p class=\"formError\">\n                {{::vm.errorMsg}}\n            </p>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{::vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{::vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 462 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var csCloneController = function($mdDialog, $scope, rulesService, i18nService, ruleName) {
	        var vm = this,
	            ruleNameMaxLength = 74;
	        vm.labels = i18nService.CustomLabel;
	        if (ruleName && (ruleName.length > ruleNameMaxLength)) {
	            ruleName = ruleName.substring(0, ruleNameMaxLength);
	            vm.isTrimmed = true;
	        }
	        vm.ruleName = ruleName;
	        vm.cloneCSRule = 'Clone ' + ruleName;
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        vm.save = function() {
	            vm.cloneCRForm.$setSubmitted();
	            if (vm.cloneCRForm.$valid) {
	                $mdDialog.hide({
	                    newName: angular.copy(vm.cloneCSRule)
	                });
	            }
	        };
	    };
	
	    csCloneController.$inject = [
	        '$mdDialog',
	        '$scope',
	        'rulesService',
	        'i18nService',
	        'ruleName'
	    ];
	    module.exports = csCloneController;
	})();

/***/ }),
/* 463 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"clone-cr-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>Clone Constraint Rule</h2>\n            <span flex></span>\n            <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n                </i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"clone-cr-dialog-content\">\n        <div class=\"md-padding content-wide\">\n            <div class=\"autocomplete-container\">\n                <form name=\"vm.cloneCRForm\" novalidate=\"\">\n                    <p>{{::vm.labels.RuleCloningBody}} {{vm.ruleName}}  ?</p>\n                    <material-form-field model=\"vm.cloneCSRule\" field-type=\"string\" field-label=\"::vm.labels.RuleName\"  is-required=\"true\" name=\"ruleName\" max-length=\"80\"></material-form-field>\n                    <div ng-messages=\"vm.cloneCRForm.ruleName.$error\" ng-if=\"vm.cloneCRForm.ruleName.$touched || vm.cloneCRForm.$submitted \">\n                        <p ng-message=\"required\" class=\"formError\">\n                            {{ vm.labels.MandatoryField }}\n                        </p>\n                    </div>\n                    <p class=\"alert alert-warning\" data-ng-if=\"vm.isTrimmed\">{{ vm.labels.RuleNameExceedsLimit }}</p>\n                </form>\n            </div>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{::vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{::vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.product.multimedia', ['cpqAdmin.product.common.services'])
			.service('multimediaService', __webpack_require__(465))
			.config(['$stateProvider', function($stateProvider) {
				$stateProvider.state('app.product.multimedia', {
					parent: 'app.product',
					url: '/:id/multimedia',
					views: {
						'productContainer': {
							template: __webpack_require__(466),
							controller: __webpack_require__(467),
							controllerAs: 'vm'
						}
					},
					resolve: {
						selectedProduct: ['multimediaService', '$stateParams', function(multimediaService, $stateParams) {
							return multimediaService.getSelectedProduct($stateParams.id);
						}],
						multimediaList: ['multimediaService', '$stateParams', function(multimediaService, $stateParams) {
							return multimediaService.getMultimediaList($stateParams.id);
						}],
						footnoteTypeList: ['multimediaService', function(multimediaService) {
							return multimediaService.getSObjectPicklistFields('Footnote__c', ['Type__c']);
						}],
						productNoteAttachments: ['multimediaService', '$stateParams', function(multimediaService, $stateParams) {
							return multimediaService.getAttachments($stateParams.id);
						}]
					}
				});
			}]);
	
	})();

/***/ }),
/* 465 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productMultimediaService = function($q, remoteService, productDetailService, productService, systemConstants, $sce, $filter) {
	        var prefix = systemConstants.nsPrefix || '';
	
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function getMultimediaList(productId) {
	            var defer = $q.defer();
	            remoteService.getProductInformation(productId)
	                .then(function(response) {
	                    defer.resolve(prepareMultimediaForGet(response));
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function prepareMultimediaForGet(multimediaLists) {
	            var multimediaItems = [],
	                index;
	            for (index = 0; index < multimediaLists.length; index++) {
	                var Name = multimediaLists[index].Name;
	                multimediaLists[index].fileName = Name.substr(0, Name.lastIndexOf('.'));
	                multimediaItems.push(multimediaLists[index]);
	            }
	            return multimediaItems;
	        }
	
	        function getAttachments(productId) {
	            var defer = $q.defer();
	            productDetailService.getAttachments(productId)
	                .then(function(response) {
	                    defer.resolve(prepareMultimediaForGet(response));
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function removeProductInformation(mlid) {
	            var defer = $q.defer();
	            remoteService.removeProductInformation(mlid)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function createMultimedia(request) {
	            var defer = $q.defer();
	            remoteService.createProductInformation([request])
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function prepareCreateFootnotePayload(request, productId) {
	            var response = [],
	                temp = {
	                    "FootnoteSO": {
	                        "Name": ""
	                    },
	                    "SequenceNumber": '',
	                    "ProductId": '',
	                    "ProductFootnoteId": null
	                };
	            temp.FootnoteSO.Name = request.name;
	            temp.FootnoteSO[getPrefixedAttribute('Body__c')] = request.body;
	            temp.FootnoteSO[getPrefixedAttribute('Type__c')] = request.type || '';
	            temp.SequenceNumber = request.sequence;
	            temp.ProductId = productId;
	
	            response.push(temp);
	            return response;
	        }
	
	        function createProductFootnotes(request, productId) {
	            var defer = $q.defer(),
	                footnotePayload = prepareCreateFootnotePayload(request, productId);
	            remoteService.createProductFootnotes(footnotePayload)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function getSampleFootnotesItem() {
	            var sampleFootNotesList = {
	                "name": "",
	                "body": "",
	                "type": "Product"
	            };
	            return sampleFootNotesList;
	        }
	
	        function prepareUpdateFootnote(request) {
	            var response = [],
	                temp = {
	                    "FootnoteSO": {
	                        "Id": "",
	                        "Name": ""
	                    },
	                    "SequenceNumber": '',
	                    "ProductId": null,
	                    "ProductFootnoteId": ""
	                };
	
	            temp.FootnoteSO.Id = request.id;
	            temp.FootnoteSO.Name = request.name;
	            temp.FootnoteSO[getPrefixedAttribute('Body__c')] = request.body || '';
	            temp.FootnoteSO[getPrefixedAttribute('Type__c')] = request.type || '';
	            temp.SequenceNumber = request.sequence;
	            temp.ProductFootnoteId = request.footnoteId;
	
	            response.push(temp);
	
	            return response;
	        }
	
	        function updateProductFootnotes(request) {
	            var defer = $q.defer(),
	                updatePayload = prepareUpdateFootnote(request);
	            remoteService.updateProductFootnotes2(updatePayload)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	
	        function removeProductFootnotes(fnoteId) {
	            var defer = $q.defer();
	            remoteService.removeProductFootnotes(fnoteId)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function extractFootNotes(obj) {
	            var response = [];
	            if (obj.length > 0) {
	                for (var i = 0; i < obj.length; i++) {
	                    if (obj[i][getPrefixedAttribute('FootnoteId__r')]) {
	                        var footnoteObj = obj[i][getPrefixedAttribute('FootnoteId__r')],
	                            temp = {};
	                        temp.name = footnoteObj.Name
	                        temp.body = footnoteObj[getPrefixedAttribute('Body__c')];
	                        temp.sequence = obj[i][getPrefixedAttribute('Sequence__c')];
	                        temp.id = obj[i][getPrefixedAttribute('FootnoteId__c')];
	                        temp.footnoteId = obj[i].Id;
	                        temp.lastModifiedBy = footnoteObj.LastModifiedBy.Name;
	                        temp.lastModifiedDate = footnoteObj.LastModifiedDate || '';
	                        temp.type = footnoteObj[getPrefixedAttribute('Type__c')] || '';
	                        response.push(temp);
	                    }
	                }
	
	            }
	            return response;
	        }
	
	        function getProductFootnotes(productId) {
	            var defer = $q.defer();
	            remoteService.getProductFootnotes2(productId)
	                .then(function(response) {
	                    defer.resolve(extractFootNotes(response));
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	
	
	        function fnGetSampleMultimediaList(productId) {
	            var sampleMultimedia = {
	                "Name": "",
	                "Description": "",
	                "isPrimary": false,
	                'itemType': 'collateral',
	                'operationType': 'new'
	            };
	            sampleMultimedia[getPrefixedAttribute('ProductId__c')] = productId;
	            sampleMultimedia[getPrefixedAttribute('InformationType__c')] = '';
	            sampleMultimedia[getPrefixedAttribute('ContentUrl__c')] = '';
	            sampleMultimedia[getPrefixedAttribute('EmbedCode__c')] = '';
	
	            return sampleMultimedia;
	        }
	
	        function updateMultimedia(request) {
	            var defer = $q.defer();
	            remoteService.updateProductInformation(prepareMultimediaForUpdate([request]))
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function prepareMultimediaForUpdate(multimediaLists) {
	            var multimediaItems = [],
	                index;
	            for (index = 0; index < multimediaLists.length; index++) {
	                var multimediaItem = multimediaLists[index];
	                if (multimediaItem.fileName) {
	                    var fileName = multimediaItem.fileName;
	                    var multimediaItemName = fileName.length > 75 ? $filter('limitTo')(fileName, 75) : fileName;
	                    var fileFormat = multimediaItem.Name.substr(multimediaItem.Name.lastIndexOf('.'));
	                    multimediaItem.Name = multimediaItemName + fileFormat;
	                    delete multimediaItem['fileName'];
	                }
	                multimediaItems.push(multimediaItem);
	            }
	            return multimediaItems;
	        }
	
	        /** 
	         * Change the format of ContentUrl
	         */
	        function formatContentUrl(item) {
	            var itemContentUrl = item[getPrefixedAttribute('ContentUrl__c')].toString();
	            if (validateYouTubeUrl(itemContentUrl)) {
	                var embedCode = formatYouTubeUrl(itemContentUrl);
	                item[getPrefixedAttribute('ContentUrl__c')] = $sce.trustAsResourceUrl("https://www.youtube.com/embed/" + embedCode);
	                item.imgUrl = $sce.trustAsResourceUrl("https://img.youtube.com/vi/" + embedCode + "/0.jpg");
	                item.urlType = "youTube";
	            } else {
	                item.urlType = getUrlType(itemContentUrl);
	                item.contentUrl = $sce.trustAsResourceUrl(itemContentUrl);
	                item.imgUrl = $sce.trustAsResourceUrl(itemContentUrl);
	            }
	            return item;
	        }
	
	        /** 
	         * Change the format of EmbedCode
	         */
	        function formatEmbedCode(item) {
	            try {
	                var getUrl = getUrlFromIframe(item[getPrefixedAttribute('EmbedCode__c')]);
	                item[getPrefixedAttribute('EmbedCode__c')] = $sce.trustAsHtml(item[getPrefixedAttribute('EmbedCode__c')].toString());
	                if (validateYouTubeUrl(getUrl)) {
	                    var embedCode = formatYouTubeUrl(getUrl);
	                    item.imgUrl = $sce.trustAsResourceUrl("https://img.youtube.com/vi/" + embedCode + "/0.jpg");
	                    item.urlType = "youTube";
	                    item.Name = getUrl;
	                } else {
	                    item.urlType = getUrlType(getUrl);
	                    item.imgUrl = $sce.trustAsResourceUrl(getUrl);
	                    item.Name = getUrl;
	                }
	                return item;
	            } catch (e) {
	                return false;
	            }
	
	        }
	
	        /** 
	         * get url type based on the format
	         */
	        function getUrlType(url) {
	            if (validateImage(url)) {
	                return "image";
	            } else if (validateVideo(url)) {
	                return "video";
	            } else if (validateAudio(url)) {
	                return "audio";
	            } else if (validateYouTubeUrl(url)) {
	                return "youtube";
	            } else if (validatePDFUrl(url)) {
	                return "pdf";
	            } else if (validateDocUrl(url)) {
	                return "doc";
	            } else {
	                return 'unknown';
	            }
	        }
	
	        function getTypeFromExtension(extension) {
	            if (validateImageExtension(extension)) {
	                return "image";
	            } else if (validateVideoExtension(extension)) {
	                return "video";
	            } else if (validateAudioExtension(extension)) {
	                return "audio";
	            } else if (validateDocExtension(extension)) {
	                return "doc";
	            } else if (extension === 'pdf') {
	                return 'pdf';
	            } else {
	                return 'unknown';
	            }
	        }
	
	        function validatePDFUrl(url) {
	            var regExp = (/\.(pdf)$/i);
	            return regExp.test(url);
	        }
	
	        function validateDocUrl(url) {
	            var regExp = (/\.(doc|docx|ppt|pptx|xls|xlsx)$/i);
	            return regExp.test(url);
	        }
	
	        function validateUrl(url) {
	            var regExp = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/;
	            return regExp.test(url);
	        }
	
	        /**
	         * Validate url is a image format
	         */
	        function validateImage(url) {
	
	            /**
	             * For validate the data url /^\s*data:([a-z]+\/[a-z0-9\-\+]+(;[a-z\-]+\=[a-z0-9\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i
	             * For validate the image /\.(gif|jpg|jpeg|tiff|png)$/i
	             * Applied the or condition image | dataurl
	             */
	            var regExp = /\.(gif|jpg|jpeg|tiff|png)$|^\s*data:([a-z]+\/[a-z0-9\-\+]+(;[a-z\-]+\=[a-z0-9\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i;
	            return regExp.test(url);
	        }
	
	        function validateImageExtension(extension) {
	
	            /**
	             * For validate the data url /^\s*data:([a-z]+\/[a-z0-9\-\+]+(;[a-z\-]+\=[a-z0-9\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i
	             * For validate the image /\.(gif|jpg|jpeg|tiff|png)$/i
	             * Applied the or condition image | dataurl
	             */
	            var imageTypes = ['gif', 'jpg', 'jpeg', 'tiff', 'png'];
	            return imageTypes.indexOf(extension.toLowerCase()) <= -1 ? false : true;
	        }
	
	        /**
	         * Validate url is a video fomat
	         */
	        function validateVideo(url) {
	            var regExp = (/\.(mp4|webm|Ogg)$/i);
	            return regExp.test(url);
	        }
	
	        function validateVideoExtension(extension) {
	            var videoTypes = ['mp4', 'webm', 'Ogg', 'mkv', 'wmv'];
	            return videoTypes.indexOf(extension) <= -1 ? false : true;
	        }
	
	        /**
	         * Validate url is a audio format
	         */
	        function validateAudio(url) {
	            var regExp = (/\.(MP3|Wav)$/i);
	            return regExp.test(url);
	        }
	
	        function validateAudioExtension(extension) {
	            var audioTypes = ['MP3', 'Wav'];
	            return audioTypes.indexOf(extension) <= -1 ? false : true;
	        }
	
	        function validateDocExtension(extension) {
	            var docTypes = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'];
	            return docTypes.indexOf(extension.toLowerCase()) <= -1 ? false : true;
	        }
	
	        /**
	         * Get url from iframe
	         */
	        function getUrlFromIframe(iframe) {
	            var regExp = /<iframe.*?src=['"](.*?)['"]/;
	            return regExp.exec(iframe)[1];
	        }
	
	        /**
	         * Make the youtube url to embed code
	         */
	        function formatYouTubeUrl(url) {
	
	            var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
	            var match = url.match(regExp);
	
	            if (match && match[2].length == 11) {
	                return match[2];
	            } else {
	                return 'error';
	            }
	        }
	
	        /** 
	         * Validate if youtube url or not
	         */
	        function validateYouTubeUrl(url) {
	            var youTubePatern = /^((http:|https:)?\/\/(www\.)?(youtube.com|youtu.be)\/(watch)?(\?v=)?(\S+)?)$/;
	            return youTubePatern.test(url);
	        }
	
	        /**
	         * Get the file name from a url
	         */
	        function getFileNameFromUrl(url) {
	            // check the url image or video or audio
	            if (validateImage(url) || validateVideo(url) || validateAudio(url))
	                return url.substring(url.lastIndexOf('/') + 1);
	            else return '';
	        }
	
	        function getSObjectPicklistFields(sObjectName, field) {
	            var defer = $q.defer();
	            sObjectName = getPrefixedAttribute(sObjectName);
	            field[0] = getPrefixedAttribute(field[0]);
	            remoteService.getSObjectPicklistFields(sObjectName, field)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function removeAttachments(attachmentId) {
	            return remoteService.removeAttachments([attachmentId]);
	        }
	
	        function updatePrimaryImage(productId, attachmentId) {
	            var requestObj = {};
	            requestObj.Id = productId;
	            requestObj[getPrefixedAttribute('IconId__c')] = attachmentId;
	            return remoteService.updateProducts([requestObj]);
	        }
	
	        function getContentType(obj) {
	            var type;
	            if (obj) {
	                var informationType = obj[getPrefixedAttribute('InformationType__c')];
	                if (informationType === 'URL Address') {
	                    var url = obj[getPrefixedAttribute('ContentUrl__c')];
	                    type = getUrlType(url);
	                } else if (informationType === 'Attached File') {
	                    var name = obj.Name,
	                        extension = name.substr(name.lastIndexOf('.') + 1);
	                    type = getTypeFromExtension(extension);
	                } else if (informationType === 'Embedded Code') {
	                    if (obj[getPrefixedAttribute('EmbedCode__c')]) {
	                        var getUrl = getUrlFromIframe(obj[getPrefixedAttribute('EmbedCode__c')]);
	                        type = getUrlType(getUrl);
	                    } else {
	                        type = 'unknown';
	                    }
	                }
	            }
	            return type ? type : 'unknown';
	        }
	
	        function formatURLAddress(item) {
	            var temp = item[getPrefixedAttribute('ContentUrl__c')];
	            if (temp && temp !== '') {
	                var contentUrlToString = temp.toString();
	                item[getPrefixedAttribute('ContentUrl__c')] = $sce.trustAsResourceUrl(contentUrlToString);
	            }
	            return item;
	        }
	
	        function getSelectedProduct(productId) {
	            var defer = $q.defer(),
	                selectedProduct, primaryIconId;
	
	            selectedProduct = productService.getSelectedProduct();
	            if (selectedProduct) {
	                defer.resolve(selectedProduct);
	            } else {
	                productService.getProductDetailsByCode(productId)
	                    .then(function(response) {
	                        selectedProduct = productService.getSelectedProduct();
	                        defer.resolve(selectedProduct);
	                    }, function(reason) {
	                        defer.reject(reason);
	                    });
	            }
	
	            return defer.promise;
	        }
	
	        var multimediaService = {
	            /* Multimedia methods */
	            getMultimediaList: getMultimediaList,
	            createMultimedia: createMultimedia,
	            removeProductInformation: removeProductInformation,
	            getSampleMultimediaList: fnGetSampleMultimediaList,
	            updateMultimedia: updateMultimedia,
	            getAttachments: getAttachments,
	            removeAttachments: removeAttachments,
	            updatePrimaryImage: updatePrimaryImage,
	
	
	
	            /* Footnotes methods */
	            createProductFootnotes: createProductFootnotes,
	            updateProductFootnotes: updateProductFootnotes,
	            removeProductFootnotes: removeProductFootnotes,
	            getProductFootnotes: getProductFootnotes,
	            getSampleFootnotesItem: getSampleFootnotesItem,
	
	            /* Utility methods */
	            formatContentUrl: formatContentUrl,
	            getFileNameFromUrl: getFileNameFromUrl,
	            formatEmbedCode: formatEmbedCode,
	            getSObjectPicklistFields: getSObjectPicklistFields,
	            validateImage: validateImage,
	            getUrlType: getUrlType,
	            getTypeFromExtension: getTypeFromExtension,
	            formatYouTubeUrl: formatYouTubeUrl,
	            validateUrl: validateUrl,
	            getContentType: getContentType,
	            formatURLAddress: formatURLAddress,
	            getSelectedProduct: getSelectedProduct,
	            getPrefixedAttribute: getPrefixedAttribute,
	            getUrlFromIframe: getUrlFromIframe
	
	        };
	
	        return multimediaService;
	    };
	
	    productMultimediaService.$inject = [
	        '$q',
	        'remoteService',
	        'productDetailService',
	        'productService',
	        'systemConstants',
	        '$sce',
	        '$filter'
	    ];
	
	    module.exports = productMultimediaService;
	})();


/***/ }),
/* 466 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\r\n    <div class=\"clearfix\"></div>\r\n    <div class=\"multimedia-page\">\r\n        <!-- left side panel -->\r\n        <div class=\"multimedia-left-panel left-tree\" ng-include=\"'left-list.html'\" resizable r-directions=\"['right']\" r-flex=\"true\"></div>\r\n        <!-- right side panel -->\r\n        <div class=\"multimedia-form\">\r\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\r\n            <div ng-include=\"'multimedia-template.html'\" ng-if=\"vm.selectedOption === 'collateral' && vm.selectedMultimediaItem.Name !== undefined\"></div>\r\n            <div ng-include=\"'footnotes-template.html'\" ng-if=\"vm.selectedOption === 'footnotes' && vm.selectedFootNoteItem.name !== undefined\"></div>\r\n            <div class=\"multimedia-footer\">\r\n                <div class=\"container-fluid\">\r\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToDetailsPage()\">Cancel</a>\r\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">Save</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\r\n</div>\r\n<div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\r\n    <div class=\"modalOverlay\">\r\n        <div class=\"modalHeaderBody\">\r\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\r\n            <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\r\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\r\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\r\n        </div>\r\n        <div class=\"modal-Footer text-right\">\r\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\r\n                <span class=\"modal-TextColor\">Cancel</span>\r\n            </button>\r\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\r\n                <span class=\"modal-TextColor\">Ok</span>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</div>\r\n"

/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var productMultimediaController = function($scope, $state, $stateParams, $mdDialog, i18nService, productService, multimediaService, $templateCache, $sce, $window, systemConstants, applicationService, $q, productDetailService, multimediaList, footnoteTypeList, productNoteAttachments, cpqAdminConstants, selectedProduct) {
	
	        var vm = this,
	            selectedProduct,
	            primaryIconId,
	            isFormReady = false,
	            isPageSaved = false,
	            mmContentChanged = false;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.footNotesLists = [];
	        vm.selectedFootNoteItem = undefined;
	        vm.activeFootNoteItemIndex = undefined;
	        vm.multimediaItems = [];
	        vm.selectedMultimediaItem = undefined;
	        vm.activeMultimediaItemIndex = undefined;
	        vm.toggleHelpText = false;
	        vm.isCancelClicked = false;
	        vm.footnotePicklistEntries = {
	            PicklistValues: footnoteTypeList[0].PicklistValues
	        };
	
	        vm.onNameFieldFocus = function() {
	            if (vm.selectedMultimediaItem[multimediaService.getPrefixedAttribute('InformationType__c')] === 'Attached File' && vm.selectedMultimediaItem.type === 'image') {
	                vm.toggleHelpText = true;
	            }
	        };
	        vm.onNameFieldBlur = function() {
	            if (vm.selectedMultimediaItem[multimediaService.getPrefixedAttribute('InformationType__c')] === 'Attached File' && vm.selectedMultimediaItem.type === 'image') {
	                vm.toggleHelpText = false;
	            }
	        };
	
	        vm.types = {
	            'FieldType': 'PICKLIST',
	            'IsEditable': true,
	            'allowClear': false,
	            'PicklistValues': [{
	                'active': true,
	                'defaultValue': false,
	                'label': 'Multimedia',
	                'value': 'collateral'
	            }, {
	                'active': true,
	                'defaultValue': false,
	                'label': 'Footnotes',
	                'value': 'footnotes'
	            }],
	            'value': 'collateral'
	        };
	        vm.selectedOption = vm.types.value;
	
	        $templateCache.put('left-list.html', __webpack_require__(468));
	        $templateCache.put('left-multimedia-list.html', __webpack_require__(469));
	        $templateCache.put('multimedia-template.html', __webpack_require__(470));
	        $templateCache.put('left-footnotes-list.html', __webpack_require__(471));
	        $templateCache.put('footnotes-template.html', __webpack_require__(472));
	
	        function getAllNotesAttachments() {
	            multimediaService.getAttachments($stateParams.id)
	                .then(function(response) {
	                    addNoteAttachments(response);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function addNoteAttachments(productNoteAttachments) {
	            if (productNoteAttachments.length > 0) {
	                for (var i = 0; i < productNoteAttachments.length; i++) {
	                    var temp = {};
	
	                    temp.type = 'image';
	                    temp.isPrimary = productNoteAttachments[i].Id === primaryIconId ? true : false;
	                    temp.originalPrimaryValue = productNoteAttachments[i].Id === primaryIconId ? true : false;
	                    temp.itemType = 'productAttachments';
	                    temp.Name = productNoteAttachments[i].Name;
	                    temp.fileName = productNoteAttachments[i].fileName;
	                    temp.Id = productNoteAttachments[i].Id;
	                    temp.ParentId = productNoteAttachments[i].ParentId;
	                    temp[multimediaService.getPrefixedAttribute('InformationType__c')] = 'Attached File';
	                    temp[multimediaService.getPrefixedAttribute('Description__c')] = productNoteAttachments[i].Description || '';
	                    temp.LastModifiedBy = productNoteAttachments[i].LastModifiedBy;
	                    temp.LastModifiedDate = productNoteAttachments[i].LastModifiedDate;
	                    temp.imgUrl = systemConstants.salesforceUrl + '/servlet/servlet.FileDownload?file=' + productNoteAttachments[i].Id;
	
	                    vm.multimediaItems.push(temp);
	                }
	            }
	        }
	
	        selectedProduct = selectedProduct;
	        primaryIconId = selectedProduct && selectedProduct.iconId ? selectedProduct.iconId : '';
	
	        function getPrimaryIconId() {
	            selectedProduct = productService.getSelectedProduct();
	            primaryIconId = selectedProduct && selectedProduct.iconId ? selectedProduct.iconId : '';
	        }
	
	        function updatePrimaryIconId(iconId) {
	            primaryIconId = iconId;
	            selectedProduct.iconId = iconId;
	            selectedProduct.icon = iconId;
	            productService.setSelectedProduct(selectedProduct);
	        }
	
	        function getIndexToBeLoaded() {
	            var toBeLoadedIndex = 0;
	            if (vm.selectedMultimediaItem) {
	                /* TODO : More robust cases might come up later. So reserving this place for that*/
	                toBeLoadedIndex = 0;
	            } else {
	                toBeLoadedIndex = 0;
	            }
	            return toBeLoadedIndex;
	        }
	
	        function loadFirstMMItem() {
	            var toBeLoadedIndex = getIndexToBeLoaded();
	
	            vm.selectedMultimediaItem = vm.multimediaItems[toBeLoadedIndex];
	            setIndex('collateral', toBeLoadedIndex);
	        }
	        if (multimediaList) {
	            addMultimediaItems(multimediaList);
	        }
	        if (productNoteAttachments) {
	            addNoteAttachments(productNoteAttachments);
	        }
	
	        loadFirstMMItem();
	
	        function addMultimediaItems(multimediaList, toBeSelectedMultimediaId) {
	
	            if (multimediaList.length > 0) {
	                for (var i = 0; i < multimediaList.length; i++) {
	                    multimediaList[i].itemType = 'collateral';
	                    multimediaList[i].isPrimary = false;
	                    multimediaList[i].originalPrimaryValue = false;
	                    var imageUrl = '',
	                        contentType = multimediaService.getContentType(multimediaList[i]);
	                    if (contentType === 'youtube') {
	                        if (multimediaList[i][multimediaService.getPrefixedAttribute('InformationType__c')] === 'Embedded Code') {
	                            var url = multimediaService.getUrlFromIframe(multimediaList[i][multimediaService.getPrefixedAttribute('EmbedCode__c')]);
	                            var code = multimediaService.formatYouTubeUrl(url);
	                            imageUrl = $sce.trustAsResourceUrl("https://img.youtube.com/vi/" + code + "/0.jpg");
	                            multimediaList[i] = multimediaService.formatEmbedCode(multimediaList[i]);
	                        } else if (multimediaList[i][multimediaService.getPrefixedAttribute('InformationType__c')] === 'URL Address') {
	                            var code = multimediaService.formatYouTubeUrl(multimediaList[i][multimediaService.getPrefixedAttribute('ContentUrl__c')]);
	                            imageUrl = $sce.trustAsResourceUrl("https://img.youtube.com/vi/" + code + "/0.jpg");
	                        }
	
	                    } else if (contentType === 'image') {
	                        if (multimediaList[i][multimediaService.getPrefixedAttribute('InformationType__c')] === 'Attached File') {
	                            imageUrl = systemConstants.salesforceUrl + '/servlet/servlet.FileDownload?file=' + multimediaList[i][multimediaService.getPrefixedAttribute('FileId__c')];
	                            multimediaList[i].isPrimary = (multimediaList[i][multimediaService.getPrefixedAttribute('FileId__c')] === primaryIconId ? true : false);
	                            multimediaList[i].originalPrimaryValue = (multimediaList[i][multimediaService.getPrefixedAttribute('FileId__c')] === primaryIconId ? true : false);
	
	                        } else if (multimediaList[i][multimediaService.getPrefixedAttribute('InformationType__c')] === 'URL Address') {
	                            multimediaList[i] = multimediaService.formatURLAddress(multimediaList[i]);
	                            if (multimediaList[i][multimediaService.getPrefixedAttribute('FileId__c')]) {
	                                multimediaList[i].isPrimary = (multimediaList[i][multimediaService.getPrefixedAttribute('FileId__c')] === primaryIconId ? true : false);
	                                multimediaList[i].originalPrimaryValue = (multimediaList[i][multimediaService.getPrefixedAttribute('FileId__c')] === primaryIconId ? true : false);
	                            }
	                            imageUrl = multimediaList[i][multimediaService.getPrefixedAttribute('ContentUrl__c')];
	                        }
	                    } else if (contentType === 'pdf') {
	                        multimediaList[i].imgUrl = systemConstants.salesforceUrl + '/servlet/servlet.FileDownload?file=' + multimediaList[i][multimediaService.getPrefixedAttribute('FileId__c')];
	                    }
	                    if (multimediaList[i][multimediaService.getPrefixedAttribute('InformationType__c')] === 'URL Address') {
	                        multimediaList[i] = multimediaService.formatURLAddress(multimediaList[i]);
	                    }
	                    multimediaList[i].type = contentType;
	                    if (imageUrl) {
	                        multimediaList[i].imgUrl = imageUrl;
	                    }
	                    if (multimediaList[i].Id === toBeSelectedMultimediaId) {
	                        vm.selectedMultimediaItem = multimediaList[i];
	                        if ((productNoteAttachments.length > 0) && (vm.multimediaItems.length > (i + 1))) {
	                            vm.activeMultimediaItemIndex = (productNoteAttachments.length + i);
	                        } else {
	                            vm.activeMultimediaItemIndex = i;
	                        }
	                    }
	                    vm.multimediaItems.push(multimediaList[i]);
	                }
	            }
	        }
	
	        function loadCollateralLeftPanel(toBeSelectedMultimediaId) {
	            resetCenterPanel();
	            getPrimaryIconId();
	            if (toBeSelectedMultimediaId) {
	                getAllMultimediaItems(toBeSelectedMultimediaId);
	            } else {
	                getAllMultimediaItems();
	            }
	            getAllNotesAttachments();
	
	        }
	        /**
	         * Get the all multimedia List
	         */
	        function getAllMultimediaItems(toBeSelectedMultimediaId) {
	            vm.multimediaItems = [];
	            multimediaService.getMultimediaList($stateParams.id)
	                .then(function(response) {
	                    if (toBeSelectedMultimediaId) {
	                        addMultimediaItems(response, toBeSelectedMultimediaId);
	                    } else {
	                        toBeSelectedMultimediaId = response.length > 0 ? response[0].Id : undefined;
	                        addMultimediaItems(response, toBeSelectedMultimediaId);
	                    }
	
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	
	
	        function getIndex(type) {
	            var index;
	            if (type === 'collateral') {
	                index = vm.activeMultimediaItemIndex;
	            } else if (type === 'footnotes') {
	                index = vm.activeFootNoteItemIndex;
	            }
	            return index;
	        }
	
	        function setIndex(type, index) {
	            if (type === 'collateral') {
	                vm.activeMultimediaItemIndex = index;
	            } else if (type === 'footnotes') {
	                vm.activeFootNoteItemIndex = index;
	            }
	        }
	
	        vm.changeActiveMultimediaItem = function(index) {
	            if (index !== getIndex('collateral')) {
	                if (vm.selectedMultimediaItem && vm.selectedMultimediaItem.itemType === 'productAttachments') {
	                    if (isMultiMediaFormValid()) {
	                        if (vm.multimediaForm.$dirty) {
	                            updateProductAttachments().then(function(response) {
	                                setIndex('collateral', index);
	                                vm.selectedMultimediaItem = angular.copy(vm.multimediaItems[index]);
	                                resetMultimediaForm();
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                        } else {
	                            setIndex('collateral', index);
	                            vm.selectedMultimediaItem = angular.copy(vm.multimediaItems[index]);
	                        }
	                    } else {
	                        setIndex('collateral', index);
	                        vm.selectedMultimediaItem = angular.copy(vm.multimediaItems[index]);
	                    }
	                } else if (vm.selectedMultimediaItem && vm.selectedMultimediaItem.itemType === 'collateral') {
	                    if (isMultiMediaFormValid()) {
	                        if (vm.multimediaForm.$dirty) {
	                            savePage().then(function(response) {
	                                setIndex('collateral', index);
	                                vm.selectedMultimediaItem = angular.copy(vm.multimediaItems[index]);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                        } else {
	                            setIndex('collateral', index);
	                            vm.selectedMultimediaItem = angular.copy(vm.multimediaItems[index]);
	                        }
	                    } else {
	                        setIndex('collateral', index);
	                        vm.selectedMultimediaItem = angular.copy(vm.multimediaItems[index]);
	                    }
	                } else {
	                    setIndex('collateral', index);
	                    vm.selectedMultimediaItem = angular.copy(vm.multimediaItems[index]);
	                }
	            }
	
	        }
	
	        function resetCenterPanel() {
	            vm.selectedFootNoteItem = undefined;
	            vm.selectedMultimediaItem = undefined;
	            vm.activeMultimediaItemIndex = undefined;
	            vm.activeFootNoteItemIndex = undefined;
	        }
	
	        /**
	         * Return the $sce.value from $sce.trustAsResourceUrl()
	         */
	        function getValueFromSce(contentUrl) {
	            return $sce.valueOf(contentUrl);
	        }
	
	        /**
	         * Return the $sce.getTrustedHtml() from $sce.trustAsHtml()
	         */
	        function getTrustedHtmlFromSce(embedCode) {
	            return $sce.getTrustedHtml(embedCode);
	        }
	
	
	        /**
	         * Format the upload file after changed the upload file through dialog box
	         */
	
	        function changeUploadFile(response, multimediaList) {
	            var uploadFileList = response.replaceList.uploadFile.fileInfo;
	            multimediaList.fileInfo = uploadFileList;
	            multimediaList.urlType = getUrlType('/.' + uploadFileList.type);
	            multimediaList.Name = uploadFileList.name;
	            multimediaList.Size = uploadFileList.size;
	            multimediaList.InformationType__c = "Upload File";
	            vm.multimediaItems[vm.activeMultimediaItemIndex] = multimediaList;
	            vm.changeActiveMultimediaItem(vm.activeMultimediaItemIndex);
	
	        }
	
	        function loadFirstFNItem() {
	            vm.selectedFootNoteItem = vm.footNotesLists.length > 0 ? vm.footNotesLists[0] : undefined;
	            vm.activeFootNoteItemIndex = vm.footNotesLists.length > 0 ? 0 : undefined;
	        }
	        /**
	         * Get all footnotes list
	         */
	        function getAllFootNotesList() {
	            vm.footNotesLists = [];
	            multimediaService.getProductFootnotes($stateParams.id)
	                .then(function(response) {
	                    vm.footNotesLists = response;
	                    if (createNewFootnoteRequired) {
	                        createFootNoteItem();
	                        createNewFootnoteRequired = false;
	                    }
	                    loadFirstFNItem();
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        /**
	         * Change the background color of selected multimedia list on click
	         */
	        vm.changeActiveFootNoteItem = function(index) {
	            if (index !== getIndex('footnotes')) {
	                if (vm.selectedFootNoteItem) {
	                    savePage().then(function(response) {
	                        vm.activeFootNoteItemIndex = index;
	                        vm.selectedFootNoteItem = angular.copy(vm.footNotesLists[vm.activeFootNoteItemIndex]);
	                        vm.activeFootNoteItemIndex = index;
	                    }, function(reason) {
	                        applicationService.showErrorMessage(reason);
	                    });
	                } else {
	                    setIndex('footnotes', index);
	                    vm.selectedFootNoteItem = angular.copy(vm.footNotesLists[index]);
	                    vm.activeFootNoteItemIndex = index;
	                }
	            } else {
	                /* TODO : Do nothing as of now. Might be needed in future use cases */
	            }
	        };
	
	        /**
	         * Create New Footnote item
	         */
	        function createFootNoteItem() {
	            var sampleFootnote = multimediaService.getSampleFootnotesItem();
	
	            if (vm.selectedFootNoteItem) {
	                savePage().then(function(response) {
	                    resetCenterPanel();
	                    vm.footNotesLists.unshift(sampleFootnote);
	                    vm.activeFootNoteItemIndex = 0;
	                    vm.selectedFootNoteItem = angular.copy(vm.footNotesLists[0]);
	                    resetFootnotesForm();
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else {
	                //resetFootnotesForm();
	                vm.footNotesLists.unshift(sampleFootnote);
	                vm.activeFootNoteItemIndex = 0;
	                vm.selectedFootNoteItem = angular.copy(vm.footNotesLists[0]);
	            }
	        }
	
	
	        var deRegisterFunc = $scope.$watch('vm.types.value', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                if (newValue === "collateral") {
	                    vm.selectedOption = "collateral";
	                    loadCollateralLeftPanel();
	
	                } else if (newValue === "footnotes") {
	                    vm.selectedOption = "footnotes";
	                    resetCenterPanel();
	                    getAllFootNotesList();
	                }
	                document.querySelector('.list-table').scrollTop = 0;
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            vm = null;
	        });
	
	
	        /**
	         *
	         */
	        function saveFootNotes(e, toState, toParams) {
	            var defer = $q.defer(),
	                footNotesPayload = angular.copy(vm.selectedFootNoteItem);
	            footNotesPayload.type = 'Product';
	            if (vm.footnotesForm.$valid && vm.footnotesForm.$dirty) {
	                if (footNotesPayload.id) {
	                    multimediaService.updateProductFootnotes(footNotesPayload)
	                        .then(function(response) {
	                                addAlert('Updated successfully', cpqAdminConstants.SUCCESS);
	                                resetFootnotesForm();
	                                defer.resolve(true);
	                            },
	                            function(reason) {
	                                applicationService.showErrorMessage(reason);
	                                defer.resolve(false);
	                            });
	                } else {
	                    multimediaService.createProductFootnotes(footNotesPayload, $stateParams.id)
	                        .then(function(response) {
	                                addAlert('Created successfully', cpqAdminConstants.SUCCESS);
	                                vm.selectedFootNoteItem.id = response[0][multimediaService.getPrefixedAttribute('FootnoteId__c')];
	                                vm.selectedFootNoteItem.lastModifiedBy = response[0][multimediaService.getPrefixedAttribute('FootnoteId__r')].LastModifiedBy.Name;
	                                vm.selectedFootNoteItem.lastModifiedDate = response[0][multimediaService.getPrefixedAttribute('FootnoteId__r')].LastModifiedDate;
	                                vm.footNotesLists[0] = vm.selectedFootNoteItem;
	                                resetFootnotesForm();
	                                defer.resolve(true);
	                            },
	                            function(reason) {
	                                applicationService.showErrorMessage(reason);
	                                defer.resolve(false);
	                            });
	                }
	            } else {
	                var isInvalid = false;
	                if (vm.footnotesForm.name.$viewValue === '') {
	                    vm.footnotesForm.name.$setTouched();
	                    vm.footnotesForm.name.$setValidity("required", false);
	                    isInvalid = true;
	                }
	                if (vm.footnotesForm.sequence.$viewValue === '') {
	                    vm.footnotesForm.sequence.$setTouched();
	                    vm.footnotesForm.sequence.$setValidity("required", false);
	                    isInvalid = true;
	                }
	
	                return isInvalid === false ? defer.resolve(true) : defer.reject({
	                    title: 'error',
	                    message: 'Please fill in all mandatory fields'
	                });
	            }
	            return defer.promise;
	        }
	
	        function createNewItem() {
	            if (vm.selectedOption === "collateral") {
	                if (vm.selectedMultimediaItem) {
	                    if (vm.selectedMultimediaItem.Id) {
	                        vm.createMultimediaModal('new');
	                    } else {
	                        addAlert('Please save or remove the current selected multimedia item before creating a new one', cpqAdminConstants.DANGER);
	                        applicationService.showErrorMessage({
	                            title: 'Error',
	                            message: 'Please save or remove the current selected multimedia item before creating a new one'
	                        });
	                    }
	                } else {
	                    vm.createMultimediaModal('new');
	                }
	            } else if (vm.selectedOption === "footnotes") {
	                createFootNoteItem();
	            }
	        }
	
	        function loadCenterPanel(item) {
	            if (vm.selectedMultimediaItem) {
	                savePage(true).then(function(response) {
	                    vm.multimediaItems.unshift(item);
	                    vm.selectedMultimediaItem = vm.multimediaItems[0];
	                    vm.activeMultimediaItemIndex = 0;
	                    if (vm.selectedMultimediaItem[multimediaService.getPrefixedAttribute('InformationType__c')] === 'URL Address') {
	                        vm.selectedMultimediaItem = multimediaService.formatURLAddress(vm.selectedMultimediaItem);
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else {
	                vm.multimediaItems.unshift(item);
	                vm.selectedMultimediaItem = item;
	                vm.activeMultimediaItemIndex = 0;
	            }
	
	        }
	
	        function getTabIndex(value) {
	            if (value === 'Attached File') {
	                return 0;
	            }
	            if (value === 'URL Address') {
	                return 1;
	            }
	            if (value === 'Embedded Code') {
	                return 2;
	            }
	        };
	
	        /**
	         * dialog box for create and update the multimedia list
	         */
	        vm.createMultimediaModal = function(opeartion) {
	            var tabToOpen;
	            if (opeartion === 'update') {
	                tabToOpen = getTabIndex(vm.selectedMultimediaItem[multimediaService.getPrefixedAttribute('InformationType__c')]);
	                vm.selectedMultimediaItem.operationType = 'update';
	            }
	
	            $mdDialog.show({
	                    controller: __webpack_require__(473),
	                    controllerAs: 'vm',
	                    template: __webpack_require__(474),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    resolve: {
	                        selectedMultimediaItem: function() {
	                            return opeartion === 'new' ? multimediaService.getSampleMultimediaList($stateParams.id) : angular.copy(vm.selectedMultimediaItem);
	                        },
	                        tabToOpen: function() {
	                            return opeartion === 'new' ? 0 : tabToOpen || 0;
	                        }
	                    }
	                })
	                .then(function(response) {
	                    isFormReady = true;
	                    if (!response.Id && response.operationType === 'new') {
	                        //vm.multimediaItems.unshift(response);
	                        loadCenterPanel(response);
	                    } else {
	                        vm.multimediaItems[vm.activeMultimediaItemIndex] = response;
	                        vm.selectedMultimediaItem = response;
	                        mmContentChanged = true;
	                        vm.multimediaForm.$setDirty();
	                    }
	
	                });
	        };
	
	
	        vm.openInNewTab = function() {
	            $window.open(vm.selectedMultimediaItem.imgUrl, '_blank');
	        };
	
	        /**
	         * updateState method checks whether meta data about the current selected product is
	         * available or not. Like product name, product code, etc.
	         * For a new product, it wont have any metadata until unless it is saved.
	         * Helps is page refresh and state change activity.
	         */
	        productService.updateState($stateParams.id);
	
	
	        function prepareCreatNewPayload(item) {
	            var temp = {};
	            if (item) {
	                var name = item.Name,
	                    productCode = $stateParams.id,
	                    description = item[multimediaService.getPrefixedAttribute('Description__c')],
	                    fileName = item.fileName;
	                if (item[multimediaService.getPrefixedAttribute('InformationType__c')] === 'URL Address') {
	
	                    temp[multimediaService.getPrefixedAttribute('ContentUrl__c')] = getValueFromSce(item[multimediaService.getPrefixedAttribute('ContentUrl__c')]);
	                    temp[multimediaService.getPrefixedAttribute('EmbedCode__c')] = '';
	                    temp[multimediaService.getPrefixedAttribute('InformationType__c')] = 'URL Address';
	                    temp.Name = name;
	                    temp.fileName = fileName;
	                    temp[multimediaService.getPrefixedAttribute('Description__c')] = description;
	                    temp[multimediaService.getPrefixedAttribute('ProductId__c')] = productCode;
	
	                }
	                if (item[multimediaService.getPrefixedAttribute('InformationType__c')] === 'Embedded Code') {
	
	                    temp[multimediaService.getPrefixedAttribute('EmbedCode__c')] = getTrustedHtmlFromSce(item[multimediaService.getPrefixedAttribute('EmbedCode__c')]);
	                    temp[multimediaService.getPrefixedAttribute('ContentUrl__c')] = '';
	                    temp[multimediaService.getPrefixedAttribute('InformationType__c')] = 'Embedded Code';
	                    temp.Name = name;
	                    temp.fileName = fileName;
	                    temp[multimediaService.getPrefixedAttribute('Description__c')] = description;
	                    temp[multimediaService.getPrefixedAttribute('ProductId__c')] = productCode;
	
	                }
	                if (item[multimediaService.getPrefixedAttribute('InformationType__c')] === 'Attached File') {
	
	                    temp[multimediaService.getPrefixedAttribute('EmbedCode__c')] = "";
	                    temp[multimediaService.getPrefixedAttribute('ContentUrl__c')] = '';
	                    temp[multimediaService.getPrefixedAttribute('InformationType__c')] = "Attached File";
	                    temp.Name = name;
	                    temp.fileName = fileName;
	                    temp[multimediaService.getPrefixedAttribute('Description__c')] = description;
	                    temp[multimediaService.getPrefixedAttribute('ProductId__c')] = productCode;
	
	                }
	                if (item.Id) {
	                    temp.Id = item.Id;
	                }
	            }
	
	            return temp;
	        }
	
	        function createNewMultimedia(highlightItem) {
	            var defer = $q.defer(),
	                payload = prepareCreatNewPayload(angular.copy(vm.selectedMultimediaItem)),
	                isPrimary = vm.selectedMultimediaItem.isPrimary;
	            (payload.fileName) ? delete payload['fileName']: true;
	            multimediaService.createMultimedia(payload)
	                .then(function(response) {
	                        if (response && response.length > 0) {
	                            addAlert('Created successfully', cpqAdminConstants.SUCCESS);
	                            vm.selectedMultimediaItem.Id = response[0].Id;
	                            if (vm.selectedMultimediaItem.fileInfo && vm.selectedMultimediaItem.fileInfo.source) {
	                                uploadAttachment(vm.selectedMultimediaItem.Id, payload)
	                                    .then(function(response) {
	                                            if (isPrimary) {
	                                                if (vm.selectedMultimediaItem[multimediaService.getPrefixedAttribute('InformationType__c')] === 'Attached File') {
	                                                    updatePrimaryImage(vm.selectedMultimediaItem.Id, vm.selectedMultimediaItem[multimediaService.getPrefixedAttribute('FileId__c')]);
	                                                    if (highlightItem) {
	                                                        loadCollateralLeftPanel();
	                                                    } else {
	                                                        loadCollateralLeftPanel(vm.selectedMultimediaItem.Id);
	                                                    }
	
	                                                }
	                                            } else {
	                                                if (highlightItem) {
	                                                    loadCollateralLeftPanel();
	                                                } else {
	                                                    loadCollateralLeftPanel(vm.selectedMultimediaItem.Id);
	                                                }
	
	                                                defer.resolve(true);
	                                            }
	                                        },
	                                        function(reason) {
	                                            defer.reject(reason);
	                                        });
	                            } else {
	                                if (highlightItem) {
	                                    loadCollateralLeftPanel();
	                                } else {
	                                    loadCollateralLeftPanel(vm.selectedMultimediaItem.Id);
	                                }
	
	                                defer.resolve(true);
	                            }
	                        }
	                    },
	                    function(reason) {
	                        defer.reject(reason);
	                    });
	
	            return defer.promise;
	        }
	        /**
	         * Save multimedia list
	         */
	        function updateMultimedia() {
	            var defer = $q.defer(),
	                isPrimary = vm.selectedMultimediaItem.isPrimary,
	                originalPrimaryValue = vm.selectedMultimediaItem.originalPrimaryValue,
	                payload = prepareCreatNewPayload(angular.copy(vm.selectedMultimediaItem));
	
	            multimediaService.updateMultimedia(payload)
	                .then(function(response) {
	                        if (isPrimary) {
	                            updatePrimaryImage(vm.selectedMultimediaItem.Id, vm.selectedMultimediaItem[multimediaService.getPrefixedAttribute('FileId__c')]);
	                        } else if (originalPrimaryValue) {
	                            updatePrimaryImage(vm.selectedMultimediaItem.Id, '');
	                        }
	                        if (vm.selectedMultimediaItem.fileInfo && vm.selectedMultimediaItem.fileInfo.source) {
	                            uploadAttachment(vm.selectedMultimediaItem.Id, payload)
	                                .then(function(response) {
	                                    if (response) {
	                                        defer.resolve(response);
	                                    } else {
	                                        defer.resolve(response);
	                                    }
	                                }, function(reason) {
	                                    applicationService.showErrorMessage(reason);
	                                    defer.resolve(response);
	                                });
	                        } else {
	                            defer.resolve(response);
	                        }
	                        if(!isPrimary) {
	                            addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);        
	                        }
	                    },
	                    function(reason) {
	                        addAlert('Error in update operation', cpqAdminConstants.DANGER);
	                        defer.reject(reason);
	                    });
	
	            return defer.promise;
	        }
	
	        function highlightPrimaryItem(itemId, attachmentId) {
	            if (vm.multimediaItems.length) {
	                if (attachmentId) {
	                    for (var i = 0; i < vm.multimediaItems.length; i++) {
	                        if (vm.multimediaItems[i].Id === itemId) {
	                            vm.multimediaItems[i].isPrimary = true;
	                            vm.multimediaItems[i].originalPrimaryValue = true;
	                        } else {
	                            vm.multimediaItems[i].isPrimary = false;
	                            vm.multimediaItems[i].originalPrimaryValue = false;
	                        }
	                    }
	
	                } else {
	                    for (var i = 0; i < vm.multimediaItems.length; i++) {
	                        vm.multimediaItems[i].isPrimary = false;
	                        vm.multimediaItems[i].originalPrimaryValue = false;
	                    }
	                }
	
	            }
	        }
	
	        function updatePrimaryImage(itemId, attachmentId) {
	            multimediaService.updatePrimaryImage($stateParams.id, attachmentId)
	                .then(function(response) {
	                    addAlert('Primary image is updated for the product', cpqAdminConstants.SUCCESS);
	                    updatePrimaryIconId(attachmentId);
	                    highlightPrimaryItem(itemId, attachmentId);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	
	        }
	
	        function updateProductAttachments() {
	            var defer = $q.defer(),
	                attachmentSO = {},
	                temp = {
	                    'AttachmentSO': {}
	                },
	                request = [],
	                currentlySelectedItem = vm.selectedMultimediaItem;
	            var fileName = vm.selectedMultimediaItem.fileName;
	            var fileType = vm.selectedMultimediaItem.Name.substr(vm.selectedMultimediaItem.Name.lastIndexOf('.'));
	            attachmentSO.Id = vm.selectedMultimediaItem.Id;
	            attachmentSO.ParentId = vm.selectedMultimediaItem.ParentId;
	            attachmentSO.Name = fileName + fileType;
	            attachmentSO.Description = vm.selectedMultimediaItem[multimediaService.getPrefixedAttribute('Description__c')];
	
	            temp.AttachmentSO = attachmentSO;
	            request.push(temp);
	
	            if (vm.selectedMultimediaItem.isPrimary) {
	                updatePrimaryImage(vm.selectedMultimediaItem.Id, vm.selectedMultimediaItem.Id);
	            } else if (vm.selectedMultimediaItem.originalPrimaryValue) {
	                updatePrimaryImage(vm.selectedMultimediaItem.Id, '');
	            }
	
	            productDetailService.updateAttachments(request)
	                .then(function(response) {
	                    addAlert('Attachment updated successfully', cpqAdminConstants.SUCCESS);
	                    defer.resolve(response);
	
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	
	            return defer.promise;
	        }
	
	        function isMultiMediaFormValid() {
	            var isDirty = true;
	            isDirty = vm.multimediaForm.$dirty || mmContentChanged;
	
	            if (vm.multimediaForm.name.$viewValue === '') {
	                vm.multimediaForm.name.$setTouched();
	                vm.multimediaForm.name.$setValidity("required", false);
	                isDirty = false;
	            } else {
	                isDirty = true;
	            }
	            return isDirty;
	        }
	
	        function isFootnoteFormValid() {
	            var isValid = true;
	
	            if (vm.footnotesForm) {
	                isValid = (vm.footnotesForm.$invalid === true ? false : true);
	
	                if (vm.footnotesForm.name.$viewValue === '') {
	                    vm.footnotesForm.name.$setTouched();
	                    vm.footnotesForm.name.$setValidity("required", false);
	                    isValid = false;
	                } else if (vm.footnotesForm.sequence.$viewValue === '') {
	                    vm.footnotesForm.sequence.$setTouched();
	                    vm.footnotesForm.sequence.$setValidity("required", false);
	                    isValid = false;
	                } else {
	                    isValid = true;
	                }
	            }
	            return isValid;
	        }
	
	        function resetMultimediaForm() {
	            if (vm.multimediaForm) {
	                vm.multimediaForm.$setPristine();
	            }
	        }
	
	        function resetFootnotesForm() {
	            if (vm.footnotesForm) {
	                vm.footnotesForm.$setPristine();
	                vm.footnotesForm.name.$setUntouched();;
	                vm.footnotesForm.name.$setValidity("required", true);
	                vm.footnotesForm.sequence.$setValidity("required", true);
	                vm.footnotesForm.sequence.$setUntouched();
	            }
	        }
	
	        function savePage(highlightItem) {
	            var defer = $q.defer();
	            if (vm.selectedOption === "collateral" && vm.selectedMultimediaItem && isMultiMediaFormValid()) {
	                if(vm.multimediaForm.$dirty || isFormReady) {
	                    if (vm.selectedMultimediaItem.itemType === 'collateral') {
	                        if (vm.selectedMultimediaItem.Id) {
	                            updateMultimedia()
	                                .then(function(response) {
	                                    isPageSaved = true;
	                                    mmContentChanged = false;
	                                    resetMultimediaForm();
	                                    defer.resolve(response);
	                                }, function(reason) {
	                                    defer.reject(reason);
	                                });
	                        } else {
	                            createNewMultimedia(highlightItem)
	                                .then(function(response) {
	                                    isPageSaved = true;
	                                    resetMultimediaForm();
	                                    defer.resolve(response);
	                                }, function(reason) {
	                                    defer.reject(reason);
	                                });
	                        }
	                    } else if (isMultiMediaFormValid()) {
	                        updateProductAttachments()
	                            .then(function(response) {
	                                isPageSaved = true;
	                                mmContentChanged = false;
	                                resetMultimediaForm();
	                                defer.resolve(response);
	                            }, function(reason) {
	                                defer.reject(reason);
	                            });
	                    }
	                } else {
	                    addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	                }
	            }
	            /* else {
	                defer.resolve(true);
	            }*/
	
	            if (vm.selectedOption === "footnotes") {
	                if (vm.footnotesForm.$dirty) {
	                    if (vm.selectedFootNoteItem && isFootnoteFormValid()) {
	                        saveFootNotes()
	                            .then(function(response) {
	                                resetFootnotesForm();
	                                defer.resolve(true);
	                            }, function(reason) {
	                                resetFootnotesForm();
	                                defer.reject(reason);
	                            });
	                    } else {
	                        addAlert('Please fill in all mandatory fields', cpqAdminConstants.DANGER);
	                        defer.reject({
	                            title: 'Error',
	                            message: 'Please fill in all mandatory fields'
	                        });
	                    }
	                } else if (isFootnoteFormValid()) {
	                    defer.resolve(true);
	                } else {
	                    addAlert('Please fill in all mandatory fields', cpqAdminConstants.DANGER);
	                    defer.reject({
	                        title: 'Error',
	                        message: 'Please fill in all mandatory fields'
	                    });
	                }
	
	            }
	            return defer.promise;
	        }
	
	
	        /**
	         * When user clicks on the 'Save Product' button, an event named 'explicitPageSave' gets broadcasted.
	         * A page has to listen to that event and do the page specific save functionality.
	         */
	        $scope.$on('explicitPageSave', function() {
	            if (vm.selectedMultimediaItem || vm.selectedFootNoteItem) {
	                savePage().then(function(response) {
	                    addAlert('Updated successfully', cpqAdminConstants.SUCCESS);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            }
	        });
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	
	            if (toState.name === 'app.list') {
	                return true;
	            } else if (isPageSaved || vm.multimediaForm.$pristine || vm.footnotesForm.$pristine) {
	                return true;
	            } else {
	                if ((vm.selectedMultimediaItem || vm.selectedFootNoteItem) && !vm.isCancelClicked) {
	                    e.preventDefault();
	                    savePage().then(function(response) {
	                        isPageSaved = true;
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        } else {
	                            addAlert('Updated successfully', cpqAdminConstants.SUCCESS);
	                        }
	                    }, function(reason) {
	                        applicationService.showErrorMessage(reason);
	                    });
	                } else {
	                    vm.isCancelClicked = false;
	                    return true;
	                }
	            }
	
	        });
	
	        function uploadAttachment(parentId, payload) {
	            var defer = $q.defer(),
	                attachmentRequestDOs = [],
	                blob = vm.selectedMultimediaItem.fileInfo.source.toString().replace(/^data:image\/(png|jpg|jpeg);base64,/, "").replace(/^data:application\/(pdf|msword);base64,/, "");
	
	            attachmentRequestDOs.push({
	                parentId: parentId,
	                AttachmentName: vm.selectedMultimediaItem.fileInfo.name,
	                attachmentBody: blob
	            });
	
	            if (attachmentRequestDOs.length > 0) {
	                productDetailService.uploadAttachments(attachmentRequestDOs)
	                    .then(function(response) {
	                        if (response.length > 0) {
	                            isFormReady = false;
	                            payload[multimediaService.getPrefixedAttribute('FileId__c')] = response[0];
	                            vm.selectedMultimediaItem[multimediaService.getPrefixedAttribute('FileId__c')] = response[0];
	                            payload.Id = parentId;
	                            multimediaService.updateMultimedia(payload)
	                                .then(function(response) {
	                                        defer.resolve(true);
	                                    },
	                                    function(reason) {
	                                        defer.reject(reason);
	                                    });
	                        }
	                        defer.resolve(response);
	                    }, function(reason) {
	                        defer.reject(reason);
	                    });
	            }
	            return defer.promise;
	        }
	
	
	
	        /**
	         * - getIndex stores the to be removed list index .
	         */
	        var toBeRemovedIndex;
	        var toBeRemovedListId;
	
	        vm.removeItem = function(removeItemId) {
	
	            vm.confiramtionPopup = true;
	            if (vm.selectedOption === "collateral") {
	                toBeRemovedIndex = vm.activeMultimediaItemIndex;
	            } else if (vm.selectedOption === "footnotes") {
	                toBeRemovedIndex = vm.activeFootNoteItemIndex;
	            }
	
	            toBeRemovedListId = removeItemId;
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.DeleteMessageBody,
	                messageNote: vm.labels.DeleteMessageNote
	            }
	        };
	
	
	        vm.confirmRemove = function() {
	            vm.confiramtionPopup = false;
	            if (vm.selectedOption === "collateral") {
	                confirmRemoveMultimediaItem();
	            } else if (vm.selectedOption === "footnotes") {
	                confirmRemoveFootNotesItem();
	            }
	        };
	
	        /**
	         *
	         */
	        function confirmRemoveFootNotesItem() {
	            if (toBeRemovedListId) {
	                multimediaService.removeProductFootnotes([toBeRemovedListId]).then(function(res) {
	                    vm.footNotesLists.splice(toBeRemovedIndex, 1);
	                    toBeRemovedListId = '';
	                    toBeRemovedIndex = '';
	                    vm.activeFootNoteItemIndex = undefined;
	                    resetCenterPanel();
	                    loadFirstFNItem();
	                    addAlert('Removed successfully', cpqAdminConstants.SUCCESS);
	                }, function(err) {
	                    toBeRemovedListId = '';
	                    toBeRemovedIndex = '';
	                    vm.confiramtionPopup = false;
	                    addAlert('Selected item couldn\'t be removed', cpqAdminConstants.DANGER);
	                });
	            } else {
	                vm.footNotesLists.splice(toBeRemovedIndex, 1);
	                resetCenterPanel();
	                loadFirstFNItem();
	                addAlert('Removed successfully', cpqAdminConstants.SUCCESS);
	            }
	
	        }
	
	        /**
	         * Remove an item from multimedia list
	         */
	        function confirmRemoveMultimediaItem() {
	            var removedMultimediaList;
	            if (toBeRemovedListId) {
	                multimediaService.removeProductInformation([toBeRemovedListId])
	                    .then(function(res) {
	                        var temp = vm.multimediaItems[toBeRemovedIndex];
	                        if (temp.isPrimary) {
	                            updatePrimaryImage(temp.Id, '');
	                        }
	                        vm.multimediaItems.splice(toBeRemovedIndex, 1);
	                        toBeRemovedListId = '';
	                        toBeRemovedIndex = '';
	                        vm.activeMultimediaItemIndex = undefined;
	                        resetCenterPanel();
	                        loadFirstMMItem();
	                        addAlert('Removed successfully', cpqAdminConstants.SUCCESS);
	
	                    }, function(err) {
	                        toBeRemovedListId = '';
	                        toBeRemovedIndex = '';
	                        vm.confiramtionPopup = false;
	                        addAlert('Selected item couldn\'t be removed', cpqAdminConstants.DANGER);
	                    });
	            } else {
	                vm.multimediaItems.splice(toBeRemovedIndex, 1);
	                resetCenterPanel();
	                loadFirstMMItem();
	                addAlert('Removed successfully', cpqAdminConstants.SUCCESS);
	            }
	
	        }
	
	        vm.cancelRemove = function() {
	            vm.confiramtionPopup = false;
	            toBeRemovedIndex = undefined;
	        };
	
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        vm.goToDetailsPage = function() {
	            vm.isCancelClicked = true;
	            $state.go('app.product.details', {
	                'id': $stateParams.id
	            });
	        };
	
	        vm.explicitPageSave = function() {
	            if (vm.selectedMultimediaItem || vm.selectedFootNoteItem) {
	                savePage().then(function(response) {});
	            }
	        };
	
	        var createNewFootnoteRequired = false;
	        $scope.$on(vm.labels.NewMultimedia.split(' ').join('-'), function() {
	            vm.types.value = 'collateral';
	            vm.selectedOption = "collateral";
	            createNewItem();
	        });
	        $scope.$on(vm.labels.NewFootnote.split(' ').join('-'), function() {
	            if (vm.selectedOption !== "footnotes") {
	                vm.types.value = 'footnotes';
	                vm.selectedOption = "footnotes";
	                createNewFootnoteRequired = true;
	            } else {
	                createNewItem();
	            }
	        });
	    }
	
	    productMultimediaController.$inject = [
	        '$scope',
	        '$state',
	        '$stateParams',
	        '$mdDialog',
	        'i18nService',
	        'productService',
	        'multimediaService',
	        '$templateCache',
	        '$sce',
	        '$window',
	        'systemConstants',
	        'applicationService',
	        '$q',
	        'productDetailService',
	        'multimediaList',
	        'footnoteTypeList',
	        'productNoteAttachments',
	        'cpqAdminConstants',
	        'selectedProduct'
	    ];
	
	    module.exports = productMultimediaController;
	
	})();


/***/ }),
/* 468 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"left-container\">\r\n    <header>\r\n        <div class=\"multimedia-title\">\r\n            <material-form-field model=\"vm.types.value\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.types\">\r\n            </material-form-field>\r\n        </div>\r\n    </header>\r\n    <div class=\"media-list\" ng-include=\"'left-multimedia-list.html'\" ng-if=\"vm.selectedOption === 'collateral'\"></div>\r\n    <div class=\"media-list list-table\" ng-include=\"'left-footnotes-list.html'\" ng-if=\"vm.selectedOption === 'footnotes'\"></div>\r\n</div>\r\n"

/***/ }),
/* 469 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"list-table list\">\r\n    <p data-ng-if=\"vm.multimediaItems.length === 0\" class=\"no-multimedia-available\">{{ vm.labels.MultimediaNoMultimedia }}</p>\r\n    <table>\r\n        <tbody>\r\n            <tr ng-repeat=\"item in vm.multimediaItems track by $index\" ng-click=\"vm.changeActiveMultimediaItem($index)\" ng-class=\"{'active': $index == vm.activeMultimediaItemIndex}\">\r\n                <td class=\"image-container\">\r\n                    <img data-ng-src=\"{{item.imgUrl}}\" class=\"image-icon\" data-ng-if=\"item.type === 'youtube' || item.type === 'image'\" width=\"50\" />\r\n                    <span class=\"image-icon\" data-ng-if=\"item.type ==='video'\"><i class=\"fa fa-youtube-play\"></i></span>\r\n                    <span class=\"image-icon\" data-ng-if=\"item.type ==='audio'\"><i class=\"fa fa-volume-up\"></i></span>\r\n                    <span class=\"image-icon\" data-ng-if=\"item.type ==='pdf'\"><i class=\"fa fa-file-pdf-o\"></i></span>\r\n                    <span class=\"image-icon\" data-ng-if=\"item.type ==='doc'\"><i class=\"fa fa-file\"></i></span>\r\n                    <span class=\"image-icon\" data-ng-if=\"item.type ==='unknown'\"><i class=\"fa fa-file\"></i></span>\r\n                </td>\r\n                <td class=\"name-container\">\r\n                    <div class=\"primary-item\" data-ng-if=\"item.isPrimary === true && item.originalPrimaryValue === true\">\r\n                        <i class=\"material-icons primary show\">check_circle</i>\r\n                    </div>\r\n                    <p class=\"label-name\">{{ item.fileName }}</p>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n"

/***/ }),
/* 470 */
/***/ (function(module, exports) {

	module.exports = "<form name=\"vm.multimediaForm\" novalidate>\r\n    <div class=\"fixingHeaderMultimedia\">\r\n        <div class=\"action\"></div>\r\n        <div class=\"lg-width flex-1\">{{ vm.labels.MultimediaName }}</div>\r\n        <div class=\"is-primary text-center\">{{ vm.labels.MultimediaIsPrimary }}</div>\r\n        <div class=\"lg-width flex-0 text-center\">{{ vm.labels.MultimediaType }}</div>\r\n        <div class=\"lg-width flex-0 text-center\">{{ vm.labels.MultimediaLastModifiedBy }}</div>\r\n        <div class=\"lg-width flex-0 text-center\">{{ vm.labels.MultimediaLastModified }}</div>\r\n    </div>\r\n    <div class=\"multimedia-container\" data-ng-show=\"vm.multimediaItems.length\">\r\n        <!-- <div data-ng-if=\"vm.toggleHelpText\" class=\"alert alert-warning in\" role=\"alert\">\r\n            <p>{{ vm.labels.MultimediaFormMsg }}<b><br/>{{ vm.labels.MultimediaChangeName }}</b></p>\r\n        </div> -->\r\n        <div class=\"multimedia-table\">\r\n            <div class=\"remove-multimedia\">\r\n                <button ng-click=\"vm.removeItem(vm.selectedMultimediaItem.Id)\" class=\"slds-button slds-button--icon\">\r\n                    <i class=\"material-icons\">clear</i>\r\n                </button>\r\n            </div>\r\n            <div class=\"lg-width flex-1\">\r\n                <material-form-field model=\"vm.selectedMultimediaItem.fileName\" field-type=\"string\" is-editable=\"true\" field-label=\"vm.labels.MultimediaNameField\" name=\"name\" on-focus=\"vm.onNameFieldFocus()\" on-blur=\"vm.onNameFieldBlur()\" ng-required=\"true\" max-length=\"80\">\r\n                </material-form-field>\r\n                <div ng-messages=\"vm.multimediaForm.name.$error\">\r\n                    <p ng-message=\"required\" class=\"formError\">\r\n                        {{ vm.labels.MultimediaIsMandatory }}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"is-parmary text-center\">\r\n                <material-form-field model=\"vm.selectedMultimediaItem.isPrimary\" field-type=\"CHECKBOX\" is-editable=\"{{(vm.selectedMultimediaItem[vm.prefix + 'InformationType__c'] === 'Attached File' && vm.selectedMultimediaItem.type === 'image' ) ? true: false }}\">\r\n            </div>\r\n            <div class=\"lg-width flex-0 text-center\">\r\n                <span class=\"m-t-15 disaplay-inline-b\">{{vm.selectedMultimediaItem[vm.prefix + 'InformationType__c']}}</span>\r\n            </div>\r\n            <div class=\"lg-width flex-0 text-center\"><span class=\"m-t-15 disaplay-inline-b\">{{vm.selectedMultimediaItem.LastModifiedBy.Name}}</span></div>\r\n            <div class=\"lg-width flex-0 text-center\"><span class=\"m-t-15 disaplay-inline-b\">{{vm.selectedMultimediaItem.LastModifiedDate | date:'MM/dd/yyyy'}}</span></div>\r\n        </div>\r\n        <div class=\"no-extension-msg\" data-ng-if=\"vm.selectedMultimediaItem.type === 'unknown'\">\r\n            <i class=\"material-icons\">warning</i>\r\n            <p>Preview image will only display if an image extension is provided in multimedia name</p>\r\n        </div>\r\n        <div class=\"media-panel\">\r\n            <div class=\"m-b-5\">\r\n                <material-form-field model=\"vm.selectedMultimediaItem[vm.prefix + 'Description__c']\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.MultimediaDescription\" max-length=\"255\" name=\"description\">\r\n                </material-form-field>\r\n                <div ng-messages=\"vm.multimediaForm.description.$error\" class=\"error-msg\">\r\n                    <p ng-message=\"maxlength\" class=\"formError\">\r\n                        {{vm.labels.FormDescriptionMaxCharError | userMessage:vm.labels.MultimediaDescription}}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"preview-container\">\r\n                <div class=\"media-frame\">\r\n                    <div class=\"media-container\">\r\n                        <div class=\"image-magnifier\" data-ng-if=\"vm.selectedMultimediaItem.type !== 'unknown'\" data-ng-click=\"vm.openInNewTab()\">\r\n                            <span class=\"fa fa-search-plus\"></span>\r\n                        </div>\r\n                        <!-- show attachment -->\r\n                        <multimedia-tag src-url=\"vm.selectedMultimediaItem.imgUrl\" item-type=\"vm.selectedMultimediaItem.type\" data-ng-if=\"vm.selectedMultimediaItem[vm.prefix + 'InformationType__c'] === 'Attached File' && (vm.selectedMultimediaItem.type !== 'unknown' && vm.selectedMultimediaItem.type !== 'doc')\"></multimedia-tag>\r\n                        <!-- show upload url -->\r\n                        <multimedia-tag src-url=\"vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c']\" item-type=\"vm.selectedMultimediaItem.type\" data-ng-if=\"vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c'] && vm.selectedMultimediaItem.type !== 'unknown'\"></multimedia-tag>\r\n                        <!-- show iframe -->\r\n                        <div ng-bind-html=\"vm.selectedMultimediaItem[vm.prefix + 'EmbedCode__c']\" data-ng-if=\"vm.selectedMultimediaItem[vm.prefix + 'InformationType__c'] === 'Embedded Code'\"></div>\r\n                        <!-- show unKnown -->\r\n                        <div class=\"text-center media-unknown\" data-ng-if=\"vm.selectedMultimediaItem.type === 'unknown' || vm.selectedMultimediaItem.type === 'doc'\">\r\n                            <p class=\"media-unknown-image\"><span class=\"text-muted fa fa-picture-o\"></span></p>\r\n                            <p class=\"media-unknown-text text-muted\"> <span> {{ vm.labels.MultimediaUnknownMsg }}</span></p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"content-info-holder\">\r\n                    <button class=\"slds-button slds-button_neutral\" data-ng-click=\"vm.createMultimediaModal('update')\" data-ng-show=\"vm.selectedMultimediaItem.itemType === 'collateral' ? true : false \">\r\n                        {{ vm.labels.MultimediaReplaceMediaButton }}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>"

/***/ }),
/* 471 */
/***/ (function(module, exports) {

	module.exports = "<p class=\"no-footnotes-available\" data-ng-if=\"vm.footNotesLists.length === 0\">{{ vm.labels.FootnotesNoFootnotes }}</p>\r\n<table>\r\n    <tbody>\r\n        <tr ng-repeat=\"item in vm.footNotesLists track by $index\" ng-click=\"vm.changeActiveFootNoteItem($index)\" ng-class=\"{'active': $index == vm.activeFootNoteItemIndex}\">\r\n            <td class=\"footnote-name-container\">\r\n                {{ item.name }}\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n"

/***/ }),
/* 472 */
/***/ (function(module, exports) {

	module.exports = "<form name=\"vm.footnotesForm\" novalidate>\r\n    <div class=\"fixingHeaderMultimedia\">\r\n        <div class=\"action\"></div>\r\n        <div class=\"lg-width flex-1\">{{ vm.labels.FootnotesCollateralName }}</div>\r\n        <div class=\"lg-width flex-0 text-center\">{{ vm.labels.FootnotesType }}</div>\r\n        <div class=\"sequence\">{{ vm.labels.FootnotesSequence }}</div>\r\n        <div class=\"lg-width flex-0 text-center\">{{ vm.labels.FootnotesLastModifiedBy }}</div>\r\n        <div class=\"lg-width flex-0 text-center\">{{ vm.labels.FootnotesLastModified }}</div>\r\n    </div>\r\n    <div class=\"multimedia-container\" data-ng-show=\"vm.footNotesLists.length\">\r\n        <div class=\"multimedia-table\">\r\n            <div class=\"remove-multimedia\">\r\n                <button ng-click=\"vm.removeItem(vm.selectedFootNoteItem.id)\" class=\"slds-button slds-button--icon\">\r\n                    <i class=\"material-icons\">clear</i>\r\n                </button>\r\n            </div>\r\n            <div class=\"lg-width flex-1\">\r\n                <material-form-field model=\"vm.selectedFootNoteItem.name\" field-type=\"string\" is-editable=\"true\" field-label=\"vm.labels.FootnotesNameField\" name=\"name\" is-required=\"true\" max-length=\"80\">\r\n                </material-form-field>\r\n                <div ng-messages=\"vm.footnotesForm.name.$error\" ng-if=\"vm.footnotesForm.name.$touched || vm.footnotesForm.$submitted \">\r\n                    <p ng-message=\"required\" class=\"formError\">\r\n                        {{ vm.labels.FootnotesIsMandatory }}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"lg-width flex-0 footnote-type\">\r\n                <!-- <material-form-field model=\"vm.selectedFootNoteItem.type\" field-type=\"picklist\" is-editable=\"false\" is-disabled=\"true\" properties=\"vm.footnotePicklistEntries\" field-label=\"vm.labels.FootnotesTypeField\">\r\n                </material-form-field> -->\r\n                <span class=\"disaplay-inline-b\">{{vm.selectedFootNoteItem.type}}</span>\r\n            </div>\r\n            <div class=\"sequence\">\r\n                <material-form-field model=\"vm.selectedFootNoteItem.sequence\" field-type=\"quantity\" is-editable=\"true\" field-label=\"vm.labels.FootnotesSequenceField\" name=\"sequence\" is-required=\"true\">\r\n                </material-form-field>\r\n                <div ng-messages=\"vm.footnotesForm.sequence.$error\" ng-if=\"vm.footnotesForm.sequence.$touched || vm.footnotesForm.$submitted \">\r\n                    <p ng-message=\"required\" class=\"formError\">\r\n                        {{ vm.labels.FootnotesIsMandatory }}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div class=\"lg-width flex-0 text-center\"><span class=\"m-t-15 disaplay-inline-b\">{{vm.selectedFootNoteItem.lastModifiedBy}}</span></div>\r\n            <div class=\"lg-width flex-0 text-center\"><span class=\"m-t-15 disaplay-inline-b\">{{vm.selectedFootNoteItem.lastModifiedDate | date:'MM/dd/yyyy'}}</span></div>\r\n        </div>\r\n        <div class=\"media-panel\">\r\n            <div class=\"m-b-5\">\r\n                <material-form-field model=\"vm.selectedFootNoteItem.body\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.FootnotesBody\" max-length=\"255\" name=\"description\">\r\n                </material-form-field>\r\n                <div ng-messages=\"vm.footnotesForm.description.$error\" class=\"error-msg\">\r\n                    <p ng-message=\"maxlength\" class=\"formError\">\r\n                        {{vm.labels.FormDescriptionMaxCharError | userMessage:vm.labels.FootnotesBody}}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</form>"

/***/ }),
/* 473 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var createMultimediaController = function($scope, $sce, $mdDialog, i18nService, systemConstants, multimediaService, selectedMultimediaItem, tabToOpen) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.selectedTab = tabToOpen;
	        vm.selectedMultimediaItem = selectedMultimediaItem;
	        vm.sampleExample = '<iframe title="Video Player" width="640" height="390" src="http://www.example.com/video_url" frameborder="0" allowfullscreen></iframe>';
	        if (vm.selectedMultimediaItem[vm.prefix + 'InformationType__c'] === 'Attached File') {
	            vm.selectedMultimediaItem.fileInfo = {
	                'name': vm.selectedMultimediaItem.Name
	
	            }
	            if (vm.selectedMultimediaItem.fileInfo) {
	                vm.showUploadList = true;
	            }
	        }
	        vm.save = function() {
	            switch (vm.selectedTab) {
	                case 0:
	                    {
	                        changefileInfo();
	                        break;
	                    }
	                case 1:
	                    {
	                        changeContentURLInfo();
	                        break;
	                    }
	                case 2:
	                    {
	                        changeEmbedInfo();
	                        break;
	                    }
	            }
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        $scope.uploadImage = function(event) {
	            var files = event.target.files || event.originalEvent.dataTransfer.files;
	            /* User should not be allowed to select more than 1 item and of certain fixed type of docs */
	            /* Show message to the user incase user selects more than 1 image */
	            if (files.length > 1) {
	                alert('Please select one item at once');
	            } else {
	                for (var i = 0; i < files.length; i++) {
	                    var file = files[i];
	                    if (file.size <= 3145728) {
	                        var reader = new FileReader();
	                        var fileObj = files[i];
	                        reader.onload = (function(fileObj) {
	                            return function(eventObj) {
	                                showImageThumbnail(eventObj, fileObj);
	                            };
	                        })(fileObj);
	                        reader.readAsDataURL(file);
	                    } else {
	                        alert(file.name + ' : Size limit exceeded');
	                    }
	                }
	            }
	
	            event.target.value = '';
	
	        };
	        /**
	         * Once images are loaded , add them to imgThumbnailList
	         */
	        function showImageThumbnail(eventObj, fileObj) {
	            var fileName = fileObj.name,
	                fileType = fileName.substr(fileName.lastIndexOf('.') + 1),
	                fileSize = (fileObj.size / 1024).toFixed(2);
	            vm.fileDetails = {
	                name: fileName,
	                source: $sce.trustAsResourceUrl(eventObj.target.result),
	                type: fileType,
	                size: fileSize
	
	            };
	            vm.selectedMultimediaItem.fileInfo = vm.fileDetails;
	            vm.showFileErrMsg = false;
	            vm.showUploadList = true;
	            //$scope.$apply();
	            //vm.selectedMultimediaItem.Name = vm.fileDetails.name;
	            changefileInfo();
	            //$mdDialog.hide(vm.selectedMultimediaItem);
	        }
	
	        /**
	         * Format the content url after changed the content url through dialog box 
	         */
	        function changeContentURLInfo() {
	            /* TODO : Check if the URL is valid image URL. Show error message if not a valid image url */
	            if (angular.isDefined(vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c']) && vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c'] !== '') {
	                if (multimediaService.validateUrl((vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c']).toString())) {
	                    vm.selectedMultimediaItem[vm.prefix + 'InformationType__c'] = "URL Address";
	
	                    var imageUrl,
	                        contentType = multimediaService.getContentType(vm.selectedMultimediaItem);
	                    if (contentType === 'youtube') {
	                        var code = multimediaService.formatYouTubeUrl(vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c']);
	                        imageUrl = $sce.trustAsResourceUrl("https://img.youtube.com/vi/" + code + "/0.jpg");
	                        vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c'] = $sce.trustAsResourceUrl("https://www.youtube.com/embed/" + code)
	                    } else if (contentType === 'image') {
	                        vm.selectedMultimediaItem = multimediaService.formatURLAddress(vm.selectedMultimediaItem);
	                        imageUrl = vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c'];
	                    }
	                    vm.selectedMultimediaItem.type = contentType;
	                    if (imageUrl) {
	                        vm.selectedMultimediaItem.imgUrl = imageUrl;
	                    }
	
	                    //vm.selectedMultimediaItem = multimediaService.formatContentUrl(vm.selectedMultimediaItem);
	                    vm.selectedMultimediaItem.Name = multimediaService.getFileNameFromUrl(getValueFromSce(vm.selectedMultimediaItem.imgUrl));
	                    vm.urlForm.showInvalidMsg = false;
	                    $mdDialog.hide(vm.selectedMultimediaItem);
	                } else {
	                    vm.urlForm.showInvalidMsg = true;
	                    vm.urlForm.contentUrl.$setValidity('url', false);
	                }
	            } else {
	                vm.urlForm.contentUrl.$setTouched();
	                vm.urlForm.contentUrl.$setValidity('required', false);
	            }
	        }
	
	        /**
	         * Format the embed code after changed the embed code through dialog box 
	         */
	        function changeEmbedInfo() {
	            vm.selectedMultimediaItem[vm.prefix + 'InformationType__c'] = "Embedded Code";
	            vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c'] = '';
	            vm.selectedMultimediaItem.fileInfo = {};
	
	            if (angular.isDefined(vm.selectedMultimediaItem[vm.prefix + 'EmbedCode__c']) && vm.selectedMultimediaItem[vm.prefix + 'EmbedCode__c'] !== '') {
	                var item = multimediaService.formatEmbedCode(vm.selectedMultimediaItem);
	                /* TODO : Check for valid embed code. Else error message to the user */
	                if (item) {
	                    vm.selectedMultimediaItem = item;
	                    vm.selectedMultimediaItem.type = multimediaService.getContentType(vm.selectedMultimediaItem);
	                    vm.showInvalidEmbedCodeMsg = false;
	                    $mdDialog.hide(vm.selectedMultimediaItem);
	                } else {
	                    vm.showInvalidEmbedCodeMsg = true;
	                    vm.embedcodeForm.embedCode.$setValidity('pattern', false);
	                }
	            } else {
	                vm.embedcodeForm.embedCode.$setTouched();
	                vm.embedcodeForm.embedCode.$setValidity('required', false);
	            }
	        }
	
	        /**
	         * Format the embed code after changed the embed code through dialog box 
	         */
	        function changefileInfo() {
	            vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c'] = '';
	            vm.selectedMultimediaItem[vm.prefix + 'EmbedCode__c'] = '';
	
	            if (vm.selectedMultimediaItem.fileInfo) {
	                vm.selectedMultimediaItem[vm.prefix + 'InformationType__c'] = "Attached File";
	                vm.selectedMultimediaItem.Name = vm.selectedMultimediaItem.fileInfo.name;
	                vm.selectedMultimediaItem.fileName = vm.selectedMultimediaItem.Name.substr(0, vm.selectedMultimediaItem.Name.lastIndexOf('.'));
	                vm.selectedMultimediaItem.imgUrl = vm.selectedMultimediaItem.fileInfo.source;
	                vm.selectedMultimediaItem.type = multimediaService.getContentType(vm.selectedMultimediaItem);
	                vm.showFileErrMsg = false;
	                $mdDialog.hide(vm.selectedMultimediaItem);
	            } else {
	                vm.showFileErrMsg = true;
	            }
	        }
	
	        /**
	         * Return the $sce.value from $sce.trustAsResourceUrl()
	         */
	        function getValueFromSce(contentUrl) {
	            return $sce.valueOf(contentUrl);
	        }
	
	        /**
	         * Remove URL Address
	         */
	        vm.removeUrlAddress = function() {
	            vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c'] = '';
	        };
	
	        /**
	         * Remove Embed Address
	         */
	        vm.removeEmbedAddress = function() {
	            vm.selectedMultimediaItem[vm.prefix + 'EmbedCode__c'] = '';
	        };
	
	        /**
	         * Remove Uploaded file 
	         */
	        vm.removeUploadedFile = function() {
	            vm.fileDetails = [];
	            vm.selectedMultimediaItem.fileInfo = {};
	            vm.showUploadList = false;
	        };
	
	        vm.isDisable = function(index) {
	            if (index !== vm.selectedTab) {
	                return hasContent(vm.selectedTab);
	            }
	        }
	
	        function hasContent(selectedTab) {
	            if (vm.selectedTab === 0) {
	                if (vm.selectedMultimediaItem.fileInfo && vm.selectedMultimediaItem.fileInfo.name) {
	                    return true;
	                } else {
	                    return false;
	                }
	            }
	            if (vm.selectedTab === 1) {
	                if (vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c']) {
	                    return true;
	                } else {
	                    return false;
	                }
	            }
	            if (vm.selectedTab === 2) {
	                if (vm.selectedMultimediaItem[vm.prefix + 'EmbedCode__c']) {
	                    return true;
	                } else {
	                    return false;
	                }
	            }
	        }
	
	    };
	
	    createMultimediaController.$inject = [
	        '$scope',
	        '$sce',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'multimediaService',
	        'selectedMultimediaItem',
	        'tabToOpen'
	    ];
	
	    module.exports = createMultimediaController;
	})();


/***/ }),
/* 474 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog ng-cloak class=\"create-multimedia-dialog\">\r\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\r\n        </i>\r\n    </button>\r\n    <md-dialog-content class=\"multimedia-dialog-content\">\r\n        <md-tabs md-selected=\"vm.selectedTab\" md-dynamic-height md-border-bottom>\r\n            <md-tab label=\"{{vm.labels.MultimediaUploadFile}}\" ng-disabled=\"vm.isDisable(0)\">\r\n                <md-content class=\"dialog-left md-padding\">\r\n                    <p class=\"text-muted\"> {{ vm.labels.MultimediaUploadFileMsg }} <b>{{ vm.labels.MultimediaUploadFileMaxSize }}</b></p>\r\n                    <div data-ng-if=\"vm.selectedMultimediaItem.fileInfo && vm.selectedMultimediaItem.fileInfo.name\" class=\"m-t-10 alert alert-warning in p-t-b-8\" role=\"alert\">\r\n                        <p>{{ vm.labels.MultimediaHelpText }}</p>\r\n                    </div>\r\n                    <p class=\"custom-danger\" role=\"alert\" data-ng-if=\"vm.showFileErrMsg === true\">{{ vm.labels.MultimediaNoUploadFile }}</p>\r\n                    <div class=\"m-t-10 drag-file upload-img-bg\" file-drop-zone upload-image=\"uploadImage\" data-ng-show=\"!vm.showUploadList\">\r\n                        <div class=\"drag-text-container\"> {{ vm.labels.MultimediaDragFile }} </div>\r\n                    </div>\r\n                    <div data-ng-show=\"vm.showUploadList\" class=\"uploaded-file\">\r\n                        <div class=\"inner-uploaded-file\">\r\n                            <a ng-click=\"vm.removeUploadedFile()\" href=\"\" class=\"m-t-15 disaplay-inline-b remove-uploaded-file\">\r\n                                <span class=\"fa fa-times-circle\"></span>\r\n                            </a>\r\n                            <i class=\"fa fa-file-text\" aria-hidden=\"true\"></i>\r\n                            <p> {{vm.selectedMultimediaItem.fileInfo.name}}</p>\r\n                            <p data-ng-if=\"vm.selectedMultimediaItem.fileInfo.size\"> {{vm.selectedMultimediaItem.fileInfo.size + ' MB'}}</p>\r\n                        </div>\r\n                    </div>\r\n                    <p class=\"text-muted text-center m-t-10\">or</p>\r\n                    <div class=\"text-center m-t-10\">\r\n                        <label class=\"slds-button slds-button_neutral\" for=\"file-input\">{{ vm.labels.MultimediaSelectFileButton }}</label>\r\n                        <input id=\"file-input\" type=\"file\" onchange=\"angular.element(this).scope().uploadImage(event)\">\r\n                    </div>\r\n                </md-content>\r\n            </md-tab>\r\n            <md-tab label=\"{{vm.labels.MultimediaURLAddress}}\" ng-disabled=\"vm.isDisable(1)\">\r\n                <md-content class=\"dialog-left md-padding\">\r\n                    <form role=\"form\" name=\"vm.urlForm\">\r\n                        <p class=\"text-muted\" ng-class=\"vm.urlForm.showInvalidMsg === true ?'':'m-b-50'\">{{ vm.labels.MultimediaURLAddressMsg }}</p>\r\n                        <div data-ng-if=\"vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c']\" class=\"m-t-10 alert alert-warning in p-t-b-8\" role=\"alert\">\r\n                            <p>{{ vm.labels.MultimediaHelpText }}</p>\r\n                        </div>\r\n                        <p class=\"custom-danger\" ng-class=\"vm.urlForm.showInvalidMsg === true ?'m-b-50':''\" role=\"alert\" ng-if=\"vm.urlForm.showInvalidMsg === true\">\r\n                            {{ vm.labels.MultimediaGetURLAddressMsg }}\r\n                        </p>\r\n                        <md-input-container class=\"md-block\" flex-gt-sm>\r\n                            <a data-ng-if=\"vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c']\" ng-click=\"vm.removeUrlAddress()\" href=\"\" class=\"m-t-15 disaplay-inline-b remove-url\">\r\n                                <i class=\"fa fa-times-circle\"></i>\r\n                            </a>\r\n                            <label>URL</label>\r\n                            <input type=\"text\" data-ng-model=\"vm.selectedMultimediaItem[vm.prefix + 'ContentUrl__c']\" name=\"contentUrl\" data-ng-required=\"vm.selectedTab === 1\" class=\"inputText-url\" />\r\n                            <div ng-messages=\"vm.urlForm.contentUrl.$error\">\r\n                                <p ng-message=\"required\" class=\"formError\">\r\n                                    {{ vm.labels.MultimediaNoURLAddress }}\r\n                                </p>\r\n                            </div>\r\n                        </md-input-container>\r\n                    </form>\r\n                </md-content>\r\n            </md-tab>\r\n            <md-tab label=\"{{vm.labels.MultimediaEmbedCode}}\" ng-disabled=\"vm.isDisable(2)\">\r\n                <md-content class=\"dialog-left md-padding\">\r\n                    <form role=\"form\" name=\"vm.embedcodeForm\">\r\n                        <p class=\"text-muted\">{{ vm.labels.MultimediaEmbedCodeMsg }}</p>\r\n                        <div data-ng-if=\"vm.selectedMultimediaItem[vm.prefix + 'EmbedCode__c']\" class=\"alert alert-warning\" role=\"alert\">\r\n                            <p> {{ vm.labels.MultimediaHelpText }} </p>\r\n                        </div>\r\n                        <div class=\"sample-example-code\">\r\n                            <p>Sample Embed Code:</p>\r\n                            <code>{{''+vm.sampleExample}}</code>\r\n                        </div>\r\n                        <p class=\"custom-danger\" role=\"alert\" data-ng-if=\"vm.showInvalidEmbedCodeMsg === true\">{{ vm.labels.MultimediaGetEmbedCodeMsg }}</p>\r\n                        <div class=\"embed-code-text-area\">\r\n                            <md-input-container class=\"md-block\" flex-gt-sm>\r\n                                <a data-ng-if=\"vm.selectedMultimediaItem[vm.prefix + 'EmbedCode__c']\" ng-click=\"vm.removeEmbedAddress()\" href=\"\" class=\"m-t-15 disaplay-inline-b remove-embedurl\">\r\n                                    <i class=\"fa fa-times-circle\"></i>\r\n                                </a>\r\n                                <label>{{ vm.labels.MultimediaEmbedCodeField }}</label>\r\n                                <textarea class=\"textArea-embedCode\" data-ng-model=\"vm.selectedMultimediaItem[vm.prefix + 'EmbedCode__c']\" data-ng-required=\"vm.selectedTab === 2\" name=\"embedCode\" rows=\"2\" md-no-autogrow>\r\n                                </textarea>\r\n                                <div ng-messages=\"vm.embedcodeForm.embedCode.$error\">\r\n                                    <p ng-message=\"required\" class=\"formError\">\r\n                                        {{ vm.labels.MultimediaNoEmbedCode }}\r\n                                    </p>\r\n                                    <p ng-message=\"pattern\" class=\"formError\">\r\n                                        {{ vm.labels.MultimediaValidEmbedCode }}\r\n                                    </p>\r\n                                </div>\r\n                            </md-input-container>\r\n                        </div>\r\n                        <div class=\"pull-right\">{{vm.selectedMultimediaItem[vm.prefix + 'EmbedCode__c'].length}}</div>\r\n                    </form>\r\n                </md-content>\r\n            </md-tab>\r\n        </md-tabs>\r\n    </md-dialog-content>\r\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\r\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.MultimediaCancelButton}}</a>\r\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.MultimediaSaveButton}}</a>\r\n    </md-dialog-actions>\r\n</md-dialog>\r\n"

/***/ }),
/* 475 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.product.graph', ['ngVis'])
	        .service('pricingService', __webpack_require__(476))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.product.graph', {
	                parent: 'app.product',
	                url: '/:id/graph',
	                views: {
	                    'productContainer': {
	                        template: __webpack_require__(477),
	                        controller: __webpack_require__(478),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    graphList: ['productService', '$stateParams', function(productService, $stateParams) {
	                       return productService.getProductGraph($stateParams.id);
	                    }]
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 476 */
/***/ (function(module, exports) {

	(function () {
	    'use strict';
	
	    var productGraphService = function (remoteService, $filter) {
	        
	
	        var graphViewService = {
	           
	        };
	
	        return graphViewService;
	    };
	    productGraphService.$inject = ['remoteService', '$filter'];
	
	    module.exports = productGraphService;
	})();


/***/ }),
/* 477 */
/***/ (function(module, exports) {

	module.exports = "\t<div class=\"graph\">\n        <vis-network data=\"vm.data\" options=\"vm.options\" events=\"vm.events\"></vis-network>\n    </div>\n    <div class=\"loadingDiv\" ng-show=\"vm.loading\">{{vm.labels.LoadingText}}</div>\n    <div class=\"legendDiv\">\n        <span>\n            <md-checkbox class=\"baseCheckbox productCheckbox\" ng-model=\"vm.showProduct\" ng-change=\"vm.onCheckboxChanged()\" ng-disabled=\"vm.loading\">{{vm.labels.Product}}</md-checkbox>\n            <md-checkbox class=\"baseCheckbox priceListCheckbox\" ng-model=\"vm.showPriceList\" ng-change=\"vm.onCheckboxChanged()\" ng-disabled=\"vm.loading\">{{vm.labels.PriceList}}</md-checkbox>\n            <md-checkbox class=\"baseCheckbox categoryCheckbox\" ng-model=\"vm.showCategory\" ng-change=\"vm.onCheckboxChanged()\" ng-disabled=\"vm.loading\">{{vm.labels.Category}}</md-checkbox>\n            <md-checkbox class=\"baseCheckbox optionGroupCheckbox\" ng-model=\"vm.showOptionGroup\" ng-change=\"vm.onCheckboxChanged()\" ng-disabled=\"vm.loading\">{{vm.labels.OptionGroup}}</md-checkbox>\n            <md-checkbox class=\"baseCheckbox optionCheckbox\" ng-model=\"vm.showOption\" ng-change=\"vm.onCheckboxChanged()\" ng-disabled=\"vm.loading\">{{vm.labels.Option}}</md-checkbox>\n            <md-checkbox class=\"baseCheckbox attributeGroupCheckbox\" ng-model=\"vm.showAttributeGroup\" ng-change=\"vm.onCheckboxChanged()\" ng-disabled=\"vm.loading\">{{vm.labels.AttributeGroup}}</md-checkbox>\n            <md-checkbox class=\"baseCheckbox attributeCheckbox\" ng-model=\"vm.showAttribute\" ng-change=\"vm.onCheckboxChanged()\" ng-disabled=\"vm.loading\">{{vm.labels.AttributeLabel}}</md-checkbox>\n            <md-checkbox class=\"baseCheckbox constraintRuleCheckbox\" ng-model=\"vm.showConstraintRule\" ng-change=\"vm.onCheckboxChanged()\" ng-disabled=\"vm.loading\">{{vm.labels.ConstraintRule}}</md-checkbox>\n            \n        </span>\n    </div>"

/***/ }),
/* 478 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productGraphController = function ($scope, $stateParams, $state, graphList, productService, i18nService) {
	
	        var vm = this;
	
	        vm.loading = true;
	        
	        vm.labels = i18nService.CustomLabel;
	
	        productService.updateState($stateParams.id);
	        var graphList = JSON.parse(graphList.ProductGraphJSON);
	        vm.graphList = graphList;
	
	        var productColor = '#6594cf';
	        var categoryColor = '#FFFF00';
	        var priceListColor = '#008000';
	        var optionGroupColor = '#ff7a00';
	        var optionColor = '#f1ac6c';
	        var constraintRuleColor = '#EE82EE';
	        var attributeGroupColor = '#ce5555';
	        var attributeColor = '#ee8585';
	
	        vm.showOption = true;
	        vm.showProduct = true;
	        vm.showCategory = true;
	        vm.showPriceList = true;
	        vm.showOptionGroup = true;
	        vm.showConstraintRule = true;
	        vm.showAttributeGroup = true;
	        vm.showAttribute = true;
	
	        var nodes = graphList.Nodes;
	        var edges = graphList.Edges;
	       
	        var data = {
	            nodes: nodes,
	            edges: edges
	        };
	        var options = {
	            groups: {
	                P: { color: productColor, shape: 'box', shapeProperties: { borderRadius: 0 } },
	                C: { color: categoryColor },
	                PL: { color: priceListColor, shape: 'box', shapeProperties: { borderRadius: 0 } },
	                CR: { color: constraintRuleColor },
	                AG: { color: attributeGroupColor, shape: 'box', shapeProperties: { borderRadius: 30 } },
	                A: { color: attributeColor },
	                OG: { color: optionGroupColor, shape: 'box', shapeProperties: { borderRadius: 30 } },
	                O: { color: optionColor, shape: 'box', shapeProperties: { borderRadius: 30 } },//option
	
	            },
	            edges: {
	                arrows: {
	                    to: {enabled: true}
	                },
	                smooth: { enabled: false }, //creates straight edges
	                selectionWidth: 2
	            },
	            physics: {
	                enabled: true,
	                barnesHut: {
	                    gravitationalConstant: -10000 //force nodes away from each other to minimize overlap
	                }
	            },
	            layout: { randomSeed: 333, improvedLayout: false } //improve performance and make graph same when showing/hiding certain groups
	        };
	
	        var events = {
	            afterDrawing: function (canvas, context) {
	                vm.stopPhysics();
	            }
	        };
	
	        vm.stopPhysics = function () {
	            if (!vm.options.physics.enabled) {
	                return;
	            }
	            vm.options.physics = { enabled: false }; //disable physics so dragging nodes is easier
	            $scope.$apply(function () {
	                vm.loading = false;
	            });
	        }
	
	        vm.data = data;
	        vm.options = options;
	        vm.events = events;
	
	        vm.onCheckboxChanged = function () {
	            vm.options.groups = {
	                P: { color: productColor, shape: 'box', shapeProperties: { borderRadius: 0 }, hidden: !vm.showProduct },
	                C: { color: categoryColor, hidden: !vm.showCategory  },
	                PL: { color: priceListColor, shape: 'box', shapeProperties: { borderRadius: 0 }, hidden: !vm.showPriceList },
	                CR: { color: constraintRuleColor, hidden: !vm.showConstraintRule },
	                AG: { color: attributeGroupColor, shape: 'box', shapeProperties: { borderRadius: 30 }, hidden: !vm.showAttributeGroup },
	                A: { color: attributeColor, hidden: !vm.showAttribute },
	                OG: { color: optionGroupColor, shape: 'box', shapeProperties: { borderRadius: 30 }, hidden: !vm.showOptionGroup },
	                O: { color: optionColor, shape: 'box', shapeProperties: { borderRadius: 30 } , hidden: !vm.showOption }//option
	            };
	            vm.options.physics = { enabled: true };
	            vm.data = { nodes: vm.data.nodes, edges: vm.data.edges }; //hack to force reload of graph with new options
	            vm.loading = true;
	        };
	        
	        vm.cancel = function () {
	            $state.go('app.product.details', {
	                id: $stateParams.id
	            });
	        };
	
	    };
	
	    productGraphController.$inject = [
	        '$scope',
	        '$stateParams',
	        '$state',
	        'graphList',
	        'productService',
	        'i18nService'
	    ];
	
	    module.exports = productGraphController;
	
	})();


/***/ }),
/* 479 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var productController = function($state, $scope, $rootScope, productService, Idle, Keepalive, i18nService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	
	        vm.findStateName = function(stateName) {
	            vm.stateCurrentName = stateName;
	        }
	
	        $scope.$on('$stateChangeSuccess', function(e, toState, toParams) {
	            vm.findStateName(toState.name);
	            updateTabMenus();
	        });
	
	        /* Menu for specific Tabs */
	        vm.tabFirstMenu = '';
	        vm.tabMenuItems = [];
	
	        function updateTabMenus() {
	            var currentState = vm.stateCurrentName,
	                currentHash = currentState.split('app.product.')[1];
	            switch (currentHash) {
	                case 'details':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewProductButton;
	                        vm.tabMenuItems = [vm.labels.CloneProductButton];
	                        break;
	                    }
	                case 'categories':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewCategoryButton;
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                case 'associations':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewCategoryButton;
	                        vm.tabMenuItems = [vm.labels.NewProductGroup];
	                        break;
	                    }
	                case 'pricing':
	                    {
	                        vm.tabFirstMenu = '';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                case 'options':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewSharedOptionGroup;
	                        vm.tabMenuItems = [vm.labels.NewStandaloneOptionGroup, vm.labels.NewAttributeButton];
	                        break;
	                    }
	                case 'attributes':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewAttributeButton;
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                case 'rules':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewConstraintRule;
	                        vm.tabMenuItems = [vm.labels.NewProductAttributeRule, vm.labels.NewAttributeValueMatrix];
	                        break;
	                    }
	                case 'graph':
	                    {
	                        vm.tabFirstMenu = '';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                case 'multimedia':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewMultimedia;
	                        vm.tabMenuItems = [vm.labels.NewFootnote];
	                        break;
	                    }
	            }
	
	        }
	
	        vm.tabMenuClicked = function(menuName) {
	            var eventName = menuName.split(' ').join('-');
	            $scope.$broadcast(eventName);
	        };
	        vm.findStateName($state.current.name);
	
	        vm.currentState = $state.current.name;
	
	        $scope.$watch(function() {
	            return productService.getSelectedProduct();
	        }, function(newValue) {
	            vm.selectedProduct = productService.getSelectedProduct();
	        }, true);
	
	        // Calculate the height of the product container on window resizes 
	        var win = angular.element(window);
	        vm.setProductContainer = function() {
	
	            var globalHeader = document.querySelector('.admin-header');
	            var productHeader = document.querySelector('.product-header');
	            var productContainer = document.querySelector('.productCenterContainer');
	
	            if (productHeader && globalHeader) {
	                var HeaderTotalheight = globalHeader.getBoundingClientRect().height + productHeader.getBoundingClientRect().height;
	                var productContainerHeight = win[0].innerHeight - HeaderTotalheight;
	                angular.element(productContainer).css('height', productContainerHeight + 'px');
	            }
	
	        };
	
	        vm.setProductContainer();
	
	        win.bind('resize', function() {
	            vm.setProductContainer();
	        });
	        // Product container height calculation ends here
	
	        // Product Form valid or invalid for disable and enable the product save button 
	        $scope.$on('enableDisableSave', function(event, productFormStatus) {
	            if (productFormStatus) {
	                vm.disableSave = false;
	            } else {
	                vm.disableSave = true;
	            }
	        });
	
	        vm.onSearchTypeSelection = function(view) {
	            /* TODO : implement the logic here */
	        };
	    };
	
	    productController.$inject = ['$state', '$scope', '$rootScope', 'productService', 'Idle', 'Keepalive', 'i18nService'];
	
	    module.exports = productController;
	})();


/***/ }),
/* 480 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		var constants = {
			/*
			 * This object can be any level nested depending on modularity we want to achieve 
			 * - Either per page
			 * - Per standalone functionality
			 */
			'new': 'new',
			'update': 'update',
			'numberOfProductsPerChunk': 50,
			'treePanelItemsPerChunk': 25,
			'fieldsetProductList': 'ProductListFields', 
			'MaxNumberOfAttributesPerGroup': 50,
			'hierarchyException': 'category name must be unique within the hierarchy'
		};
	
		module.exports = constants;
	
	})();

/***/ }),
/* 481 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"mainProductContent\">\n    <div class=\"product-main-Container\">\n        <div class=\"product-header title-bar\">\n            <div class=\"product-title-container title\">\n                <div class=\"product-info\" href=\"#\" title=\"{{vm.selectedProduct.ProductName}}\">\n                    <i class=\"fa fa-image\" ng-if=\"!vm.selectedProduct.icon\"></i>\n                    <!-- <img ng-src=\"{{vm.selectedProduct.icon}}\" alt=\"Icon\" ng-if=\"vm.selectedProduct.icon\" /> -->\n                    <img ng-src=\"{{'/servlet/servlet.FileDownload?file='+vm.selectedProduct.iconId}}\" alt=\"Icon\" ng-if=\"vm.selectedProduct.iconId\" />\n                    <span class=\"title\">{{vm.selectedProduct.ProductName}}</span>\n                </div>\n            </div>\n            <div id=\"navbar\">\n                <!-- Product menu bar with its values -->\n                <sub-menu></sub-menu>\n                <!-- Product menu bar with its values -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"list-product-btn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabFirstMenu)\" data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                        <div class=\"drop drop-menu\" data-ng-if=\"vm.tabMenuItems.length > 0\">\n                            <md-menu md-position-mode=\"target-right target\" md-offset=\"100 50\">\n                                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                    <i class=\"material-icons\">more_vert</i>\n                                </button>\n                                <md-menu-content class=\"product-tab-menu\">\n                                    <md-menu-item data-ng-repeat=\"menu in vm.tabMenuItems\">\n                                        <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                            <div layout=\"row\" flex>\n                                                <p flex>{{menu}}</p>\n                                            </div>\n                                        </md-button>\n                                    </md-menu-item>\n                                </md-menu-content>\n                            </md-menu>\n                        </div>\n                        \n                    </div>\n                </ul>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"productCenterContainer\">\n            <!-- Content layout starts -->\n            <div ui-view=\"productContainer\" class=\"productContainer\"></div>\n            <!-- Content layout ends -->\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    __webpack_require__(483);
	    __webpack_require__(487);
	    __webpack_require__(493);
	    __webpack_require__(497);
	    __webpack_require__(501);
	    __webpack_require__(506);
	    __webpack_require__(508);
	
	    module.exports = angular.module('cpqAdmin.catalog', [
	            'cpqAdmin.catalog.list',
	            'cpqAdmin.catalog.detail',
	            'cpqAdmin.catalog.associateProduct',
	            'cpqAdmin.catalog.associatedPriceList',
	            'cpqAdmin.catalog.associatedCategory',
	            'cpqAdmin.catalog.common.services',
	            'cpqAdmin.catalog.common.directives'
	        ])
	        .controller('catalogController', __webpack_require__(514))
	        .constant('catalogConstants', __webpack_require__(515))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.catalog', {
	                url: '/catalog',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(516),
	                        controller: 'catalogController',
	                        controllerAs: 'vm'
	                    }
	                },
	                data: {
	                    //This config is used for primary menu generation
	                    // ui-router provides $state.get() to access all 'data' objects across all states.
	                    menuConfig: {
	                        'title': 'Catalog',
	                        'iconCls': 'cube'
	                    }
	                }
	            }).state('app.optionGroup', {
	                url: '/optionGroup',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(516),
	                        controller: 'catalogController',
	                        controllerAs: 'vm'
	                    }
	                },
	                data: {
	                    //This config is used for primary menu generation
	                    // ui-router provides $state.get() to access all 'data' objects across all states.
	                    menuConfig: {
	                        'title': 'optionGroup',
	                        'iconCls': 'cube'
	                    }
	
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.catalog.list', [])
	        .service('cataloglistService', __webpack_require__(484))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.catalog.manageCatalogList', {
	                parent: 'app.catalog',
	                url: '/manageCatalog/list',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(485),
	                        controller: __webpack_require__(486),
	                        controllerAs: 'vm'
	                    }
	                }
	            })
	            .state('app.optionGroup.manageOptionGroupsList', {
	                parent: 'app.optionGroup',
	                url: '/manageOptionGroups/list',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(485),
	                        controller: __webpack_require__(486),
	                        controllerAs: 'vm'
	                    }
	                }
	            })
	        }]);
	
	})();


/***/ }),
/* 484 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var catalogcategoriesService = function(remoteService,$filter) {
	        var filter;
	        //function fnGetProductListBySelectedView(viewName, sortField, sortDirection, searchString, pageNumber, numberOfProductsPerChunk, configType) {
	        function fnGetProductListBySelectedView(requestObj, blsaveFilter) {
	            /*var requestObj = {
	                'ViewName': viewName,
	                "SortField": sortField || 'Name' || 'LastModifiedDate',
	                "SortDirection": sortDirection || "ASC",
	                'SearchString': searchString,
	                'ChunkNumber': pageNumber,
	                'NumberOfProductsPerChunk': numberOfProductsPerChunk,
	                'ConfigType': configType
	            };*/
	            if (blsaveFilter) {
	                filter = requestObj;
	            }
	            return remoteService.getAllProducts(requestObj);
	        }
	
	        function fnGetColumnList(columnsObj) {
	            return $filter('orderBy')(columnsObj, 'Sequence');
	        }
	
	        function getFilters() {
	            return filter;
	        }
	
	        function setFilters(filterObj) {
	            if (filterObj.ConfigType) {
	                filter.ConfigType = filterObj.ConfigType;
	            }
	            if (filterObj.SortField) {
	                filter.SortField = filterObj.SortField;
	            }
	            if (filterObj.SortDirection) {
	                filter.SortDirection = filterObj.SortDirection;
	            }
	            if (filterObj.SearchString !== undefined) {
	                filter.SearchString = filterObj.SearchString;
	            }
	            if (filterObj.ChunkNumber) {
	                filter.ChunkNumber = filterObj.ChunkNumber;
	            }
	        }
	
	        function treeToFlat(obj) {
	            if (angular.isArray(obj)) {
	                for (var item in obj) {
	                    treeToFlat(obj[item]);
	                }
	            } else if (typeof obj !== 'function') {
	                if (obj.ChildCategoryDOs.length > 0) {
	                    treeToFlat(obj.ChildCategoryDOs);
	                } else {
	                    finalList.push(obj);
	                }
	            }
	        }
	
	
	        function getAllCategories(request) {
	            return remoteService.getAllCategories(request);
	        }
	        var cataloglistService = {
	            getProductListBySelectedView: fnGetProductListBySelectedView,
	            getColumnList: fnGetColumnList,
	            getFilters: getFilters,
	            setFilters: setFilters,
	            getAllCategories: getAllCategories
	        };
	
	        return cataloglistService;
	    };
	    catalogcategoriesService.$inject = ['remoteService','$filter'];
	
	    module.exports = catalogcategoriesService;
	})();


/***/ }),
/* 485 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"catalog-list-container\">\n    <div class=\"two-col-layout auto-height\">\n        <div class=\"auto-height col-lg-12 noPadding list-table-container\">\n            <div class=\"list-header\">\n                <!-- Search Bar starts -->\n                <div class=\"row noMargin search-container title-bar\">\n                    <div class=\"catalog-search\">\n                        <div class=\"col-xs-5\">\n                            <div class=\"search-box-container\">\n                                <span class=\"fa fa-filter pointerEventsNone\" disabled data-ng-click=\"vm.toggleProductView();\"></span>\n                                <i class=\"search-icon material-icons\" data-ng-click=\"vm.resetPagination()\">search</i>\n                                <form ng-submit=\"vm.resetPagination()\">\n                                    <input type=\"text\" placeholder=\"{{vm.searchPlaceHolder}}\" class=\"search-box\" data-ng-model=\"vm.searchString\">\n                                    <i class=\"clear-icon material-icons\" data-ng-if=\"vm.searchString\" data-ng-click=\"vm.clearSearchInput()\">clear</i>\n                                </form>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-7 text-right noPadding\">\n                            <div class=\"btn-group list-product-btn\">\n                                <button type=\"button\" class=\"slds-button slds-button_brand\" data-ng-click=\"vm.addCategories($event);\"> {{vm.buttonText}}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div preloader add-to-element=\"true\" loading-text=\"vm.loadingText\" data-ng-if=\"vm.showLoader === true\"></div>\n            <div data-ng-if=\"vm.categories.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{vm.labels.NoMatchingCategories}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.categories.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"list-table\">\n                <table ng-table=\"vm.tableParams\" class=\"table ng-table-resizable-columns\">\n                    <thead>\n                        <tr>\n                            <th ng-repeat=\"column in vm.tableColumnConfig\" ng-click=\"vm.tableHeaderClick(column);\" class=\"column--{{column.Type}}\">\n                                <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-descent'\">arrow_downward</i>\n                                <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-ascent'\">arrow_upward</i> {{column.FieldLabel}}\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"category in vm.categories track by category.Id\">\n                            <td data-ng-repeat=\"column in vm.tableColumnConfig\" class=\"column--{{column.Type}}\">\n                                <span data-ng-if=\"column.FieldName === 'Name'\">\n                                    <a data-ng-click=\"vm.loadCategoryDetails(category, $event)\" ng-bind-html=\"category[column.FieldName]\" href=\"{{vm.getDetailsPageUrl(category.Id)}}\"\n                                       target=\"_blank\" class=\"clickable-item\"></a>\n                                </span>\n                                <span data-ng-if=\"column.FieldName === 'Type'\">\n                                    <span data-ng-if=\"category[column.FieldName] === 'Both'\">{{::vm.labels.OfferingAndOptionGroup}}\n                                    </span>\n                                    <span ng-bind-html=\"category[column.FieldName]\" data-ng-if=\"category[column.FieldName] !== 'Both'\"></span>\n                                </span>\n                                <span data-ng-if=\"column.FieldName !== 'Name' && column.FieldName !== 'Type'\" ng-bind-html=\"category[column.FieldName]\"></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"pagination-container text-center\" data-ng-if=\"vm.showPagination === true\">\n                <div class=\"btn-group dropup text-right\" role=\"group\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        {{vm.labels.RecordsPerPage | userMessage:vm.numberOfCategoriesPerChunk}}\n                        <span class=\"caret\"></span>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li><a data-ng-click=\"vm.numberOfCategoriesPerChunk = 50\">50</a></li>\n                        <li><a data-ng-click=\"vm.numberOfCategoriesPerChunk = 100\">100</a></li>\n                        <li><a data-ng-click=\"vm.numberOfCategoriesPerChunk = 150\">150</a></li>\n                        <li><a data-ng-click=\"vm.numberOfCategoriesPerChunk = 200\">200</a></li>\n                    </ul>\n                </div>\n                <div class=\"navigation-control\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProduct('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n                    </button>\n                    <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProduct('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var catalogListController = function ($scope, $state, $rootScope, cataloglistService, $filter, NgTableParams, $timeout, i18nService, applicationService,
	        systemConstants, cpqAdminConstants, $uibModal, $templateCache, $mdDialog, associationService, catalogService, $location, catalogConstants) {
	
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	        var prefix = systemConstants.nsPrefix || '';
	
	        vm.tableColumnConfig = [{
	            "FieldLabel": "Category Name",
	            "FieldName": "Name",
	            "IsRequired": true,
	            "Type": "STRING"
	        }, {
	            "FieldLabel": "Label",
	            "FieldName": prefix + "Label__c",
	            "IsRequired": false,
	            "Type": "STRING"
	        }, {
	            "FieldLabel": "Parent Category",
	            "FieldName": "Parent",
	            "IsRequired": false,
	            "Type": "PICKLIST"
	        }, {
	            "FieldLabel": "Product Count",
	            "FieldName": prefix + "ProductCount__c",
	            "IsRequired": false,
	            "Type": "PICKLIST"
	        }, {
	            "FieldLabel": "Type",
	            "FieldName": "Type",
	            "IsRequired": false,
	            "Type": "STRING"
	        }];
	
	        /* 
	         * - vm.searchString : is the value present in the search field at any point of time.
	         * - vm.searchedStr : is the value user has entered and either clicked on search icon or hit
	         * enter / return  key.
	         */
	        vm.searchedStr = '';
	        vm.buttonText = '';
	        vm.searchPlaceHolder = '';
	        vm.numberOfCategoriesPerChunk = catalogConstants.numberOfCategoriesPerChunk;
	
	        vm.pageNumber = 0;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = false;
	        vm.showLoader = false;
	        vm.loadingText = vm.labels.LoadingText;
	        vm.showPagination = true;
	        updateCenterBtnText();
	        checkState();
	        var sortField, sortDirection, pageNumber = 1,
	            configType = '';
	        vm.getProduct = function(type) {
	            if (type === 'next') {
	                pageNumber = pageNumber + 1;
	                vm.pageNumber++;
	                if (vm.pageNumber !== 0) {
	                    vm.disableLeftBtn = false;
	                }
	                getCataloghierarchy();
	            } else {
	                pageNumber = pageNumber - 1;
	                vm.pageNumber--;
	                if (vm.pageNumber === 0) {
	                    vm.disableLeftBtn = true;
	                }
	                getCataloghierarchy();
	            }
	        };
	
	        var stateName = ($state.current.name === 'app.catalog.manageCatalogList') ? vm.labels.Offering : vm.labels.OptionGroup;
	    
	        if($state.current.name.indexOf('optionGroup') !== -1) {
	            vm.tableColumnConfig = [{
	                "FieldLabel": vm.labels.OptionGroupName,
	                "FieldName": "Name",
	                "IsRequired": true,
	                "Type": "STRING"
	            }, {
	                "FieldLabel": vm.labels.LabelText,
	                "FieldName": prefix + "Label__c",
	                "IsRequired": false,
	                "Type": "STRING"
	            }, {
	                "FieldLabel": vm.labels.ParentOptionGroup,
	                "FieldName": "Parent",
	                "IsRequired": false,
	                "Type": "PICKLIST"
	            }, {
	                "FieldLabel": vm.labels.ProductCount,
	                "FieldName": prefix + "ProductCount__c",
	                "IsRequired": false,
	                "Type": "PICKLIST"
	            }, {
	                "FieldLabel": vm.labels.Type,
	                "FieldName": "Type",
	                "IsRequired": false,
	                "Type": "STRING"
	            }];
	        } 
	        
	        function updateCenterBtnText(endCount) {
	            /* 
	             * - Search result might return lesser number of records than current pagination count.
	             * e.g. current pagination is : 1-150, but search returned only 20 records.
	             * - Then pagination should be updated to 1-20 instead of 1-150.
	             * - endCount variable contains the exact number of records and will only be defined, if  
	             * search count is lesser than current pagination sequence.
	             */
	            if (endCount) {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfCategoriesPerChunk + 1) + '-' + (vm.pageNumber * vm.numberOfCategoriesPerChunk + endCount) + ')';
	            } else {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfCategoriesPerChunk + 1) + '-' + ((vm.pageNumber + 1) * vm.numberOfCategoriesPerChunk) + ')';
	            }
	        };
	
	        vm.resetPagination = function(resetPageNumber) {
	
	            if (resetPageNumber) {
	                vm.pageNumber = 0;
	                pageNumber = 1;
	            }
	            vm.pageNumber = 0;
	            pageNumber = 1;
	            vm.disableLeftBtn = true;
	            updateCenterBtnText();
	            getCataloghierarchy();
	        };
	
	        var deRegisterFunc = $scope.$watch('vm.numberOfCategoriesPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                vm.resetPagination(false);
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            vm = null;
	        });
	
	
	        function createNgTable(data, numberOfProductsPerChunk) {
	            var initialParams = {
	                count: numberOfProductsPerChunk
	            };
	            var initialSettings = {
	                counts: [],
	                paginationMaxBlocks: 0,
	                paginationMinBlocks: 0,
	                dataset: data
	            };
	            return new NgTableParams(initialParams, initialSettings);
	        }
	
	        function setDefaultSortedColumn() {
	            if (vm.tableColumnConfig.length > 0) {
	                for (var item in vm.tableColumnConfig) {
	                    if (vm.tableColumnConfig[item].FieldName === 'Name') {
	                        vm.tableColumnConfig[item].sortIconCls = 'st-sort-descent';
	                        vm.tableColumnConfig[item].showSortIcon = true;
	                    }
	                }
	            }
	        }
	
	        /**
	         * - Clears searc input box
	         * - Makes a service call to reload the table
	         */
	        vm.clearSearchInput = function() {
	            vm.searchString = '';
	            vm.currentPage = 1;
	            getCataloghierarchy();
	        };
	
	
	        /**
	         * Load product details when user clicks on any product name from smart table
	         * Take user to the details state and loads its information.
	         */
	        vm.loadCategoryDetails = function(category, event) {
	            var detailState;
	            if(category.Type == 'Both') {
	                detailState = getStateName(stateName);
	            } else {
	                detailState = getStateName(category.Type);
	            }
	            $state.go(detailState, {
	                id: category.Id
	            });
	            event.preventDefault();
	        };
	
	        /***
	        * Getting state name
	        ***/
	        function getStateName(type) {
	            var state;
	            if(type == "Offering") {
	                state = 'app.catalog.manageCatalogDetails';
	            } else if(type == "Option Group") {
	                state = 'app.optionGroup.manageOptionGroupsDetails';
	            }
	            return state;
	        }
	
	
	
	        /**
	         * - Show / Hide ascending or descending icon next to the column header when user clicks on header.
	         * - We are not using the default feature of the ngTable. It's doing local sorting and to
	         * bind to its server side sorting, configs are not available as of now.
	         */
	        vm.tableHeaderClick = function (column) {
	            if (column.FieldName === 'Parent') {
	                sortField = prefix + 'AncestorId__r.Name';
	            } else if (column.FieldName === 'Type') {
	                sortField = prefix + 'HierarchyId__r.' + prefix + 'Type__c';
	            } else {
	                sortField = column.FieldName;
	            }
	            if (!column.sortIconCls) {
	                column.sortIconCls = 'st-sort-ascent';
	            }
	            sortDirection = (column.sortIconCls === 'st-sort-ascent' ? cpqAdminConstants.DESCENDING : cpqAdminConstants.ASCENDING);
	            var columnsList = vm.tableColumnConfig;
	            for (var item in columnsList) {
	                if (column.FieldName === columnsList[item].FieldName) {
	                    columnsList[item].showSortIcon = true;
	                    columnsList[item].sortIconCls = column.sortIconCls ? (column.sortIconCls === 'st-sort-ascent' ? 'st-sort-descent' : 'st-sort-ascent') : 'st-sort-descent';
	                } else {
	                    columnsList[item].showSortIcon = false;
	                    columnsList[item].sortIconCls = false;
	                }
	            }
	            vm.resetPagination();
	        };
	        $rootScope.showModalPop = false;
	
	        vm.onSearchTypeSelection = function(view) {
	            if (view == 'LastModifiedDate') {
	                configType = '';
	                sortField = view;
	                sortDirection = cpqAdminConstants.DESCENDING;
	            } else {
	                configType = view;
	            }
	            vm.resetPagination();
	        };
	
	        vm.goToDetailsView = function() {
	            if (vm.productsList && vm.productsList.length > 0) {
	                var product = vm.productsList[0];
	                vm.loadProductDetails(product);
	            }
	        };
	
	        
	        //var categories, parent;
	
	        function getCataloghierarchy() {
	            var requestObject = {
	                ChunkNumber: pageNumber,
	                NumberOfCategoriesPerChunk: vm.numberOfCategoriesPerChunk || catalogConstants.numberOfCategoriesPerChunk,
	                SearchString: vm.searchString || '',
	                PriceListId: null,
	                IsCategoryHierarchyRetrieval: true,
	                SortField: sortField || "Name",
	                SortDirection: sortDirection || cpqAdminConstants.ASCENDING,
	                Types: [stateName,"Both"]
	            };
	            vm.showLoader = true;
	            cataloglistService.getAllCategories(requestObject).then(function(response) {
	                    vm.categories = response.CategoryHierarchySOs;
	                    traverseData(vm.categories);
	                    if (!vm.tableParams) {
	                        vm.tableParams = createNgTable(response.CategoryHierarchySOs, response.NumberOfCategoriesPerChunk);
	                    }
	                    vm.isMaxSQLSizeExceed = false;
	
	
	                    /* 
	                     * - Show 'No matching products are found for the search entry XXX', when no return
	                     * return result set is empty.
	                     * - Keep the user messages, until user makes a fresh search which has atleast more
	                     * than 1 result item.
	                     */
	                    if (vm.categories.length === 0) {
	                        vm.searchedStr = vm.searchString;
	                    }
	                    vm.showLoader = false;
	                    if (vm.categories.length < vm.numberOfCategoriesPerChunk) {
	                        vm.disableRightBtn = true;
	                        updateCenterBtnText(vm.categories.length);
	                    } else {
	                        vm.disableRightBtn = false;
	                        updateCenterBtnText();
	                    }
	                    document.querySelector('.list-table').scrollTop = 0;
	                }, function(reason) {
	                    vm.showLoader = false;
	                    /* 
	                     * - If exception is of type 'Maximum SOQL offset allowed is 2000', then show a message to
	                     * user 'Please refine your search criteria to find your product'.
	                     * - Else show the exception message to the user as it is.
	                     */
	                    if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                        vm.categories = [];
	                        vm.isMaxSQLSizeExceed = true;
	                    } else {
	                        applicationService.showErrorMessage(reason);
	                    }
	                    vm.disableRightBtn = true;
	
	                });
	        }
	
	        getCataloghierarchy(true);
	
	        function traverseData(array) {
	            for (var i = 0; i < array.length; i++) {
	                var node = array[i];
	                if (node[prefix + 'AncestorId__c'] !== undefined && node[prefix + 'AncestorId__c'] !== '') {
	                    node.Parent = node[prefix + 'AncestorId__r'].Name;
	                }
	                if (node[prefix + 'HierarchyId__c'] !== undefined && node[prefix + 'HierarchyId__c'] !== '') {
	                    node.Type = node[prefix + 'HierarchyId__r'][prefix + 'Type__c'];
	                }
	            }
	        }
	
	        function getParentTrace(obj, nodeId) {
	            var node;
	            if (nodeId && parent === '') {
	                for (var item = 0; item < obj.length; item++) {
	                    if (obj[item].ClsHierarchySO.Id === nodeId) {
	                        node = obj[item];
	                        parent = node.ClsHierarchySO[prefix + 'Label__c'];
	                        return (node.ClsHierarchySO[prefix + 'Label__c']);
	                    } else if (obj[item].ChildCategoryDOs && obj[item].ChildCategoryDOs.length > 0) {
	                        getParentTrace(obj[item].ChildCategoryDOs, nodeId);
	                    }
	                }
	            }
	        }
	
	        var requestObj = {
	            ChunkNumber: 1,
	            NumberOfCategoriesPerChunk: catalogConstants.treePanelItemsPerChunk,
	            SearchString: '',
	            PriceListId: null,
	            Types: [stateName,"Both"],
	            HasZeroProductCount: false
	        }; 
	        associationService.getTreeData(requestObj, true)
	            .then(function(response) {
	                vm.treeData = response.CategoryNodeDOs;
	            });
	        vm.addCategories = function(ev) {
	            $mdDialog.show({
	                controller: __webpack_require__(393),
	                template: __webpack_require__(394),
	                parent: angular.element(document.body),
	                targetEvent: ev,
	                controllerAs: 'vm',
	                locals: {
	                    data: vm.treeData,
	                    treeOptions: vm.options,
	                    catalogTypes: [stateName,"Both"]
	                },
	                bindToController: true,
	                resolve: {
	                    currentCategory: function() {
	                        return null;
	                    }
	                }
	            });
	        };
	
	        vm.getDetailsPageUrl = function (Id) {
	            var absUrl = $location.absUrl();
	            if ($state.current.name.indexOf('catalog') !== -1) {
	                return absUrl.replace('/catalog/list', '/catalog/' + stateName + Id + '/details');
	            } else {
	                return absUrl.replace('/optionGroup/list', '/optionGroup/' + stateName + Id + '/details');
	            }
	        };
	
	        function checkState() {
	            if($state.current.name.indexOf('catalog') !== -1) {
	                vm.buttonText = vm.labels.NewCategoryButton;
	                vm.searchPlaceHolder = vm.labels.SearchCategory;
	            } else {
	                vm.buttonText = vm.labels.NewOptionGroup;
	                vm.searchPlaceHolder = vm.labels.SearchOptionGroup;
	            }
	        }
	    };
	
	    catalogListController.$inject = [
	        '$scope',
	        '$state',
	        '$rootScope',
	        'cataloglistService',
	        '$filter',
	        'NgTableParams',
	        '$timeout',
	        'i18nService',
	        'applicationService',
	        'systemConstants',
	        'cpqAdminConstants',
	        '$uibModal',
	        '$templateCache',
	        '$mdDialog',
	        'associationService',
	        'catalogService',
	        '$location',
	        'catalogConstants'
	    ];
	
	    module.exports = catalogListController;
	
	})();


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.catalog.detail', [])
	        .service('catalogDetailService', __webpack_require__(488))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.catalog.detail', {
	                    parent: 'app.catalog',
	                    views: {
	                        'catalogContainer': {
	                            template: __webpack_require__(489),
	                            controller: __webpack_require__(490),
	                            controllerAs: 'vm'
	                        }
	                    }
	                })
	                .state('app.catalog.manageCatalogDetails', {
	                    parent: 'app.catalog.detail',
	                    url: '/manageCatalog/:id/details',
	                    template: __webpack_require__(491),
	                    controller: __webpack_require__(492),
	                    controllerAs: 'vm',
	                    params: {
	                        productId: null,
	                        productName: null
	                    },
	                    resolve: {
	                        categoryHierarchy: ['catalogService', '$stateParams', function(catalogService, $stateParams) {
	                            return catalogService.getCategoryHierarchy($stateParams.id);
	                        }],
	                        productFieldDetails: ['catalogDetailService', function(catalogDetailService) {
	                            return catalogDetailService.getSearchFilterValues();
	                        }],
	                        fromState: [ function() {
	                            return ['manageCatalog','Offering'];
	                        }]
	                    }
	                })
	                .state('app.optionGroup.detail', {
	                    parent: 'app.optionGroup',    
	                    views: {
	                        'catalogContainer': {
	                            template: __webpack_require__(489),
	                            controller: __webpack_require__(490),
	                            controllerAs: 'vm'
	                        }
	                    }
	                }).state('app.optionGroup.manageOptionGroupsDetails', {
	                    parent: 'app.optionGroup.detail',
	                    url: '/manageOptionGroups/:id/details',
	                    template: __webpack_require__(491),
	                    controller: __webpack_require__(492),
	                    controllerAs: 'vm',
	                    params: {
	                        productId: null,
	                        productName: null
	                    },
	                    resolve: {
	                        categoryHierarchy: ['catalogService', '$stateParams', function(catalogService, $stateParams) {
	                            return catalogService.getCategoryHierarchy($stateParams.id);
	                        }],
	                        productFieldDetails: ['catalogDetailService', function(catalogDetailService) {
	                            return catalogDetailService.getSearchFilterValues();
	                        }],
	                        fromState: [ function() {
	                            return ['manageOptionGroups','Option Group'];
	                        }]
	                    }
	                });
	        }]);
	})();


/***/ }),
/* 488 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var catalogDetailService = function($q, remoteService, systemConstants, cpqAdminConstants) {
	        var prefix = systemConstants.nsPrefix || '';
	
	        function updateCateogryHierarchies(categories) {
	            var request = [];
	            angular.forEach(categories, function(item, key) {
	                var category = {
	                    Id: item.Id,
	                    Name: item.Name
	                };
	                category[prefix + 'Label__c'] = item[prefix + 'Label__c'];
	                category[prefix + 'Description__c'] = item[prefix + 'Description__c'];
	                category[prefix + 'DefaultSearchCategory__c'] = item[prefix + 'DefaultSearchCategory__c'];
	                category[prefix + 'ExpandedByDefault__c'] = item[prefix + 'ExpandedByDefault__c'];
	                category[prefix + 'IncludeInTotalsView__c'] = item[prefix + 'IncludeInTotalsView__c'];
	                category[prefix + 'HideAllSearchFilters__c'] = item[prefix + 'HideAllSearchFilters__c'];
	                category[prefix + 'LargeIconId__c'] = item[prefix + 'LargeIconId__c'];
	                category[prefix + 'LongDescription__c'] = item[prefix + 'LongDescription__c'];
	                category[prefix + 'SearchFilterFields__c'] = item[prefix + 'SearchFilterFields__c'] ? item[prefix + 'SearchFilterFields__c'].join(';') : '';
	                request.push(category);
	            });
	            return remoteService.updateCategoryHierarchies(request);
	        }
	
	        function getOnlyPicklistItems(fields) {
	            var onlyPicklistFields = [],
	                fieldTypes = [cpqAdminConstants.picklist, cpqAdminConstants.multipicklist, cpqAdminConstants.double, cpqAdminConstants.currency, cpqAdminConstants.percent, cpqAdminConstants.date, cpqAdminConstants.datetime];
	            for (var i = 0; i < fields.length; i++) {
	                if (fieldTypes.indexOf(fields[i].Type) > -1) {
	                    onlyPicklistFields.push(fields[i]);
	                }
	            }
	            return onlyPicklistFields;
	        } 
	
	        function prepareSearchFilterValues(items) {
	            var onlyPicklistItems = getOnlyPicklistItems(items);
	            var response = [];
	            for (var i = 0; i < onlyPicklistItems.length; i++) {
	                var temp = {
	                    label: '',
	                    value: ''
	                };
	                temp.label = onlyPicklistItems[i].FieldLabel;
	                temp.value = onlyPicklistItems[i].FieldName;
	                response.push(temp);
	            }
	            return response;
	        }
	
	        function getSearchFilterValues(items) {
	            var deferQ = $q.defer();
	            remoteService.getProductDetails('', prefix + 'ProductDetailFields')
	                .then(function(result) {
	                    deferQ.resolve(prepareSearchFilterValues(result.ProductFields));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	        var catalogDetails = {
	            updateCateogryHierarchies: updateCateogryHierarchies,
	            getSearchFilterValues: getSearchFilterValues
	        };
	
	        return catalogDetails;
	    };
	    catalogDetailService.$inject = [
	        '$q',
	        'remoteService',
	        'systemConstants',
	        'cpqAdminConstants'
	    ];
	
	    module.exports = catalogDetailService;
	})();


/***/ }),
/* 489 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"detail-container-catalog\">\n        <div class=\"left-tree\" class=\"setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <header>\n                <h4>{{vm.treeHeader}}</h4>\n            </header>\n           \n            <tree-container data=\"vm.treeData\" header-text=\"vm.treeHeader\" page-type='vm.type' get-node-details=\"vm.getSelectedNodeDetails\" detail-of-selected-node=\"vm.nodeDetails\" search=\"vm.loadLeftSideItems\" selected-node=\"vm.selectedCategory\" enable-detail-panel=\"true\" node-children=\"vm.nodeChildren\" tooltip-field=\"vm.tooltipField\" node-label=\"vm.treeLabel\" options=\"vm.options\" expand-collapse=\"vm.expandCollapse\" search-text=\"vm.searchText\" current-page=\"vm.currentPage\">\n            </tree-container>\n        </div>\n        <div ui-view class=\"catalog-detail-block\"></div>\n    </div>\n</div>\n"

/***/ }),
/* 490 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var catalogDetailController = function($state, $location, $stateParams, _, systemConstants, associationService, i18nService, applicationService, catalogConstants, catalogService) {
	        var vm = this;
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.treeLabel = vm.prefix + 'Label__c';
	        vm.tooltipField = 'Name';
	        vm.labels = i18nService.CustomLabel;
	        vm.currentPage = 1;
	
	        /******* tree-container directive **********/
	        /**
	         * Left side tree panel configuration goes here.
	         */
	
	        vm.treeHeader = ($state.current.name.indexOf('catalog') !== -1)? vm.labels.CategoryHierarchy : vm.labels.OptionGroupHierarchy;
	        vm.type = 'catalogDetail';
	        vm.nodeChildren = 'ChildCategoryDOs';
	
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        /**
	         * User can search categories on right side tree panel. This method gets called when user presses enter key
	         * on search box.
	         */
	
	        vm.loadLeftSideItems = function() {
	            var hierarchySo = catalogService.getHierarchy();
	            if (hierarchySo) {
	                var categoryId = hierarchySo[getPrefixedAttribute('HierarchyId__r')].Id;
	                catalogService.getFullHierarchyForCategory(categoryId)
	                    .then(function(response) {
	                        vm.treeData = response;
	                    }, function(error) {
	                        vm.treeData = [];
	                    });
	            } else {
	                /* Load the details one more time */
	                var path = $location.url(), id;
	                    if (path.indexOf('app/catalog/detail') !== -1){
	                        id = path.split('/app/catalog/detail/')[1].split('/form')[0];
	                    } else {
	                        id = path.split('/app/optionGroup/detail/')[1].split('/form')[0];
	                    }
	                catalogService.getCategoryHierarchy(id)
	                    .then(function(response) {
	                        var hierarchyId = response[getPrefixedAttribute('HierarchyId__r')].Id;
	                        catalogService.getFullHierarchyForCategory(hierarchyId)
	                            .then(function(response) {
	                                vm.treeData = response.ChildCategoryDOs;
	                            }, function(error) {
	                                vm.treeData = [];
	                            });
	                    });
	            }
	
	        };
	
	        vm.searchCategory = function(priceListValue, searchText, pageNumber) {
	            /*vm.currentPage = pageNumber;
	            associationService.getTreeData({
	                PriceListId: null,
	                ChunkNumber: pageNumber,
	                SearchString: vm.searchText || '',
	                NumberOfCategoriesPerChunk: catalogConstants.treePanelItemsPerChunk
	            }).then(function(response) {
	                vm.treeData = response.CategoryNodeDOs;
	                vm.isMaxSQLSizeExceed = false;
	                if (vm.treeData.length === 0) {
	                    vm.searchedStr = vm.searchText;
	                }
	                document.querySelector('.tree-wrapper').scrollTop = 0;
	            }, function(reason) {
	                if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                    vm.treeData = [];
	                    vm.isMaxSQLSizeExceed = true;
	                } else {
	                    applicationService.showErrorMessage(reason);
	                }
	            });*/
	        };
	        /**
	         * Updates the tree data model on which node or leaf is selected.
	         * Adds 'isSelected' property to the element.
	         */
	        function updateTree(array, nodeId, isSelected) {
	            _.each(array, function(node) {
	                if (node.ClsHierarchySO.Id === nodeId) {
	                    node.isSelected = isSelected;
	                    return;
	                } else if (node[vm.nodeChildren]) {
	                    updateTree(node[vm.nodeChildren], nodeId, isSelected);
	                }
	            });
	        }
	
	
	        // Show filter Panel
	        vm.toggleProductView = function() {
	            var productView = document.querySelector('.mainCatalogContent');
	            angular.element(productView).addClass('showFilterPanel');
	        };
	        // Hide filter Panel
	        vm.hideFilterPanel = function() {
	            var productView = document.querySelector('.mainCatalogContent');
	            angular.element(productView).removeClass('showFilterPanel');
	        };
	        // Show search bar
	        vm.showSearchBar = function() {
	            var productView = document.querySelector('.details-search');
	            angular.element(productView).addClass('showSearchPanel');
	        };
	        // Hide Search Bar
	        vm.hideSearchBar = function() {
	            var productView = document.querySelector('.details-search');
	            angular.element(productView).removeClass('showSearchPanel');
	            vm.searchText = '';
	            vm.searchCategory(null, vm.searchText, 1);
	        };
	
	        vm.goToListPage = function() {
	            const goToPath = catalogService.getPathToRedirect($state.current.name);
	            $state.go(`${goToPath}list`); 
	        };
	    };
	
	    catalogDetailController.$inject = [
	        '$state',
	        '$location',
	        '$stateParams',
	        'lodash',
	        'systemConstants',
	        'associationService',
	        'i18nService',
	        'applicationService',
	        'catalogConstants',
	        'catalogService'
	    ];
	
	    module.exports = catalogDetailController;
	
	})();


/***/ }),
/* 491 */
/***/ (function(module, exports) {

	module.exports = "<uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n<!-- Create / Update product details form -->\n<form class=\"catalog-detail-form\" novalidate name=\"vm.catalogDetailsForm\">\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"form-group\">\n                <material-form-field model=\"vm.catalogDetails.Name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.Name\" field-name=\"Name\" \n                                     max-length=\"{{vm.getFieldValue('Name','Length')}}\" name=\"name\" on-blur=\"vm.onNameFieldBlur()\" is-required=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"form-group\">\n                <material-form-field model=\"vm.catalogDetails[vm.prefix + 'Label__c']\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.LabelText\" \n                                     field-name=\"label\" max-length=\"{{vm.getFieldValue('Label__c','Length')}}\" is-required=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-lg-12\">\n            <div class=\"form-group\">\n                <material-form-field model=\"vm.catalogDetails[vm.prefix + 'Description__c']\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.Description\" max-length=\"{{vm.getFieldValue('Description__c','Length')}}\">\n                </material-form-field>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"form-group\">\n                <material-form-field model=\"vm.catalogDetails[vm.prefix + 'DefaultSearchCategory__c']\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.DefaultSearchCategory\" element-id=\"defaultSearchCategory\">\n                </material-form-field>\n            </div>\n        </div>\n        <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"form-group\">\n                <material-form-field model=\"vm.catalogDetails[vm.prefix + 'ExpandedByDefault__c']\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.ExpandedByDefault\" element-id=\"expandedByDefault\">\n                </material-form-field>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"form-group\">\n                <material-form-field model=\"vm.catalogDetails[vm.prefix + 'IncludeInTotalsView__c']\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.IncludeInTotalsView\" element-id=\"includeInTotalsView\">\n                </material-form-field>\n            </div>\n        </div>\n        <div class=\"col-xs-12 col-lg-6\">\n            <div class=\"form-group\">\n                <material-form-field model=\"vm.catalogDetails[vm.prefix + 'HideAllSearchFilters__c']\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.HideAllSearchFilters\" element-id=\"hideAllSearchFilters__c\">\n                </material-form-field>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xs-6 col-lg-6\">\n            <div class=\"form-group\">\n                <material-form-field model=\"vm.catalogDetails[vm.prefix + 'SearchFilterFields__c']\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" properties=\"vm.searchFilterFieldspicklistValues\" field-label=\"vm.labels.SearchFilterFields\">\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xs-12 col-lg-12\">\n            <div class=\"angular-wysiwyg\">\n                <label for=\"longDescription\" class=\"detailsLabelColor\">{{vm.labels.LongDescription}}</label>\n                <wysiwyg textarea-id=\"question\" textarea-class=\"form-control\" textarea-height=\"180px\" textarea-name=\"textareaQuestion\" textarea-required ng-model=\"vm.catalogDetails[vm.prefix + 'LongDescription__c']\" enable-bootstrap-title=\"true\"></wysiwyg>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xs-12\">\n            <div class=\"row\">\n                <div class=\"col-xs-6 text-left catalogDetailLabelColor\">\n                    {{vm.labels.uploadCatalogImage}}\n                </div>\n                <div class=\"col-xs-6 text-right\">\n                    <!-- Reference taken for input type \"file\" with uploading from below site -->\n                    <label for=\"browseImage\" class=\"upload-label\">{{vm.labels.UploadButton}}</label>\n                    <input type=\"file\" id=\"browseImage\" class=\"pull-right\" name=\"images\" onchange=\"angular.element(this).scope().uploadImage(event)\" multiple />\n                </div>\n            </div>\n            <div class=\"col-xs-12 upload-image\">\n                <div class=\"upload-img-bg\" file-drop-zone upload-image=\"uploadImage\"></div>\n                <div class=\"row\">\n                    <div class=\"col-xs-6 col-md-3\" data-ng-repeat=\"image in vm.imgThumbnailList track by $index\">\n                        <div class=\"thumbnail form-upload-img-panel\">\n                            <a href=\"\" class=\"img-rm-button\" title=\"Remove\" data-ng-click=\"vm.removeUploadFile($index, image.Id)\"><i class=\"fa fa-close\"></i></a>\n                            <img ng-src=\"{{image.source}}\" data-ng-if=\"image.type.toLowerCase()=='png' || image.type.toLowerCase()=='jpg' || image.type.toLowerCase()=='icon' || image.type.toLowerCase()=='gif'\" />\n                            <div class=\"file-icon-panel\" data-ng-if=\"image.type=='pdf'\"><span class=\"fa {{image.icon}} file-icon\"></span></div>\n                            <p>{{image.name}}</p>\n                        </div>\n                        <input type=\"radio\" class=\"adjustRadioButton\" name=\"imageUpload\" value=\"\" ng-change=\"vm.selectDefaultImage(image,$index)\" ng-model=\"vm.selectedImage\" data-ng-value=\"image\" />\n                    </div>\n                </div>\n                <div class=\"clearfix\"></div>\n            </div>\n        </div>\n    </div>\n</form>\n<div class=\"catalog-detail-footer\">\n    <div class=\"container-fluid\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListPage()\">Cancel</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">Save</a>\n    </div>\n</div>\n<a data-ui-sref=\"app.product.associations({'id': vm.$stateParams.productId })\" class=\"toast\" data-ng-if=\"vm.$stateParams.productId\">Go Back to \"{{vm.$stateParams.productName}}\"</a>\n<div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\n</div>\n<div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n    <div class=\"modalOverlay\">\n        <div class=\"modalHeaderBody\">\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n            <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n        </div>\n        <div class=\"modal-Footer text-right\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancel()\">\n                <span class=\"modal-TextColor\">Cancel</span>\n            </button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirm()\">\n                <span class=\"modal-TextColor\">Ok</span>\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var catalogDetailController = function($scope, $state, $stateParams, $mdDialog, systemConstants, cpqAdminConstants, productConstants,
	        productDetailService, i18nService, applicationService, catalogService, associationService, categoryHierarchy, catalogDetailService, $q, productFieldDetails,fromState, catalogConstants) {
	        var vm = this;
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.$stateParams = $stateParams;
	
	        vm.catalogDetails = categoryHierarchy;
	        vm.searchFilterFieldspicklistValues = {
	            PicklistValues: productFieldDetails
	        };
	        var metaDataInfo = catalogService.getMetaData();
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	        if (vm.catalogDetails && vm.catalogDetails[getPrefixedAttribute('SearchFilterFields__c')]) {
	            vm.catalogDetails[getPrefixedAttribute('SearchFilterFields__c')] = vm.catalogDetails[getPrefixedAttribute('SearchFilterFields__c')].split(';');
	        }
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	
	        /****** Save functionality goes here ******/
	        /*********************************************/
	
	        /**
	         * When user clicks on the 'Save Product' button, an event named 'explicitPageSave' gets broadcasted.
	         * A page has to listen to that event and do the page specific save functionality.
	         */
	
	        vm.explicitPageSave = function() {
	
	            save({}, $state.current, {
	                id: $stateParams.id
	            });
	
	        };
	        $scope.$on('explicitcatalogPageSave', function() {
	            /**
	             * Check if page is about a new product creation.
	             *   - If yes, 'save' method should be called on both occasion of explicit save and implicit save
	             *
	             * If page contains data about an existing product
	             *   - Check if the form is dirty, then initiate the save call, else no need to save again.
	             */
	
	            if ($stateParams.id === cpqAdminConstants.NEW) {
	                save({}, $state.current, {
	                    id: $stateParams.id
	                });
	            } else {
	                save({}, $state.current, {
	                    id: $stateParams.id
	                });
	            }
	        });
	
	        /**
	         * When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed incase of errors in saving the page or the form
	         * is invalid. This form contains some mandatory field.
	         *
	         * If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.catalog.manageCatalogList' || toState.name === 'app.optionGroup.manageOptionGroupsList') {
	                return true;
	            } else {
	                /**
	                 * Check if Form is dirty or not.
	                 * Go for save, only when it is dirty or if it is for a new product.
	                 */
	                if (unsavedAttachmentPresent() || vm.catalogDetailsForm.$dirty) {
	                    e.preventDefault();
	                    save(e, toState, toParams);
	                } else {
	                    return true;
	                }
	            }
	
	        });
	
	        /*
	         *Upload Image  by uploadImage function
	         */
	        vm.imageList = [];
	        vm.imgThumbnailList = [];
	
	        $scope.uploadImage = function(event) {
	            var files = event.target.files || event.originalEvent.dataTransfer.files;
	            for (var i = 0; i < files.length; i++) {
	                var file = files[i];
	                if (vm.imgThumbnailList.length === 1) {
	                    alert("Only one image allowed");
	                } else {
	                    if (file.size <= cpqAdminConstants.IMAGE_SIZE) {
	                        var reader = new FileReader();
	                        var fileObj = files[i];
	                        //This below code block is detching scope and the element. 
	                        //We might need to use $apply down the line to refresh the image data model
	                        reader.onload = (function(fileObj) {
	                            return function(eventObj) {
	                                showImageThumbnail(eventObj, fileObj);
	                            };
	                        })(fileObj);
	                        reader.readAsDataURL(file);
	                    } else {
	                        alert(file.name + ' ' + vm.labels.ImageSizeExceeded);
	                    }
	                }
	            }
	            event.target.value = '';
	
	        };
	
	        /**
	         * - Method for display the uploaded image.
	         */
	        function displayUploadedImage() {
	            if (vm.catalogDetails[vm.prefix + 'LargeIconId__c'] !== undefined) {
	                var uploadedImage = {
	                    "source": "/servlet/servlet.FileDownload?file=" + vm.catalogDetails[vm.prefix + 'LargeIconId__c'],
	                    "type": "jpg",
	                    "Id": vm.catalogDetails[vm.prefix + 'LargeIconId__c']
	                }
	                vm.imgThumbnailList.push(uploadedImage);
	                vm.selectedImage = vm.imgThumbnailList[0];
	            }
	        }
	        displayUploadedImage();
	
	        /** Checking if there is any unsaved attachment. Then save has to happen */
	        function unsavedAttachmentPresent() {
	            var present = false;
	            for (var i = 0; i < vm.imgThumbnailList.length; i++) {
	                if (vm.imgThumbnailList[i].Id === undefined) {
	                    present = true;
	                }
	            }
	            return present;
	        }
	
	        function isRteValid() {
	            var isValid = true,
	                rte = vm.catalogDetails[getPrefixedAttribute('LongDescription__c')];
	
	            if (rte) {
	                var length = rte.length || 0;
	                if (length > getField('LongDescription__c').Length) {
	                    isValid = false;
	                }
	            }
	            return isValid;
	        }
	        /*
	         * Save method prepares the final payload. It mergers field entries and Rich Text entries.
	         * Checks the mandatory fields.
	         * Makes service save call.
	         */
	        function save(e, toState, toParams) {
	            if (isRteValid()) {
	                uploadAttachment(e, toState, toParams).then(function(response) {
	                    if (response.success) {
	                        if (vm.catalogDetailsForm.$dirty) {
	                            catalogDetailService.updateCateogryHierarchies([vm.catalogDetails]).then(function(response) {
	                                vm.catalogDetailsForm.$setPristine();
	                                addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                                if (toState) {
	                                    $state.go(toState, toParams);
	                                }
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                        } else {
	                            if (!response.hasAttachment) {
	                                addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	                            } else {
	                                addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                            }
	                            if (toState) {
	                                $state.go(toState, toParams);
	                            }
	                        }
	                    }
	                });
	            } else {
	                showUserMessage(e, toState, toParams);
	            }
	        }
	
	        /**
	         * Once images are loaded , add them to imgThumbnailList
	         */
	        function showImageThumbnail(eventObj, fileObj) {
	            vm.fileName = fileObj.name;
	            vm.fileType = vm.fileName.substr(vm.fileName.lastIndexOf('.') + 1);
	            if (vm.fileType === cpqAdminConstants.PDF) {
	                vm.fileIcon = 'fa-file-pdf-o';
	            }
	            vm.fileDetails = {
	                name: fileObj.name,
	                source: eventObj.target.result,
	                type: vm.fileType,
	                icon: vm.fileIcon
	
	            };
	            vm.imgThumbnailList.push(vm.fileDetails);
	            if (vm.selectedImage == null) {
	                vm.selectedImage = vm.imgThumbnailList[0];
	            }
	            $scope.$apply();
	        }
	        /*
	         * Remove the attachement which you uploaded
	         */
	
	        vm.removeUploadFile = function(index, Id) {
	            vm.imgThumbnailList.splice(index, 1);
	            vm.catalogDetails[vm.prefix + 'LargeIconId__c'] = null;
	            vm.selectedImage = null;
	            vm.catalogDetailsForm.$dirty = true;
	        }
	
	
	
	        function uploadAttachment(e, toState, toParams) {
	            var deferQ = $q.defer();
	            var attachmentRequestDOs = [];
	            for (var i = 0; i < vm.imgThumbnailList.length; i++) {
	                if (vm.imgThumbnailList[i].Id == undefined) {
	                    var blob = vm.imgThumbnailList[i].source.replace(/^data:image\/(png|jpg|jpeg);base64,/, "").replace(/^data:application\/(pdf|msword);base64,/, "");
	                    attachmentRequestDOs.push({
	                        parentId: toParams.id,
	                        AttachmentName: vm.imgThumbnailList[i].name,
	                        attachmentBody: blob
	                    });
	                }
	            }
	            if (attachmentRequestDOs.length > 0) {
	                productDetailService.uploadAttachments(attachmentRequestDOs)
	                    .then(function(response) {
	                        if (response.length > 0) {
	                            vm.catalogDetails[vm.prefix + 'LargeIconId__c'] = response[0];
	                            vm.catalogDetailsForm.$dirty = true;
	                            /**
	                             * -  Get the response count.
	                             * -  Get the same items frm the vm.imgThumbnailList from the right end of list
	                             */
	                            var imageListLength = vm.imgThumbnailList.length;
	                            for (var i = 0; i < response.length; i++) {
	                                var index = (imageListLength - 1) - i;
	                                if (vm.imgThumbnailList[index].Id === undefined) {
	                                    vm.imgThumbnailList[index].Id = response[i];
	                                }
	                            }
	                        }
	                        deferQ.resolve({
	                            hasAttachment: true,
	                            success: true
	                        });
	                    }, function(reason) {
	                        applicationService.showErrorMessage(reason);
	                    });
	            } else {
	                deferQ.resolve({
	                    hasAttachment: false,
	                    success: true
	                });
	            }
	            return deferQ.promise;
	        }
	
	        vm.goToListPage = function() {
	            const goToPath = catalogService.getPathToRedirect($state.current.name);
	            $state.go(`${goToPath}${fromState[0]}List`); 
	        };
	
	        function getTreeData() {
	            var requestObj = {
	                ChunkNumber: 1,
	                NumberOfCategoriesPerChunk: productConstants.treePanelItemsPerChunk,
	                SearchString: '',
	                PriceListId: null,
	                Types: [fromState[1],"Both"],
	                HasZeroProductCount: false
	            };
	            associationService.getTreeData(requestObj, true)
	                .then(function(response) {
	                    vm.treeData = response.CategoryNodeDOs;
	                });
	        }
	        getTreeData();
	
	        function addCategories() {
	            $mdDialog.show({
	                controller: __webpack_require__(393),
	                template: __webpack_require__(394),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                locals: {
	                    catalogTypes: [fromState[1],"Both"]
	                },
	                bindToController: true,
	                resolve: {
	                    data: function() {
	                        return vm.treeData
	                    },
	                    currentCategory: function() {
	                        return vm.catalogDetails;
	                    }
	                }
	            }).then(function(response) {
	                if (response) {
	                    $state.reload();
	                }
	            });
	        }
	
	        $scope.$on(catalogConstants.newCategory, function() {
	            addCategories();
	        });
	
	        $scope.$on(catalogConstants.newOptionGroup, function() {
	            addCategories();
	        });
	
	        function getField(fieldName) {
	            var fieldObj, name;
	            if (fieldName.indexOf('__c') > -1) {
	                fieldName = getPrefixedAttribute(fieldName);
	            }
	            if (metaDataInfo) {
	                for (var i = 0; i < metaDataInfo.length; i++) {
	                    var name = metaDataInfo[i].FieldName;
	                    if (name === fieldName) {
	                        fieldObj = metaDataInfo[i];
	                        break;
	                    }
	                }
	            }
	            return fieldObj;
	        }
	        vm.getFieldValue = function(fieldName, fieldValueToBeExtracted) {
	            var field = getField(fieldName);
	            if (field) {
	                return field[fieldValueToBeExtracted];
	            } else {
	                return '';
	            }
	
	        };
	
	        var event, state, params;
	
	        function showUserMessage(e, toState, toParams) {
	            event = e;
	            state = toState;
	            params = toParams;
	            vm.confiramtionPopup = true;
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.Warning,
	                messageBody: vm.labels.RTEExceedsLimitBody,
	                messageNote: vm.labels.RTEExceedsLimitNote
	            }
	        }
	        vm.cancel = function() {
	            vm.confiramtionPopup = false;
	            event = state = params = undefined;
	        };
	        vm.confirm = function() {
	            vm.confiramtionPopup = false;
	            vm.catalogDetails[getPrefixedAttribute('LongDescription__c')] = vm.catalogDetails[getPrefixedAttribute('LongDescription__c')].substring(0, getField('LongDescription__c').Length);
	            save(event, state, params);
	        };
	
	        vm.onNameFieldBlur = function () {
	            if (vm.catalogDetailsForm.name.$viewValue !== null || vm.catalogDetails.Name !== null) {
	                vm.catalogDetails[getPrefixedAttribute('Label__c')] = vm.catalogDetailsForm.name.$viewValue || vm.catalogDetails.Name;
	            }
	        };
	    };
	
	    catalogDetailController.$inject = [
	        '$scope',
	        '$state',
	        '$stateParams',
	        '$mdDialog',
	        'systemConstants',
	        'cpqAdminConstants',
	        'productConstants',
	        'productDetailService',
	        'i18nService',
	        'applicationService',
	        'catalogService',
	        'associationService',
	        'categoryHierarchy',
	        'catalogDetailService',
	        '$q',
	        'productFieldDetails',
	        'fromState',
	        'catalogConstants'
	    ];
	
	    module.exports = catalogDetailController;
	
	})();


/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.catalog.associateProduct', [])
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.catalog.manageCatalogAssociateProduct', {
	                parent: 'app.catalog',
	                url: '/manageCatalog/:id/associateProduct',
	                views: {
	                    'catalogContainer': {
	                        template: __webpack_require__(494),
	                        controller: __webpack_require__(495),
	                        controllerAs: 'vm'
	                    }
	                },
	                params: {
	                    productId: null,
	                    productName: null
	                },
	                resolve: {
	                    categoryHierarchy: ['catalogService', '$stateParams', function(catalogService, $stateParams) {
	                        return catalogService.getCategoryHierarchy($stateParams.id);
	                    }],
	                    fromState: [ function() {
	                        return ['manageCatalog','Offering'];
	                    }]
	                }
	            })
	            .state('app.optionGroup.manageOptionGroupsAssociateProduct', {
	                parent: 'app.optionGroup',
	                url: '/manageOptionGroups/:id/associateProduct',
	                views: {
	                    'catalogContainer': {
	                        template: __webpack_require__(494),
	                        controller: __webpack_require__(495),
	                        controllerAs: 'vm'
	                    }
	                },
	                params: {
	                    productId: null,
	                    productName: null
	                },
	                resolve: {
	                    categoryHierarchy: ['catalogService', '$stateParams', function(catalogService, $stateParams) {
	                        return catalogService.getCategoryHierarchy($stateParams.id);
	                    }],
	                    fromState: [ function() {
	                        return ['manageOptionGroups','Option Group'];
	                    }]
	                }
	            });
	        }])
	        .service('associateProductService', __webpack_require__(496));
	
	})();


/***/ }),
/* 494 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"associate-container\">\n    <div class=\"category-page\">\n        <div class=\"left-tree\" class=\"setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <header>\n                <h4>{{vm.treeHeader}}</h4>\n                <div class=\"search\">\n                    <form ng-submit=\"vm.searchProducts(null, vm.searchText, 1)\" novalidate>\n                        <div class=\"search-input-container\">\n                            <div class=\"input-group\">\n                                <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required drop-disable/>\n                                <label class=\"ng-binding\">Search</label>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </header>\n            <div data-ng-if=\"vm.treeData.length === 0\" class=\"search-result\">\n                {{vm.labels.NoMatchingRecords}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <tree-container data=\"vm.treeData\" header-text=\"vm.treeHeader\" page-type='vm.type' get-node-details=\"vm.getSelectedNodeDetails\" search=\"vm.searchProducts\" \n                            selected-nodes=\"vm.selectedNodes\" node-children=\"vm.nodeChildren\" tooltip-field=\"vm.tooltipField\" node-label=\"vm.treeLabel\" options=\"vm.options\" \n                            expand-collapse=\"vm.expandCollapse\" search-text=\"vm.searchText\">\n            </tree-container>\n        </div>\n        <!-- Tree container directive -->\n        <div class=\"assigned-categories\">\n            <!-- Angular UI-Bootsrap alert module -->\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"2000\">{{alert.msg}}</uib-alert>\n            <!-- Table header start here -->\n            <div class=\"page-title\">\n                <div class=\"image-action\">{{vm.labels.Action}}</div>\n                <div class=\"product-heirarchy\">{{vm.labels.ProductName}}</div>\n                <div class=\"product-heirarchy\">{{vm.labels.ProductCode}}</div>\n                <!-- <div class=\"product-heirarchy\">{{vm.labels.Description}}</div> -->\n                <div class=\"product-heirarchy\">{{vm.labels.ConfigurationType}}</div>\n                <div class=\"category-image\">{{vm.labels.CatalogImage}}</div>\n            </div>\n            <!-- Table header ends here -->\n            <div class=\"dnd-container\">\n                <ul dnd-list=\"vm.category.associatedProducts\" dnd-drop=\"vm.addProduct(event, index, item)\">\n                    <!-- The dnd-draggable directive makes an element draggable and will\n                    transfer the object that was assigned to it. If an element was\n                    dragged away, you have to remove it from the original list\n                    yourself using the dnd-moved attribute -->\n                    <!-- dnd-draggable=\"item\" dnd-effect-allowed=\"move\" -->\n                    <li ng-repeat=\"item in vm.category.associatedProducts\" dnd-moved=\"vm.onMoved()\" dnd-draggable=\"vm.getSelectedItemsToDrag(vm.category.associatedProducts, item)\" \n                        dnd-selected=\"item.selected = !item.selected\" ng-class=\"{'selected': item.selected}\" ng-hide=\"vm.category.associatedProducts.dragging && item.selected\" \n                        dnd-dragstart=\"vm.onDragstart(vm.category.associatedProducts, event)\" dnd-dragend=\"vm.category.associatedProducts.dragging = false\">\n                        <!-- Each breadcrumb design starts here -->\n                        <div class=\"category-breadcrumb-list\">\n                            <div class=\"image-action\">\n                                <a class=\"delete\" ng-click=\"vm.removeProduct($index, item)\" href=\"\">\n                                    <i class=\"material-icons\">clear</i>\n                                </a>\n                            </div>\n                            <div class=\"product-heirarchy\">\n                                <a ng-bind-html=\"item.Name\" href=\"{{vm.getProductDetailsPageUrl(item.Id)}}\" target=\"_blank\" class=\"clickable-item\"></a>\n                            </div>\n                            <div class=\"product-heirarchy\">\n                                {{item.ProductCode}}\n                            </div>\n                            <!-- <div class=\"product-heirarchy\">\n                            </div> -->\n                            <div class=\"product-heirarchy\">\n                                {{item[vm.prefix + 'ConfigurationType__c']}}\n                            </div>\n                            <div class=\"category-image\">\n                                <img class=\"image\" ng-src=\"{{'/servlet/servlet.FileDownload?file='+item[vm.prefix + 'IconId__c']}}\" alt='Category Image' ng-if=\"item[vm.prefix + 'IconId__c']\" />\n                                <span class=\"fa fa-image\" ng-if=\"!item[vm.prefix + 'IconId__c']\"></span>\n                            </div>\n                        </div>\n                        <!-- Each breadcrumb design ends here -->\n                    </li>\n                </ul>\n            </div>\n            <div class=\"catalog-associated-product-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">Save</a>\n                </div>\n            </div>\n            <a data-ui-sref=\"app.product.associations({'id': vm.$stateParams.productId })\" class=\"toast\" data-ng-if=\"vm.$stateParams.productId\">Go Back to \"{{vm.$stateParams.productName}}\"</a>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 495 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productCategoryController = function ($state, $scope, $rootScope, _, $stateParams, associationService, productService, systemConstants, i18nService,
	                                    associateProductService, cpqAdminConstants, productConstants, catalogService, applicationService, $location,fromState) {
	        var vm = this,
	            /**
	             * 'isFormSaved' variable is used to track the page save functionality.
	             * Gets updated with save API call's response.
	             */
	            isFormSaved = false,
	            /**
	             * 'isDirty'  variable is used to track changes happened to the parent data model of the controller
	             * It helps is avoiding save() calls at times.
	             */
	            isDirty = false,
	            /**
	             * - Contains the list of exisitng categories association
	             */
	            existingProducts = [],
	            /**
	             * - Contains newlyAdded categories from right side categories heirarchy
	             */
	            newlyAddedProducts = [],
	            /**
	             * - This list will contain the to be removed categories.
	             */
	            toBeRemovedProducts = [];
	
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.$stateParams = $stateParams;
	
	        /**
	         * updateState method checks whether meta data about the current selected product is
	         * available or not. Like product name, product code, etc.
	         * For a new product, it wont have any metadata until unless it is saved.
	         * Helps is page refresh and state change activity.
	         */
	        //productService.updateState($stateParams.id);
	
	        vm.treeLabel = 'Name';
	        vm.tooltipField = 'Name';
	        /**
	         * Parent data model for categories controller.
	         * View uses this data model to render bread-crumb
	         */
	        vm.category = {
	            selected: null,
	            associatedProducts: []
	        };
	        vm.expandCollapse = function() {
	            vm.isRightPanelVisable = true
	        }
	
	        /**
	         * User can search categories on right side tree panel. This method gets called when user presses enter key
	         * on search box.
	         */
	        vm.searchProducts = function(typeToBeSearched, searchText, pageNumber) {
	            associateProductService.getProductsList({
	                'ViewName': vm.prefix + 'ProductListFields',
	                'SortField': 'LastModifiedDate',
	                'SortDirection': cpqAdminConstants.ASCENDING,
	                'SearchString': searchText,
	                'ChunkNumber': pageNumber,
	                'NumberOfProductsPerChunk': productConstants.treePanelItemsPerChunk,
	                'ConfigType': ''
	            }).then(function(response) {
	                vm.treeData = response;
	                updateTreeOnLoad(vm.treeData);
	                if (vm.treeData.length === 0) {
	                    vm.searchedStr = vm.searchText;
	                }
	            });
	        };
	
	        /**
	         * - Page load data binding.
	         * - Contains the entire list of existing categories and newly added categories.
	         */
	        getAssociatedProducts();
	        //vm.searchProducts(null, '', 1);
	
	        /**
	         * Updates the tree data model on which node or leaf is selected.
	         * Adds 'isSelected' property to the element.
	         */
	        function updateTree(array, nodeId, isSelected) {
	            _.each(array, function(node) {
	                if (node.Id === nodeId) {
	                    node.isSelected = isSelected;
	                    return;
	                } else if (node[vm.nodeChildren]) {
	                    updateTree(node[vm.nodeChildren], nodeId, isSelected);
	                }
	            });
	        }
	
	        /**
	         * Makes the already associated categories as not selectable on right side tree on page load activity.
	         */
	        function updateTreeOnLoad() {
	            if (vm.category.associatedProducts && vm.category.associatedProducts.length > 0) {
	                for (var i = 0; i < vm.category.associatedProducts.length; i++) {
	                    updateTree(vm.treeData, vm.category.associatedProducts[i].Id, true);
	                }
	            }
	        }
	
	        /**
	         * Adds a category to the breadcrumb data model, once user drops a leaf node in the center panel
	         */
	        vm.addProduct = function(event, index, node) {
	            /*
	             * Treat the page content as dirty. Because, a new node just got added to the center panel.
	             */
	            isDirty = true;
	            var isReOrder = false;
	            for (var i = 0; i < node.length; i++) {
	                if (node[i].isSelected !== true) {
	                    node[i].isSelected = true;
	                    updateTree(vm.treeData, node[i].Id, true);
	                    newlyAddedProducts.push(node[i]);
	                    vm.category.associatedProducts.splice(index, 0, node[i]);
	                    index++;
	                } else {
	                    isReOrder = true;
	                    break;
	                }
	            }
	            if (isReOrder) {
	                angular.forEach(node, function (item) { item.selected = false; });
	                var list = vm.category.associatedProducts;
	                list = list.slice(0, index)
	                    .concat(node)
	                    .concat(list.slice(index));
	                vm.category.associatedProducts = list;
	            }
	            else {
	                vm.selectedNodes = [];//To clear selected nodes from left panel
	            }
	            return true;
	        };
	
	        /**
	         * - Takes a node obj and checks whether that node belongs to newlyAddedProducts list.
	         * - Returns true if yes, false otherwise
	         */
	        function doesBelongToNewList(nodeObj) {
	            var present = false;
	            for (var item = 0; item < newlyAddedProducts.length; item++) {
	                if (newlyAddedProducts[item].Id === nodeObj.Id) {
	                    present = true;
	                }
	            }
	            return present;
	        }
	
	        /**
	         * -Retrieves the index of the node from the existingProducts list.
	         */
	        function getNodeIndex(list, nodeObj) {
	            var index = '',
	                objList = [];
	
	            if (list === 'newlyAddedItemList') {
	                objList = newlyAddedProducts;
	            } else if (list === 'existingItemList') {
	                objList = existingProducts;
	            }
	
	            for (var item = 0; item < objList.length; item++) {
	                if (objList[item].Id === nodeObj.Id) {
	                    index = item;
	                }
	            }
	            return index;
	        }
	
	
	        /**
	         * When user clicks on the remove icon present on the breadcrumb list.
	         * removes the selected association from the list.
	         */
	        vm.removeProduct = function(index, node) {
	            /**
	             * - Find out more about tobe removed node. Whether it belongs to existing list or newly added list.
	             * - If it doesnt belong to newlyAddedProducts, then it is must from existing list.
	             */
	            if (doesBelongToNewList(node)) {
	                /* Remove it from the newly added list */
	                var existingIndex = getNodeIndex('newlyAddedItemList', node);
	                /* Remove $$hashKey from existingProducts list */
	                newlyAddedProducts = angular.copy(newlyAddedProducts);
	                newlyAddedProducts.splice(existingIndex, 1);
	
	            } else {
	                /**
	                 * - Track this change. Add this node to the toBeRemovedProducts list.
	                 * - Remove the node from the existingProducts list.
	                 */
	                toBeRemovedProducts.push(node);
	
	                var presentIndex = getNodeIndex('existingItemList', node);
	                /* Remove $$hashKey from existingProducts list */
	                existingProducts = angular.copy(existingProducts);
	                existingProducts.splice(presentIndex, 1);
	
	            }
	            vm.category.associatedProducts.splice(index, 1);
	
	            updateTree(vm.treeData, node.Id, false);
	        };
	
	
	
	        /*********  uib-popover  *************/
	        /**
	         * If pop-up for associated category is activated.
	         * These below methods are used to hide the category information
	         */
	        vm.hidePopup = function(item) {
	            item.isOpen = false;
	        };
	
	        vm.hideOtherPopup = function() {
	            for (var item in vm.category.associatedProducts) {
	                vm.category.associatedProducts[item].isOpen = false;
	            }
	        };
	        /*********  uib-popover  *************/
	
	        /******* tree-container directive **********/
	        /**
	         * Right side tree panel configuration goes here.
	         */
	
	        vm.treeHeader = 'All Products';
	        vm.type = 'categories12';
	        vm.nodeChildren = 'ChildCategoryDOs';
	
	        /**
	         * User messages management.
	         */
	        vm.alerts = [];
	        vm.addAlert = function(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        };
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        /****** Save functionality **************/
	        /****************************************/
	        /**
	         * updateMenuStatus broadcasts "menuStatus" event. Menu directive will be listening to this event.
	         * Based on the page and its current status, either green-check icon will be visible or red-exclamation
	         * icon will be visible right next to the menu.
	         *
	         * This can be done through services and Menu directive will be watching any changes to service variable
	         */
	
	
	        /**
	         * - When all API calls respond back with success as true, this method gets called
	         */
	        var isFormSaved = false,
	            addAPIStatus, removeAPIStatus, editedState,
	            stateInfo = {
	                to: '',
	                param: '',
	                event: ''
	            };
	        vm.processSuccessState = function() {
	            editedState = '';
	            isFormSaved = true;
	            catalogService.getCategoryHierarchy($stateParams.id).then(function (response) {
	                if (response) {
	                    if (stateInfo.to) {
	                        $state.go(stateInfo.to, stateInfo.param);
	                    } else {
	                        vm.addAlert(vm.labels.SavedSuccessfully, 'success');
	                    }
	                    newlyAddedProducts = [];
	                    toBeRemovedProducts = [];
	                    existingProducts = angular.copy(vm.category.associatedProducts);
	                }
	            }, function (reason) {
	                vm.addAlert(reason, 'error');
	            });
	        };
	
	        /**
	         * - When any API calls respond back with success as false, this method gets called
	         */
	        vm.processErrorState = function() {
	            editedState = '';
	            // updateMenuStatus('error');
	            vm.addAlert(vm.labels.SaveError, 'error');
	            if (stateInfo.event) {
	                stateInfo.event.preventDefault();
	            }
	        };
	
	        /**
	         * - Helper method to execute success or error state processor
	         */
	        vm.updateAPIStatus = function() {
	            if (editedState === 'both') {
	                if (addAPIStatus === true && removeAPIStatus === true) {
	                    vm.processSuccessState();
	                }
	            } else if (editedState === 'addState') {
	                if (addAPIStatus === true) {
	                    vm.processSuccessState();
	                } else if (addAPIStatus === false) {
	                    vm.processErrorState();
	                }
	
	            } else if (editedState === 'removeState') {
	                if (removeAPIStatus === true) {
	                    vm.processSuccessState();
	                } else if (removeAPIStatus === false) {
	                    vm.processErrorState();
	                }
	
	            }
	
	        };
	
	
	        function updateMenuStatus(status) {
	            $rootScope.$broadcast('menuStatus', {
	                menu: 'categories',
	                status: status
	            });
	        }
	
	        /*
	         * Save method prepares the final payload.
	         * Makes service save call.
	         */
	        vm.save = function(e, toState, toParams) {
	            /* Remove the $$hashKey from the model objects. */
	            var payload = angular.copy(vm.category.associatedProducts);
	            /**
	             * - Payload will be generated from toBeRemovedProducts & newlyAddedProducts list.
	             * - Service calls will be for adding and removing.
	             * - angular.copy(newlyAddedProducts) : will have all data set for add service call
	             * - angular.copy(toBeRemovedProducts) : will have all data set for remove service call.
	             */
	            if (newlyAddedProducts.length > 0 && toBeRemovedProducts.length > 0) {
	                editedState = 'both';
	            }
	            if (isDirty) {
	                editedState = (editedState === 'both' ? 'both' : 'addState');
	                associateProductService.addProductsById($stateParams.id, payload)
	                    .then(function (res) {
	                        stateInfo = {
	                            to: toState,
	                            param: toParams
	                        };
	                        addAPIStatus = true;
	                        vm.updateAPIStatus();
	                    }, function(reason) {
	                        stateInfo = {
	                            to: toState,
	                            param: toParams,
	                            event: e
	                        };
	                        addAPIStatus = false;
	                        vm.updateAPIStatus();
	                    });
	            }
	            if (toBeRemovedProducts.length > 0) {
	                editedState = (editedState === 'both' ? 'both' : 'removeState');
	                associateProductService.removeProductsById($stateParams.id, angular.copy(toBeRemovedProducts))
	                    .then(function(response) {
	                        stateInfo = {
	                            to: toState,
	                            param: toParams
	                        };
	                        removeAPIStatus = true;
	                        vm.updateAPIStatus();
	                    }, function(reason) {
	                        stateInfo = {
	                            to: toState,
	                            param: toParams,
	                            event: e
	                        };
	                        removeAPIStatus = false;
	                        vm.updateAPIStatus();
	                    });
	            }
	        };
	        /**
	         * It checks the similarity between the original association list and the final
	         * payload generated. Returns true if they are same else false.
	         */
	        function checkSimilarity() {
	            /* TODO : Logic has to come in this place */
	            return false;
	        }
	        /**
	         * When user clicks on the 'Save Product' button, an event named 'explicitPageSave' gets broadcasted.
	         * A page has to listen to that event and do the page specific save functionality.
	         */
	        vm.explicitPageSave = function() {
	            if (isDirty || toBeRemovedProducts.length > 0) {
	                vm.save();
	            }
	        };
	
	        $scope.$on('explicitcatalogPageSave', function() {
	            /**
	             * If page contains data about an existing product
	             *   - Check if the page is dirty, then initiate the save call, else no need to save again.
	             *   - Even the isDirty flag is set to true, check if the original incoming list and the final payloads
	             *     are same or different.
	             */
	            if (isDirty && !checkSimilarity()) {
	                vm.save();
	            }
	
	        });
	
	        //This watch is for implicit save functionality
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.catalog.manageCatalogList' || toState.name === 'app.optionGroup.manageOptionGroupsList') {
	                return true;
	            } else if (isFormSaved) {
	                return true;
	            } else {
	                /**
	                 * Check if center panel is dirty.
	                 * Go for save, only when it is dirty or if it is for a new product.
	                 */
	                if (isDirty || toBeRemovedProducts.length > 0) {
	                    e.preventDefault();
	                    vm.save(e, toState, toParams);
	                } else {
	                    return true;
	                }
	            }
	
	        });
	        /****** Save functionality **************/
	
	        updateTreeOnLoad();
	
	        // Show filter Panel
	        vm.toggleProductView = function() {
	            var productView = document.querySelector('.mainProductContent');
	            angular.element(productView).addClass('showFilterPanel');
	        };
	        // Hide filter Panel
	        vm.hideFilterPanel = function() {
	            var productView = document.querySelector('.mainProductContent');
	            angular.element(productView).removeClass('showFilterPanel');
	        };
	        // Show search bar
	        vm.showSearchBar = function() {
	            var productView = document.querySelector('.details-search');
	            angular.element(productView).addClass('showSearchPanel');
	        };
	        // Hide Search Bar
	        vm.hideSearchBar = function() {
	            var productView = document.querySelector('.details-search');
	            angular.element(productView).removeClass('showSearchPanel');
	            vm.searchText = '';
	            vm.searchCategory(null, vm.searchText, 1);
	        };
	
	        function getAssociatedProducts() {
	            associationService.getProductsByCategory($stateParams.id).then(function (response) {
	                if (response && response.length > 0) {
	                    getProductsForCategory(response);
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        vm.goToListPage = function() {
	            const goToPath = catalogService.getPathToRedirect($state.current.name);
	            $state.go(`${goToPath}${fromState[0]}List`);
	        };
	
	        function getProductsForCategory(products) {
	            associationService.getProductsForCategory($stateParams.id).then(function (response) {
	                if (response) {
	                    for (var i = 0; i < response.length; i++) {
	                        for (var j = 0; j < products.length; j++) {
	                            if (products[j].Id === response[i][vm.prefix + 'ProductId__c']) {
	                                products[j].ClassificationId = response[i].Id;
	                                products[j].Sequence = response[i][vm.prefix + 'Sequence__c'];
	                                products[j].isSelected = true;
	                                break;
	                            }
	                        }
	                    }
	                    products.sort(function (a, b) {
	                        if (a.Sequence > b.Sequence) {
	                            return 1;
	                        }
	                        if (a.Sequence < b.Sequence) {
	                            return -1;
	                        }
	                        // a must be equal to b
	                        return 0;
	                    });
	                    existingProducts = products;
	                    vm.category.associatedProducts = products;
	                }
	            }, function (reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        vm.getSelectedItemsToDrag = function (list, item) {
	            item.selected = true;
	            return list.filter(function (item) {
	                return item.selected;
	            });
	        };
	
	        vm.onDragstart = function (list, event) {
	            list.dragging = true;            
	        };
	
	        vm.onMoved = function () {
	            vm.category.associatedProducts = vm.category.associatedProducts.filter(function (item) {
	                return !item.selected;
	            });
	        };
	
	        vm.getProductDetailsPageUrl = function (Id) {
	            var absUrl = $location.absUrl();
	            return absUrl.replace($location.$$path, '/app/product/' + Id + '/details');
	        };
	    };
	
	    productCategoryController.$inject = [
	        '$state',
	        '$scope',
	        '$rootScope',
	        'lodash',
	        '$stateParams',
	        'associationService',
	        'productService',
	        'systemConstants',
	        'i18nService',
	        'associateProductService',
	        'cpqAdminConstants',
	        'productConstants',
	        'catalogService',
	        'applicationService',
	        '$location',
	        'fromState'
	    ];
	
	    module.exports = productCategoryController;
	
	})();

/***/ }),
/* 496 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var productOptionService = function($q, $http, remoteService, systemConstants, productService) {
	        var prefix = systemConstants.nsPrefix || '';
	
	        function getProductsList(requestObj) {
	            var deferQ = $q.defer();
	            remoteService.getAllProducts(requestObj)
	                .then(function (response) {
	                    deferQ.resolve(response.ProductSOs);
	                },
	                    function (reason) {
	                        deferQ.reject(reason);
	                    });
	            return deferQ.promise;
	        }
	
	        function addProductsById(categoryID, payload) {
	            if (payload && payload.length > 0) {
	                var request = {
	                    ProductDOs: [],
	                    ProductClassificationSOs: []
	                };
	                var sequence = 1;
	                for (var i = 0; i < payload.length; i++) {
	                    var classification = {};
	                    if(payload[i].ClassificationId){
	                        classification.Id = payload[i].ClassificationId;
	                    }
	                    classification[prefix + 'ClassificationId__c'] = categoryID;
	                    classification[prefix + 'Sequence__c'] = sequence++;
	                    classification[prefix + 'ProductId__c'] = payload[i].Id;
	                    request.ProductClassificationSOs.push(classification);
	                }
	                return remoteService.associateCategories(request);
	            }
	        }
	
	        function removeProductsById(categoryID, payload) {
	            if (payload && payload.length > 0) {
	                var request = {
	                    ProductDOs: []
	                };
	                for (var i = 0; i < payload.length; i++) {
	                    request.ProductDOs.push({
	                        ProductSO: {
	                            Id: payload[i].Id
	                        },
	                        CategoryId: categoryID
	                    });
	                }
	                return remoteService.removeProductFromCategory(request);
	            }
	        }
	
	        var optionsService = {
	            getProductsList: getProductsList,
	            addProductsById: addProductsById,
	            removeProductsById: removeProductsById
	        };
	
	        return optionsService;
	    };
	
	    productOptionService.$inject = ['$q', '$http', 'remoteService', 'systemConstants', 'productService'];
	
	    module.exports = productOptionService;
	})();


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.catalog.associatedPriceList', [])
	        .service('associatedListService', __webpack_require__(498))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.catalog.manageCatalogAssociatedPriceList', {
	                parent: 'app.catalog',
	                url: '/manageCatalog/:id/associatedPriceList',
	                views: {
	                    'catalogContainer': {
	                        template: __webpack_require__(499),
	                        controller: __webpack_require__(500),
	                        controllerAs: 'vm'
	                    }
	                },
	                params: {
	                    productId: null,
	                    productName: null
	                },
	                resolve: {
	                    priceList: ['associatedListService', '$stateParams', function(associatedListService, $stateParams) {
	                        return associatedListService.getAllPriceLists({});
	                    }],
	                    categoryHierarchy: ['catalogService', '$stateParams', function(catalogService, $stateParams) {
	                        return catalogService.getCategoryHierarchy($stateParams.id);
	                    }],
	                    fromState: [ function() {
	                        return ['manageCatalog','Offering'];
	                    }]
	                }
	            })
	            .state('app.optionGroup.manageOptionGroupsAssociatedPriceList', {
	                parent: 'app.optionGroup',
	                url: '/manageOptionGroups/:id/associatedPriceList',
	                views: {
	                    'catalogContainer': {
	                        template: __webpack_require__(499),
	                        controller: __webpack_require__(500),
	                        controllerAs: 'vm'
	                    }
	                },
	                params: {
	                    productId: null,
	                    productName: null
	                },
	                resolve: {
	                    priceList: ['associatedListService', '$stateParams', function(associatedListService, $stateParams) {
	                        return associatedListService.getAllPriceLists({});
	                    }],
	                    categoryHierarchy: ['catalogService', '$stateParams', function(catalogService, $stateParams) {
	                        return catalogService.getCategoryHierarchy($stateParams.id);
	                    }],
	                    fromState: [ function() {
	                        return ['manageOptionGroups','Option Group'];
	                    }]
	                } 
	            });
	        }]);
	})();


/***/ }),
/* 498 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var associatedPriceListService = function($q, $http, remoteService) {
	
	
	        function preparePriceList(rawObj) {
	            var response = rawObj.PriceListDOs;
	            var priceList = [];
	            if (angular.isDefined(response)) {
	                for (var item in response) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        priceList.push(response[item].PriceListSO);
	                    }
	                }
	            }
	            return priceList;
	        };
	
	        function getPriceListsAssociatedToCategory(requestObj) {
	            return remoteService.getPriceListsAssociatedToCategory(requestObj);
	        }
	
	        function fnGetPriceList(requestObject) {
	            var requestObject = {
	                SearchString: requestObject.SearchString || "",
	                NumberOfRecordsPerChunk: requestObject.NumberOfRecordsPerChunk || 20,
	                ChunkNumber: requestObject.ChunkNumber || 1
	            };
	            var defer = $q.defer();
	            remoteService.getAllPriceLists(requestObject)
	                .then(function(response) {
	                    defer.resolve(preparePriceList(response));
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	
	            return defer.promise;
	        }
	
	        function removeCategory(cId, pId) {
	            return remoteService.removeCategoryFromPriceList(cId, pId);
	        }
	
	        function associateCategory(cId, pId) {
	            return remoteService.associateCategoryToPriceList(cId, pId);
	        }
	
	        var associatedListService = {
	            getPriceListsAssociatedToCategory: getPriceListsAssociatedToCategory,
	            getAllPriceLists: fnGetPriceList,
	            removeCategory: removeCategory,
	            associateCategory: associateCategory
	        };
	
	        return associatedListService;
	    };
	
	    associatedPriceListService.$inject = [
	        '$q',
	        '$http',
	        'remoteService'
	    ];
	
	    module.exports = associatedPriceListService;
	})();


/***/ }),
/* 499 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <!-- Angular UI-Bootsrap alert module -->\n    <div class=\"asscoiated-PriceList\">\n        <div class=\"left-tree tree-view left-panel\" class=\"setWithCent\" resizable r-directions=\"[ 'right']\" r-flex=\"true\">\n            <header>\n                <h4>{{vm.treeHeader}}</h4>\n                <div class=\"search\">\n                    <form ng-submit=\"vm.searchCategory(null, vm.searchText, 1)\" novalidate>\n                        <div class=\"search-input-container\">\n                            <div class=\"input-group\">\n                                <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required drop-disable/>\n                                <label class=\"ng-binding\">Search</label>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </header>\n            <div class=\"list-other-Panel list-table\">\n                <!-- price lists -->\n                <div class=\"associated-price-list\">\n                    <table>\n                        <tbody class=\"list\">\n                            <tr data-ng-repeat=\"list in vm.priceLists track by list.Id\" ng-click=\"vm.onListClick($index, 'activeList')\" \n                                ng-class=\"{'activeList': $index == vm.activeList, 'drag-disabled': list.dragDisable, 'selected': list.selected, 'disableColor':list.dragDisable }\" dnd-draggable=\"vm.getSelectedItemsToDrag(vm.priceLists, list)\" \n                                dnd-droppable-in=\".dropzone\" dnd-effect-allowed=\"copy\" dnd-disable-if=\"list.dragDisable\" dnd-selected=\"list.selected = !list.selected\">\n                                <td>\n                                    {{ list.Name }}\n                                </td>\n                            </tr>\n                            <tr data-ng-if=\"vm.priceLists.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                                <td>\n                                    {{vm.labels.NoMatchingPL}} <span><b>{{vm.searchedStr}}</b></span>\n                                </td>\n                            </tr>\n                            <tr data-ng-if=\"vm.priceLists.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                                <td>\n                                    {{vm.labels.MaxSQLSizeExceedMessage}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class=\"pagination cf\">\n                <div class=\"next-prev\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getPriceList('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getPriceList('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <!-- Tree container directive -->\n        <div class=\"assigned-PriceList\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"2000\">{{alert.msg}}</uib-alert>\n            <!-- Table header start here -->\n            <div class=\"page-title\">\n                <div class=\"image-action\">{{vm.labels.Action}}</div>\n                <div class=\"product-heirarchy\">{{vm.labels.Name}}</div>\n                <div class=\"product-heirarchy\">{{vm.labels.Description}}</div>\n                <div class=\"product-heirarchy text-center\">{{vm.labels.Active}}</div>\n                <div class=\"product-heirarchy\">{{vm.labels.CreatedBy}}</div>\n            </div>\n            <!-- Table header ends here -->\n            <div class=\"dnd-container \">\n                <ul dnd-list=\"vm.finalData\" dnd-drop=\"vm.addAssociateCategory(event, index, item)\">\n                    <li ng-repeat=\"item in vm.finalData\" dnd-moved=\"vm.finalData.splice($index, 1)\" dnd-selected=\"vm.finalData.selected=item\" ng-class=\"{ 'selected': vm.finalData.selected===item}\">\n                        <!-- Each breadcrumb design starts here -->\n                        <div class=\"category-breadcrumb-list\">\n                            <div class=\"image-action\">\n                                <i class=\"material-icons close-icon\" data-ng-click=\"vm.removeCategory($index, item)\">clear</i>\n                            </div>\n                            <div class=\"product-heirarchy\">\n                                <a ng-bind-html=\"item.Name\" href=\"{{vm.getPriceListDetailsPageUrl(item.Id)}}\" target=\"_blank\" class=\"clickable-item\"></a>\n                            </div>\n                            <div class=\"product-heirarchy\">\n                                {{item[vm.prefix + 'Description__c']}}\n                            </div>\n                            <div class=\"product-heirarchy text-center\">\n                                <span ng-bind-html=\"vm.getFormattedContent(item[vm.prefix + 'Active__c'])\"></span>\n                                <!-- {{item.Active__c}} -->\n                            </div>\n                            <div class=\"product-heirarchy\">\n                                {{item.CreatedBy.Name}}\n                            </div>\n                        </div>\n                        <!-- Each breadcrumb design ends here -->\n                    </li>\n                </ul>\n            </div>\n            <div class=\"pagination-container text-center pagination-block \" data-ng-if=\"vm.finalData.length> 0\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableAssociatedLeftBtn\" data-ng-click=\"vm.getAssociatedProduct('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableAssociatedRightBtn\" data-ng-click=\"vm.getAssociatedProduct('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                    </button>\n                </div>\n            </div>\n            <div class=\"catalog-aspl-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">Save</a>\n                </div>\n            </div>\n            <a data-ui-sref=\"app.product.associations({'id': vm.$stateParams.productId })\" class=\"toast\" data-ng-if=\"vm.$stateParams.productId\">Go Back to \"{{vm.$stateParams.productName}}\"</a>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 500 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var catalogPriceListController = function($state, $scope, $rootScope, $templateCache, _, $stateParams, systemConstants, i18nService, priceList,
	        associatedListService, applicationService, categoryHierarchy, catalogConstants, $location, fromState, catalogService) {
	
	        var vm = this;
	
	        vm.treeHeader = "All Price List"
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.finalData = [];
	        vm.$stateParams = $stateParams;
	        vm.pageNumber = 0;
	        vm.pageAssociatedNumber = 0;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = false;
	        vm.disableAssociatedLeftBtn = true;
	        vm.disableAssociatedRightBtn = false;
	        var pageNumber = 1;
	        var pageAssociatedNumber = 1;
	
	        /**
	         * Get Selected Product
	         */
	        vm.catalogDetails = categoryHierarchy;
	
	
	        /*Get All Price List Values*/
	        vm.priceLists = priceList;
	
	        vm.searchCategory = function(e, searchText, pageNumber) {
	            getAllPriceList(null, searchText, pageNumber);
	        };
	
	
	        /*Next & Previous Button Change Click*/
	
	        vm.getPriceList = function(type) {
	            if (type === 'next') {
	                pageNumber = pageNumber + 1;
	                vm.pageNumber++;
	                if (vm.pageNumber !== 0) {
	                    vm.disableLeftBtn = false;
	                }
	                getAllPriceList(null, null, pageNumber);
	            } else {
	                pageNumber = pageNumber - 1;
	                vm.pageNumber--;
	                if (vm.pageNumber === 0) {
	                    vm.disableLeftBtn = true;
	                }
	                getAllPriceList(null, null, pageNumber);
	            }
	        };
	
	        /*Next & Previous Button Change Click*/
	
	        vm.getAssociatedProduct = function(type) {
	            if (type === 'next') {
	                pageAssociatedNumber = pageAssociatedNumber + 1;
	                vm.pageAssociatedNumber++;
	                if (vm.pageAssociatedNumber !== 0) {
	                    vm.disableAssociatedLeftBtn = false;
	                }
	                getAssociatedPriceList();
	                if (vm.finalData.length >= catalogConstants.middlePanelChunkSize) {
	                    vm.disableAssociatedRightBtn = false;
	                } else {
	                    vm.disableAssociatedRightBtn = true;
	                }
	            } else {
	                pageAssociatedNumber = pageAssociatedNumber - 1;
	                vm.pageAssociatedNumber--;
	                if (vm.pageAssociatedNumber === 0) {
	                    vm.disableAssociatedLeftBtn = true;
	                }
	                getAssociatedPriceList();
	            }
	        };
	
	        /**
	         * Get All Price List Values Based on Chunk
	         */
	
	        function getAllPriceList(e, searchText, pageNo) {
	            pageNumber = pageNo;
	            var requestObject = {
	                ChunkNumber: pageNumber,
	                NumberOfRecordsPerChunk: catalogConstants.treePanelItemsPerChunk,
	                SearchString: vm.searchText || ''
	            };
	            associatedListService.getAllPriceLists(requestObject)
	                .then(function(response) {
	                    vm.priceLists = response;
	                    vm.isMaxSQLSizeExceed = false;
	                    if (vm.finalData) {
	                        for (var j = 0; j < vm.finalData.length; j++) {
	                            var newItem = vm.finalData[j];
	                            disableAssociatedNode(newItem);
	                        }
	                        if (pageNumber === 1) {
	                            vm.disableLeftBtn = true;
	                        }
	                        if (vm.priceLists.length < catalogConstants.treePanelItemsPerChunk) {
	                            vm.disableRightBtn = true;
	                        } else {
	                            vm.disableRightBtn = false;
	                        }
	                        if (vm.priceLists.length === 0) {
	                            vm.searchedStr = vm.searchText;
	                        }
	                    }
	                    document.querySelector('.associated-price-list').scrollTop = 0;
	                    vm.selectedNodes = []; //To clear selected nodes from left panel
	                }, function(reason) {
	                    /* 
	                     * - If exception is of type 'Maximum SOQL offset allowed is 2000', then show a message to
	                     * user 'Please refine your search criteria to find your product'.
	                     * - Else show the exception message to the user as it is.
	                     */
	                    if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                        vm.priceLists = [];
	                        vm.isMaxSQLSizeExceed = true;
	                    } else {
	                        applicationService.showErrorMessage(reason);
	                    }
	                    vm.disableRightBtn = true;
	
	                });
	        };
	
	
	
	        /**
	         * Get Associated Price List values based on product
	         */
	
	        getAssociatedPriceList(true);
	
	        function getAssociatedPriceList() {
	            var requestObject = {
	                CategoryId: vm.catalogDetails[vm.prefix + 'HierarchyId__c'],
	                ChunkNumber: pageAssociatedNumber,
	                NumberOfRecordsPerChunk: catalogConstants.middlePanelChunkSize,
	                SearchString: vm.searchString || ''
	            };
	            associatedListService.getPriceListsAssociatedToCategory(requestObject)
	                .then(function(response) {
	                    var resObj = response.PriceListDOs;
	                    if (resObj.length > 0) {
	                        traverseData(resObj);
	                        disableLeafNodeAfterChunk();
	                    } else {
	                        vm.disableAssociatedRightBtn = true;
	                        pageAssociatedNumber--;
	                        vm.pageAssociatedNumber--;
	                    }
	                    document.querySelector('.dnd-container').scrollTop = 0;
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        };
	
	        function traverseData(array) {
	            vm.finalData = [];
	            for (var i = 0; i < array.length; i++) {
	                var node = array[i];
	                vm.finalData.push(node.PriceListSO);
	                if (vm.finalData.length >= catalogConstants.middlePanelChunkSize) {
	                    vm.disableAssociatedRightBtn = false;
	                } else {
	                    vm.disableAssociatedRightBtn = true;
	                }
	            }
	        };
	
	        vm.getFormattedContent = function(isActive) {
	            var modifiedValue = '';
	
	            if (isActive) {
	                modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	            } else {
	                modifiedValue = "<i class='material-icons show'>check_circle</i>";
	            }
	            return modifiedValue;
	        };
	
	        /**
	         *  Add Associated Category to Price List on Leaf drop in Middle Container
	         */
	        vm.addAssociateCategory = function(e, index, items) {
	            for (var i = 0; i < items.length; i++) {
	                (function(j) {
	                    var ClassificationName = vm.catalogDetails[vm.prefix + 'HierarchyId__c'],
	                        PriceListID = items[j].Id;
	                    associatedListService.associateCategory(ClassificationName, PriceListID)
	                        .then(function(response) {
	                            vm.finalData.splice(index, 0, items[j]);
	                            index++;
	                            // add the dragDisable attri after drag completeted
	                            disableAssociatedNode(items[j]);
	                            if (j === items.length - 1) {
	                                //execute this block only if the last item
	                                if (pageAssociatedNumber > 1) {
	                                    vm.disableAssociatedLeftBtn = false;
	                                }
	                                if (vm.finalData.length >= catalogConstants.middlePanelChunkSize) {
	                                    vm.disableAssociatedRightBtn = false;
	                                } else {
	                                    vm.disableAssociatedRightBtn = true;
	                                }
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                })(i);
	            }
	        };
	
	        /**
	         * Disable the Leaf node which are associated to category  after new data will come
	         */
	
	        function disableLeafNodeAfterChunk() {
	            if (vm.finalData) {
	                for (var j = 0; j < vm.finalData.length; j++) {
	                    var newItem = vm.finalData[j];
	                    disableAssociatedNode(newItem);
	                }
	            }
	        }
	
	        /**
	         * Disable the leaf in the All Price List Panel if already associated
	         */
	        function disableAssociatedNode(item) {
	            angular.forEach(vm.priceLists, function(childItem, childKey) {
	                if (item.Id == childItem.Id) {
	                    childItem.dragDisable = true;
	                    delete childItem['selected'];
	                }
	            });
	        };
	
	        /**
	         * Enable the leaf in the All Price List Panel if not associated
	         */
	
	        function enableAssociatedNode(item) {
	            angular.forEach(vm.priceLists, function(childItem, childKey) {
	                if (item.Id == childItem.Id) {
	                    childItem.dragDisable = false;
	                }
	            });
	        }
	
	        /**
	         * Remove price list associated to Category
	         */
	
	        vm.removeCategory = function(index, item) {
	            var ClassificationName = vm.catalogDetails[vm.prefix + 'HierarchyId__c'],
	                PriceListID = item.Id;
	            associatedListService.removeCategory(ClassificationName, PriceListID)
	                .then(function(response) {
	                    // remove the dragDisable attri after remove completeted
	                    enableAssociatedNode(item);
	                    vm.finalData.splice(index, 1);
	                    getAssociatedPriceList();
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        };
	
	        /**
	         * Show search bar
	         */
	        vm.showSearchBar = function() {
	            var productView = document.querySelector('.details-search');
	            angular.element(productView).addClass('showSearchPanel');
	        };
	        /**
	         *  Hide Search Bar
	         */
	        vm.hideSearchBar = function() {
	            var productView = document.querySelector('.details-search');
	            angular.element(productView).removeClass('showSearchPanel');
	            vm.searchText = '';
	            getAllPriceList(null, vm.searchText, 1);
	        };
	
	        vm.explicitPageSave = function() {};
	        vm.goToListPage = function() {
	            const goToPath = catalogService.getPathToRedirect($state.current.name);
	            $state.go(`${goToPath}${fromState[0]}List`); 
	        };
	
	        vm.getSelectedItemsToDrag = function(list, item) {
	            item.selected = true;
	            return list.filter(function(item) { return item.selected; });
	        };
	
	        vm.getPriceListDetailsPageUrl = function(Id) {
	            var absUrl = $location.absUrl();
	            return absUrl.replace($location.$$path, '/app/priceList/' + Id + '/details');
	        };
	    };
	
	    catalogPriceListController.$inject = [
	        '$state',
	        '$scope',
	        '$rootScope',
	        '$templateCache',
	        'lodash',
	        '$stateParams',
	        'systemConstants',
	        'i18nService',
	        'priceList',
	        'associatedListService',
	        'applicationService',
	        'categoryHierarchy',
	        'catalogConstants',
	        '$location',
	        'fromState',
	        'catalogService'
	    ];
	
	    module.exports = catalogPriceListController;
	
	})();

/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.catalog.associatedCategory', [])
			.config(['$stateProvider', function($stateProvider) {
				$stateProvider.state('app.catalog.manageCatalogAssociatedCategory', {
					parent: 'app.catalog',
					url: '/manageCatalog/:id/associatedCategory',
					views: {
						'catalogContainer': {
							template: __webpack_require__(502),
							controller: __webpack_require__(503),
							controllerAs: 'vm'
						}
					},
					params: {
	                    productId: null,
	                    productName: null
	                },
					resolve: {
						treeData: ['associatedCategoryService', function(associatedCategoryService) {
							var request = {
								ChunkNumber: 1,
								NumberOfCategoriesPerChunk: 25,
								SearchString: '',
								PriceListId: null,
								Types: ["Offering","Both"],
	            				HasZeroProductCount: false
							};
							return associatedCategoryService.getTreeData(request);
						}],
						categoryHierarchy: ['catalogService', '$stateParams', function (catalogService, $stateParams) {
						    return catalogService.getCategoryHierarchy($stateParams.id);
						}],
						fromState: [ function() {
	                        return ['manageCatalog','Offering'];
	                    }]
					}
				})
				.state('app.optionGroup.manageOptionGroupsAssociatedCategory', {
					parent: 'app.optionGroup',
					url: '/manageOptionGroups/:id/associatedCategory',
					views: {
						'catalogContainer': {
							template: __webpack_require__(502),
							controller: __webpack_require__(503),
							controllerAs: 'vm'
						}
					},
					params: {
	                    productId: null,
	                    productName: null
	                },
					resolve: {
						treeData: ['associatedCategoryService', function(associatedCategoryService) {
							var request = {
								ChunkNumber: 1,
								NumberOfCategoriesPerChunk: 25,
								SearchString: '',
								PriceListId: null,
								Types: ["Option Group","Both"],
	            				HasZeroProductCount: false
							};
							return associatedCategoryService.getTreeData(request);
						}],
						categoryHierarchy: ['catalogService', '$stateParams', function (catalogService, $stateParams) {
						    return catalogService.getCategoryHierarchy($stateParams.id);
						}],
						fromState: [ function() {
	                        return ['manageOptionGroups','Option Group'];
	                    }]
					}
				});
			}])
			.service('associatedCategoryService', __webpack_require__(505));
	})();


/***/ }),
/* 502 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"associated-category-page\" data-ng-class=\"vm.isRightPanelVisible?'categorySlideRight-tree-panel':'categorySlideLeft-tree-panel'\">\n        <!-- Tree container directive -->\n        <!-- It shows a herarchial tree data structure -->\n        <!-- Provides drag-n-drop from the tree node / leaf node to the left panel or center panel -->\n        <div class=\"pull-left left-tree tree-view left-panel\" class=\"setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <header>\n                <h4>{{vm.treeHeader}}</h4>\n            </header>\n            <div class=\"tree\">\n                <div class=\"list-other-Panel\">\n                    <ul>\n                        <li ng-repeat=\"item in vm.categoryHierarchy\" ng-include=\"'catalog-associated-category-left-list.html'\"></li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n        <!-- Tree container directive -->\n        <div class=\"assigned-associated-categories\">\n            <!-- Angular UI-Bootsrap alert module -->\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"2000\">{{alert.msg}}</uib-alert>\n            <!-- Table header start here -->\n            <div class=\"page-title\">\n                <div class=\"image-action\">{{vm.labels.Action}}</div>\n                <div class=\"product-heirarchy\">{{vm.labels.CatalogHierarchy}}</div>\n                <div class=\"category-image\">{{vm.labels.CatalogImage}}</div>\n            </div>\n            <!-- Table header ends here -->\n            <div class=\"dnd-container\">\n                <ul dnd-list=\"vm.category.associatedCategories\" dnd-drop=\"vm.onDropCategory(event, index, item)\">\n                    <!-- The dnd-draggable directive makes an element draggable and will\n                    transfer the object that was assigned to it. If an element was\n                    dragged away, you have to remove it from the original list\n                    yourself using the dnd-moved attribute -->\n                    <!-- dnd-draggable=\"item\" dnd-effect-allowed=\"move\" -->\n                    <li ng-repeat=\"item in vm.category.associatedCategories\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" dnd-moved=\"vm.category.associatedCategories.splice($index, 1)\" dnd-selected=\"vm.category.selected = item\" ng-class=\"{'selected': vm.category.selected === item}\" dnd-type=\"item.nodeType\">\n                        <!-- Each breadcrumb design starts here -->\n                        <div class=\"category-breadcrumb-list\">\n                            <div class=\"image-action\">\n                                <a href=\"\" class=\"delete\" ng-click=\"vm.removeCategory($index, item['ClsHierarchySO'].Id, item['ClsHierarchySO'].Name)\">\n                                    <i class=\"material-icons\">clear</i>\n                                </a>\n                            </div>\n                            <div class=\"product-heirarchy\">\n                                <span>{{item['ClsHierarchySO'].Name}}</span>\n                            </div>\n                            <div class=\"category-image\">\n                                <img class=\"image\" ng-src=\"{{'/servlet/servlet.FileDownload?file='+item.ClsHierarchySO[vm.prefix + 'LargeIconId__c']}}\" alt='Category Image' ng-if=\"item['ClsHierarchySO'][vm.prefix + 'LargeIconId__c']\" />\n                                <span class=\"fa fa-image\" ng-if=\"!item.ClsHierarchySO[vm.prefix + 'LargeIconId__c']\"></span>\n                            </div>\n                        </div>\n                        <!-- Each breadcrumb design ends here -->\n                    </li>\n                </ul>\n            </div>\n            <div class=\"associated-catagory-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">Save</a>\n                </div>\n            </div>\n            <a data-ui-sref=\"app.product.associations({'id': vm.stateParams.productId })\" class=\"toast\" data-ng-if=\"vm.stateParams.productId\">Go Back to \"{{vm.stateParams.productName}}\"</a>\n        </div>\n        <div class=\"treePanelToSlide\" ng-click=\"vm.isRightPanelVisible=false\">\n            <i class=\"material-icons\">keyboard_arrow_left</i>\n        </div>\n        <div class=\"category-tree-panel\">\n            <div class=\"tree-title\">\n                <header>\n                    <i class=\"material-icons\" style=\"float:right\" data-ng-click=\"vm.isRightPanelVisible=true\" aria-hidden=\"true\" role=\"button\" tabindex=\"0\">clear</i>\n                    <h4>{{vm.treeHeader}}</h4>\n                    <div class=\"search\" style=\"margin:10px 0;\">\n                        <form ng-submit=\"vm.searchCategory(null, vm.searchText, 1);\" novalidate>\n                            <div class=\"search-input-container\">\n                                <div class=\"input-group\">\n                                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required drop-disable/>\n                                    <label class=\"ng-binding\">Search</label>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </header>\n            </div>\n            <div data-ng-if=\"vm.treeData.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{vm.labels.NoMatchingOptions}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.treeData.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <catalog-tree-container data=\"vm.treeData\" header-text=\"vm.treeHeader\" page-type='vm.type' get-node-details=\"vm.getSelectedNodeDetails\" detail-of-selected-node=\"vm.nodeDetails\" search=\"vm.searchCategory\" selected-node=\"vm.selectedCategory\" enable-detail-panel=\"true\" node-children=\"vm.nodeChildren\" tooltip-field=\"vm.tooltipField\" node-label=\"vm.treeLabel\" options=\"vm.options\" expand-collapse=\"vm.expandCollapse\" search-text=\"vm.searchText\">\n            </catalog-tree-container>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var catalogCategoryController = function($state, $scope, $stateParams, $templateCache, $mdDialog, _,
	        systemConstants, i18nService, applicationService, catalogService, associatedCategoryService, associateProductService, categoryHierarchy, treeData, fromState, catalogConstants) {
	        $templateCache.put('catalog-associated-category-left-list.html', __webpack_require__(504));
	
	        var vm = this;
	
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.stateParams = $stateParams;
	
	        /** ------------ Left panel design Begin -------------- **/
	
	        vm.categoryHierarchy = [];
	        vm.treeHeader = ($state.current.name.indexOf('catalog') !== -1)? vm.labels.CategoryHierarchy: vm.labels.OptionGroupHierarchy ;
	
	        /**
	         * - Load the left side tree Data
	         */
	        function loadLeftSideItems() {
	            vm.categoryHierarchy = [];
	            var hierarchySo = catalogService.getHierarchy();
	            if (hierarchySo) {
	                var categoryId = hierarchySo[vm.prefix + 'HierarchyId__r'].Id;
	                catalogService.getFullHierarchyForCategory(categoryId)
	                    .then(function(response) {
	                        vm.categoryHierarchy = response;
	                        getParentTrace(vm.categoryHierarchy, vm.stateParams.id);
	                        updateTreeOnLoad();
	                    }, function(error) {
	                        vm.categoryHierarchy = [];
	                    });
	            } else {
	                /* Load the details one more time */
	                var path = $location.url(),
	                id = $state.current.name.indexOf('app/catalog') !== -1 ? path.split('/app/catalog/')[1] : path.split('/app/optionGroup/')[1];
	                catalogService.getCategoryHierarchy(id)
	                    .then(function(response) {
	                        var hierarchyId = response[vm.prefix + 'HierarchyId__r'].Id;
	                        catalogService.getFullHierarchyForCategory(hierarchyId)
	                            .then(function(response) {
	                                vm.categoryHierarchy = response.ChildCategoryDOs;
	                                getParentTrace(vm.categoryHierarchy, vm.stateParams.id);
	                            }, function(error) {
	                                vm.categoryHierarchy = [];
	                            });
	                    });
	            }
	        }
	        loadLeftSideItems();
	
	        /**
	         * - Expand the tree 
	         */
	        vm.expandLeftPanel = function(item) {
	            item.collapse = !item.collapse;
	        };
	
	        /**
	         * - This method id used for goto the details page while click the left panle tree lable
	         * - Should be product count equal zero
	         */
	        vm.gotoDetailsPage = function(item) {
	            if (item.ClsHierarchySO && ((item.ClsHierarchySO[vm.prefix + 'ProductCount__c'] === 0 && item.ClsHierarchySO[vm.prefix + 'IsLeaf__c'] === 'Yes') || item.ClsHierarchySO[vm.prefix + 'IsLeaf__c'] == 'No')) {
	                const goToPath = catalogService.getPathToRedirect($state.current.name);
	                    $state.go(`${goToPath}${fromState[0]}AssociatedCategory`, {
	                        id: item.ClsHierarchySO.Id
	                    });
	            }
	        };
	
	        /**
	         * Out of the tree data model, this method finds out the entire heirarchy of the selected leaf node.
	         * Traced backward from selected leaf node up towards its parent.
	         */
	        function getParentTrace(obj, nodeId) {
	            var node = {};
	            if (nodeId) {
	                for (var item = 0; item < obj.length; item++) {
	                    if (obj[item].ClsHierarchySO.Id === nodeId) {
	                        obj[item].collapse = true;
	                        node = obj[item];
	                        getParentTrace(vm.categoryHierarchy, node.ClsHierarchySO[vm.prefix + 'AncestorId__c']);
	                    } else if (obj[item].ChildCategoryDOs) {
	                        getParentTrace(obj[item].ChildCategoryDOs, nodeId);
	                    }
	                }
	            }
	        }
	
	        /**
	         * Updates the tree data model on which node or leaf is selected.
	         * Adds 'isSelected' property to the element.
	         */
	        function updateTree(array, nodeName, isSelected) {
	            _.each(array, function(node) {
	                if (node.ClsHierarchySO.Name === nodeName) {
	                    node.isSelected = isSelected;
	                    return;
	                } else if (node[vm.nodeChildren]) {
	                    updateTree(node[vm.nodeChildren], nodeName, isSelected);
	                }
	            });
	        }
	
	        /**
	         * - Makes the already associated categories as not selectable on right side tree on page load activity.
	         */
	        function updateTreeOnLoad() {
	            if (vm.categoryHierarchy[0].ChildCategoryDOs.length) {
	                for (var key = 0; key < vm.categoryHierarchy[0].ChildCategoryDOs.length; key++) {
	                    traverseChildHierarchy(vm.categoryHierarchy[0].ChildCategoryDOs);
	                }
	            } else {
	                updateTree(vm.treeData, vm.categoryHierarchy[0].ClsHierarchySO.Name, true);
	            }
	        }
	
	        /**
	         * - To read all child of the category hierarchy for get the name of the category (Left Panel)
	         */
	        function traverseChildHierarchy(ChildCategories) {
	            ChildCategories.forEach(function(category) {
	                if (category.ChildCategoryDOs && category.ChildCategoryDOs.length) {
	                    traverseChildHierarchy(category.ChildCategoryDOs);
	                } else {
	                    updateTree(vm.treeData, category.ClsHierarchySO.Name, true);
	                }
	            });
	        }
	
	
	        /** ------------ Left panel design End -------------- **/
	
	        /** ------------ Middle panel design Begin -------------- **/
	
	        /**
	         * - Parent data model for categories controller.
	         * - View uses this data model to render bread-crumb
	         */
	        vm.category = {
	            selected: null,
	            associatedCategories: []
	        };
	
	        /**
	         * - Get Associated Category list
	         */
	        function getCategoryDetails() {
	            var categoryHierarchyId = vm.stateParams.id;
	            categoryHierarchyId = categoryHierarchyId.substring(0, categoryHierarchyId.length - 3)
	            associatedCategoryService.getCategoryDetails(categoryHierarchyId)
	                .then(function(response) {
	                    vm.category.associatedCategories = prepareAssociatedCategoryForDisplay(response);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	        getCategoryDetails();
	
	        function prepareAssociatedCategoryForDisplay(associatedCategories) {
	            if (associatedCategories && associatedCategories.length) {
	                var index, associatedCategoriesLength = associatedCategories.length;
	                for (index = 0; index < associatedCategoriesLength; index++) {
	                    associatedCategories[index].isSelected = true;
	                }
	            }
	            return associatedCategories;
	        }
	
	        /** ------------ Middle panel design End -------------- **/
	
	        /** ------------ Right panel design Begin ------------- **/
	
	        vm.treeLabel = vm.prefix + 'Label__c';
	        vm.tooltipField = 'Name';
	        vm.nodeChildren = 'ChildCategoryDOs';
	        vm.type = 'catalog-associated-category';
	        vm.isRightPanelVisible = true;
	
	        vm.expandCollapse = function() {
	            vm.isRightPanelVisible = true;
	        };
	
	        /**
	         * - User can search categories on right side tree panel. This method gets called when user presses enter key
	         * - on search box.
	         */
	        vm.searchCategory = function(priceListValue, searchText, pageNumber) {
	            associatedCategoryService.getTreeData({
	                PriceListId: null,
	                ChunkNumber: pageNumber,
	                SearchString: searchText || '',
	                NumberOfCategoriesPerChunk: 25,
	                Types: [fromState[1],"Both"],
	                HasZeroProductCount: false
	            }).then(function(response) {
	                vm.treeData = response.CategoryNodeDOs;
	                vm.isMaxSQLSizeExceed = false;
	                /**
	                 * Call on page load to update the tree with selectable node available.
	                 */
	                if (vm.treeData.length === 0) {
	                    vm.searchedStr = vm.searchText;
	                }
	                updateTreeOnLoad();
	                document.querySelector('.tree').scrollTop = 0;
	            }, function(reason) {
	                vm.showLoader = false;
	                /* 
	                 * - If exception is of type 'Maximum SOQL offset allowed is 2000', then show a message to
	                 * user 'Please refine your search criteria to find your product'.
	                 * - Else show the exception message to the user as it is.
	                 */
	                if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                    vm.treeData = [];
	                    vm.isMaxSQLSizeExceed = true;
	                } else {
	                    applicationService.showErrorMessage(reason);
	                }
	
	            });
	        };
	
	        /**
	         * Adds a category to the breadcrumb data model, once user drops a leaf node in the center panel
	         */
	        vm.onDropCategory = function(event, index, node) {
	            if (node.isSelected) {
	                return moveCategory(index, node);
	            } else {
	                addCategory(index, node);
	            }
	        };
	
	        function addCategory(index, node) {
	            var request = { CategoryDOs: [] },
	                categoryID = node.ClsHierarchySO.Id;
	            request.CategoryDOs.push({ HierarchyId: vm.catalogDetails.Id });
	            request.CategoryHierarchySO = associatedCategoryService.prepareCategoryForCreate(node);
	            // Create New category
	            associatedCategoryService.createCategory(request).then(function(response) {
	                if (response && response.CategoryDOs.length > 0) {
	                    var HierarchyId = response.CategoryDOs[0].HierarchyId;
	                    node.isSelected = true;
	                    node.ClsHierarchySO.Id = HierarchyId;
	                    if (node.ClsHierarchySO && node.ClsHierarchySO[vm.prefix + 'ProductCount__c'] > 0) {
	                        // Get all associated product to old category
	                        associatedCategoryService.getProductsByCategory(categoryID).then(function(response) {
	                            var associateProducts = response
	                            if (associateProducts.length) {
	                                // Associate all the product to new category
	                                associateProductService.addProductsById(HierarchyId, associateProducts).then(function(res) {
	                                    vm.category.associatedCategories.splice(0, 0, node);
	                                    // Reload the left side panel
	                                    loadLeftSideItems();
	                                }, function(reason) {
	                                    applicationService.showErrorMessage(reason);
	                                })
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                    } else {
	                        vm.category.associatedCategories.splice(0, 0, node);
	                        // Reload the left side panel
	                        loadLeftSideItems();
	                    }
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        function moveCategory(index, node) {
	            var category = node;
	            index--;
	            if (vm.category.associatedCategories && vm.category.associatedCategories.length > 1) {
	                var newLocationCategoryID = null,
	                    categoryToMoveID;
	                if (index >= 0) {
	                    newLocationCategoryID = vm.category.associatedCategories[index].ClsHierarchySO.Id;
	                }
	                categoryToMoveID = category.ClsHierarchySO.Id;
	                associatedCategoryService.reorderCategories(categoryToMoveID, newLocationCategoryID).then(function(response) {
	                    // Reload the left side panel
	                    loadLeftSideItems();
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            }
	            return node;
	        }
	
	        /**
	         * - This method is used for remove a category from association  
	         */
	        vm.removeCategory = function(index, categoryID, categoryName) {
	            if (categoryID) {
	                associatedCategoryService.removeCategoryHierarchies([categoryID]).then(function(response) {
	                    if (response) {
	                        vm.category.associatedCategories.splice(index, 1);
	                        updateTree(vm.treeData, categoryName, false);
	                        // Reload the left side panel
	                        loadLeftSideItems();
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else {
	                vm.category.associatedCategories.splice(index, 1);
	            }
	        }
	
	        /** ------------ Right panel design End ------------- **/
	
	        /** ------------ Create new category Model Begin ------ **/
	
	        /**
	         * - Get Seleted Product details
	         */
	        vm.catalogDetails = categoryHierarchy;
	        vm.treeData = treeData.CategoryNodeDOs;
	
	        function addCategories() {
	            $mdDialog.show({
	                controller: __webpack_require__(393),
	                template: __webpack_require__(394),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                locals: {
	                    catalogTypes: [fromState[1],"Both"]
	                },
	                bindToController: true,
	                resolve: {
	                    data: function() {
	                        return vm.treeData
	                    },
	                    currentCategory: function() {
	                        return vm.catalogDetails;
	                    }
	                }
	            }).then(function(response) {
	                if (response) {
	                    $state.reload();
	                }
	            });
	        };
	
	        $scope.$on(catalogConstants.newCategory, function() {
	            addCategories();
	        });
	
	        $scope.$on(catalogConstants.newOptionGroup, function() {
	            addCategories();
	        });
	
	        /** ------------ Create new category Model End ------ **/
	
	        vm.goToListPage = function() {
	            var goToPath = catalogService.getPathToRedirect($state.current.name);
	            $state.go(goToPath + fromState[0] + 'List');
	        };
	    };
	
	    catalogCategoryController.$inject = [
	        '$state',
	        '$scope',
	        '$stateParams',
	        '$templateCache',
	        '$mdDialog',
	        'lodash',
	        'systemConstants',
	        'i18nService',
	        'applicationService',
	        'catalogService',
	        'associatedCategoryService',
	        'associateProductService',
	        'categoryHierarchy',
	        'treeData',
	        'fromState',
	        'catalogConstants'
	    ];
	
	    module.exports = catalogCategoryController;
	
	})();


/***/ }),
/* 504 */
/***/ (function(module, exports) {

	module.exports = "<i ng-class=\"item.collapse ? 'fa fa-caret-down' : 'fa fa-caret-right'\" ng-click=\"vm.expandLeftPanel(item)\" data-ng-if=\"item.ChildCategoryDOs.length\"></i>\n<a href=\"\" data-ng-click=\"vm.gotoDetailsPage(item)\" data-ng-class=\"{ 'leaf': !item.ChildCategoryDOs.length, 'selectedNode': item.ClsHierarchySO.Id === vm.stateParams.id, 'productNotFound': item.ClsHierarchySO[vm.prefix + 'ProductCount__c'] !== 0}\">{{item.ClsHierarchySO[vm.prefix + 'Label__c']}} <span data-ng-if=\"item.ClsHierarchySO[vm.prefix + 'ProductCount__c'] > 0\">({{item.ClsHierarchySO[vm.prefix + 'ProductCount__c']}})</span></a>\n<ul data-ng-if='item.collapse'>\n    <li ng-repeat=\"item in item.ChildCategoryDOs\" data-ng-include=\"'catalog-associated-category-left-list.html'\"></li>\n</ul>"

/***/ }),
/* 505 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var catalogCategoryService = function($q, $timeout, remoteService, systemConstants) {
	        var finalList = [],
	            prefix = systemConstants.nsPrefix || '',
	            finalPushObj = [];
	
	        function treeToFlat(obj) {
	            if (angular.isArray(obj)) {
	                for (var item in obj) {
	                    treeToFlat(obj[item]);
	                }
	            } else if (typeof obj !== 'function') {
	                if (obj.ChildCategoryDOs.length > 0) {
	                    treeToFlat(obj.ChildCategoryDOs);
	                } else {
	                    finalList.push(obj);
	                }
	            }
	        }
	
	        var parentList = [],
	            entireList = [];
	
	        /**
	         * Out of the tree data model, this method finds out the entire heirarchy of the selected leaf node.
	         * Traced backward from selected leaf node up towards its parent.
	         */
	        function getParentTrace(obj, nodeId) {
	            var node = {};
	            if (nodeId) {
	                for (var item = 0; item < obj.length; item++) {
	                    if (obj[item].ClsHierarchySO.Id === nodeId) {
	                        node = obj[item];
	                        if (parentList.indexOf(node.ClsHierarchySO[prefix + 'Label__c']) == -1) {
	                            parentList.push(node.ClsHierarchySO[prefix + 'Label__c']);
	                            getParentTrace(entireList, node.ClsHierarchySO[prefix + 'AncestorId__c']);
	                        }
	                    } else if (obj[item].ChildCategoryDOs && obj[item].ChildCategoryDOs.length > 0) {
	                        getParentTrace(obj[item].ChildCategoryDOs, nodeId);
	                    }
	                }
	            }
	        }
	
	        function prepareCategoriesList(data) {
	            entireList = data;
	            finalList = [];
	            if (data && data.ChildCategoryDOs.length > 0) {
	                for (var i = 0; i < data.ChildCategoryDOs.length; i++) {
	                    treeToFlat(data.ChildCategoryDOs[i]);
	                }
	                if (finalList && finalList.length > 0) {
	                    for (var node = 0; node < finalList.length; node++) {
	                        parentList = [];
	                        getParentTrace(data, finalList[node].ClsHierarchySO[prefix + 'AncestorId__c']);
	                        var breadcrumb = parentList.reverse();
	                        breadcrumb.push(finalList[node].ClsHierarchySO[prefix + 'Label__c']);
	                        finalList[node].breadcrumb = breadcrumb;
	                    }
	                }
	            }
	            return finalList;
	        }
	
	        function getCategoryDetails(productCode) {
	            var deferQ = $q.defer();
	            remoteService.getCategoryDetails(productCode)
	                .then(function(response) {
	                    deferQ.resolve(prepareCategoriesList(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	
	        }
	
	        function getTreeData(request) {
	            return remoteService.getFullCatalogHierarchy(request, true);
	        }
	
	        function getProductsByCategory(categoryId) {
	            return remoteService.getProductsAssociatedToCategory(categoryId);
	        }
	
	        function updateCategoryHierarchies(productID, payload) {
	            if (payload && payload.length > 0) {
	                var request = [];
	                for (var i = 0; i < payload.length; i++) {
	                    request.push(
	                        payload[i].ClsHierarchySO
	                    );
	
	                }
	                finalPushObj = prepareFinalListToUpdate(request);
	
	                return remoteService.updateCategoryHierarchies(finalPushObj);
	            }
	        }
	
	        function prepareFinalListToUpdate(payload) {
	            var response = [];
	            for (var i = 0; i < payload.length; i++) {
	                var temp = {};
	                temp["Id"] = payload[i]["Id"];
	                temp["Name"] = payload[i]["Name"];
	                temp[prefix + "DefaultSearchCategory__c"] = payload[i][prefix + "DefaultSearchCategory__c"];
	                temp[prefix + "ExpandedByDefault__c"] = payload[i][prefix + "ExpandedByDefault__c"];
	                temp[prefix + "HideAllSearchFilters__c"] = payload[i][prefix + "HideAllSearchFilters__c"];
	                temp[prefix + "IncludeInTotalsView__c"] = payload[i][prefix + "IncludeInTotalsView__c"];
	                temp[prefix + "IsHidden__c"] = payload[i][prefix + "IsHidden__c"];
	                temp[prefix + "IsPicklist__c"] = payload[i][prefix + "IsPicklist__c"];
	                temp[prefix + "Label__c"] = payload[i][prefix + "Label__c"];
	                temp[prefix + "MaxOptions__c"] = payload[i][prefix + "MaxOptions__c"];
	                temp[prefix + "MinOptions__c"] = payload[i][prefix + "MinOptions__c"];
	                temp[prefix + "Modifiable__c"] = payload[i][prefix + "Modifiable__c"];
	                if (payload[i][prefix + "APTS_Ext_Id__c"]) {
	                    temp[prefix + "APTS_Ext_Id__c"] = payload[i][prefix + "APTS_Ext_Id__c"];
	                }
	                response.push(temp);
	            }
	            return response;
	        }
	
	        function createCategory(payload) {
	            return remoteService.createCategories(payload);
	        }
	
	        function prepareCategoryForCreate(category) {
	            var CategoryHierarchySO = {};
	            CategoryHierarchySO.Name = category.ClsHierarchySO.Name;
	            CategoryHierarchySO[prefix + 'Label__c'] = category.ClsHierarchySO.Label || category.ClsHierarchySO.Name;
	            CategoryHierarchySO[prefix + 'Description__c'] = category.ClsHierarchySO.Description;
	            CategoryHierarchySO[prefix + 'LongDescription__c'] = category.ClsHierarchySO.LongDescription || "";
	            CategoryHierarchySO[prefix + 'HideAllSearchFilters__c'] = category.ClsHierarchySO.HideAllSearchFilters || false;
	            CategoryHierarchySO[prefix + 'ExpandedByDefault__c'] = category.ClsHierarchySO.ExpandedByDefault || false;
	            CategoryHierarchySO[prefix + 'IncludeInTotalsView__c'] = category.ClsHierarchySO.IncludeInTotalsView || false;
	            CategoryHierarchySO[prefix + 'DefaultSearchCategory__c'] = category.ClsHierarchySO.DefaultSearchCategory || false;
	            CategoryHierarchySO[prefix + 'LargeIconId__c'] = category.ClsHierarchySO[prefix + 'LargeIconId__c'];
	            CategoryHierarchySO[prefix + 'IconId__c'] = category.ClsHierarchySO[prefix + 'IconId__c'];
	            return CategoryHierarchySO;
	        }
	
	        function removeCategoryHierarchies(categories) {
	            return remoteService.removeCategoryHierarchies(categories);
	        }
	
	        function reorderCategories(categoryToMoveID, newLocationCategoryID) {
	            var payload = {
	                CategoryToMoveId: categoryToMoveID,
	                NewLocationCategoryId: newLocationCategoryID
	            }
	            return remoteService.reorderCategories(payload);
	        }
	
	        var associatedCategoryService = {
	            getTreeData: getTreeData,
	            getCategoryDetails: getCategoryDetails,
	            getProductsByCategory: getProductsByCategory,
	            updateCategoryHierarchies: updateCategoryHierarchies,
	            createCategory: createCategory,
	            prepareCategoryForCreate: prepareCategoryForCreate,
	            removeCategoryHierarchies: removeCategoryHierarchies,
	            reorderCategories: reorderCategories
	        };
	
	        return associatedCategoryService;
	    };
	
	    catalogCategoryService.$inject = ['$q', '$timeout', 'remoteService', 'systemConstants'];
	
	    module.exports = catalogCategoryService;
	
	})();


/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.catalog.common.services', [])
			.service('catalogService', __webpack_require__(507));
		//Add product module common services here 
	})();

/***/ }),
/* 507 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var catalogCommonService = function(remoteService, $q) {
	        var selectedHeirarchy,
	            metaData = [];
	
	        function setHeirarachyId(data) {
	            selectedHeirarchy = data;
	        }
	
	        function getMetaData(data) {
	            return metaData;
	        }
	
	        function setMetaData(items) {
	            metaData = items;
	        }
	
	        function getHierarchy() {
	            return selectedHeirarchy;
	        }
	
	        function getCategoryHierarchy(categoryCode) {
	            var deferQ = $q.defer();
	            remoteService.getCategoryDetails(categoryCode)
	                .then(function(response) {
	                    setMetaData(response.FieldMetadata);
	                    if (response.ChildCategoryDOs && response.ChildCategoryDOs.length > 0) {
	                        response.ClsHierarchySO.hasChildren = true;
	                    }
	                    setHeirarachyId(response.ClsHierarchySO);
	                    deferQ.resolve(response.ClsHierarchySO);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function getFullHierarchyForCategory(categoryCode) {
	            var deferQ = $q.defer();
	            remoteService.getFullHierarchyForCategory(categoryCode)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function getPathToRedirect(stateName) {
	            if(stateName.indexOf('catalog') !== -1){
	                return 'app.catalog.';
	            } else {
	                return 'app.optionGroup.';
	            }
	        }
	
	        var catalogService = {
	            getCategoryHierarchy: getCategoryHierarchy,
	            getFullHierarchyForCategory: getFullHierarchyForCategory,
	            getHierarchy: getHierarchy,
	            setHeirarachy: setHeirarachyId,
	            getMetaData: getMetaData,
	            getPathToRedirect: getPathToRedirect
	        };
	        return catalogService;
	    };
	
	    catalogCommonService.$inject = [
	        'remoteService',
	        '$q'
	    ];
	
	    module.exports = catalogCommonService;
	})();


/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.catalog.common.directives', [])
			.directive('catalogSubMenu', __webpack_require__(509))
			.directive('catalogTreeContainer', __webpack_require__(511));
	})();


/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var productMenuController = function($scope, $stateParams, systemConstants, i18nService, catalogService, $state) { 
	        var vm = this;
	
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.currentState = $state.current.url.split('/')[1];
	        vm.params = {
	            'id':vm.$stateParams.id, 
	            'productId': vm.$stateParams.productId, 
	            'productName': vm.$stateParams.productName
	        };
	        vm.initialState = `${catalogService.getPathToRedirect($state.current.name)}${vm.currentState}`;
	
	        $scope.$watch(function() {
	            return catalogService.getHierarchy();
	        }, function(newValue, oldValue) {
	            if (newValue) { 
	                if (newValue[vm.prefix + 'ProductCount__c'] > 0) {
	                    vm.isAssociatedProductVisible = true;
	                    vm.isAssociatedCategoryVisible = false;
	                } else {
	                    vm.isAssociatedProductVisible = false;
	                }
	                if (newValue.hasChildren) {
	                    vm.isAssociatedCategoryVisible = true;
	                    vm.isAssociatedProductVisible = false;
	                } else {
	                    vm.isAssociatedCategoryVisible = false;
	                }
	                if ((newValue[vm.prefix + 'ProductCount__c'] === undefined || newValue[vm.prefix + 'ProductCount__c'] === 0)
	                     && newValue.hasChildren === undefined) {
	                    vm.isAssociatedProductVisible = true;
	                    vm.isAssociatedCategoryVisible = true;
	                }
	            }
	        });
	
	    };
	
	    productMenuController.$inject = [
	        '$scope',
	        '$stateParams',
	        'systemConstants',
	        'i18nService',
	        'catalogService',
	        '$state'
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: productMenuController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(510),
	    };
	};


/***/ }),
/* 510 */
/***/ (function(module, exports) {

	module.exports = "<!-- Header Menu Starting -->\n<ul class=\"nav navbar-nav list-group\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"{{vm.initialState}}Details({{vm.params}})\">{{vm.labels.Details}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\" data-ng-show=\"vm.isAssociatedProductVisible\">\n        <a data-ui-sref=\"{{vm.initialState}}AssociateProduct({id:vm.$stateParams.id, 'productId': vm.$stateParams.productId, 'productName': vm.$stateParams.productName})\">{{vm.labels.AssociatedProduct}}</a>\n    </li>\n     <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"{{vm.initialState}}AssociatedPriceList({id:vm.$stateParams.id, 'productId': vm.$stateParams.productId, 'productName': vm.$stateParams.productName})\">{{vm.labels.AssociatedPriceList}}</a>\n    </li> \n    <li data-ui-sref-active=\"active\" class=\"menu-item\" data-ng-show=\"vm.isAssociatedCategoryVisible\">\n        <a data-ui-sref=\"{{vm.initialState}}AssociatedCategory({id:vm.$stateParams.id, 'productId': vm.$stateParams.productId, 'productName': vm.$stateParams.productName})\">{{vm.labels.AssociatedCategory}}</a>\n    </li>\n</ul>\n<!--/.nav-collapse -->\n<!-- Header Menu Closed -->\n"

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = [
	
	        function() {
	            var treeContainerController = function($state, $scope, $templateCache, _, systemConstants, catalogConstants, NgTableParams, applicationService, $stateParams, attributesService) {
	                var vm = this,
	                    isPageChanged = false;
	                vm.totalRecords = 0;
	                vm.currentPage = 1;
	                vm.pageSize = catalogConstants.treePanelItemsPerChunk;
	                vm.prefix = systemConstants.nsPrefix || '';
	                vm.showPagination = true;
	                vm.selectedNodes = [];
	                vm.$stateParams = $stateParams;
	                //Show / hide the search component in primary view
	                vm.toggleSearch = function() {
	                    vm.searchText = '';
	                    if (vm.pageType == 'catalog-associated-category') {
	                        vm.searchTree(1);
	                    } else {
	                        var searchBar = document.querySelector('.main-treeview .search-leaf');
	                        angular.element(searchBar).toggleClass('hidden');
	                        if (angular.element(searchBar).hasClass('hidden')) {
	                            vm.searchTree(1);
	                        }
	                    }
	                };
	
	                vm.setWidthCent = true;
	
	                vm.slideTreePanelToHide = function() {
	                    vm.expandCollapse()();
	                };
	                //Shows primary panel by default 
	                vm.showPrimaryPanel = true;
	
	                // Calls search method of the parent controller, who is using this directive
	                vm.searchTree = function(pageNo) {
	                    isPageChanged = true;
	                    vm.currentPage = pageNo || 1;
	                    vm.selectedNodes = [];
	                    vm.search()(null, vm.searchText, vm.currentPage || 1);
	                    document.querySelector('.tree-wrapper').scrollTop = 0;
	                };
	
	                switch (vm.pageType) {
	                    case 'catalog-associated-category':
	                        $templateCache.put('catalog-associated-category-template.html', __webpack_require__(512));
	                        searchCallback();
	                        break;
	                    default:
	                        $templateCache.put('catalog-associated-category-template.html', __webpack_require__(512));
	                        vm.showPagination = false;
	                        vm.searchTree(1);
	                        break;
	                }
	                vm.treeOptions = {
	                    nodeChildren: vm.nodeChildren,
	                    choosable: vm.isChoosable,
	                    dirSelectable: true,
	                    injectClasses: {
	                        ul: 'a1 ' + vm.pageType + '-list',
	                        li: 'a2',
	                        liSelected: 'a7',
	                        iExpanded: 'a3 fa fa-caret-down',
	                        iCollapsed: 'a4 fa fa-caret-right',
	                        iLeaf: 'a5',
	                        label: 'a6',
	                        labelSelected: 'a8'
	                    },
	                    templateUrl: 'catalog-associated-category-template.html',
	                    isSelectable: function(node) {
	                        return node.isSelected !== true;
	                    },
	                    getHierarchy: function(node) {
	                        if (node.nodeType == undefined && (node[vm.nodeChildren] == undefined || angular.equals(node[vm.nodeChildren][0], {}))) {
	                            vm.getProductStructure(node);
	                        }
	                    },
	                    prefix: vm.prefix
	                };
	
	                function expandAll(array) {
	                    _.each(array, function(node) {
	                        if (node[vm.nodeChildren] && node[vm.nodeChildren].length > 0) {
	                            if (vm.expandedNodes.indexOf(node) === -1) {
	                                vm.expandedNodes.push(node);
	                            }
	                            expandAll(node[vm.nodeChildren]);
	                        }
	                    });
	                }
	
	                //Expand / Collapse tree nodes
	                vm.isExpand = false;
	                vm.expandCollpaseTree = function(isExpand) {
	                    //vm.isExpand = !vm.isExpand;
	                    if (isExpand) {
	                        expandAll(vm.data);
	                    } else {
	                        vm.expandedNodes = [];
	                    }
	                };
	
	                vm.dragoverCallback = function() {
	                    return false;
	                };
	
	                function searchCallback() {
	                    if (vm.data.length < vm.pageSize) {
	                        vm.totalRecords = vm.currentPage * vm.pageSize;
	                    } else if (vm.data.length >= vm.pageSize) {
	                        if (vm.totalRecords < vm.currentPage * vm.pageSize + 1)
	                            vm.totalRecords = vm.currentPage * vm.pageSize + 1;
	                        else
	                            vm.totalRecords = vm.currentPage * vm.pageSize;
	                    } else if (vm.data.length == 0) {
	                        vm.currentPage--;
	                        vm.totalRecords = vm.currentPage * vm.pageSize;
	                        vm.search()(null, vm.searchText, vm.currentPage || 1);
	                    }
	                }
	
	                // Search for secondary view in detail view
	                vm.searchItemInDetailView = function() {
	                    vm.search()(vm.innerSearchText, vm.selectedNodes);
	                };
	
	                vm.pageChanged = function() {
	                    console.log('Page changed to: ' + vm.currentPage);
	                    vm.search()(vm.searchText, vm.currentPage || 1);
	                };
	
	                $scope.$watch('vm.data', function(newValue, oldValue) {
	                    if (newValue && newValue !== oldValue) {
	                        if (isPageChanged) {
	                            searchCallback();
	                            isPageChanged = false;
	                        } else {
	                            searchCallback();
	                            isPageChanged = false;
	                        }
	                    }
	                });
	
	                function getDraggableItems(item) {
	                    if (vm.selectedNodes.indexOf(item) === -1) {
	                        vm.selectedNodes.push(item);
	                    }
	                    return vm.selectedNodes;
	                }
	            };
	            treeContainerController.$inject = [
	                '$state',
	                '$scope',
	                '$templateCache',
	                'lodash',
	                'systemConstants',
	                'catalogConstants',
	                'NgTableParams',
	                'applicationService',
	                '$stateParams',
	                'attributesService'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {
	                    onTreeNodeLabelClick: '&'
	                },
	                controller: treeContainerController,
	                controllerAs: 'vm',
	                bindToController: {
	                    //To show the text as header on the panel
	                    headerText: '=',
	                    //Data source for the tree component
	                    data: '=',
	                    //Specify which page is using this directive. Based on this right template will be loaded.
	                    pageType: '=',
	                    //Calls the method getNodeDetails of the parent controller, who is using this directive.
	                    getNodeDetails: '&',
	                    //Contains the list of details of the selected node
	                    detailOfSelectedNode: '=',
	                    //Invokes the search method of parent controller
	                    search: '&',
	                    //Keeps the dbl clicked node info
	                    selectedNodes: '=',
	                    //Specifies whether a detail panel is needed or not.
	                    enableDetailPanel: '=',
	                    nodeChildren: '=',
	                    // Field to show as the visible label text
	                    nodeLabel: '=',
	                    // Field to show as the title text on hover
	                    tooltipField: '=',
	                    //Pass any other extra parameters with 'options', if needed
	                    options: '=',
	                    getProductStructure: '=',
	                    expandCollapse: '&',
	                    isChoosable: '=',
	                    searchText: '=',
	                    currentPage: '='
	                },
	                template: __webpack_require__(513),
	            };
	        }
	    ];
	
	})();


/***/ }),
/* 512 */
/***/ (function(module, exports) {

	module.exports = "<ul {{options.ulClass}} dnd-dragover=\"dragoverCallback()\">\n    <li ng-repeat=\"node in node.{{options.nodeChildren}} | filter:filterExpression:filterComparator {{options.orderBy}}\" ng-class=\"headClass(node)\" {{options.liClass}} \n        set-node-to-data dnd-draggable=\"node\" dnd-disable-if=\"node.ClsHierarchySO[options.prefix + 'IsLeaf__c'] === 'No' || node.isSelected\" dnd-effect-allowed=\"copy\">\n        <i class=\"tree-branch-head\" ng-class=\"iBranchClass()\" ng-click=\"selectNodeHead(node)\"></i>\n        <i class=\"tree-leaf-head {{options.iLeafClass}} z-143\"></i>\n        <i ng-if=\"!options.choosable\">\n            <div class=\"tree-label {{options.labelClass}}\" tree-transclude ng-class=\"[selectedClass(), unselectableClass()]\"></div>\n        </i>\n        <span ng-if=\"options.choosable\">\n            <material-form-field model=\"node.isChosen\" field-type=\"checkbox\" is-disabled=\"!options.isSelectable(node)\" class=\"tree-checkbox\"></material-form-field> \n            <div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" tree-transclude></div>\n        </span>\n        <treeitem ng-show=\"nodeExpanded()\" dnd-disable-if=\"node.isSelected\"></treeitem>\n    </li>\n</ul>"

/***/ }),
/* 513 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"pull-right treeview-panel\" ng-class=\"vm.setWidthCent?'setWithCent':''\">\n    <div class=\"treeview-animate-panel\" ng-class=\"{'move':!vm.showPrimaryPanel}\">\n        <div class=\"main-treeview\">\n            <!-- For Associated Category Page Left Tree-->\n            <div class=\"tree-wrapper\">\n                <treecontrol class=\"tree-light\" tree-model=\"vm.data\" options=\"vm.treeOptions\" expanded-nodes='vm.expandedNodes' data-ng-if=\"vm.pageType === 'catalog-associated-category'\">\n                    <span title=\"{{(node.ClsHierarchySO[vm.tooltipField] || node[vm.tooltipField])}}\" class=\"tree-node-label\">{{(node.ClsHierarchySO[vm.nodeLabel] || node[vm.nodeLabel])}}</span>\n                    <span class=\"tree-node-child-count\">{{(node.ClsHierarchySO[vm.prefix + 'ProductCount__c'] ? ' ('+node.ClsHierarchySO[vm.prefix + 'ProductCount__c'] +')' : '')}}</span>\n                </treecontrol>\n            </div>\n        </div>\n    </div>\n</div>\n<!-- <div class=\"clearfix\"></div> -->\n<uib-pager class=\"tree-pager\" total-items=\"vm.totalRecords\" ng-model=\"vm.currentPage\" ng-change=\"vm.searchTree(vm.currentPage)\" items-per-page=\"vm.pageSize\" previous-text=\"<\" next-text=\">\"></uib-pager>\n"

/***/ }),
/* 514 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var catalogController = function($state, $scope, systemConstants, i18nService, catalogService, catalogConstants) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        var stateName = $state.current.url.split('/')[1];
	
	        $scope.$watch(function() {
	            return catalogService.getHierarchy();
	        }, function(newValue) {
	            vm.selectedProduct = catalogService.getHierarchy();
	        });
	
	        vm.goTocatalogListPage = function() {
	            const goToPath = catalogService.getPathToRedirect($state.current.name);
	            $state.go(`${goToPath}list`); 
	        }
	
	        vm.saveProduct = function() {
	            //Findout another approach of this communication, other than broadcast and emmit
	            $scope.$broadcast('explicitcatalogPageSave');
	        };
	        vm.toggleProductView = function() {
	            var productView = document.querySelector('.mainCatalogContent');
	            angular.element(productView).addClass('showFilterPanel');
	        };
	        vm.hideFilterPanel = function() {
	            var productView = document.querySelector('.mainCatalogContent');
	            angular.element(productView).removeClass('showFilterPanel');
	        };
	
	        vm.findStateName = function(stateName) {
	            vm.stateCurrentName = stateName;
	        }
	
	        $scope.$on('$stateChangeSuccess', function(e, toState, toParams) {
	            vm.findStateName(toState.name);
	            updateTabMenus();
	        });
	
	        /* Menu for specific Tabs */
	        vm.tabFirstMenu = '';
	        vm.tabMenuItems = [];
	        vm.tabMenuName = '';
	
	        function updateTabMenus() {
	            var currentState = vm.stateCurrentName,
	                currentHash = (currentState.indexOf('app.catalog') !== -1)? currentState.split('app.catalog.')[1] : currentState.split('app.optionGroup.')[1] ,
	                currentParams = $state.params;
	            vm.selectedProductDetails = null;
	            vm.tabMenuName = (currentHash.indexOf('manageCatalog') !== -1)? catalogConstants.newCategory : catalogConstants.newOptionGroup;
	            switch (currentHash) {
	                case stateName+'Details':
	                    {
	                        vm.tabFirstMenu = (currentHash == 'manageCatalogDetails')? vm.labels.NewCategoryButton : vm.labels.NewOptionGroup;
	                        vm.tabMenuItems = [];
	                        setProductDetailsForGoBack(currentParams);
	                        break;
	                    }
	                case stateName+'AssociatedCategory':
	                    {
	                        vm.tabFirstMenu = (currentHash.indexOf('manageCatalog') !== -1)? vm.labels.NewCategoryButton : vm.labels.NewOptionGroup;
	                        vm.tabMenuItems = [];
	                        setProductDetailsForGoBack(currentParams);
	                        break;
	                    }
	                default:
	                    vm.tabFirstMenu = '';
	                    setProductDetailsForGoBack(currentParams);
	            }
	
	        }
	
	        function setProductDetailsForGoBack(currentParams) {
	            if (currentParams.productId !== null) {
	                vm.selectedProductDetails = { 'productId': currentParams.productId, 'Name': currentParams.productName }
	            }
	        }
	
	        vm.tabMenuClicked = function(menuName) {
	            $scope.$broadcast(menuName);
	        };
	        vm.findStateName($state.current.name);
	
	        vm.currentState = $state.current.name;
	
	    };
	
	    catalogController.$inject = ['$state', '$scope', 'systemConstants', 'i18nService', 'catalogService', 'catalogConstants'];
	
	    module.exports = catalogController;
	})();


/***/ }),
/* 515 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		var catalogConstants = {
			/*
			 * This object can be any level nested depending on modularity we want to achieve 
			 * - Either per page
			 * - Per standalone functionality
			 */
			'new': 'new',
			'update': 'update',
			'numberOfCategoriesPerChunk': 50,
			'treePanelItemsPerChunk': 25,
			'middlePanelChunkSize': 20,
			'newOptionGroup': 'NewOptionGroup',
			'newCategory': 'NewCategory'
		};
	
		module.exports = catalogConstants;
	
	})();

/***/ }),
/* 516 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"mainCatalogContent hideFilterPanel\">\n    <div class=\"catalog-main-Container\">\n        <div class=\"catalog-header title-bar\">\n            <div class=\"tabBreadcrumb\" data-ng-if=\"vm.selectedProductDetails !== null\">\n                <ol class=\"breadcrumb\">\n                    <li><a data-ui-sref=\"app.product.associations({'id': vm.selectedProductDetails.productId})\">{{vm.selectedProductDetails.Name}}</a>\n                    </li>\n                    <li class=\"active\">{{vm.selectedProduct.Name}}\n                    </li>\n                </ol>\n            </div>    \n            <div class=\"catalog-title-container\" data-ng-if=\"vm.stateCurrentName!=='app.product.details'\" ng-class=\"{'text-title': vm.selectedProductDetails !== null }\">\n                <div class=\"catalog-info\" href=\"#\" title=\"{{vm.selectedProduct.ProductName}}\">\n                    <i class=\"fa fa-image\" ng-if=\"!vm.selectedProduct[vm.prefix + 'LargeIconId__c']\"></i>\n                    <img ng-src=\"{{'/servlet/servlet.FileDownload?file=' + vm.selectedProduct[vm.prefix + 'LargeIconId__c']}}\" alt=\"Icon\" ng-if=\"vm.selectedProduct[vm.prefix + 'LargeIconId__c']\" />\n                    <span class=\"title\">{{vm.selectedProduct.Name}}</span>\n                </div>\n            </div>\n            <div id=\"navbar\" class=\"navbar-collapse collapse noPadding\">\n                <!-- Catalog menu bar with its values -->\n                <catalog-sub-menu></catalog-sub-menu>\n                <!-- Catalog menu bar with its values -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"listCatalogBtn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabMenuName)\" data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                        <div class=\"drop drop-menu\" data-ng-if=\"vm.tabMenuItems.length > 0\">\n                            <md-menu md-offset=\"50 50\">\n                                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                    <i class=\"material-icons\">more_vert</i>\n                                </button>\n                                <md-menu-content width=\"2\">\n                                    <md-menu-item data-ng-repeat=\"menu in vm.tabMenuItems\">\n                                        <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                            <div layout=\"row\" flex>\n                                                <p flex>{{menu}}</p>\n                                            </div>\n                                        </md-button>\n                                    </md-menu-item>\n                                </md-menu-content>\n                            </md-menu>\n                        </div>\n                    </div>\n                </ul>\n            </div>\n            <!--/.nav-collapse -->\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"catalogCenterContainer\">\n            <!-- Content layout starts -->\n            <div ui-view=\"catalogContainer\" class=\"catalogContainer\"></div>\n            <!-- Content layout ends -->\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>"

/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.customSettingsMaintenanceModal', [])
			.directive('customSettingsMaintenance', __webpack_require__(518));
	})();

/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var customSettingsMaintenanceController = function($scope, $timeout, $mdDialog, i18nService, systemConstants) { 
	        var vm = this;
	        var prefix = systemConstants.nsPrefix || '';
	        vm.prefix = prefix;
	        vm.labels = i18nService.CustomLabel;
	
	        vm.close = function() {
	            $mdDialog.hide();
	            $scope.$parent.vm.displayModal = false;
	        };
	        vm.openMaintenanceJobsModal = function(ev, type) {
	            if(type === 'customSettingsMaintenance'){
	                vm.maintenanceJobsURL = `${systemConstants.salesforceUrl}/apex/${vm.prefix}ConfigDataStaticResourceUpdate?isdtp=nv`;
	                vm.modalTitle = vm.labels.CustomSettingsMaintenance;
	            } else {
	                vm.maintenanceJobsURL = '';
	                vm.modalTitle = '';
	            }
	
	            if (vm.maintenanceJobsURL) {
	                vm.showLoader = true;
	                $mdDialog.show({
	                    contentElement: '#custom-settings-maintenance',                    
	                    parent: angular.element(document.body),
	                    targetEvent: ev,
	                    fullscreen: true
	                });
	            }
	
	        }
	        vm.openMaintenanceJobsModal(vm.event, vm.maintenance);
	        var jobModal = document.getElementById('custom-settings-modal-object-id');
	        jobModal.onload = function() {
	            $timeout(function() { vm.showLoader = false; }, 0);
	        };
	
	
	    };
	
	    customSettingsMaintenanceController.$inject = [
	        '$scope',
	        '$timeout',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants'
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {
	            event:'@',
	            maintenance:'@'
	        },
	        controller: customSettingsMaintenanceController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(519),
	    };
	};

/***/ }),
/* 519 */
/***/ (function(module, exports) {

	module.exports = "<div style=\"visibility: hidden\">\n    <div class=\"md-dialog-container\" id=\"custom-settings-maintenance\">\n        <md-dialog layout-padding class=\"jobs-dialog\">\n            <md-toolbar>\n                <div class=\"md-toolbar-tools\">\n                    <h2>{{vm.modalTitle}}</h2>\n                    <span flex></span>\n                    <button class=\"slds-button slds-button--icon\" ng-click=\"vm.close()\">\n                        <i class=\"material-icons\">clear</i>\n                    </button>\n                </div>\n            </md-toolbar>\n            <object data=\"{{vm.maintenanceJobsURL}}\" width=\"100%\" height=\"100%\" id=\"custom-settings-modal-object-id\"></object>\n            <div preloader add-to-element=\"true\" loading-text=\"vm.labels.LoadingText\" data-ng-if=\"vm.showLoader\"></div>\n        </md-dialog>\n    </div>\n</div>\n"

/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    __webpack_require__(521);
	    __webpack_require__(527);
	    __webpack_require__(531);
	    __webpack_require__(554);
	    __webpack_require__(557);
	    __webpack_require__(559);
	
	    module.exports = angular.module('cpqAdmin.productGroups', [
	            'cpqAdmin.productGroups.detail',
	            'cpqAdmin.productGroups.associatedProduct',
	            'cpqAdmin.productGroups.associatedRule',
	            'cpqAdmin.productGroups.common.directives',
	            'cpqAdmin.productGroups.common.services',
	            'cpqAdmin.productGroups.common.filters'
	        ])
	        .constant('productGroupsConstants', __webpack_require__(561))
	        .controller('productGroupsController', __webpack_require__(562))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.productGroups', {
	                url: '/productGroups',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(563),
	                        controller: 'productGroupsController',
	                        controllerAs: 'vm'
	                    }
	                },
	                data: {
	                    //This config is used for primary menu generation
	                    // ui-router provides $state.get() to access all 'data' objects across all states.
	                    menuConfig: {
	                        'title': 'productGroups',
	                        'iconCls': 'cube'
	                    }
	
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.productGroups.detail', [])
	        .service('productGroupDetailService', __webpack_require__(522))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.productGroups.details', {
	                    parent: 'app.productGroups',
	                    url: '/details',
	                    views: {
	                        'productGroupsContainer': {
	                            template: __webpack_require__(523),
	                            controller: __webpack_require__(524),
	                            controllerAs: 'vm'
	                        }
	                    },
	                    resolve: {
	                        ProductGroupData: ['productGroupDetailService', function(productGroupDetailService) {
	                            var request = {
	                                SearchString: '',
	                                NumberOfRecordsPerChunk: 25,
	                                ChunkNumber: 1
	                            };
	                            return productGroupDetailService.getAllProductGroups(request);
	                        }],
	                    }
	                })
	                .state('app.productGroups.details.form', {
	                    parent: 'app.productGroups.details',
	                    url: '/:id/form',
	                    template: __webpack_require__(525),
	                    controller: __webpack_require__(526),
	                    controllerAs: 'vm',
	                    params: {
	                        id: {
	                            value: null,
	                            squash: true
	                        },
	                        productId: null,
	                        productName: null
	                    },
	                    resolve: {
	                        formFields: ['productGroupsService', '$stateParams', function(productGroupsService, $stateParams) {
	                            return productGroupsService.getProductGroupDetailsById($stateParams.id, false);
	                        }],
	                        ProductGroupData: ['productGroupDetailService', function(productGroupDetailService) {
	                            var request = {
	                                SearchString: '',
	                                NumberOfRecordsPerChunk: 25,
	                                ChunkNumber: 1
	                            };
	                            return productGroupDetailService.getAllProductGroups(request);
	                        }]
	                    }
	                });
	        }]);
	})();


/***/ }),
/* 522 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productGroupDetailService = function($q, remoteService, systemConstants) {
	        var prefix = systemConstants.nsPrefix || '';
	
	        /**
	         * - Get all of product groups
	         */
	        function getAllProductGroups(request) {
	            var deferQ = $q.defer();
	            remoteService.getAllProductGroups(request).then(function(response) {
	                deferQ.resolve(prepareProductGroupList(response));
	            }, function(reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        function prepareProductGroupList(rawObj) {
	            var response = rawObj.ProductGroupDOs;
	            var productGroupList = [];
	            if (angular.isDefined(rawObj)) {
	                for (var item in response) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        productGroupList.push({
	                            Id: response[item].ProductGroupSO.Id,
	                            Name: response[item].ProductGroupSO.Name,
	                        });
	                    }
	                }
	            }
	            return productGroupList;
	        }
	
	        function createProductGroup(payload) {
	            return remoteService.createProductGroup(payload);
	        }
	
	        function updateProductGroup(payload) {
	            return remoteService.updateProductGroup(payload);
	        }
	
	        function deleteProductGroups(productGroupId) {
	            var defer = $q.defer();
	            var request = [];
	            request.push(productGroupId);
	            remoteService.deleteProductGroups(request).then(function(response) {
	                defer.resolve(response);
	            }, function(reason) {
	                defer.reject(reason);
	            });
	            return defer.promise;
	        }
	
	        var productGroupDetailService = {
	            getAllProductGroups: getAllProductGroups,
	            createProductGroup: createProductGroup,
	            updateProductGroup: updateProductGroup,
	            deleteProductGroups: deleteProductGroups
	        };
	        return productGroupDetailService;
	    };
	
	    productGroupDetailService.$inject = ['$q', 'remoteService', 'systemConstants'];
	
	    module.exports = productGroupDetailService;
	
	})();


/***/ }),
/* 523 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"product-groups-detail-page\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <header>\n                <h4>{{vm.labels.ProductGroups}}</h4>\n                <div class=\"search\">\n                    <form ng-submit=\"vm.searchProductGroups();\" novalidate>\n                        <div class=\"search-input-container\">\n                            <div class=\"input-group\">\n                                <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                                <label class=\"ng-binding\">Search</label>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </header>\n            <div class=\"list-table\">\n                <div class=\"detail-list\">\n                    <table>\n                        <tbody class=\"list\">\n                            <tr class=\"active\" data-ng-if=\"vm.activeNewProductGroup\">\n                                <td>{{ vm.labels.NewProductGroup }} </td>\n                            </tr>\n                            <tr data-ng-repeat=\"list in vm.productGroupsList track by list.Id\" ng-click=\"vm.goToDetailsFromPage($index, list.Id);\" ng-class=\"{active: $index === vm.activeProductGroupIndex}\">\n                                <td>\n                                    {{ list.Name }}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class=\"pagination cf\">\n                <div class=\"next-prev\">\n                    <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProductGroupList('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n                    </button>\n                    <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProductGroupList('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <!-- right side panel -->\n        <div class=\"detail-container md-padding\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">\n                {{alert.msg}}\n            </uib-alert>\n            <div ui-view class=\"detail-form-container\"></div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 524 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var productGroupsDetailController = function($state, $stateParams, $rootScope, $scope, systemConstants, cpqAdminConstants, i18nService, productGroupsService, productGroupDetailService, ProductGroupData) {
	        var vm = this;
	
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	
	        /**
	         * - Assign all product group list
	         */
	        vm.productGroupsList = ProductGroupData;
	
	        /**
	         * - Identify the activated product group 
	         * - 'vm.activeNewProductGroup' for show the new product label
	         */
	        vm.activeProductGroupIndex = undefined;
	        vm.activeNewProductGroup = false;
	
	        /**
	         * - Product Group pagination
	         */
	        vm.pageNumber = 1;
	        vm.disableLeftBtn = true;
	        var getProductGroupObj = {
	            'SearchString': "",
	            'NumberOfRecordsPerChunk': 25,
	            'ChunkNumber': vm.pageNumber
	        };
	
	        /**
	         * - Check the product group request chunkNumber
	         */
	        vm.getProductGroupList = function(type) {
	            vm.productGroupsList = [];
	            if (type === 'next') {
	                vm.pageNumber++;
	                if (vm.pageNumber !== 1) {
	                    vm.disableLeftBtn = false;
	                }
	            } else {
	                vm.pageNumber--;
	                if (vm.pageNumber === 1) {
	                    vm.disableLeftBtn = true;
	                }
	            }
	            getProductGroupObj.ChunkNumber = vm.pageNumber;
	            loadProductGroupList(getProductGroupObj);
	        }
	
	        /** 
	         * - Load the product group list when click previous and next button
	         */
	        function loadProductGroupList(reqObj) {
	            productGroupDetailService.getAllProductGroups(reqObj).then(function(response) {
	                vm.productGroupsList = response;
	                /** - Method is used for select the active product group **/
	                selectActiveProductGroup();
	                vm.isMaxSQLSizeExceed = false;
	                if (response.length < reqObj.NumberOfRecordsPerChunk) {
	                    vm.disableRightBtn = true;
	                } else {
	                    vm.disableRightBtn = false;
	                }
	            }, function(reason) {
	                if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                    vm.productGroupsList = [];
	                    vm.isMaxSQLSizeExceed = true;
	                }
	                vm.disableRightBtn = true;
	            });
	        }
	
	        /**
	         * - Search product group based on the search text
	         */
	        vm.searchProductGroups = function() {
	            getProductGroupObj.SearchString = vm.searchText;
	            getProductGroupObj.ChunkNumber = 1;
	            loadProductGroupList(getProductGroupObj);
	        };
	        /**
	         * - Find active product while click the previous and next button in left side panel
	         */
	        function selectActiveProductGroup() {
	            var getSelectedProductGroup = productGroupsService.getSelectedProductGroup();
	            if (getSelectedProductGroup.Id !== cpqAdminConstants.NEW) {
	                changeActiveProductGroup(getSelectedProductGroup.Id);
	            }
	        }
	
	        /**
	         * - Find the selected or activated ProductGroup Index by id
	         * - Return activated product group index
	         */
	        function changeActiveProductGroup(Id) {
	            vm.activeProductGroupIndex = undefined;
	            vm.productGroupsList.every(function(item, index) {
	                if (item.Id === Id) {
	                    vm.activeProductGroupIndex = index;
	                    return false;
	                } else return true;
	            });
	        }
	
	        /**
	         * - Redirect to the particular product group while user click the ProductGroup label
	         */
	        vm.goToDetailsFromPage = function(index, Id) {
	            $state.go('app.productGroups.details.form', {
	                id: Id
	            });
	        };
	
	        /** 
	         * - Get the selected product group id from child controller
	         * - If selected product group id is equal to 'new' then visable new product group label
	         * - Else activate the selected label based on the id
	         */
	        $scope.$on('getSelectedProductGroup', function(event, Id) {
	            if (Id === 'new') {
	                vm.activeNewProductGroup = true;
	                vm.activeProductGroupIndex = undefined;
	            } else if (Id === null) {
	                vm.activeNewProductGroup = false;
	                vm.activeProductGroupIndex = undefined;
	            } else {
	                vm.activeNewProductGroup = false;
	                changeActiveProductGroup(Id);
	            }
	        });
	
	        /** 
	         * - Set product id is new
	         * - Redirect to new product group
	         */
	        function addNewProductGroup() {
	            $state.go('app.productGroups.details.form', {
	                id: cpqAdminConstants.NEW,
	            });
	        };
	
	        $scope.$on(vm.labels.NewProductGroup.split(' ').join('-'), function() {
	            addNewProductGroup();
	        });
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	    };
	
	    productGroupsDetailController.$inject = [
	        '$state',
	        '$stateParams',
	        '$rootScope',
	        '$scope',
	        'systemConstants',
	        'cpqAdminConstants',
	        'i18nService',
	        'productGroupsService',
	        'productGroupDetailService',
	        'ProductGroupData'
	    ];
	
	    module.exports = productGroupsDetailController;
	
	})();


/***/ }),
/* 525 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"detail-form noPadding\">\n    <form name=\"vm.productGroupForm\" novalidate data-ng-submit=\"vm.explicitPageSave();\">\n        <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n        <div layout=\"row\">\n            <div class=\"flex\">\n                <div layout=\"row\" class=\"md-padding\">\n                    <material-form-field model=\"vm.selectedProductGroup.Name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.Name\" name=\"Name\" flex=\"50\" is-required=\"true\">\n                    </material-form-field>\n                </div>\n                <div ng-messages=\"vm.productGroupForm.Name.$error\" ng-if=\"vm.productGroupForm.Name.$touched || vm.productGroupForm.$submitted\" class=\"md-padding error-message\">\n                    <p ng-message=\"required\" class=\"formError\">\n                        {{vm.labels.Name}} must be entered\n                    </p>\n                </div>\n                <div layout=\"row\" class=\"md-padding\">\n                    <material-form-field model=\"vm.selectedProductGroup.Description\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.Description\" flex=\"50\">\n                    </material-form-field>\n                </div>\n            </div>\n        </div>\n        <div class=\"detail-footer\">\n            <div class=\"container-fluid\">\n                <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToManageProductGroupPage()\">{{vm.labels.DialogCancelButton}}</a>\n                <input type=\"submit\" class=\"slds-button slds-button_brand\" value=\"{{vm.labels.DialogSaveButton}}\" data-ng-disabled=\"vm.productGroupForm.$invalid\">\n            </div>\n        </div>\n    </form>\n    <a data-ui-sref=\"app.product.associations({'id': vm.$stateParams.productId })\" class=\"toast\" data-ng-if=\"vm.$stateParams.productId\">Go Back to \"{{vm.$stateParams.productName}}\"</a>\n</div>\n"

/***/ }),
/* 526 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var productGroupsDetailFromController = function($state, $stateParams, $rootScope, $scope, systemConstants, cpqAdminConstants, i18nService, applicationService, productGroupsService, productGroupDetailService, formFields, ProductGroupData) {
	        var vm = this,
	            /**
	             * - 'isFormSaved' variable is used to track the page save functionality.
	             * - Gets updated with save API call's response.
	             */
	            isFormSaved = false;
	
	        vm.cpqAdminConstantsNew = cpqAdminConstants.NEW;
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	
	        /**
	         * - Assign the selected ProductGroup formFields
	         */
	        vm.selectedProductGroup = angular.copy(formFields);
	
	        /** 
	         * - Prepare product group data for create new product group
	         */
	        function prepareCreateProductGroup() {
	            var payload = {
	                'ProductGroupSO': {
	                    'Name': vm.selectedProductGroup.Name
	                }
	            }
	            payload.ProductGroupSO[vm.prefix + 'Description__c'] = vm.selectedProductGroup.Description;
	            return payload;
	        }
	
	        /** 
	         * - Prepare product group data for update product group
	         **/
	        function prepareUpdateProductGroup() {
	            var payload = {
	                'ProductGroupSO': {
	                    'Id': vm.$stateParams.id,
	                    'Name': vm.selectedProductGroup.Name
	                }
	            }
	            payload.ProductGroupSO[vm.prefix + 'Description__c'] = vm.selectedProductGroup.Description;
	            return payload;
	        }
	
	        /**
	         * - Update product Group
	         **/
	        function updateProductGroup(payload, toState, toParams) {
	            var lastPayload = payload;
	            productGroupDetailService.updateProductGroup(payload).then(function(response) {
	                if (response) {
	                    isFormSaved = true;
	                    productGroupsService.setSelectedProductGroup({
	                        'Id': lastPayload.ProductGroupSO.Id,
	                        'Name': lastPayload.ProductGroupSO.Name,
	                        'Description': lastPayload.ProductGroupSO[vm.prefix + 'Description__c']
	                    });
	                    if (toState) {
	                        addAlert('Updated successfully', cpqAdminConstants.SUCCESS);
	                        $state.go(toState, toParams);
	                    } else {
	                        /**
	                         * - Check the config type here. If standalone or option, hide the 'Options' menu.
	                         */
	                        addAlert('Updated successfully', cpqAdminConstants.SUCCESS);
	                    }
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        function save(e, toState, toParams) {
	            if (vm.productGroupForm.$valid) {
	
	                /** 
	                 * - Create new product group
	                 **/
	                if (vm.$stateParams.productId === null && vm.$stateParams.id === cpqAdminConstants.NEW) {
	                    productGroupDetailService.createProductGroup(prepareCreateProductGroup()).then(function(response) {
	                        if (response) {
	                            isFormSaved = true;
	                            if (toParams && toParams.id === cpqAdminConstants.NEW) {
	                                /** 
	                                 * Update toParams to newly generated product group code
	                                 */
	                                if (response.ProductGroupSO.Id) {
	                                    toParams.id = response.ProductGroupSO.Id;
	                                }
	                            }
	                            if (toState) {
	                                $state.go(toState, toParams);
	                            } else {
	
	                            }
	                        }
	                    }, function(reason) {
	                        applicationService.showErrorMessage(reason);
	                    });
	                } else {
	                    updateProductGroup(prepareUpdateProductGroup(), toState, toParams);
	                }
	            } else {
	                vm.productGroupForm.$setSubmitted();
	            }
	        };
	
	        /**
	         * When user clicks on the 'Save' button, an event named 'explicitPageSave' gets broadcasted.
	         * A page has to listen to that event and do the page specific save functionality.
	         */
	        vm.explicitPageSave = function() {
	            if ($stateParams.id === cpqAdminConstants.NEW) {
	                save({}, $state.current, {
	                    id: $stateParams.id
	                });
	            } else {
	                if (vm.productGroupForm.$dirty) {
	                    save({}, $state.current, {
	                        id: $stateParams.id
	                    });
	                } else {
	                    addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	                }
	            }
	        };
	        $scope.$on('explicitPageSave', function() {
	            if ($stateParams.id === cpqAdminConstants.NEW) {
	                save({}, $state.current, {
	                    id: $stateParams.id
	                });
	            } else {
	                if (vm.productGroupForm.$dirty) {
	                    save({}, $state.current, {
	                        id: $stateParams.id
	                    });
	                } else {
	                    addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	                }
	            }
	        });
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams, fromState, fromParams) {
	            if (toState.name === 'app.productGroups.details' || toState.name === 'app.product.associations' || toState.name === 'app.list' || toState.name === 'app.catalog.list') {
	                return true;
	            } else if (isFormSaved || vm.productGroupForm === undefined) {
	                return true;
	            } else {
	                /**
	                 * Check if Form is dirty or not.
	                 * Go for save, only when it is dirty or if it is for a new product.
	                 */
	                if (vm.productGroupForm.$dirty || vm.productGroupForm.$invalid) {
	                    e.preventDefault();
	                    save(e, toState, toParams);
	                } else {
	                    return true;
	                }
	            }
	        });
	
	        /**
	         *  - pass the state id to detail controller
	         */
	        function passStateIdToParentController(Id) {
	            if (Id !== null) {
	                if (Id === cpqAdminConstants.NEW) {
	                    vm.selectedProductGroup.Name = "";
	                }
	                $scope.$emit('getSelectedProductGroup', Id);
	            } else {
	                if (ProductGroupData && ProductGroupData.length) {
	                    $state.go('app.productGroups.details.form', { 'id': ProductGroupData[0].Id });
	                } else {
	                    $state.go('app.productGroups.details.form', { 'id': cpqAdminConstants.NEW });
	                }
	            }
	        }
	        passStateIdToParentController(vm.$stateParams.id);
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        /**
	         * - Method execute while user click the cancel button
	         */
	        vm.goToManageProductGroupPage = function() {
	            isFormSaved = true;
	            $state.go('app.productGroups.details.form', { 'id': null }, { reload: true });
	        };
	
	    };
	
	    productGroupsDetailFromController.$inject = [
	        '$state',
	        '$stateParams',
	        '$rootScope',
	        '$scope',
	        'systemConstants',
	        'cpqAdminConstants',
	        'i18nService',
	        'applicationService',
	        'productGroupsService',
	        'productGroupDetailService',
	        'formFields',
	        'ProductGroupData'
	    ];
	
	    module.exports = productGroupsDetailFromController;
	
	})();


/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.productGroups.associatedProduct', [])
	        .service('associatedProductService', __webpack_require__(528))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.productGroups.associatedProduct', {
	                parent: 'app.productGroups',
	                url: '/:id/associatedProduct',
	                views: {
	                    'productGroupsContainer': {
	                        template: __webpack_require__(529),
	                        controller: __webpack_require__(530),
	                        controllerAs: 'vm'
	                    }
	                },
	                params: {
	                    productId: null,
	                    productName: null
	                },
	                resolve: {
	                    productGroup: ['productGroupsService', '$stateParams', function(productGroupsService, $stateParams) {
	                        return productGroupsService.getProductGroupDetailsById($stateParams.id, false);
	                    }],
	                    ProductList: ['systemConstants', 'cpqAdminConstants', 'productConstants', 'associatedProductService', function(systemConstants, cpqAdminConstants, productConstants, associatedProductService) {
	                        var prefix = systemConstants.nsPrefix || '';
	                        var request = {
	                            'ViewName': prefix + productConstants.fieldsetProductList,
	                            'SortField': 'LastModifiedDate',
	                            'SortDirection': cpqAdminConstants.DESCENDING,
	                            'SearchString': '',
	                            'ChunkNumber': 1,
	                            'NumberOfProductsPerChunk': 25,
	                            'ConfigTypes': []
	                        };
	                        return associatedProductService.getAllProduct(request);
	                    }],
	                    associatedProducts: ['$stateParams', 'associatedProductService', function($stateParams, associatedProductService) {
	                        var request = {
	                            ProductGroupId: $stateParams.id,
	                            SearchString: '',
	                            NumberOfRecordsPerChunk: 20,
	                            ChunkNumber: 1
	                        };
	                        return associatedProductService.getAssociatedProductsForProductGroup(request);
	                    }]
	                }
	            });
	        }]);
	})();


/***/ }),
/* 528 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productGroupsAssociatedProductService = function($q, remoteService, systemConstants) {
	        var prefix = systemConstants.nsPrefix || '';
	
	        /**
	         * - Get list of product groups
	         */
	        function getAllProduct(request) {
	            var deferQ = $q.defer();
	            remoteService.getAllProducts(request).then(function(response) {
	                deferQ.resolve(prepareProductList(response));
	            }, function(reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        function prepareProductList(rawObj) {
	            var response = rawObj.ProductSOs;
	            var productList = [];
	            if (angular.isDefined(rawObj)) {
	                for (var item in response) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        var product = {};
	                        product.Id = response[item].Id; 
	                        product.Name = response[item].Name;
	                        product.productCode = response[item].ProductCode;
	                        product.configurationType = response[item][prefix + 'ConfigurationType__c'];
	                        product.IconId = response[item][prefix + 'IconId__c'];
	                        productList.push(product);
	                    }
	                }
	            }
	            return productList;
	        }
	
	        /**
	         * - Add products by  product groups id
	         */
	        function addProductsByProductGroupId(productGroupID, payload) {
	            if (payload && payload.length > 0) {
	                var request = {
	                    ProductGroupMemberSOs: [],
	                    ProductGroupId: productGroupID
	                };
	                for (var i = 0; i < payload.length; i++) {
	                    var key = [prefix + 'ProductId__c'],
	                        obj = {};
	                    obj[key] = payload[i].Id;
	                    request.ProductGroupMemberSOs.push(obj);
	                }
	                return remoteService.addProductsToProductGroup(request);
	            }
	        }
	
	        /**
	         * - Remove products by product groups id
	         */
	        function removeProductsByProductGroupId(productGroupID, payload) {
	            if (payload && payload.length > 0) {
	                var request = {
	                    ProductGroupMemberIds: [],
	                    ProductGroupId: productGroupID
	                };
	                for (var i = 0; i < payload.length; i++) {
	                    request.ProductGroupMemberIds.push(payload[i].productGroupMemberId);
	                }
	                return remoteService.removeProductsFromProductGroup(request);
	            }
	        }
	
	        /**
	         * - Get associated Products by Product Group id
	         */
	        function getAssociatedProductsForProductGroup(request) {
	            var deferQ = $q.defer();
	            remoteService.getProductsForProductGroup(request)
	                .then(function(response) {
	                    deferQ.resolve(prepareAssociatedProduct(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function prepareAssociatedProduct(rawObj) {
	            var response = rawObj.ProductGroupMemberSOs;
	            var productList = [];
	            if (angular.isDefined(rawObj)) {
	                for (var item in response) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        var product = {};
	                        product.Id = response[item][prefix + 'ProductId__r'].Id; 
	                        product.Name = response[item][prefix + 'ProductId__r'].Name;
	                        product.productGroupMemberId = response[item].Id;
	                        product.productCode = response[item][prefix + 'ProductId__r'].ProductCode;
	                        product.configurationType = response[item][prefix + 'ProductId__r'][prefix + 'ConfigurationType__c'];
	                        product.IconId = response[item][prefix + 'ProductId__r'][prefix + 'IconId__c'];
	                        productList.push(product);
	                    }
	                }
	            }
	            return productList;
	        }
	
	        /**
	         * - Get all associated product groups by product id
	         */
	        function getAssociatedProductGroupsByProductId(payload) {
	            var deferQ = $q.defer();
	            remoteService.getProductGroupsForProduct(payload)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        var associatedProductService = {
	            getAllProduct: getAllProduct,
	            addProductsByProductGroupId: addProductsByProductGroupId,
	            removeProductsByProductGroupId: removeProductsByProductGroupId,
	            getAssociatedProductsForProductGroup: getAssociatedProductsForProductGroup,
	            getAssociatedProductGroupsByProductId: getAssociatedProductGroupsByProductId
	        };
	
	        return associatedProductService;
	    };
	
	    productGroupsAssociatedProductService.$inject = ['$q', 'remoteService', 'systemConstants'];
	
	    module.exports = productGroupsAssociatedProductService;
	
	})();


/***/ }),
/* 529 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"product-group-associated-product\">\n    <div class=\"left-container left-tree tree-view\" resizable r-directions=\"['right']\" r-flex=\"true\">\n        <header>\n            <h4>{{vm.labels.AllProducts}}</h4>\n            <div class=\"search\">\n                <form data-ng-submit=\"vm.searchProduct();\" novalidate>\n                    <div class=\"search-input-container\">\n                        <div class=\"input-group\">\n                            <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                            <label class=\"ng-binding\">Search</label>\n                        </div>\n                    </div>\n                </form>\n                <div class=\"clearfix\"></div>\n                <div data-ng-if=\"vm.productList.length === 0\" class=\"search-result\">\n                    {{vm.labels.NoMatchingRecords}}\n                </div>\n            </div>\n        </header>\n        <div class=\"list-table\">\n            <table>\n                <tbody class=\"list\">\n                    <tr data-ng-repeat=\"list in vm.productList track by list.Id\" data-ng-class=\"{'drag-disabled': list.isSelected}\" dnd-draggable=\"list\" dnd-droppable-in=\".dropzone\" dnd-effect-allowed=\"copy\" dnd-disable-if=\"list.isSelected\">\n                        <td>\n                            <span>{{ list.Name }}</span>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        <div class=\"pagination cf\">\n            <div class=\"next-prev\">\n                <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProductList('previous')\">\n                    <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n                </button>\n                <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProductList('next')\">\n                    <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                </button>\n            </div>\n        </div>\n    </div>\n    <div class=\"associated-product-container\">\n        <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"2000\">{{alert.msg}}</uib-alert>\n        <div search-box search-placeholder=\"{{vm.searchPlaceholder}}\" search-input=\"vm.searchInput\" perform-search=\"vm.searchAssociatedProducts()\" clear-search=\"vm.clearSearch()\"></div>\n        <div class=\"associated-product-title\" layout=\"layout-row\">\n            <div flex=\"10\">{{vm.labels.Action}}</div>\n            <div flex=\"40\">{{vm.labels.ProductName}}</div>\n            <div flex=\"20\">{{vm.labels.ProductCode}}</div>\n            <div flex=\"20\">{{vm.labels.ConfigurationType}}</div>\n            <div flex=\"10\">{{vm.labels.CatalogImage}}</div>\n        </div>\n        <div class=\"dropzone-container \">\n            <div class=\"dropzone\" dnd-list=\"vm.associatedProductList\" dnd-drop=\"vm.addNewProduct(event, index, item)\">\n                <div class=\"associated-product-list\" data-ng-repeat=\"item in vm.associatedProductList\">\n                    <div layout=\"layout-row\">\n                        <div flex=\"10\" data-ng-click=\"vm.removeProduct($index, item)\"><i class=\"material-icons\">clear</i></div>\n                        <div flex=\"40\">\n                            <span>{{item.Name}}</span>\n                        </div>\n                        <div flex=\"20\">{{item.productCode}}</div>\n                        <div flex=\"20\">{{item.configurationType}}</div>\n                        <div flex=\"10\" class=\"associated-image\">\n                            <img class=\"image\" ng-src=\"{{'/servlet/servlet.FileDownload?file=' + item.IconId}}\" alt='Product Image' ng-if=\"item.IconId\" />\n                            <span class=\"fa fa-image\" ng-if=\"!item.IconId\"></span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <!-- Footer Panle -->\n    <div class=\"associated-product-footer\">\n        <div class=\"container-fluid text-center\">\n            <div class=\"next-prev\">\n                <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableAssociatedLeftBtn\" data-ng-click=\"vm.getAssociatedProductList('previous')\">\n                    <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n                </button>\n                <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableAssociatedRightBtn\" data-ng-click=\"vm.getAssociatedProductList('next')\">\n                    <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                </button>\n            </div>\n            <div class=\"btns-group\">\n                <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToManageProductGroupPage()\">{{vm.labels.DialogCancelButton}}</a>\n                <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">{{vm.labels.DialogSaveButton}}</a>\n            </div>\n        </div>\n    </div>\n    <a data-ui-sref=\"app.product.associations({'id': vm.$stateParams.productId })\" class=\"toast\" data-ng-if=\"vm.$stateParams.productId\">Go Back to \"{{vm.$stateParams.productName}}\"</a>\n</div>\n"

/***/ }),
/* 530 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productGroupAssociatedProductController = function($rootScope, $scope, $state, $stateParams, _, i18nService, systemConstants, applicationService, cpqAdminConstants, productConstants, productGroupsService, associatedProductService, ProductList, associatedProducts) {
	        var vm = this;
	
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.searchInput = '';
	        vm.searchPlaceholder = vm.labels.SearchAssociatedProducts;
	
	        /** 
	         * - Assign alread associated products list to vm.associatedProductList 
	         */
	        vm.associatedProductList = associatedProducts;
	        vm.pageAssociatedNumber = 1;
	        vm.disableAssociatedLeftBtn = true;
	        var getAssociatedObj = {
	            ProductGroupId: $stateParams.id,
	            SearchString: '',
	            NumberOfRecordsPerChunk: 20,
	            ChunkNumber: vm.pageAssociatedNumber
	        };
	        
	        /**
	         * - Product pagination variables
	         */
	        vm.pageNumber = 1;
	        vm.disableLeftBtn = true;
	        var getProductObj = {
	            'ViewName': vm.prefix + productConstants.fieldsetProductList,
	            'SortField': 'LastModifiedDate',
	            'SortDirection': cpqAdminConstants.DESCENDING,
	            'SearchString': vm.searchText || '',
	            'ChunkNumber': vm.pageNumber,
	            'NumberOfProductsPerChunk': 25,
	            'ConfigTypes': []
	        };
	
	        if (associatedProducts.length < getAssociatedObj.NumberOfRecordsPerChunk) {
	            vm.disableAssociatedRightBtn = true;
	        } else {
	            vm.disableAssociatedRightBtn = false;
	        }
	        /**
	         * - Assign all produts list 
	         */
	        vm.productList = ProductList;
	
	        /**
	         * - Check the product request chunkNumber
	         */
	        vm.getProductList = function(type) {
	            vm.productList = [];
	            if (type === 'next') {
	                vm.pageNumber++;
	                if (vm.pageNumber !== 1) {
	                    vm.disableLeftBtn = false;
	                }
	            } else {
	                vm.pageNumber--;
	                if (vm.pageNumber === 1) {
	                    vm.disableLeftBtn = true;
	                }
	            }
	            getProductObj.ChunkNumber = vm.pageNumber;
	            loadProductList(getProductObj);
	        }
	
	        /** 
	         * - Load the product list when click previous and next button
	         */
	        function loadProductList(reqObj) {
	            associatedProductService.getAllProduct(reqObj).then(function(response) {
	                vm.productList = response;
	                updateProductOnLoad();
	                vm.isMaxSQLSizeExceed = false;
	                if (response.length < reqObj.NumberOfRecordsPerChunk) {
	                    vm.disableRightBtn = true;
	                } else {
	                    vm.disableRightBtn = false;
	                }
	            }, function(reason) {
	                if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                    vm.productList = [];
	                    vm.isMaxSQLSizeExceed = true;
	                }
	                vm.disableRightBtn = true;
	            });
	        }
	
	        /**
	         * - Search product based on the search text
	         */
	        vm.searchProduct = function() {
	            getProductObj.SearchString = vm.searchText;
	            getProductObj.ChunkNumber = 1;
	            loadProductList(getProductObj);
	        };
	
	        /**
	         * - This method is executing while user associate product from left side product list
	         */
	        vm.addNewProduct = function(event, index, node) {
	            node.Sequence = 3;
	            associatedProductService.addProductsByProductGroupId($stateParams.id, [node])
	                .then(function(response) {
	                    node.productGroupMemberId = response.ProductGroupMemberSOs[0].Id;
	                    if(_.isEmpty(vm.searchInput) || (node.Name).toLowerCase().includes((vm.searchInput).toLowerCase())){
	                        vm.associatedProductList.splice(index, 0, node);
	                    }
	                    updateProduct(vm.productList, node.Id, true);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        };
	
	        /** 
	         * - Execute this method when user click remove button from associated  
	         */
	        vm.removeProduct = function(index, node) {
	            associatedProductService.removeProductsByProductGroupId($stateParams.id, [node])
	                .then(function(response) {
	                    updateProduct(vm.productList, node.Id, false);
	                    vm.associatedProductList.splice(index, 1);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        };
	
	        /**
	         * - Check the associated product request chunkNumber
	         */
	        vm.getAssociatedProductList = function(type) {
	            vm.associatedProductList = [];
	            if (type === 'next') {
	                vm.pageAssociatedNumber++;
	                if (vm.pageAssociatedNumber !== 1) {
	                    vm.disableAssociatedLeftBtn = false;
	                }
	            } else {
	                vm.pageAssociatedNumber--;
	                if (vm.pageAssociatedNumber === 1) {
	                    vm.disableAssociatedLeftBtn = true;
	                }
	            }
	            getAssociatedObj.ChunkNumber = vm.pageAssociatedNumber;
	            getAssociatedObj.SearchString = vm.searchInput;
	            loadAssociatedProductList(getAssociatedObj);
	        }
	
	        /** 
	         * - Load the associated product list when click previous and next button
	         */
	        function loadAssociatedProductList(reqObj) {
	            associatedProductService.getAssociatedProductsForProductGroup(reqObj).then(function(response) {
	                vm.associatedProductList = response;
	                updateProductOnLoad();
	                vm.isMaxSQLSizeExceed = false;
	                if (response.length < reqObj.NumberOfRecordsPerChunk) {
	                    vm.disableAssociatedRightBtn = true;
	                } else {
	                    vm.disableAssociatedRightBtn = false;
	                }
	            }, function(reason) {
	                if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                    vm.associatedProductList = [];
	                    vm.isMaxSQLSizeExceed = true;
	                }
	                vm.disableAssociatedRightBtn = true;
	            });
	        }
	
	        /**
	         * - Search product based on the search text
	         */
	        vm.searchProduct = function() {
	            getProductObj.SearchString = vm.searchText;
	            getProductObj.ChunkNumber = 1;
	            loadProductList(getProductObj);
	        };
	
	
	        /**
	         *  - update product on load
	         */
	        function updateProductOnLoad() {
	            if (vm.associatedProductList && vm.associatedProductList.length > 0) {
	                for (var i = 0; i < vm.associatedProductList.length; i++) {
	                    updateProduct(vm.productList, vm.associatedProductList[i].Id, true);
	                }
	            }
	        }
	        updateProductOnLoad();
	
	        /**
	         *  - Adds 'isSelected' property to the element.
	         */
	        function updateProduct(array, nodeId, isSelected) {
	            _.each(array, function(node) {
	                if (node.Id === nodeId) {
	                    node.isSelected = isSelected;
	                    return;
	                }
	            });
	        }
	
	        /**
	         * - Method execute while user click the cancel button
	         */
	        vm.goToManageProductGroupPage = function() {
	            $state.go('app.productGroups.details.form', { 'id': vm.$stateParams.id, 'productId': vm.$stateParams.productId, 'productName': vm.$stateParams.productName }, { reload: true });
	        };
	
	        /**
	         * - get associated products by product name and group Id
	         */
	        vm.searchAssociatedProducts = function () {
	            vm.associatedProductList = [];
	
	            var request = {
	                ProductGroupId: $stateParams.id,
	                SearchString: vm.searchInput,
	                NumberOfRecordsPerChunk: 20,
	                ChunkNumber: 1
	            };
	
	            vm.associatedProductList = associatedProductService.getAssociatedProductsForProductGroup(request).then(function (response) {
	                vm.associatedProductList = response;
	            });
	        }
	
	        vm.clearSearch = function () {
	            vm.searchInput = '';
	            vm.searchAssociatedProducts();
	        }
	
	    };
	
	    productGroupAssociatedProductController.$inject = [
	        '$rootScope',
	        '$scope',
	        '$state',
	        '$stateParams',
	        'lodash',
	        'i18nService',
	        'systemConstants',
	        'applicationService',
	        'cpqAdminConstants',
	        'productConstants',
	        'productGroupsService',
	        'associatedProductService',
	        'ProductList',
	        'associatedProducts'
	    ];
	
	    module.exports = productGroupAssociatedProductController;
	})();


/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.productGroups.associatedRule', [])
	        .service('associatedRuleService', __webpack_require__(532))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.productGroups.associatedRule', {
	                parent: 'app.productGroups',
	                url: '/:id/associatedRule',
	                views: {
	                    'productGroupsContainer': {
	                        template: __webpack_require__(533),
	                        controller: __webpack_require__(534),
	                        controllerAs: 'vm'
	                    }
	                },
	                params: {
	                    productId: null,
	                    productName: null,
	                    associatedRulesDetails: null,
	                },
	                resolve: {
	                    productGroup: ['productGroupsService', '$stateParams', function(productGroupsService, $stateParams) {
	                        return productGroupsService.getProductGroupDetailsById($stateParams.id, false);
	                    }],
	                    productGroupsTree: ['rulesService', function(rulesService) {
	                        var requestedObj = {
	                            SearchString: '',
	                            NumberOfRecordsPerChunk: 25,
	                            ChunkNumber: 1
	                        };
	                        return rulesService.getAllProductGroups(requestedObj);
	                    }],
	                    picklistMetaData: ['rulesService', function(rulesService) {
	                        return rulesService.getPicklistMetaData();
	                    }],
	                    allPicklists: ['rulesService', '$stateParams', function(rulesService, $stateParams) {
	                        return rulesService.getSObjectPicklistFields('ConstraintRuleCondition__c', null);
	                    }],
	                    statementProductAttributes: ['rulesService', function(rulesService) {
	                        return rulesService.targetFieldSearchForActionCriteria('');
	                    }],
	                    allRules: ['associatedRuleService', '$stateParams', function(associatedRuleService, $stateParams) {
	                        return associatedRuleService.getAssociatedRulesByProductGroupId($stateParams.id);
	                    }],
	                    applicationTypeValues: ['rulesService', function(rulesService) {
	                        return rulesService.getSObjectPicklistFields('AttributeValueMatrix__c', ['ApplicationType__c'])
	                    }]
	                }
	            });
	        }]);
	})();


/***/ }),
/* 532 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productGroupsAssociatedRuleService = function($q, $stateParams, remoteService, systemConstants, productConstants, productGroupsConstants) {
	
	        var prefix = systemConstants.nsPrefix || '';
	
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        /* 
	         * Converts a date in string format or in milliseconds to date to format to be used
	         * in datepicker component
	         */
	        function formatDate(date) {
	            if (angular.isDefined(date)) {
	                if (date === null || date === '') {
	                    date = null;
	                } else if (angular.isString(date)) {
	                    date = new Date(date);
	                } else {
	                    date = new Date(date);
	                }
	            }
	            return date ? moment(date).format(dateFormat) : '';
	        }
	
	        /*
	         * - Prepare Constraint rule request payload and API call.
	         */
	        function createConstraintRule(request) {
	            var deferQ = $q.defer(),
	                obj = {};
	            obj[getPrefixedAttribute('Sequence__c')] = request.sequence;
	            obj[getPrefixedAttribute('Active__c')] = request.isActive;
	            obj.Name = request.name;
	
	            obj[getPrefixedAttribute('EffectiveDate__c')] = request.effectiveDate;
	            obj[getPrefixedAttribute('ExpirationDate__c')] = request.expirationDate;
	
	            obj[getPrefixedAttribute('IsBundleContext__c')] = request.context;
	            obj[getPrefixedAttribute('Description__c')] = request.description;
	            var requestObj = {
	                ConstraintRuleSO: obj,
	                ConstraintRuleConditionSOs: [{
	                    'Name': trimRuleName(request.name,70) + productGroupsConstants.condition + '-1'
	                }],
	                ConstraintRuleActionDOs: []
	            };
	
	            requestObj.ConstraintRuleConditionSOs[0][getPrefixedAttribute('ProductScope__c')] = 'Product Group';
	            requestObj.ConstraintRuleConditionSOs[0][getPrefixedAttribute('ProductGroupId__c')] = $stateParams.id;
	            requestObj.ConstraintRuleConditionSOs[0][getPrefixedAttribute('MatchInOptions__c')] = true;
	            requestObj.ConstraintRuleConditionSOs[0][getPrefixedAttribute('Sequence__c')] = 1;
	
	            remoteService.createConstraintRule(requestObj)
	                .then(function(response) {
	                        deferQ.resolve(response);
	                    },
	                    function(reason) {
	                        deferQ.reject(reason);
	                    });
	            return deferQ.promise;
	        }
	
	        function prepareConditionCriteria(criteria) {
	            var response;
	            if (criteria) {
	                if (criteria.actionType) {
	                    delete criteria.actionType;
	                }
	                var predicates = criteria.filter.predicates;
	                if (predicates.length > 0) {
	                    for (var i = 0; i < predicates.length; i++) {
	                        var temp = predicates[i];
	                        temp.hasError ? delete temp.hasError : '';
	                        temp.targetField ? delete temp.targetField : '';
	                        temp.statementProduct ? delete temp.statementProduct : '';
	
	                    }
	                } else {
	                    response = '';
	                }
	            }
	            return response === undefined ? JSON.stringify(criteria) : '';
	        }
	
	        function getAssociatedRulesByProductGroupId(productGroupId) {
	            var deferQ = $q.defer();
	            remoteService.getRulesForProductGroup(productGroupId)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        /*
	         * - Create API call for PAR item
	         */
	        function createProductAttributeRule(request) {
	            var deferQ = $q.defer(),
	                obj = {
	                    "ProductAttributeRuleSO": {
	                        "Name": ""
	                    },
	                    "ProductAttributeRuleActionSOs": []
	                };
	            obj.ProductAttributeRuleSO['Name'] = request.name;
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('ProductScope__c')] = '';
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('Active__c')] = false;
	
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('EffectiveDate__c')] = request.effectiveDate;
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('ExpirationDate__c')] = request.expirationDate;
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('Active__c')] = request.isActive;
	            obj.ProductAttributeRuleSO[getPrefixedAttribute('ProductGroupScope__c')] = $stateParams.id;
	            obj.ProductAttributeRuleActionSOs = [];
	            remoteService.createProductAttributeRule(obj)
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function prepareCreateAvmRequest(obj) {
	            var response = {
	                AttributeValueMatrixSO: {},
	                AttributeFieldNames: [],
	                AttributeValueMatrixEntrySOs: []
	            };
	
	            if (obj.avm) {
	                var temp = obj.avm;
	                response.AttributeValueMatrixSO['Name'] = temp.name;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('Active__c')] = temp.isActive;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('EffectiveDate__c')] = temp.effectiveDate;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ExpirationDate__c')] = temp.expirationDate;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('Description__c')] = temp.description || '';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ApplicationType__c')] = temp.appType;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('TreatNullAsWildcard__c')] = temp.treatNullAsWildCard;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductScope__c')] = 'All';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductScopeOper__c')] = 'in';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductFamilyScope__c')] = 'All';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductFamilyScopeOper__c')] = 'in';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductGroupScope__c')] = $stateParams.id;
	                response.AttributeValueMatrixSO[getPrefixedAttribute('ProductGroupScopeOper__c')] = 'in';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('AccountScope__c')] = 'All';
	                response.AttributeValueMatrixSO[getPrefixedAttribute('AccountScopeOper__c')] = 'in';
	            }
	
	            if (obj.avmAttributesList.length > 0) {
	                for (var i = 0; i < obj.avmAttributesList.length; i++) {
	                    var temp = obj.avmAttributesList[i].autocomplete.selectedItem;
	                    response.AttributeFieldNames.push(temp.value);
	                }
	            }
	            return response;
	        }
	
	        function createAvm(requestObj, matrixList) {
	            var defer = $q.defer(),
	                finalRequestObj;
	            finalRequestObj = prepareCreateAvmRequest(requestObj);
	            remoteService.createAttributeValueMatrix(finalRequestObj)
	                .then(function(response) {
	                    defer.resolve({ metadata: getAVMMetadata(response.AttributeValueMatrixSO) });
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function getAVMMetadata(obj) {
	            var response = {};
	            response.id = obj.Id;
	            response.name = obj.Name;
	            response.isActive = obj[getPrefixedAttribute('Active__c')];
	            response.appType = obj[getPrefixedAttribute('ApplicationType__c')];
	            response.treatNullAsWildCard = obj[getPrefixedAttribute('TreatNullAsWildcard__c')];
	            response.expirationDate = obj[getPrefixedAttribute('ExpirationDate__c')];
	            response.effectiveDate = obj[getPrefixedAttribute('EffectiveDate__c')];
	            response.description = obj[getPrefixedAttribute('Description__c')];
	            response.isAVM = true;
	            return response;
	        }
	        function trimRuleName(name,limit) {
	            if(name.length > limit) {
	                name = name.substring(0, limit)+'...';
	            } else {
	                name += '-';
	            }
	            return name;
	        }
	
	        var associatedRuleService = {
	            createConstraintRule: createConstraintRule,
	            getAssociatedRulesByProductGroupId: getAssociatedRulesByProductGroupId,
	            createProductAttributeRule: createProductAttributeRule,
	            createAvm: createAvm,
	            trimRuleName: trimRuleName
	        };
	
	        return associatedRuleService;
	    };
	
	    productGroupsAssociatedRuleService.$inject = ['$q', '$stateParams', 'remoteService', 'systemConstants', 'productConstants', 'productGroupsConstants'];
	
	    module.exports = productGroupsAssociatedRuleService;
	
	})();


/***/ }),
/* 533 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"product-group-associated-rule\" data-ng-class=\"vm.isRightPanelVisible?'ruleSlideRight-tree-panel':'ruleSlideLeft-tree-panel'\">\n        <div class=\"left-tree tree-view left-panel\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <div class=\"rule-left-container\">\n                <header>\n                    <h4>{{vm.labels.Rules}}</h4>\n                    <div class=\"search\">\n                        <form novalidate>\n                            <div class=\"search-input-container\">\n                                <div class=\"input-group\">\n                                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchedStr\" name=\"searchText\" data-ng-model-options=\"{updateOn: 'submit'}\" required>\n                                    <label class=\"ng-binding\">Search</label>\n                                </div>\n                            </div>\n                        </form>\n                        <div class=\"clearfix\"></div>\n                        <div data-ng-if=\"vm.filteredCRs.length === 0 && \n                                         vm.filteredPARs.length === 0 && \n                                         vm.filteredAVMs.length === 0 && \n                                         vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                            {{vm.labels.NoMatchingRule}} <span><b>{{vm.searchStr}}</b></span>\n                        </div>\n                        <div data-ng-if=\"vm.appliedRules.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                            {{vm.labels.MaxSQLSizeExceedMessage}}\n                        </div>\n                    </div>\n                </header>\n                <div class=\"left-main-container\">\n                    <div class=\"left-rule-group\">\n                        <div class=\"block-container\">\n                            <div class=\"rules-list-container\">\n                                <div class=\"rulelListPanel\">\n                                    <div class=\"list-table\">\n                                        <table>\n                                            <tbody>\n                                                <tr ng-repeat=\"rule in vm.filteredCRs=(vm.appliedRules.ConstraintRuleSOs | filter: vm.searchedStr: rule.Name) track by rule.Id\" ng-click=\"vm.saveAndLoadDetails(rule)\" ng-class=\"rule.selected === true ? 'selected':''\">\n                                                    <td>\n                                                        <i class=\"fa fa-link\" aria-hidden=\"true\"></i> {{ rule.Name }}\n                                                    </td>\n                                                </tr>\n                                                <tr ng-repeat=\"rule in vm.filteredPARs=(vm.appliedRules.ProductAttributeRuleSOs | filter: vm.searchedStr: rule.Name) track by rule.Id\" ng-click=\"vm.saveAndLoadDetails(rule)\" ng-class=\"rule.selected === true ? 'selected':''\">\n                                                    <td>\n                                                        <i class=\"fa fa-sliders\" aria-hidden=\"true\"></i> {{ rule.Name }}\n                                                    </td>\n                                                </tr>\n                                                <tr ng-repeat=\"rule in vm.filteredAVMs=(vm.appliedRules.AttributeValueMatrixSOs | filter: vm.searchedStr: rule.Name) track by rule.Id\" ng-click=\"vm.saveAndLoadDetails(rule)\" ng-class=\"rule.selected === true ? 'selected':''\">\n                                                    <td>\n                                                        <i class=\"fa fa-table\" aria-hidden=\"true\"></i> {{ rule.Name }}\n                                                    </td>\n                                                </tr>\n                                            </tbody>\n                                        </table>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <!-- Left side panel ends here -->\n        <div class=\"rule-container\">\n            <div class=\"rule-panels\">\n                <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n                <div class=\"fixingHeaderRules\" data-ng-if=\"vm.typeOfRuleSelected === 'constraint'\">\n                    <div class=\"remove-rule\"></div>\n                    <div class=\"flex-3 rule-name\">{{vm.labels.RuleName}}</div>\n                    <div class=\"flex-1\">{{vm.labels.Sequence}}</div>\n                    <div class=\"flex-1\">{{vm.labels.EffectiveDate}}</div>\n                    <div class=\"flex-2\">{{vm.labels.ExpirationDate}}</div>\n                    <div class=\"flex-1\">{{vm.labels.Context}}</div>\n                    <div class=\"flex-1\">{{vm.labels.Active}}</div>\n                    <div class=\"flex-3\">{{vm.labels.Description}}</div>\n                </div>\n                <div class=\"fixingHeaderRules\" data-ng-if=\"vm.typeOfRuleSelected === 'productAttribute'\">\n                    <div class=\"remove-rule\"></div>\n                    <div class=\"flex-3 rule-name\">{{vm.labels.RuleName}}</div>\n                    <div class=\"flex-1\">{{vm.labels.Active}}</div>\n                    <div class=\"flex-2\">{{vm.labels.EffectiveDate}}</div>\n                    <div class=\"flex-2\">{{vm.labels.ExpirationDate}}</div>\n                </div>\n                <div class=\"fixingHeaderRules\" data-ng-if=\"vm.typeOfRuleSelected === 'attributeValueMatrix'\">\n                    <div class=\"remove-rule\"></div>\n                    <div class=\"flex-3 rule-name\">{{vm.labels.RuleName}}</div>\n                    <div class=\"flex-1\">{{vm.labels.EffectiveDate}}</div>\n                    <div class=\"flex-2\">{{vm.labels.ExpirationDate}}</div>\n                    <div class=\"flex-1\">{{vm.labels.Active}}</div>\n                    <div class=\"flex-3\">{{vm.labels.Description}}</div>\n                </div>\n                <div class=\"dropzone\">\n                    <div ng-include=\"'constraint-rule-container.html'\" data-ng-if=\"vm.typeOfRuleSelected === 'constraint'\"></div>\n                    <div ng-include=\"'product-attribute-rule-container.html'\" data-ng-if=\"vm.typeOfRuleSelected === 'productAttribute'\"></div>\n                    <div ng-include=\"'attribute-value-matrix-container.html'\" data-ng-if=\"vm.typeOfRuleSelected === 'attributeValueMatrix'\"></div>\n                </div>\n            </div>\n            <div class=\"rules-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToManageProductGroupPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">Save</a>\n                </div>\n            </div>\n            <a data-ui-sref=\"app.product.associations({'id': vm.$stateParams.productId })\" class=\"toast\" data-ng-if=\"vm.$stateParams.productId\">Go Back to \"{{vm.$stateParams.productName}}\"</a>\n        </div>\n        <div class=\"treePanelToSlide\" ng-click=\"vm.isRightPanelVisible=false\" data-ng-if=\"vm.typeOfRuleSelected !== 'none' || vm.typeOfRuleSelected !== 'productAttribute'\">\n            <i class=\"material-icons\">keyboard_arrow_left</i>\n        </div>\n        <div class=\"rule-tree-panel\" data-ng-if=\"vm.typeOfRuleSelected !== 'none' || vm.typeOfRuleSelected !== 'productAttribute'\">\n            <div class=\"tree-title\">\n                <header>\n                    <i class=\"material-icons pull-right\" data-ng-click=\"vm.isRightPanelVisible=true\" aria-hidden=\"true\" role=\"button\" tabindex=\"0\">clear</i>\n                    <h4>{{vm.rulesHeader}}</h4>\n                    <div class=\"search\">\n                        <form ng-submit=\"vm.doSearch()\" novalidate>\n                            <div class=\"search-input-container\">\n                                <div class=\"input-group\">\n                                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required drop-disable>\n                                    <label class=\"ng-binding\">Search</label>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                    <material-form-field model=\"vm.options[0].value\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.options[0]\">\n                    </material-form-field>\n                </header>\n            </div>\n            <div class=\"clearfix\"></div>\n            <div data-ng-if=\"vm.rulesTreeList.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{vm.labels.NoMatchingRecords}} <span><b>{{vm.searchText}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.rulesTreeList.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <tree-container data=\"vm.rulesTreeList\" header-text=\"vm.rulesHeader\" page-type='vm.type' node-children=\"vm.nodeChildren\" node-label=\"vm.nodeLabel\" expand-collapse=\"vm.expandCollapse\" enable-detail-panel=\"true\" options=\"vm.options\" search=\"vm.search\"></tree-container>\n        </div>\n    </div>\n    <div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\n    </div>\n    <div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n        <div class=\"modalOverlay\">\n            <div class=\"modalHeaderBody\">\n                <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n                <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n                <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n                <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n            </div>\n            <div class=\"modal-Footer text-right\">\n                <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\n                    <span class=\"modal-TextColor\">{{vm.labels.Cancel}}</span>\n                </button>\n                <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\n                    <span class=\"modal-TextColor\">{{vm.labels.Ok}}</span>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var productGroupAssociatedRuleController = function($q, $mdDialog, $mdMedia, $scope, $filter, $templateCache, $state, $stateParams, rulesService, picklistMetaData, productGroupsTree, applicationService, i18nService, cpqAdminConstants, allPicklists, statementProductAttributes, allRules, productConstants, applicationTypeValues, associatedRuleService, productGroupsConstants) {
	        $templateCache.put('constraint-rule-container.html', __webpack_require__(535));
	        $templateCache.put('constraint-rule-conditions.html', __webpack_require__(536));
	        $templateCache.put('constraint-rule-statements.html', __webpack_require__(537));
	        $templateCache.put('product-attribute-rule-container.html', __webpack_require__(538));
	        $templateCache.put('product-attribute-rule-scope.html', __webpack_require__(539));
	        $templateCache.put('product-attribute-rule-actions.html', __webpack_require__(540));
	        $templateCache.put('attribute-value-matrix-container.html', __webpack_require__(541));
	        $templateCache.put('avm-conditions.html', __webpack_require__(542));
	        $templateCache.put('avm-statements.html', __webpack_require__(543));
	
	        var vm = this;
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.isRightPanelVisible = true;
	        vm.typeOfRuleSelected = 'none';
	        vm.avms = [];
	        vm.allRules = allRules;
	        vm.appliedRules = findRuleTypeBasedOnArrayName(allRules);
	
	        vm.disableLeftBtn = true;
	        vm.avmScopeList = [{
	            scope: 'Product',
	            autocomplete: {
	                querySearch: rulesService.productSearch,
	                displayName: 'Name'
	
	            }
	        }, {
	            scope: 'Product Family',
	            autocomplete: {
	                querySearch: rulesService.productSearch,
	                displayName: 'Name'
	
	            }
	        }, {
	            scope: 'Product Group',
	            autocomplete: {
	                querySearch: rulesService.productSearch,
	                displayName: 'Name'
	
	            }
	        }, {
	            scope: 'Account Location',
	            autocomplete: {
	                querySearch: rulesService.productSearch,
	                displayName: 'Name'
	
	            }
	        }];
	        vm.avmAttributesList = [];
	        vm.matrixList = [];
	
	        vm.expandCollapse = function() {
	            vm.isRightPanelVisible = true;
	        }
	
	        vm.models = {
	            selected: null,
	            lists: {
	                'selectedAttributes': []
	            }
	        };
	        /* Constraint Rule Section */
	        vm.conditionsList = [];
	        vm.statementList = [];
	
	        vm.productFieldOperatorPicklistEntries = {
	            PicklistValues: rulesService.getProductFieldOperators()
	        };
	
	
	        var productFields = ['A', 'B', 'C', 'D'];
	        /* Get the Product fields picklist values from the allPicklists resolved object.*/
	        for (var i = 0; i < productFields.length; i++) {
	            for (var j = 0; j < allPicklists.length; j++) {
	                if (allPicklists[j].FieldName === rulesService.getPrefixedAttribute('ProductField' + productFields[i] + '__c')) {
	                    rulesService.setProductFieldValues(productFields[i], allPicklists[j].PicklistValues);
	                }
	            }
	        }
	
	        vm.operatorPicklistEntries = function(type) {
	            var response = {
	                PicklistValues: []
	            };
	            for (var j = 0; j < allPicklists.length; j++) {
	                if (allPicklists[j].FieldName === rulesService.getPrefixedAttribute('ProductFieldOperator' + type + '__c')) {
	                    response.PicklistValues = allPicklists[j].PicklistValues;
	                    break;
	                }
	            }
	            return response;
	        };
	
	        var sampleCondition = {
	                'name': '',
	                'scope': '',
	                'operator': '',
	                'product': {
	                    'name': '',
	                    'id': ''
	                },
	                'productField': [],
	                'matchInAsset': false,
	                'matchInCartOptions': false,
	                'matchInLocation': false,
	                'matchInOptions': true,
	                'matchInPrimaryLines': false,
	                'sequence': '',
	                'id': '',
	                'isCondition': true,
	                'autocomplete': {
	                    'querySearch': rulesService.productSearch,
	                    'displayName': 'Name'
	                },
	                'conditionCriteria': {
	                    'filter': {
	                        'predicates': []
	                    }
	                }
	            },
	            sampleStatement = {
	                'name': '',
	                'actionType': '',
	                'actionIntent': '',
	                'scope': '',
	                'product': {
	                    'name': '',
	                    'id': ''
	                },
	                'id': '',
	                'isStatement': true,
	                'matchInCartOptions': false,
	                'matchInOptions': true,
	                'matchInPrimaryLines': false,
	                'includeMessaging': true,
	                'messageDetails': '',
	                'sequence': '',
	                'messageType': 'Warning',
	                'autocomplete': {
	                    'querySearch': rulesService.productSearch,
	                    'displayName': 'Name'
	                },
	                'actionCriteria': {
	                    'filter': {
	                        'predicates': []
	                    }
	                }
	            };
	
	        function resetModel(typeOfRule) {
	            if (typeOfRule === 'constraint') {
	                vm.conditionsList = [];
	                vm.statementList = [];
	            } else if (typeOfRule === 'productAttribute') {
	                vm.paScopeList = [];
	                vm.paActionList = [];
	            } else if (typeOfRule === 'attributeValueMatrix') {
	                vm.avmScopeList = [];
	                vm.avmAttributesList = [];
	            }
	
	        }
	
	        function updateConstraintModel(cnList, stList) {
	            cnList.length ? vm.conditionsList = cnList : vm.conditionsList = [];
	            stList.length ? vm.statementList = stList : vm.statementList = [];
	        }
	
	        function saveConstraintRuleDetails() {
	            var deferQ = $q.defer();
	            if (!rulesService.isConstraintRuleNotComplete(vm.conditionsList, vm.statementList)) {
	                addAlert('Please select values for all the fields', cpqAdminConstants.DANGER);
	                deferQ.reject({
	                    type: 'Error',
	                    message: 'Please select values for all the fields'
	                });
	
	            } else {
	
	                var checkAssociation = rulesService.checkAssociation(vm.selectedRule, vm.conditionsList);
	                if (checkAssociation) {
	                    var requestObj = rulesService.prepareConstraintRuleRequest(vm.selectedRule, vm.conditionsList, vm.statementList);
	
	                    rulesService.updateConstraintRule(requestObj)
	                        .then(function(response) {
	                            runConstraintRuleJob(vm.selectedRule.id);
	                            deferQ.resolve(response);
	                        }, function(reason) {
	                            deferQ.reject(reason);
	                        });
	                } else {
	                    addAlert('Please update Custom Condition Association properly', cpqAdminConstants.DANGER);
	                }
	            }
	            return deferQ.promise;
	
	        }
	
	        function loadConstraintRuleDetails(rule) {
	            rulesService.getConstraintRuleDetails(rule.Id || rule.id)
	                .then(function(response) {
	                    updateSelectedAttribute(rule.Id || rule.id);
	                    resetModel('constraint');
	                    updateSelectedRuleMetadata(response.ruleMetadata);
	                    updateConstraintModel(response.conditionsList, response.statementList);
	                }, function(reason) {
	                    updateSelectedAttribute(rule.Id || rule.id);
	                    resetModel('constraint');
	                    updateSelectedRuleMetadata({});
	                    updateConstraintModel([], []);
	                    addAlert('Something went wrong while loading information of the selected rule', cpqAdminConstants.DANGER);
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        vm.addDroppedStatement = function(event, index, item) {
	            if (!item.isStatement && !item.isCondition) {
	                var sampleCopy = angular.copy(sampleStatement);
	                sampleCopy.name = associatedRuleService.trimRuleName(vm.selectedRule.name,70) + productGroupsConstants.statement + '-' + (vm.statementList.length + 1);
	                if (vm.rulesHeader === 'Product Structure') {
	                    sampleCopy.autocomplete.selectedItem = {
	                        Id: item.componentProductId,
	                        Name: item.Name
	                    };
	                } else {
	                    sampleCopy.autocomplete.selectedItem = {
	                        Id: item.ProductGroupSO.Id,
	                        Name: item.ProductGroupSO.Name
	                    };
	                }
	
	                sampleCopy.scope = getDroppedType(item);
	                sampleCopy.operator = 'equal to';
	                vm.statementList.splice(index, 0, sampleCopy);
	                return true;
	            } else if (item.isStatement && !item.isCondition) {
	                /* - Remove from the orignial location */
	                var location = findIndex(angular.copy(vm.statementList), item);
	                if (location) {
	                    vm.statementList.splice(parseInt(location), 1);
	                }
	                /* Add to the new index location */
	                if (item.autocomplete) {
	                    item.autocomplete['querySearch'] = rulesService.productSearch;
	                }
	                vm.statementList.splice(parseInt(index), 0, item);
	
	                $scope.$apply();
	                return true;
	            } else {
	                return false;
	            }
	
	        };
	
	        function checkIfDraggedItemNotPresent(draggedType, item) {
	            var notPresent = true;
	            for (var i = 0; i < vm.conditionsList.length; i++) {
	                var tempObj = vm.conditionsList[i];
	                if (tempObj.scope === draggedType && tempObj.autocomplete.selectedItem) {
	                    if (draggedType === 'Product' && tempObj.autocomplete.selectedItem.Id === item.componentProductId) {
	                        notPresent = false;
	                        break;
	                    }
	                    if (draggedType === 'Product Group' && tempObj.autocomplete.selectedItem.Id === item.ProductGroupSO.Id) {
	                        notPresent = false;
	                        break;
	                    }
	                }
	            }
	            return notPresent;
	        }
	
	        vm.addDroppedCondition = function(event, index, item) {
	            if (!item.isCondition && !item.isStatement) {
	                var draggedType = (vm.rulesHeader === 'Product Structure') ? 'Product' : 'Product Group';
	                if (checkIfDraggedItemNotPresent(draggedType, item)) {
	                    var sampleCopy = angular.copy(sampleCondition);
	                    sampleCopy.name = associatedRuleService.trimRuleName(vm.selectedRule.name,70) + productGroupsConstants.condition + '-' + (vm.conditionsList.length + 1);
	                    if (vm.rulesHeader === 'Product Structure') {
	                        sampleCopy.autocomplete.selectedItem = {
	                            Id: item.componentProductId,
	                            Name: item.Name
	                        };
	                    } else {
	                        sampleCopy.autocomplete.selectedItem = {
	                            Id: item.ProductGroupSO.Id,
	                            Name: item.ProductGroupSO.Name
	                        };
	                    }
	
	                    sampleCopy.scope = getDroppedType(item);
	                    sampleCopy.operator = 'equal to';
	                    sampleCopy.sequence = rulesService.getNextSequence(vm.conditionsList);
	                    vm.conditionsList.splice(index, 0, sampleCopy);
	                    return true;
	                } else {
	                    addAlert(draggedType + ' has already been added previously to the Rule', cpqAdminConstants.DANGER);
	                    applicationService.showErrorMessage({
	                        type: 'Error',
	                        message: draggedType + ' has already been added previously to the Rule'
	                    })
	                    return false;
	                }
	
	            } else if (item.isCondition && !item.isStatement) {
	                /* - Remove from the orignial location */
	                var location = findIndex(angular.copy(vm.conditionsList), item);
	                if (location) {
	                    vm.conditionsList.splice(parseInt(location), 1);
	                }
	                /* Add to the new index location */
	                if (item.autocomplete) {
	                    item.autocomplete['querySearch'] = rulesService.productSearch;
	                }
	                vm.conditionsList.splice(parseInt(index), 0, item);
	
	                $scope.$apply();
	                return true;
	            } else {
	                return false;
	            }
	        };
	
	        vm.addConditionSubItem = function(index) {
	            var item = angular.copy(sampleCondition);
	            item.scope = 'Product';
	            item.operator = 'equal to';
	            item.name = associatedRuleService.trimRuleName(vm.selectedRule.name,70) + productGroupsConstants.condition + '-' + (vm.conditionsList.length + 1);
	            item.sequence = rulesService.getNextSequence(vm.conditionsList);
	            if (index + 1) {
	                vm.conditionsList.splice(parseInt(index + 1), 0, item);
	            } else {
	                vm.conditionsList.push(item);
	            }
	
	
	        };
	
	        function resetCenterPanel() {
	            vm.typeOfRuleSelected = 'none';
	            updateSelectedRuleMetadata({});
	        }
	
	        function removeRule(type) {
	            if (type === 'constraint') {
	                rulesService.removeConstraintRules(vm.selectedRule.id)
	                    .then(function(response) {
	                        removeRulesForProductGroup('ConstraintRuleSOs', vm.selectedRule.id);
	                        resetCenterPanel();
	                        addAlert('Successfully removed', cpqAdminConstants.SUCCESS);
	                    }, function(reason) {
	                        applicationService.showErrorMessage(reason);
	                    });
	            } else if (type === 'productAttribute') {
	                rulesService.removeProductAttributeRules(vm.selectedRule.id).
	                then(function(response) {
	                    removeRulesForProductGroup('ProductAttributeRuleSOs', vm.selectedRule.id);
	                    resetCenterPanel();
	                    addAlert('Successfully removed', cpqAdminConstants.SUCCESS);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else if (type === 'attributeValueMatrix') {
	                rulesService.removeAttributeValueMatrix(vm.selectedRule.id).
	                then(function(response) {
	                    removeRulesForProductGroup('AttributeValueMatrixSOs', vm.selectedRule.id);
	                    resetCenterPanel();
	                    addAlert('Successfully removed', cpqAdminConstants.SUCCESS);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            }
	        }
	
	        function removeCondition(ruleType, index, id) {
	            if (ruleType === 'constraint') {
	                if (id) {
	                    rulesService.removeConstraintRuleConditions(id)
	                        .then(function(response) {
	                            vm.conditionsList.splice(index, 1);
	                            addAlert('successfully removed', cpqAdminConstants.SUCCESS);
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	
	                } else {
	                    vm.conditionsList.splice(index, 1);
	                }
	            }
	        }
	
	        vm.addStatementSubItem = function(index) {
	            var item = angular.copy(sampleStatement);
	            item.name = associatedRuleService.trimRuleName(vm.selectedRule.name,70) + productGroupsConstants.statement + '-' + (vm.statementList.length + 1);
	            if (index + 1) {
	                vm.statementList.splice(parseInt(index + 1), 0, item);
	            } else {
	                vm.statementList.push(item);
	            }
	        };
	
	        function removeStatement(ruleType, index, id) {
	            if (ruleType === 'constraint') {
	                if (id) {
	                    rulesService.removeConstraintRuleActions(id)
	                        .then(function(response) {
	                            vm.statementList.splice(index, 1);
	                            addAlert('successfully removed', cpqAdminConstants.SUCCESS);
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                } else {
	                    vm.statementList.splice(index, 1);
	                }
	            } else if (ruleType === 'productAttribute') {
	                if (id) {
	                    rulesService.removeProductAttributeRuleActions(id)
	                        .then(function(response) {
	                            vm.paActionList.splice(index, 1);
	                            addAlert('successfully removed', cpqAdminConstants.SUCCESS);
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	
	                } else {
	                    vm.paActionList.splice(index, 1);
	                }
	            }
	
	        }
	
	        function prepareNewConstraintRule() {
	            var item = {};
	            item.sequence = '';
	            item.isActive = true;
	            item.name = '';
	            item.effectiveDate = undefined;
	            item.expirationDate = undefined;
	            item.context = false;
	            item.description = '';
	            return item;
	        }
	        vm.openConstraintPopup = function(type, tabToOpen, indexToHighlight) {
	            $mdDialog.show({
	                    controller: __webpack_require__(544),
	                    template: __webpack_require__(545),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    controllerAs: 'vm',
	                    resolve: {
	                        selectedRule: function() {
	                            return type && type == 'new' ? angular.copy(prepareNewConstraintRule()) : angular.copy(vm.selectedRule);
	                        },
	                        type: function() {
	                            return type ? type : 'edit';
	                        },
	                        tabToOpen: function() {
	                            return tabToOpen ? tabToOpen : 0;
	                        },
	                        conditionsList: function() {
	                            return type && type == 'new' ? [] : angular.copy(vm.conditionsList);
	                        },
	                        statementsList: function() {
	                            return type && type == 'new' ? [] : angular.copy(vm.statementList);
	                        },
	                        indexToHighlight: function() {
	                            return indexToHighlight !== '' ? (indexToHighlight === 0 ? 0 : indexToHighlight) : '';
	                        }
	                    }
	                })
	                .then(function(requestObj, type) {
	                    if (requestObj.type === 'new') {
	                        createConstraintRule(requestObj.rule);
	                    } else {
	                        updateConstraintRule(requestObj);
	                    }
	                }, function() {});
	        };
	
	        function runConstraintRuleJob(ruleId) {
	            rulesService.updateConstraintRuleJob(ruleId)
	                .then(function(response) {
	                    /* Do nothing */
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function createConstraintRule(requestObj) {
	
	            associatedRuleService.createConstraintRule(requestObj)
	                .then(function(response) {
	                    /* TODO : Clear all the button selections and add this to the first item */
	                    vm.appliedRules.ConstraintRuleSOs.unshift({
	                        "RuleType": "ConstraintRule",
	                        "Id": response.ConstraintRuleSO.Id,
	                        "Name": response.ConstraintRuleSO.Name
	                    });
	                    runConstraintRuleJob(response.ConstraintRuleSO.Id);
	                    vm.typeOfRuleSelected = 'constraint';
	                    updateSelectedRuleMetadata(rulesService.getRuleMetadata(response.ConstraintRuleSO));
	                    loadRuleDetails(vm.selectedRule);
	
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function updateConstraintRule(obj) {
	            if (!rulesService.isConstraintRuleNotComplete(vm.conditionsList, vm.statementList)) {
	                addAlert('Please select values for all the fields', cpqAdminConstants.DANGER);
	                applicationService.showErrorMessage({
	                    type: 'Error',
	                    message: 'Please select values for all the fields'
	                });
	            } else {
	                var requestObj = rulesService.prepareConstraintRuleRequest(obj.rule, obj.conditionsList, obj.statementList);
	                rulesService.updateConstraintRule(requestObj)
	                    .then(function(response) {
	                        /* Run the Job rule here . Only watch for errors. On Success, it goes silent */
	                        runConstraintRuleJob(obj.rule.id);
	                        loadAllRulesForProductGroup().then(function(response) {
	                            loadRuleDetails(vm.selectedRule);
	                        });
	                    }, function(reason) {
	                        applicationService.showErrorMessage();
	                    });
	            }
	
	        }
	
	        /*********** Constraint Rule Section ******************/
	
	        /*********** Product Atrribute Rule Section ***********/
	
	        vm.paScopeList = [];
	        vm.paActionList = [];
	
	        var paSampleAction = {
	            'name': '',
	            'targetField': {
	                'autocomplete': {
	                    'querySearch': rulesService.targetFieldSearch,
	                    'displayName': 'label'
	                }
	            },
	            'actionType': '',
	            'valueExpression': ''
	        };
	
	        function saveProductAttributeRuleDetails() {
	            var deferQ = $q.defer();
	            if (!rulesService.isPARuleNotComplete(vm.paScopeList, vm.paActionList)) {
	                /* TODO : Show error message to the user */
	                addAlert('Please select values for all the fields', cpqAdminConstants.DANGER);
	                deferQ.reject({
	                    type: 'Error',
	                    message: 'Please select values for all the fields'
	                });
	            } else {
	                var requestObj = rulesService.prepareProductAttributeRuleRequest(vm.selectedRule, vm.paScopeList, vm.paActionList);
	
	                rulesService.updateProductAttributeRule(requestObj)
	                    .then(function(response) {
	                        deferQ.resolve(response);
	                    }, function(reason) {
	                        deferQ.reject(reason);
	                    });
	            }
	            return deferQ.promise;
	
	        }
	
	        function loadProductAttributeRuleDetails(rule) {
	            rulesService.getProductAttributeRuleDetails(rule.Id || rule.id)
	                .then(function(response) {
	                    updateSelectedAttribute(rule.Id || rule.id);
	                    resetModel('productAttribute');
	                    updateSelectedRuleMetadata(response.ruleMetadata);
	                    updateProductAttributeModel(response.scopeList, response.actions);
	                }, function(reason) {
	                    updateSelectedAttribute(rule.Id || rule.id);
	                    resetModel('productAttribute');
	                    updateSelectedRuleMetadata({});
	                    updateProductAttributeModel([], []);
	                    addAlert('Something went wrong while loading information of the selected rule', cpqAdminConstants.DANGER);
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function updateProductAttributeModel(scopeList, stList) {
	            scopeList.length ? vm.paScopeList = scopeList : vm.paScopeList = [];
	            stList.length ? vm.paActionList = stList : vm.paActionList = [];
	        }
	
	        function prepareNewProductAttributeRule() {
	            var item = {};
	            item.isActive = true;
	            item.name = '';
	            item.effectiveDate = undefined;
	            item.expirationDate = undefined;
	            return item;
	        }
	        vm.openProductAttributePopup = function(type, tabToOpen, indexToHighlight) {
	            $mdDialog.show({
	                    controller: __webpack_require__(546),
	                    template: __webpack_require__(547),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    controllerAs: 'vm',
	                    resolve: {
	                        selectedRule: function() {
	                            return type && type == 'new' ? angular.copy(prepareNewProductAttributeRule()) : angular.copy(vm.selectedRule);
	                        },
	                        type: function() {
	                            return type ? type : 'edit';
	                        },
	                        tabToOpen: function() {
	                            return tabToOpen ? tabToOpen : 0;
	                        },
	                        indexToHighlight: function() {
	                            return indexToHighlight !== '' ? (indexToHighlight === 0 ? 0 : indexToHighlight) : '';
	                        },
	                        scopesList: function() {
	                            return type && type == 'new' ? [] : angular.copy(vm.paScopeList);
	                        },
	                        actionsList: function() {
	                            return type && type == 'new' ? [] : angular.copy(vm.paActionList);
	                        }
	                    }
	                })
	                .then(function(requestObj) {
	                    if (requestObj.type === 'new') {
	                        createProductAttributeRule(requestObj.rule);
	                    } else {
	                        updateProductAttributeRule(requestObj);
	                    }
	                }, function() {});
	        };
	
	        function createProductAttributeRule(requestObj) {
	            associatedRuleService.createProductAttributeRule(requestObj)
	                .then(function(response) {
	                    vm.appliedRules.ProductAttributeRuleSOs.unshift({
	                        "RuleType": "ProductAttributeRule",
	                        "Id": response.ProductAttributeRuleSO.Id,
	                        "Name": response.ProductAttributeRuleSO.Name
	                    });
	                    vm.typeOfRuleSelected = 'productAttribute';
	                    var productAttributeRule = rulesService.getRuleMetadata(response.ProductAttributeRuleSO);
	                    productAttributeRule.RuleType = 'ProductAttributeRule';
	                    updateSelectedRuleMetadata(productAttributeRule);
	                    loadRuleDetails(vm.selectedRule);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function updateProductAttributeRule(obj) {
	            var requestObj = rulesService.prepareProductAttributeRuleRequest(obj.rule, obj.scopeList, obj.statementList);
	            rulesService.updateProductAttributeRule(requestObj)
	                .then(function(response) {
	                    loadAllRulesForProductGroup().then(function() {
	                        loadRuleDetails(vm.selectedRule);
	                    });
	                }, function(reason) {
	                    applicationService.showErrorMessage();
	                });
	        }
	
	        vm.addPaActionSubItem = function(index) {
	            var item = angular.copy(paSampleAction);
	            item.name = associatedRuleService.trimRuleName(vm.selectedRule.name,67) + productGroupsConstants.pa_statement + '-' + vm.paActionList.length;
	            if (index) {
	                vm.paActionList.splice(parseInt(index), 0, item);
	            } else {
	                vm.paActionList.push(item);
	            }
	        }
	
	        /* Product Atrribute Rule Section */
	
	        /* Common Code between Constraint and Product Attribute */
	
	        vm.type = 'rules';
	        vm.allowedTypes = ['false'];
	        vm.nodeChildren = 'children';
	        vm.nodeLabel = '';
	        vm.rulesHeader = 'Product Groups';
	        vm.rulesTreeList = productGroupsTree.ProductGroupDOs;
	        /*get middle panel container data*/
	        vm.productScopePicklistEntries = {
	            PicklistValues: picklistMetaData.scope
	        };
	        vm.productScopeAVMPicklistEntries = {
	            PicklistValues: picklistMetaData.avmScope
	        };
	        vm.conditionScopePicklistEntries = {
	            PicklistValues: picklistMetaData.conditionScope
	        };
	        vm.statementScopePicklistEntries = {
	            PicklistValues: picklistMetaData.statementScope
	        };
	        vm.operatorPicklistEntries = {
	            PicklistValues: picklistMetaData.operator
	        };
	        vm.avmOperatorPicklistEntries = {
	            PicklistValues: picklistMetaData.avmOperator
	        };
	        vm.actionTypePicklistEntries = {
	            PicklistValues: picklistMetaData.actionType,
	            methodToCallInController: updateConstraintRuleActionIntent
	        };
	        vm.paActionTypePicklistEntries = {
	            PicklistValues: picklistMetaData.paActionType
	        };
	        vm.actionIntentPicklistEntries = {
	            PicklistValues: picklistMetaData.actionIntent
	        };
	        vm.productFamilyPicklistEntries = {
	            PicklistValues: picklistMetaData.productFamily
	        };
	        vm.dispositionPicklistEntries = {
	            PicklistValues: picklistMetaData.contextDisposition
	        };
	        vm.conditionAssociationPicklistEntries = {
	            PicklistValues: rulesService.getConditionAssociationTypes()
	        };
	
	
	        vm.getActionIntentProperties = function(actionType) {
	            if (actionType) {
	                return {
	                    PicklistValues: rulesService.getActionIntent(actionType)
	                }
	            } else {
	                return {
	                    PicklistValues: []
	                }
	            }
	
	        };
	
	        function updateConstraintRuleActionIntent(actionType) {
	            if (selectedRowIndex >= 0) {
	                var actionIntent = rulesService.getActionIntent(actionType);
	                var item = vm.statementList[selectedRowIndex];
	                item.getActionTypes = {
	                    PicklistValues: actionIntent
	                };
	                item.actionIntent = '';
	                if (!item.messageDetails) {
	                    item.messageDetails = rulesService.getMessageDetails(actionType);
	                }
	            }
	        }
	        var selectedRowIndex;
	        vm.trackSelectEvent = function(index) {
	            selectedRowIndex = index;
	        };
	        vm.options = [{
	            'FieldName': 'Options_PL',
	            'FieldType': 'PICKLIST',
	            'IsEditable': true,
	            'allowClear': false,
	            'PicklistValues': [
	                /*{
	                                'active': true,
	                                'defaultValue': false,
	                                'label': 'Product Structure',
	                                'value': 'Product Structure'
	                            },*/
	                {
	                    'active': true,
	                    'defaultValue': false,
	                    'label': 'Product Groups',
	                    'value': 'Product Groups'
	                }
	            ],
	            //'value': 'Product Structure'
	            'value': 'Product Groups'
	        }];
	
	        function updateSelectedRuleMetadata(metadata) {
	            vm.selectedRule = metadata;
	        }
	
	        function updateSelectedAttribute(ruleId) {
	            if (vm.appliedRules.ProductAttributeRuleSOs.length) {
	                setSelectedAttribute('ProductAttributeRuleSOs', ruleId);
	            }
	            if (vm.appliedRules.ConstraintRuleSOs.length) {
	                setSelectedAttribute('ConstraintRuleSOs', ruleId);
	            }
	            if (vm.appliedRules.AttributeValueMatrixSOs.length) {
	                setSelectedAttribute('AttributeValueMatrixSOs', ruleId);
	            }
	        }
	
	        function setSelectedAttribute(arrayName, ruleId) {
	            for (var item in vm.appliedRules[arrayName]) {
	                if (vm.appliedRules[arrayName][item].Id === ruleId) {
	                    vm.appliedRules[arrayName][item].selected = true;
	                } else {
	                    vm.appliedRules[arrayName][item].selected = false;
	                }
	            }
	        }
	
	        vm.saveAndLoadDetails = function(rule) {
	            /* 
	             * - TODO : Check if there is any updated items  and any newly added items to the list.
	             * - call Save API for newly added one
	             * - Update API for updated API
	             */
	            var requestObj,
	                typeOfRule = '';
	            if (rule.RuleType === 'ConstraintRule') {
	                typeOfRule = 'constraint';
	            } else if (rule.RuleType === 'ProductAttributeRule') {
	                typeOfRule = 'productAttribute';
	            } else if (rule.RuleType === 'AttributeValueMatrix') {
	                typeOfRule = 'attributeValueMatrix';
	            }
	            if (vm.selectedRule && vm.selectedRule.id) {
	                if (typeOfRule === 'constraint') {
	                    if (vm.typeOfRuleSelected === 'productAttribute') {
	                        saveProductAttributeRuleDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'constraint';
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	
	                    } else if (vm.typeOfRuleSelected === 'attributeValueMatrix') {
	                        saveAttributeValueMatrixDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'constraint';
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                    } else {
	
	                        if (!rulesService.isConstraintRuleNotComplete(vm.conditionsList, vm.statementList)) {
	                            addAlert('Please select values for all the fields', cpqAdminConstants.DANGER);
	                        } else {
	                            saveConstraintRuleDetails()
	                                .then(function(response) {
	                                    vm.typeOfRuleSelected = 'constraint';
	                                    loadRuleDetails(rule);
	                                }, function(reason) {
	                                    applicationService.showErrorMessage(reason);
	                                });
	                        }
	
	                    }
	
	
	                } else if (typeOfRule === 'productAttribute') {
	                    if (vm.typeOfRuleSelected === 'constraint') {
	                        saveConstraintRuleDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'productAttribute';
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	
	                    } else if (vm.typeOfRuleSelected === 'attributeValueMatrix') {
	                        saveAttributeValueMatrixDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'productAttribute';
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                    } else {
	                        if (!rulesService.isPARuleNotComplete(vm.paScopeList, vm.paActionList)) {
	                            addAlert('Please select values for all the fields', cpqAdminConstants.DANGER);
	                        } else {
	                            saveProductAttributeRuleDetails()
	                                .then(function(response) {
	                                    vm.typeOfRuleSelected = 'productAttribute';
	                                    loadRuleDetails(rule);
	                                }, function(reason) {
	                                    applicationService.showErrorMessage(reason);
	                                });
	                        }
	
	                    }
	                } else if (typeOfRule === 'attributeValueMatrix') {
	                    if (vm.typeOfRuleSelected === 'constraint') {
	                        saveConstraintRuleDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'attributeValueMatrix';
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	
	                    } else if (vm.typeOfRuleSelected === 'productAttribute') {
	                        saveProductAttributeRuleDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'attributeValueMatrix';
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	
	                    } else {
	                        saveAttributeValueMatrixDetails()
	                            .then(function(response) {
	                                vm.typeOfRuleSelected = 'attributeValueMatrix';
	                                loadRuleDetails(rule);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                    }
	
	                }
	            } else {
	                vm.typeOfRuleSelected = typeOfRule;
	                loadRuleDetails(rule);
	            }
	
	        };
	
	        function saveAttributeValueMatrixDetails() {
	            var deferQ = $q.defer();
	            var requestObj = {
	                avm: vm.selectedRule,
	                avmAttributesList: vm.avmAttributesList,
	                avmAttributeValueMatrixEntry: vm.matrixList
	            };
	            rulesService.updateAvm({ avm: angular.copy(vm.selectedRule), avmAttributesList: angular.copy(vm.avmMatrixColumnList) }, angular.copy(vm.avmScopeList), angular.copy(vm.matrixList))
	                .then(function(response) {
	                    deferQ.resolve(response);
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function saveRuleDetails(typeOfRule, toState, toParams) {
	            if (typeOfRule === 'constraint') {
	                saveConstraintRuleDetails()
	                    .then(function(response) {
	                        isFormSaved = true;
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        } else {
	                            addAlert('Updated successfully', cpqAdminConstants.SUCCESS);
	                            loadConstraintRuleDetails(vm.selectedRule);
	                        }
	                    }, function(reason) {
	                        isFormSaved = false;
	                        applicationService.showErrorMessage(reason);
	                    });
	            } else if (typeOfRule === 'productAttribute') {
	                saveProductAttributeRuleDetails()
	                    .then(function(response) {
	                        isFormSaved = true;
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        } else {
	                            addAlert('Updated successfully', cpqAdminConstants.SUCCESS);
	                            loadProductAttributeRuleDetails(vm.selectedRule);
	                        }
	                    }, function(reason) {
	                        isFormSaved = false;
	                        applicationService.showErrorMessage(reason);
	                    });
	            } else if (typeOfRule === 'attributeValueMatrix') {
	                saveAttributeValueMatrixDetails()
	                    .then(function(response) {
	                        isFormSaved = true;
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        } else {
	                            addAlert('Updated successfully', cpqAdminConstants.SUCCESS);
	                            loadAttributeValueMatrixRuleDetails(vm.selectedRule);
	                        }
	                    }, function(reason) {
	                        isFormSaved = false;
	                        applicationService.showErrorMessage(reason);
	                    });
	            }
	        }
	
	        function prepareAndUpdateAttributesList() {
	            var attributesList = [],
	                columns = angular.copy(vm.avmMatrixColumnList);
	            for (var i = 0; i < columns.length; i++) {
	                var temp = {
	                    autocomplete: {
	                        selectedItem: {
	                            label: columns[i].name,
	                            value: columns[i].field
	                        }
	                    }
	                }
	                attributesList.push(temp);
	            }
	            rulesService.setAVMPopupAttributesList(angular.copy(attributesList));
	        }
	
	        function updateAVMModel(scopeList, matrixList, columns) {
	            vm.avmScopeList = scopeList;
	            vm.avmMatrixColumnList = columns;
	            prepareAndUpdateAttributesList();
	            vm.matrixList = matrixList;
	            rulesService.setOriginalAttributesList(angular.copy(columns));
	        }
	
	        function loadAttributeValueMatrixRuleDetails(rule) {
	            rulesService.loadAttributeValueMatrixRuleDetails(rule.Id || rule.id)
	                .then(function(response) {
	                    updateSelectedAttribute(rule.Id || rule.id);
	                    resetModel('attributeValueMatrix');
	                    updateSelectedRuleMetadata(response.metadata);
	                    updateAVMModel(response.scopeList, response.matrixList, response.columnList);
	                }, function(reason) {
	                    updateSelectedAttribute(rule.Id || rule.id);
	                    resetModel('attributeValueMatrix');
	                    updateAVMModel([], []);
	                    updateSelectedRuleMetadata({});
	                    addAlert('Something went wrong while loading information of the selected rule', cpqAdminConstants.DANGER);
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function loadRuleDetails(rule) {
	            var typeOfRule = getRuleType(rule);
	            if (typeOfRule === 'constraint') {
	                loadConstraintRuleDetails(rule);
	            } else if (typeOfRule === 'productAttribute') {
	                loadProductAttributeRuleDetails(rule);
	            } else if (typeOfRule === 'attributeValueMatrix') {
	                loadAttributeValueMatrixRuleDetails(rule);
	            }
	
	        }
	
	        vm.doSearch = function() {
	            var typeToBeSearched = vm.options[0].value,
	                searchText = vm.searchText;
	            vm.search(typeToBeSearched, searchText, 1);
	        };
	
	        vm.search = function(typeToBeSearched, searchText, rightSidePageNumber) {
	            var typeToBeSearched = vm.options[0].value;
	            var searchText = vm.searchText;
	            if (vm.rulesHeader === 'Product Structure') {
	                rulesService.getProductStructure($stateParams.id)
	                    .then(function(response) {
	                        vm.nodeChildren = 'children';
	                        vm.nodeLabel = 'Name';
	                        vm.rulesHeader = 'Product Structure';
	                        vm.rulesTreeList = response;
	                        vm.isMaxSQLSizeExceed = false;
	                    }, function(reason) {
	                        vm.rulesTreeList = [];
	                        if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                            vm.isMaxSQLSizeExceed = true;
	                        } else {
	                            applicationService.showErrorMessage(reason);
	                        }
	                    });
	            } else if (vm.rulesHeader === 'Product Groups') {
	                vm.rulesHeader = 'Product Groups';
	                var requestedObj = {
	                    SearchString: searchText || '',
	                    NumberOfRecordsPerChunk: 25,
	                    ChunkNumber: rightSidePageNumber
	                };
	                rulesService.getAllProductGroups(requestedObj)
	                    .then(function(response) {
	                        vm.nodeChildren = 'children';
	                        vm.nodeLabel = '';
	                        vm.rulesHeader = 'Product Groups';
	                        vm.rulesTreeList = response.ProductGroupDOs;
	                        vm.isMaxSQLSizeExceed = false;
	                    }, function(reason) {
	                        vm.rulesTreeList = [];
	                        if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                            vm.isMaxSQLSizeExceed = true;
	                        } else {
	                            applicationService.showErrorMessage(reason);
	                        }
	                    });
	            }
	
	        };
	
	        /* Common Code between Constraint and Product Attribute */
	
	
	
	
	        /* vm.search = function() {
	             vm.search(vm.rulesHeader, vm.searchText, 1);
	         };*/
	
	        function findIndex(arr, obj) {
	            var index;
	            for (var item in arr) {
	                if (angular.equals(arr[item], obj)) {
	                    index = item;
	                }
	            }
	            return index;
	        }
	
	        function getDroppedType(droppedItem) {
	            var type,
	                selectedType = vm.rulesHeader;
	
	            type = angular.isDefined(selectedType) && selectedType === 'Product Structure' ? 'Product' : 'Product Group';
	
	            return type;
	        }
	
	
	
	        var toBeRemovedIndex, toBeRemovedId, toBeRemovedType, ruleType;
	
	        vm.showRemoveConfirmation = function(index, id, ruleTypeSelected, blockType) {
	            vm.confiramtionPopup = true;
	            toBeRemovedIndex = index;
	            toBeRemovedId = id;
	            toBeRemovedType = blockType;
	            ruleType = ruleTypeSelected;
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.DeleteMessageBody,
	                messageNote: vm.labels.DeleteMessageNote
	            }
	        };
	
	        vm.confirmRemove = function() {
	            vm.confiramtionPopup = false;
	            isFormSaved = true;
	            if (ruleType === 'constraint') {
	                if (toBeRemovedType === 'rule') {
	                    removeRule('constraint');
	                } else {
	                    toBeRemovedType === 'condition' ? removeCondition(ruleType, toBeRemovedIndex, toBeRemovedId) : removeStatement(ruleType, toBeRemovedIndex, toBeRemovedId);
	                }
	            } else if (ruleType === 'productAttribute') {
	                if (toBeRemovedType === 'rule') {
	                    removeRule('productAttribute');
	                } else {
	                    toBeRemovedType === 'scope' ? removeCondition(ruleType, toBeRemovedIndex, toBeRemovedId) : removeStatement(ruleType, toBeRemovedIndex, toBeRemovedId);
	                }
	            } else if (ruleType === 'attributeValueMatrix') {
	                if (toBeRemovedType === 'rule') {
	                    removeRule('attributeValueMatrix');
	                }
	                /*else {
	                                   toBeRemovedType === 'scope' ? removeCondition(ruleType, toBeRemovedIndex, toBeRemovedId) : removeStatement(ruleType, toBeRemovedIndex, toBeRemovedId);
	                               }*/
	            }
	
	        };
	
	        vm.cancelRemove = function() {
	            vm.confiramtionPopup = false;
	            toBeRemovedIndex = toBeRemovedId = toBeRemovedType = ruleType = undefined;
	        };
	
	
	
	        /****** Save funcationality goes here ******/
	        /**
	         * When user clicks on the 'Save Product' button, an event named 'explicitPageSave' gets broadcasted.
	         * A page has to listen to that event and do the page specific save functionality.
	         */
	        var isFormSaved = false;
	
	        /**
	         * When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed incase of errors in saving the page.
	         *
	         * If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.productGroups.details' || toState.name === 'app.product.associations' || toState.name === 'app.list' || toState.name === 'app.catalog.list') {
	                return true;
	            } else if (isFormSaved === true) {
	                return true;
	            } else {
	                e.preventDefault();
	                savePage(e, toState, toParams);
	            }
	
	        });
	
	        function savePage(e, toState, toParams) {
	            if (vm.selectedRule) {
	                saveRuleDetails(getRuleType(vm.selectedRule), toState, toParams);
	            } else {
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                }
	            }
	        }
	
	        function getRuleType(rule) {
	            var selectedRule = vm.selectedRule,
	                type = '';
	            if (rule.RuleType) {
	                if (rule.RuleType === 'ConstraintRule') {
	                    type = 'constraint';
	                } else if (rule.RuleType === 'ProductAttributeRule') {
	                    type = 'productAttribute';
	                } else if (rule.RuleType === 'AttributeValueMatrix') {
	                    type = 'attributeValueMatrix';
	                }
	                return type;
	            } else if (selectedRule) {
	                if (selectedRule.isConstraintRule) {
	                    type = 'constraint';
	                } else if (selectedRule.isPARule) {
	                    type = 'productAttribute';
	                } else if (selectedRule.isAVM) {
	                    type = 'attributeValueMatrix';
	                }
	                return type;
	            }
	            return vm.typeOfRuleSelected;
	        }
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        vm.getFormattedContent = function(isActive) {
	            var modifiedValue = '';
	            if (isActive) {
	                modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	            } else {
	                modifiedValue = "<i class='material-icons show'>check_circle</i>";
	            }
	            return modifiedValue;
	        };
	
	        vm.addProductField = function(parentIndex) {
	            var fields = ['A', 'B', 'C', 'D'],
	                notPresent = [],
	                present = [],
	                toBeNextItem = '',
	                temp = vm.conditionsList[parentIndex].productField;
	
	            /*  Find which product fields are available. */
	            for (var i = 0; i < temp.length; i++) {
	                present.push(temp[i].type);
	            }
	
	            /* Find which is to be next */
	            for (var i = 0; i < fields.length; i++) {
	                if (present.indexOf(fields[i]) <= -1) {
	                    notPresent.push(fields[i]);
	                }
	            }
	            toBeNextItem = notPresent.length > 0 ? notPresent[0] : null;
	
	            /* Add the to be next to the array. */
	            temp.push({
	                name: '',
	                operator: 'equal to',
	                value: '',
	                type: toBeNextItem,
	                picklistEntries: angular.copy(rulesService.getProductFieldValues(toBeNextItem))
	            });
	
	
	
	        };
	        vm.removeProductField = function(row, index, parentIndex) {
	            vm.conditionsList[parentIndex].productField.splice(index, 1);
	        };
	
	        vm.getProductFieldLabel = function(label) {
	            return vm.labels.ProductField + ' ' + label;
	        };
	
	        vm.goToManageProductGroupPage = function() {
	            $state.go('app.productGroups.details.form', { 'id': vm.$stateParams.id, 'productId': vm.$stateParams.productId, 'productName': vm.$stateParams.productName }, { reload: true });
	        };
	
	        vm.explicitPageSave = function() {
	            savePage();
	        };
	        $scope.$on(vm.labels.NewConstraintRule.split(' ').join('-'), function() {
	            vm.openConstraintPopup('new', 1);
	        });
	        $scope.$on(vm.labels.NewProductAttributeRule.split(' ').join('-'), function() {
	            vm.openProductAttributePopup('new', 1);
	        });
	        $scope.$on(vm.labels.NewAttributeValueMatrix.split(' ').join('-'), function() {
	            vm.openAVMPopup('new', 1);
	        });
	
	
	        /* Pagination for rules goes here */
	        var pageNumber = 1,
	            rightSidePageNumber = 1,
	            noOfRulesPerChunk = productConstants.NumberOfRecordsPerChunk;
	
	
	        vm.openConditionCriteriaPopup = function(index, type, criteria) {
	            if(!criteria) {
	                var criteria = {};
	            }
	            criteria['sObjectName'] = rulesService.getPrefixedAttribute("LineItem__c");
	            criteria['sObjectLabel'] = "Line Item";
	            vm.openCriteriaPopup(index, type, criteria);
	        };
	        vm.openActionCriteriaPopup = function(index, type, criteria) {
	            var actionType = vm.statementList[index].actionType;
	            if (actionType === undefined || actionType === '') {
	                applicationService.showErrorMessage({
	                    type: 'error',
	                    message: 'Please select Action Type before editing Action Criteria'
	                });
	            } else {
	                if(!criteria) {
	                    var criteria = {};
	                }
	                criteria['actionType'] = actionType;
	                if (actionType === 'Validation') {
	                    criteria['sObjectName'] = rulesService.getPrefixedAttribute("LineItem__c");
	                    criteria['sObjectLabel'] = "Line Item";
	                } else {
	                    criteria['sObjectName'] = "Product2";
	                    criteria['sObjectLabel'] = "Product";
	                }
	                vm.openCriteriaPopup(index, type, criteria);
	            }
	        };
	        vm.openCriteriaPopup = function(index, type, criteria) {
	
	            $mdDialog.show({
	                controller: __webpack_require__(548),
	                template: __webpack_require__(549),
	                parent: angular.element(document.body),
	                clickOutsideToClose: false,
	                controllerAs: 'vm',
	                resolve: {
	                    type: function() {
	                        return type;
	                    },
	                    criteria: function() {
	                        return angular.copy(criteria);
	                    },
	                    picklistEntries: function() {
	                        return picklistMetaData.csRuleConditionCriteria;
	                    },
	                    statementPicklistEntries: function() {
	                        return statementProductAttributes;
	                    },
	                    criteriaIndex: function() {
	                        return index;
	                    }
	                }
	            }).then(function(requestObj) {
	                updateRuleCriteria(requestObj.index, requestObj.type, requestObj.criteria);
	            }, function(error) {
	                console.log(error);
	            });
	        };
	
	        function updateRuleCriteria(index, type, criteria) {
	
	            if (type === 'Condition') {
	                vm.conditionsList[index].conditionCriteria = criteria;
	            } else {
	                vm.statementList[index].actionCriteria = criteria;
	            }
	
	
	        }
	
	        function createAvm(obj) {
	            associatedRuleService.createAvm(obj)
	                .then(function(response) {
	                    if (response.metadata && response.metadata.id) {
	                        vm.appliedRules.AttributeValueMatrixSOs.unshift({
	                            "RuleType": "AttributeValueMatrix",
	                            "Id": response.metadata.id,
	                            "Name": response.metadata.name
	                        });
	                        vm.typeOfRuleSelected = 'attributeValueMatrix';
	                        updateSelectedRuleMetadata(response.metadata);
	                        loadRuleDetails(vm.selectedRule);
	
	                    } else {
	                        // applicationService.showErrorMessage({});
	                    }
	
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function updateAvm(obj) {
	            rulesService.updateAvm(obj, angular.copy(vm.avmScopeList), angular.copy(vm.matrixList))
	                .then(function(response) {
	                    loadAllRulesForProductGroup().then(function() {
	                        loadAttributeValueMatrixRuleDetails(response.metadata);
	                    });
	                }, function(reason) {
	                    applicationService.showErrorMessage();
	                });
	        }
	
	
	        vm.openAVMPopup = function(type, index) {
	            var type = type;
	            $mdDialog.show({
	                controller: __webpack_require__(550),
	                template: __webpack_require__(551),
	                parent: angular.element(document.body),
	                clickOutsideToClose: false,
	                controllerAs: 'vm',
	                resolve: {
	                    selectedAVM: function() {
	                        return type === 'new' ? angular.copy({
	                            avm: rulesService.getSampleAvm(),
	                            avmAttributesList: []
	                        }) : angular.copy({
	                            avm: vm.selectedRule,
	                            avmAttributesList: vm.avmMatrixColumnList
	                        });
	                    },
	                    avmType: function() {
	                        return type === 'new' ? 'new' : 'edit';
	                    },
	                    applicationTypeValues: function() {
	                        return applicationTypeValues;
	                    }
	
	                }
	            }).then(function(obj) {
	                if (obj.type === 'new') {
	                    createAvm(obj);
	                } else {
	                    /* TODO : Update an existing instance and load
	                     * - get the index and update
	                     */
	                    updateAvm(obj);
	                }
	            }, function(error) {
	                console.log(error);
	            });
	        };
	
	        vm.clearMatrix = function() {
	            vm.avmAttributesList = [];
	            vm.matrixList = [];
	        };
	        vm.addMatrix = function() {
	            vm.matrixList.push({});
	        };
	        vm.removeMatrix = function(index) {
	            vm.matrixList.splice(index, 1);
	        };
	
	        function loadAllRulesForProductGroup() {
	            vm.appliedRules = null;
	            var defered = $q.defer();
	            associatedRuleService.getAssociatedRulesByProductGroupId($stateParams.id).then(function(response) {
	                vm.appliedRules = findRuleTypeBasedOnArrayName(response);
	                defered.resolve(true);
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	                defered.reject(true);
	            });
	            return defered.promise;
	        }
	
	        function findRuleTypeBasedOnArrayName(rules) {
	            if (rules.ProductAttributeRuleSOs.length) {
	                rules.ProductAttributeRuleSOs = setRuleType(rules.ProductAttributeRuleSOs, 'ProductAttributeRule');
	            }
	            if (rules.ConstraintRuleSOs.length) {
	                rules.ConstraintRuleSOs = setRuleType(rules.ConstraintRuleSOs, 'ConstraintRule');
	            }
	            if (rules.AttributeValueMatrixSOs.length) {
	                rules.AttributeValueMatrixSOs = setRuleType(rules.AttributeValueMatrixSOs, 'AttributeValueMatrix');
	            }
	            return rules;
	        }
	
	        function setRuleType(rule, ruleType) {
	            for (var item in rule) {
	                rule[item].RuleType = ruleType;
	            }
	            return rule;
	        }
	
	        function removeRulesForProductGroup(arrayName, Id) {
	            for (var item in vm.appliedRules[arrayName]) {
	                if (vm.appliedRules[arrayName][item].Id === Id) {
	                    vm.appliedRules[arrayName].splice(item, 1);
	                }
	            }
	        }
	
	        vm.addAttribute = function() {
	            $mdDialog.show({
	                controller: __webpack_require__(552),
	                template: __webpack_require__(553),
	                parent: angular.element(document.body),
	                clickOutsideToClose: false,
	                controllerAs: 'vm'
	            }).then(function(obj) {
	                if (obj.attribute.autocomplete.selectedItem) {
	                    var temp = obj.attribute.autocomplete.selectedItem,
	                        newAttribute = {
	                            name: temp.label,
	                            field: temp.value
	                        };
	                    vm.avmMatrixColumnList.push(newAttribute);
	                }
	                prepareAndUpdateAttributesList();
	                updateAvm({ avm: angular.copy(vm.selectedRule), avmAttributesList: angular.copy(vm.avmMatrixColumnList) });
	            });
	        };
	
	
	        function isCheckStateParamContainsAssociatedRuleDetails() {
	            if (vm.$stateParams.associatedRulesDetails !== null) {
	                var associatedRulesDetails = vm.$stateParams.associatedRulesDetails;
	                if (associatedRulesDetails.RuleType === 'constraint') {
	                    vm.typeOfRuleSelected = 'constraint';
	                    loadConstraintRuleDetails(associatedRulesDetails);
	                } else if (associatedRulesDetails.RuleType === 'productAttribute') {
	                    vm.typeOfRuleSelected = 'productAttribute';
	                    loadProductAttributeRuleDetails(associatedRulesDetails);
	                } else {
	                    loadAttributeValueMatrixRuleDetails(associatedRulesDetails);
	                    vm.typeOfRuleSelected = 'attributeValueMatrix';
	                }
	            }
	        }
	
	        isCheckStateParamContainsAssociatedRuleDetails();
	
	    };
	
	    productGroupAssociatedRuleController.$inject = [
	        '$q',
	        '$mdDialog',
	        '$mdMedia',
	        '$scope',
	        '$filter',
	        '$templateCache',
	        '$state',
	        '$stateParams',
	        'rulesService',
	        'picklistMetaData',
	        'productGroupsTree',
	        'applicationService',
	        'i18nService',
	        'cpqAdminConstants',
	        'allPicklists',
	        'statementProductAttributes',
	        'allRules',
	        'productConstants',
	        'applicationTypeValues',
	        'associatedRuleService',
	        'productGroupsConstants'
	    ];
	
	    module.exports = productGroupAssociatedRuleController;
	})();


/***/ }),
/* 535 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"individual-rule-container\">\n    <div class=\"col-xs-12 rule-table-panel\">\n        <div class=\"rules-table-body\">\n            <uib-accordion close-others=\"oneAtATime\" ng-if=\"vm.selectedRule && vm.typeOfRuleSelected == 'constraint'\">\n                <uib-accordion-group data-ng-init=\"status = {isOpen: true}\" is-open=\"status.isOpen\" is-disabled=\"true\">\n                    <uib-accordion-heading>\n                        <div class=\"remove-rule\">\n                            <i class=\"material-icons\" data-ng-click=\"vm.showRemoveConfirmation('',vm.selectedRule.id,'constraint','rule')\" aria-hidden=\"true\">clear</i>\n                        </div>\n                        <div class=\"flex-3 rule-name\">\n                            <span class=\"pull-left padding-right-5px\" data-ng-click=\"status.isOpen=!status.isOpen\">\n                            <i class=\"material-icons\" data-ng-if=\"status.isOpen\">keyboard_arrow_down</i>\n                            <i class=\"material-icons\" data-ng-if=\"!status.isOpen\">keyboard_arrow_right</i>\n                        </span><a href=\"\" class=\"text-primary\" data-ng-click=\"vm.openConstraintPopup('edit',0)\">{{vm.selectedRule.name || ''}} </a></div>\n                        <div class=\"flex-1\">{{vm.selectedRule.sequence || ''}}</div>\n                        <div class=\"flex-1\">\n                            <material-form-field model=\"vm.selectedRule.effectiveDate\" field-type=\"DATE\" is-editable=\"false\" is-richtext=\"false\">\n                            </material-form-field>\n                        </div>\n                        <div class=\"flex-2\">\n                            <material-form-field model=\"vm.selectedRule.expirationDate\" field-type=\"DATE\" is-editable=\"false\" is-richtext=\"false\">\n                            </material-form-field>\n                        </div>\n                        <div class=\"flex-1\">\n                            <span ng-bind-html=\"vm.getFormattedContent(vm.selectedRule.context)\"></span>\n                        </div>\n                        <div class=\"flex-1\">\n                            <span ng-bind-html=\"vm.getFormattedContent(vm.selectedRule.isActive)\"></span>\n                        </div>\n                        <div class=\"flex-3\">{{vm.selectedRule.description || ''}}</div>\n                    </uib-accordion-heading>\n                    <div class=\"template-container\">\n                        <div class=\"condition-title\">\n                            <div class=\"if-container\"> IF</div>\n                            <div class=\"condition-drop-down-container\">\n                                <div class=\"condition-drop-down-container-item all-picklist\">\n                                    <material-form-field model=\"vm.selectedRule.conditionAssociation\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.conditionAssociationPicklistEntries\" label=\"Condition Association\" name=\"conditionAssociation\">\n                                    </material-form-field>\n                                </div>\n                                <div class=\"condition-drop-down-container-item custom-rule-txt-field\" data-ng-if=\"vm.selectedRule.conditionAssociation === 'Custom'\">\n                                    <material-form-field model=\"vm.selectedRule.customCondition\" field-type=\"string\" is-editable=\"true\" label=\"Custom Condition\" name=\"customCondition\" >\n                                    </material-form-field>\n                                </div>\n                                <div class=\"condition-user-message\"> of these conditions are met </div>\n                            </div>\n                        </div>\n                        <div ng-include=\"'constraint-rule-conditions.html'\"></div>\n                        <div class=\"condition-title\">\n                            <div class=\"if-container\">{{vm.labels.ThenStatement}}</div>\n                        </div>\n                        <div ng-include=\"'constraint-rule-statements.html'\"></div>\n                    </div>\n                </uib-accordion-group>\n            </uib-accordion>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 536 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"btn-group align-right\" role=\"group\" aria-label=\"...\" data-ng-if=\"vm.conditionsList.length == 0\">\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addConditionSubItem()\">\n        <i class=\"material-icons\">add</i>\n    </button>\n</div>\n<ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedCondition(event, index, item)\" class=\"attribute-list\">\n    <li ng-repeat=\"item in vm.conditionsList\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" dnd-moved=\"vm.conditionsList.splice($index, 1)\" dnd-selected=\"models.selected = item\" ng-class=\"{selected: models.selected === item}\">\n        <div class=\"conditions slds-m-bottom_large\">\n            <div class=\"\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addConditionSubItem($index)\">\n                        <i class=\"material-icons\">add</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.showRemoveConfirmation($index,item.id,'constraint','condition')\">\n                        <i class=\"material-icons\">clear</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.openConstraintPopup('edit',1, $index)\">\n                        <i class=\"material-icons\">settings</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.openConditionCriteriaPopup($index,'Condition',item.conditionCriteria)\">\n                        <i class=\"material-icons\">flare</i>\n                    </button>\n                </div>\n            </div>\n            <div class=\"csr-cnd-sequence slds-m-horizontal_x-small\">\n                <material-form-field model=\"item.sequence\" field-type=\"quantity\" is-editable=\"true\" field-label=\"vm.labels.ConditionNo\" name=\"conditionNo\">\n                </material-form-field>\n            </div>\n            <div class=\"slds-m-horizontal_x-small\">\n                <material-form-field model=\"item.scope\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.conditionScopePicklistEntries\" field-label=\"vm.labels.Scope\" name=\"scope\" is-required=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"slds-m-horizontal_x-small\" data-ng-if=\"item.scope !== 'Product Field Set'\">\n                <material-form-field model=\"item.operator\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.operatorPicklistEntries\" field-label=\"vm.labels.Operator\" name=\"operator\" is-required=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"slds-m-horizontal_x-small\" data-ng-if=\"item.scope !== 'Product Field Set'\">\n                <material-form-field field-type=\"autocomplete\" properties=\"item\" field-label=\"item.scope\" name=\"product\" is-required=\"true\">\n                </material-form-field>\n            </div>\n        </div>\n        <div class=\"product-field-set-container\" data-ng-if=\"item.scope === 'Product Field Set'\">\n            <ul>\n                <li data-ng-repeat=\"row in item.productField\" class=\"inner-li\">\n                    <div class=\"product-field-row\">\n                        <div class=\"btn-group-container\">\n                            <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                                <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeProductField(row, $index, $parent.$index)\">\n                                    <i class=\"material-icons\">clear</i>\n                                </button>\n                            </div>\n                        </div>\n                        <div class=\"name-container\">\n                            <material-form-field model=\"row.name\" field-type=\"picklist\" is-editable=\"true\" properties=\"row.picklistEntries\" field-label=\"vm.getProductFieldLabel(row.type)\" name=\"name\">\n                            </material-form-field>\n                        </div>\n                        <div class=\"operator-container\">\n                            <material-form-field model=\"row.operator\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.productFieldOperatorPicklistEntries\" field-label=\"vm.labels.Operator\" name=\"operator\">\n                            </material-form-field>\n                        </div>\n                        <div class=\"value-container\">\n                            <material-form-field model=\"row.value\" field-type=\"string\" is-editable=\"true\" field-label=\"vm.labels.Value\" name=\"value\">\n                            </material-form-field>\n                        </div>\n                    </div>\n                </li>\n                <div data-ng-if=\"item.productField.length < 4\" class=\"add-btn-container\">\n                    <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                        <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addProductField($parent.$index)\">\n                            <i class=\"material-icons\">add</i>\n                        </button>\n                    </div>\n                </div>\n            </ul>\n        </div>\n    </li>\n</ul>\n"

/***/ }),
/* 537 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"btn-group align-right\" role=\"group\" aria-label=\"...\" data-ng-if=\"vm.statementList.length == 0\">\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addStatementSubItem()\">\n        <i class=\"material-icons\">add</i>\n    </button>\n</div>\n<ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedStatement(event, index, item)\" class=\"attribute-list\">\n    <li ng-repeat=\"item in vm.statementList\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" dnd-selected=\"models.selected = item\" ng-class=\"{selected: models.selected === item}\">\n        <div class=\"statements slds-m-bottom_large\">\n            <div class=\"\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addStatementSubItem($index)\">\n                        <i class=\"material-icons\">add</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.showRemoveConfirmation($index,item.id,'constraint','statement')\">\n                        <i class=\"material-icons\">clear</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.openConstraintPopup('edit',2,$index)\">\n                        <i class=\"material-icons\">settings</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.openActionCriteriaPopup($index,'Action',item.actionCriteria)\">\n                        <i class=\"material-icons\">flare</i>\n                    </button>\n                </div>\n            </div>\n            <div>\n                <material-form-field model=\"item.actionType\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.actionTypePicklistEntries\" field-label=\"vm.labels.ActionType\" name=\"actionType\" data-ng-click=\"vm.trackSelectEvent($index)\" is-required=\"true\">\n                </material-form-field>\n            </div>\n            <div>\n                <material-form-field model=\"item.actionIntent\" field-type=\"picklist\" is-editable=\"true\" properties=\"item.getActionTypes\" field-label=\"vm.labels.ActionIntent\" name=\"actionIntent\" is-required=\"true\">\n                </material-form-field>\n            </div>\n            <div>\n                <material-form-field model=\"item.scope\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.statementScopePicklistEntries\" field-label=\"vm.labels.Scope\" name=\"scope\" is-required=\"true\">\n                </material-form-field>\n            </div>\n            <div data-ng-if=\"item.scope !== 'Action Criteria'\">\n                <material-form-field field-type=\"autocomplete\" field-label=\"item.scope\" name=\"product\" properties=\"item\" is-required=\"true\">\n                </material-form-field>\n            </div>\n            <div class=\"edit-criteria-btn\" data-ng-if=\"item.scope === 'Action Criteria'\">\n                <button class=\"slds-button slds-button_brand\" ng-click=\"vm.openActionCriteriaPopup($index,'Action',item.actionCriteria)\">Edit Action Criteria</button>\n            </div>\n        </div>\n    </li>\n</ul>\n"

/***/ }),
/* 538 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"individual-rule-container\">\n    <div class=\"col-xs-12 rule-table-panel\">\n        <div class=\"rules-table-body\">\n            <uib-accordion close-others=\"oneAtATime\" ng-if=\"vm.selectedRule && vm.typeOfRuleSelected == 'productAttribute'\">\n                <uib-accordion-group data-ng-init=\"status = {isOpen: true}\" is-open=\"status.isOpen\" is-disabled=\"true\">\n                    <uib-accordion-heading>\n                        <div class=\"remove-rule\">\n                            <i class=\"material-icons\" data-ng-click=\"vm.showRemoveConfirmation('',vm.selectedRule.id,'productAttribute','rule')\" aria-hidden=\"true\">clear</i>\n                        </div>\n                        <div class=\"flex-3 rule-name\"><span class=\"pull-left padding-right-5px\" data-ng-click=\"status.isOpen=!status.isOpen\">\n                             <i class=\"material-icons\" data-ng-if=\"status.isOpen\">keyboard_arrow_down</i>\n                            <i class=\"material-icons\" data-ng-if=\"!status.isOpen\">keyboard_arrow_right</i>\n                        </span><a href=\"\" class=\"text-primary\" data-ng-click=\"vm.openProductAttributePopup('edit',0)\">{{vm.selectedRule.name || ''}} </a></div>\n                        <div class=\"flex-1\">\n                            <span ng-bind-html=\"vm.getFormattedContent(vm.selectedRule.isActive)\"></span>\n                        </div>\n                        <div class=\"flex-2\">\n                            <material-form-field model=\"vm.selectedRule.effectiveDate\" field-type=\"DATE\" is-editable=\"false\" is-richtext=\"false\">\n                            </material-form-field>\n                        </div>\n                        <div class=\"flex-2\">\n                            <material-form-field model=\"vm.selectedRule.expirationDate\" field-type=\"DATE\" is-editable=\"false\" is-richtext=\"false\">\n                            </material-form-field>\n                        </div>\n                    </uib-accordion-heading>\n                    <div class=\"template-container\">\n                        <div class=\"condition-title par-condition-title\">{{vm.labels.IfScope}}</div>\n                        <div ng-include=\"'product-attribute-rule-scope.html'\"></div>\n                        <div class=\"condition-title par-condition-title\">{{vm.labels.ThenStatement}}</div>\n                        <div ng-include=\"'product-attribute-rule-actions.html'\"></div>\n                    </div>\n                </uib-accordion-group>\n            </uib-accordion>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 539 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"btn-group align-right\" role=\"group\" aria-label=\"...\" data-ng-if=\"vm.paScopeList.length == 0\">\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addScopeSubItem()\">\n        <i class=\"material-icons\">add</i>\n    </button>\n</div>\n<ul class=\"attribute-list\">\n    <li ng-repeat=\"item in vm.paScopeList\" ng-class=\"{selected: models.selected === item}\">\n        <div class=\"conditions\">\n            <div class=\"align-top\">\n                <material-form-field model=\"item.scope\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.productScopePicklistEntries\" field-label=\"vm.labels.Scope\" name=\"scope\">\n                </material-form-field>\n            </div>\n            <div class=\"align-top\">\n                <material-form-field model=\"item.operator\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.operatorPicklistEntries\" field-label=\"vm.labels.Operator\" name=\"operator\">\n                </material-form-field>\n            </div>\n            <div class=\"align-top multiselect-autocomplete-container\">\n                <material-form-field model=\"item.model\" field-type=\"multiselect-autocomplete\" field-label=\"item.scope\" properties=\"item\">\n                </material-form-field>\n            </div>\n        </div>\n    </li>\n</ul>\n"

/***/ }),
/* 540 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"btn-group align-right\" role=\"group\" aria-label=\"...\" data-ng-if=\"vm.paActionList.length == 0\">\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addPaActionSubItem()\">\n        <i class=\"material-icons\">add</i>\n    </button>\n</div>\n<ul class=\"attribute-list\">\n    <li ng-repeat=\"item in vm.paActionList\" ng-class=\"{selected: models.selected === item}\" class=\"second-row\">\n        <div class=\"statements\">\n            <div class=\"\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addPaActionSubItem()\">\n                        <i class=\"material-icons\">add</i>\n                    </button>\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.showRemoveConfirmation($index,item.id,'productAttribute','action')\">\n                        <i class=\"material-icons\">clear</i>\n                    </button>\n                </div>\n            </div>\n            <div class=\"target-field-container\">\n                <material-form-field model=\"item.targetField\" field-type=\"autocomplete\" field-label=\"vm.labels.TargetField\" name=\"targetField\" properties=\"item.targetField\">\n                </material-form-field>\n            </div>\n            <div class=\"par-st-actionType\">\n                <material-form-field model=\"item.actionType\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.paActionTypePicklistEntries\" field-label=\"vm.labels.ActionType\" name=\"actionType\">\n                </material-form-field>\n            </div>\n            <div class=\"par-st-valueExpression\">\n                <material-form-field model=\"item.valueExpression\" field-type=\"string\" is-editable=\"true\" field-label=\"vm.labels.ValueExpression\" name=\"valueExpression\">\n                </material-form-field>\n            </div>\n        </div>\n    </li>\n</ul>\n"

/***/ }),
/* 541 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"individual-rule-container\">\n    <div class=\"col-xs-12 rule-table-panel\">\n        <div class=\"rules-table-body\">\n            <uib-accordion close-others=\"oneAtATime\" ng-if=\"vm.selectedRule && vm.typeOfRuleSelected === 'attributeValueMatrix'\">\n                <uib-accordion-group data-ng-init=\"status = {isOpen: true}\" is-open=\"status.isOpen\" is-disabled=\"true\">\n                    <uib-accordion-heading>\n                        <div class=\"remove-rule\">\n                            <i class=\"material-icons\" data-ng-click=\"vm.showRemoveConfirmation('',vm.selectedRule.id,'attributeValueMatrix','rule')\" aria-hidden=\"true\">clear</i>\n                        </div>\n                        <div class=\"flex-3 rule-name\">\n                            <span class=\"pull-left padding-right-5px\" data-ng-click=\"status.isOpen=!status.isOpen\">\n                            <i class=\"material-icons\" data-ng-if=\"status.isOpen\">keyboard_arrow_down</i>\n                            <i class=\"material-icons\" data-ng-if=\"!status.isOpen\">keyboard_arrow_right</i>\n                        </span><a href=\"\" class=\"text-primary\" data-ng-click=\"vm.openAVMPopup('edit')\">{{vm.selectedRule.name || ''}} </a></div>\n                        <div class=\"flex-1\">\n                            <material-form-field model=\"vm.selectedRule.effectiveDate\" field-type=\"DATE\" is-editable=\"false\" is-richtext=\"false\">\n                            </material-form-field>\n                        </div>\n                        <div class=\"flex-2\">\n                            <material-form-field model=\"vm.selectedRule.expirationDate\" field-type=\"DATE\" is-editable=\"false\" is-richtext=\"false\">\n                            </material-form-field>\n                        </div>\n                        <div class=\"flex-1\">\n                            <span ng-bind-html=\"vm.getFormattedContent(vm.selectedRule.isActive)\"></span>\n                        </div>\n                        <div class=\"flex-3\">{{vm.selectedRule.description || ''}}</div>\n                    </uib-accordion-heading>\n                    <div class=\"template-container\">\n                        <div class=\"condition-title\">\n                            <div class=\"if-container\">{{vm.labels.IfScope}}</div>\n                        </div>\n                        <div ng-include=\"'avm-conditions.html'\"></div>\n                        <div class=\"condition-title\">\n                            <div class=\"if-container\">{{vm.labels.ThenStatement}}</div>\n                        </div>\n                        <div ng-include=\"'avm-statements.html'\"></div>\n                    </div>\n                </uib-accordion-group>\n            </uib-accordion>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 542 */
/***/ (function(module, exports) {

	module.exports = "<div ng-repeat=\"item in vm.avmScopeList\" class=\"slds-m-bottom_large\">\n    <div class=\"avm-scope-list\">\n        <div class=\"align-top\">\n            <material-form-field model=\"item.scope\" field-type=\"picklist\" is-editable=\"true\" is-disabled=\"true\" properties=\"vm.productScopeAVMPicklistEntries\" field-label=\"vm.labels.Scope\" name=\"scope\">\n            </material-form-field>\n        </div>\n        <div class=\"align-top\">\n            <material-form-field model=\"item.operator\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.avmOperatorPicklistEntries\" field-label=\"vm.labels.Operator\" name=\"operator\">\n            </material-form-field>\n        </div>\n        <div class=\"align-top multiselect-autocomplete-container\">\n            <material-form-field model=\"item.model\" field-type=\"multiselect-autocomplete\" field-label=\"item.scope\" properties=\"item\"></material-form-field>\n        </div>\n    </div>\n    <div class=\"clearfix\"></div>\n</div>\n"

/***/ }),
/* 543 */
/***/ (function(module, exports) {

	module.exports = "<button class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addMatrix()\" data-ng-if=\"vm.matrixList.length === 0 && vm.avmMatrixColumnList.length > 0\">\n    <i class=\"material-icons\">add</i>\n</button>\n<div class=\"matrix-container\">\n    <div class=\"matrix-header-container\">\n        <div data-ng-repeat=\"column in vm.avmMatrixColumnList\" class=\"matrix-header\">\n            {{column.name}}\n            <button class=\"slds-button slds-button--icon\" data-ng-if=\"$index === (vm.avmMatrixColumnList.length - 1)\" data-ng-click=\"vm.addAttributes()\">\n                <i class=\"material-icons\">add</i>\n            </button>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n    <div data-ng-repeat=\"matrix in vm.matrixList\" class=\"matrix-row\" data-ng-if=\"vm.matrixList.length > 0\">\n        <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n            <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                <i class=\"material-icons\">more_vert</i>\n            </button>\n            <ul class=\"dropdown-menu\">\n                <li data-ng-click=\"vm.removeMatrix($index)\" class=\"action-Menu\">\n                    <i class=\"material-icons\">clear</i>\n                    <span class=\"remove-label\">{{vm.labels.Remove}}</span>\n                </li>\n                <li class=\"action-Menu\" data-ng-click=\"vm.addMatrix($index)\">\n                    <i class=\"material-icons\">add</i>\n                    <span class=\"add-label\">Add</span>\n                </li>\n            </ul>\n        </div>\n        <div data-ng-repeat=\"column in vm.avmMatrixColumnList\" class=\"matrix-column\">\n            <material-form-field model=\"matrix[column.field]\" field-type=\"picklist\" is-editable=\"true\" properties=\"column.picklistEntries\">\n            </material-form-field>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n</div>\n"

/***/ }),
/* 544 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var constraintRuleController = function ($mdDialog, selectedRule, type, conditionsList, statementsList, tabToOpen, indexToHighlight, i18nService, cpqAdminConstants) {
	
	        var vm = this;
	
	        vm.selectedRule = selectedRule;
	        vm.conditionsList = conditionsList;
	        vm.statementsList = statementsList;
	        vm.type = type;
	        vm.selctedTabIndex = tabToOpen;
	        vm.indexToHighlight = indexToHighlight;
	        vm.labels = i18nService.CustomLabel;
	        vm.dispositionPicklistEntries = {
	            PicklistValues: [{
	                value: "Warning",
	                label: "Warning",
	            }, {
	                value: "Error",
	                label: "Error",
	            }]
	        };
	        vm.alerts = [];
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	        vm.save = function() {
	            if (isValidEffectiveDateRange()) {
	                if (vm.type === 'new') {
	                    vm.constraintRuleForm.ruleName.$setTouched();
	                    if (vm.constraintRuleForm.ruleName.$viewValue !== '') {
	                        $mdDialog.hide({
	                            rule: vm.selectedRule ? angular.copy(vm.selectedRule) : {},
	                            conditionsList: vm.conditionsList ? angular.copy(vm.conditionsList) : [],
	                            statementList: vm.statementsList ? angular.copy(vm.statementsList) : [],
	                            type: vm.type
	                        });
	                    }
	                } else {
	                    if (vm.constraintRuleForm.$valid) {
	                        $mdDialog.hide({
	                            rule: vm.selectedRule ? angular.copy(vm.selectedRule) : {},
	                            conditionsList: vm.conditionsList ? angular.copy(vm.conditionsList) : [],
	                            statementList: vm.statementsList ? angular.copy(vm.statementsList) : [],
	                            type: vm.type
	                        });
	                    } else {
	                        if (vm.selctedTabIndex === 0) {
	                            vm.constraintRuleForm.ruleName.$setTouched();
	                        }
	                        if (vm.selctedTabIndex === 1) {
	                            vm.constraintRuleForm.conditionName.$setTouched();
	                        }
	                        if (vm.selctedTabIndex === 2) {
	                            vm.constraintRuleForm.statementName.$setTouched();
	                        }
	                    }
	                }
	            }
	        };
	        vm.selectedCondition = {};
	        vm.selectCondition = function(index, item) {
	            updateSelectedItem(index, 'condition');
	            vm.selectedCondition = item;
	        };
	
	        vm.selectedStatement = {};
	        vm.selectStatement = function(index, item) {
	            updateSelectedItem(index, 'statement');
	            vm.selectedStatement = item;
	        };
	
	        function updateSelectedItem(selectedIndex, typeOfItem) {
	            /* TODO : unselect everything and select one from the current selected one */
	            var items = [];
	
	            if (typeOfItem === 'condition') {
	                items = vm.conditionsList;
	            } else {
	                items = vm.statementsList;
	            }
	            for (var index = 0; index < items.length; index++) {
	                items[index].selected = false;
	            }
	            for (var index = 0; index < items.length; index++) {
	                if (index === selectedIndex) {
	                    items[index].selected = true;
	                } else {
	                    items[index].selected = false;
	                }
	            }
	
	        }
	
	        function preSelectItem() {
	            if (tabToOpen > 0 && indexToHighlight >= 0) {
	                if (tabToOpen == 1) {
	                    updateSelectedItem(indexToHighlight, 'condition');
	                    vm.selectedCondition = vm.conditionsList[indexToHighlight];
	                } else if (tabToOpen == 2) {
	                    updateSelectedItem(indexToHighlight, 'statement');
	                    vm.selectedStatement = vm.statementsList[indexToHighlight];
	                }
	            }
	        }
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	            document.querySelector('.content-wide').scrollTop = 0;
	        }
	
	        vm.closeAlert = function (index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        function isValidEffectiveDateRange() {
	            if (vm.selectedRule.effectiveDate
	                && vm.selectedRule.expirationDate
	                && vm.selectedRule.effectiveDate > vm.selectedRule.expirationDate) {
	                addAlert(vm.labels.DateRangeValidation, cpqAdminConstants.DANGER);
	                return false;
	            }
	            return true;
	        }
	
	        preSelectItem();
	
	    };
	    constraintRuleController.$inject = ['$mdDialog', 'selectedRule', 'type', 'conditionsList', 'statementsList', 'tabToOpen', 'indexToHighlight', 'i18nService', 'cpqAdminConstants'];
	
	    module.exports = constraintRuleController;
	})();

/***/ }),
/* 545 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"rules-dialog\">\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n        </i>\n    </button>\n    <form name=\"vm.constraintRuleForm\">\n        <md-dialog-content class=\"rule-dialog-content\">\n            <md-tabs md-selected=\"vm.selctedTabIndex\" md-dynamic-height md-border-bottom>\n                <md-tab label=\"Rule\">\n                    <md-content>\n                        <div layout=\"row\">\n                            <div class=\"md-padding content-wide\">\n                                <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-left\" close=\"vm.closeAlert($index)\"\n                                    dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n                                <form class=\"product-detail-form\" novalidate name=\"vm.ruleDetailsForm\">\n                                    <div layout=\"row\">\n                                        <h4 class=\"dialog-right-heading\"><strong>{{vm.labels.Details}}</strong></h4>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.RuleName\" is-required=\"true\" name=\"ruleName\" max-length=\"80\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.constraintRuleForm.ruleName.$error\" ng-if=\"vm.constraintRuleForm.ruleName.$touched || vm.constraintRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.FootnotesIsMandatory }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.isActive\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.IsActive\" element-id=\"isActive\">\n                                            </material-form-field>\n                                        </div>\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.context\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.Context\" element-id=\"context\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.sequence\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"vm.labels.Sequence\">\n                                            </material-form-field>\n                                        </div>\n                                        <div class=\"flex\">\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\" class=\"metadata-date-container\">\n                                        <div class=\"flex\" flex=\"45\">\n                                            <material-form-field model=\"vm.selectedRule.effectiveDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"vm.labels.EffectiveDate\">\n                                            </material-form-field>\n                                        </div>\n                                        <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                            <material-form-field model=\"vm.selectedRule.expirationDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"vm.labels.ExpirationDate\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\" class=\"metadata-description-container\" data-ng-class=\"{'metadata-description-error': vm.constraintRuleForm.ShortDescription.$invalid}\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.description\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.ShortDescription\" name=\"ShortDescription\" max-length=\"255\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.constraintRuleForm.ShortDescription.$error\" class=\"error-msg\">\n                                                <p ng-message=\"maxlength\" class=\"formError\">\n                                                    {{vm.labels.FormDescriptionMaxCharError | userMessage:vm.labels.ShortDescription}}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\" data-ng-if=\"vm.type !== 'new' \">\n                                        <div class=\"flex\" flex=\"45\">\n                                            <material-form-field model=\"vm.selectedRule.createdById\" field-type=\"STRING\" is-editable=\"true\" is-disabled=\"true\" field-label=\"vm.labels.CreatedBy\" is-richtext=\"false\">\n                                            </material-form-field>\n                                        </div>\n                                        <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                            <material-form-field model=\"vm.selectedRule.lastModifiedById\" field-type=\"STRING\" is-editable=\"true\" is-disabled=\"true\" field-label=\"vm.labels.LastModifiedBy\" is-richtext=\"false\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n                <md-tab label=\"Conditions\" data-ng-if=\"vm.type !== 'new' \">\n                    <md-content>\n                        <div layout=\"row\">\n                            <div flex=\"30\" class=\"dialog-left\">\n                                <div class=\"list-table\">\n                                    <table>\n                                        <tbody>\n                                            <tr ng-repeat=\"item in vm.conditionsList\" ng-click=\"vm.selectCondition($index, item)\" data-ng-class=\"item.selected === true ? 'selected':''\">\n                                                <td>\n                                                    {{ item.name }}\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                            <div flex=\"70\" class=\"dialog-right\">\n                                <div class=\"md-padding\" data-ng-if=\"vm.selectedCondition.name\">\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedCondition.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.ConditionName\" is-required=\"true\" name=\"conditionName\" max-length=\"80\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.constraintRuleForm.conditionName.$error\" ng-if=\"vm.constraintRuleForm.conditionName.$touched || vm.constraintRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.FootnotesIsMandatory }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <material-form-field model=\"vm.selectedCondition.matchInPrimaryLines\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.MatchPrimaryLines\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedCondition.matchInOptions\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.MatchInOptions\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedCondition.matchInCartOptions\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.MatchInCartOptions\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedCondition.matchInLocation\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.MatchInLocation\" show-inline=\"true\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n                <md-tab label=\"STATEMENTS\" data-ng-if=\"vm.type !== 'new' \">\n                    <md-content>\n                        <div layout=\"row\">\n                            <div flex=\"30\" class=\"dialog-left\">\n                                <div class=\"list-table\">\n                                    <table>\n                                        <tbody>\n                                            <tr ng-repeat=\"item in vm.statementsList\" ng-click=\"vm.selectStatement($index, item)\" data-ng-class=\"item.selected === true ? 'selected':''\">\n                                                <td>\n                                                    {{ item.name }}\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                            <div flex=\"70\" class=\"dialog-right\">\n                                <div class=\"md-padding content-wide\" data-ng-if=\"vm.selectedStatement.name\">\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedStatement.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.StatementName\" is-required=\"true\" name=\"statementName\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.constraintRuleForm.statementName.$error\" ng-if=\"vm.constraintRuleForm.statementName.$touched || vm.constraintRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.FootnotesIsMandatory }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <material-form-field model=\"vm.selectedStatement.matchInPrimaryLines\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.MatchPrimaryLines\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedStatement.matchInOptions\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.MatchInOptions\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedStatement.matchInCartOptions\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.MatchInCartOptions\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <material-form-field model=\"vm.selectedStatement.matchInAsset\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.MatchInAsset\" show-inline=\"true\">\n                                    </material-form-field>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedStatement.Sequence\" field-type=\"string\" is-editable=\"true\" field-label=\"vm.labels.Sequence\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedStatement.messageType\" field-type=\"picklist\" is-editable=\"true\" field-label=\"::vm.labels.MessagingType\" properties=\"vm.dispositionPicklistEntries\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\" class=\"statement-message-details\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedStatement.messageDetails\" field-type=\"textarea\" is-editable=\"true\" field-label=\"::vm.labels.MessageDetails\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n            </md-tabs>\n        </md-dialog-content>\n        <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n            <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n            <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n        </md-dialog-actions>\n    </form>\n</md-dialog>\n"

/***/ }),
/* 546 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productAttributeRuleController = function ($mdDialog, selectedRule, type, tabToOpen, indexToHighlight, scopesList, actionsList, i18nService, cpqAdminConstants) {
	        var vm = this;
	
	        vm.selectedRule = selectedRule;
	        vm.scopeList = scopesList;
	        vm.statementsList = actionsList;
	        vm.type = type;
	        vm.selctedTabIndex = tabToOpen;
	        vm.indexToHighlight = indexToHighlight;
	        vm.labels = i18nService.CustomLabel;
	        vm.alerts = [];
	
	        vm.save = function() {
	            if (isValidEffectiveDateRange()) {
	                vm.productAttributeRuleForm.parName.$setTouched();
	                if (vm.productAttributeRuleForm.parName.$viewValue !== '') {
	                    $mdDialog.hide({
	                        rule: vm.selectedRule ? angular.copy(vm.selectedRule) : {},
	                        scopeList: vm.scopeList ? angular.copy(vm.scopeList) : [],
	                        statementList: vm.statementsList ? angular.copy(vm.statementsList) : [],
	                        type: vm.type
	                    });
	                }
	            }
	        };
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	            document.querySelector('.content-wide').scrollTop = 0;
	        }
	
	        vm.closeAlert = function (index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        function isValidEffectiveDateRange() {
	            if (vm.selectedRule.effectiveDate
	                && vm.selectedRule.expirationDate
	                && vm.selectedRule.effectiveDate > vm.selectedRule.expirationDate) {
	                addAlert(vm.labels.DateRangeValidation, cpqAdminConstants.DANGER);
	                return false;
	            }
	            return true;
	        }
	    };
	    productAttributeRuleController.$inject = ['$mdDialog', 'selectedRule', 'type', 'tabToOpen', 'indexToHighlight', 'scopesList', 'actionsList', 'i18nService', 'cpqAdminConstants'];
	
	    module.exports = productAttributeRuleController;
	})();

/***/ }),
/* 547 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"rules-dialog\">\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n        </i>\n    </button>\n    <form name=\"vm.productAttributeRuleForm\">\n        <md-dialog-content class=\"rule-dialog-content\">\n            <md-tabs md-selected=\"vm.selctedTabIndex\" md-dynamic-height md-border-bottom>\n                <md-tab label=\"RULE\">\n                    <md-content>\n                        <div layout=\"row\">\n                            <div class=\"md-padding content-wide\">\n                                <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-left\" close=\"vm.closeAlert($index)\"\n                                    dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n                                <form class=\"product-detail-form\" novalidate name=\"vm.ruleDetailsForm\">\n                                    <div layout=\"row\">\n                                        <h4 class=\"dialog-right-heading\"><strong>{{vm.labels.Details}}</strong></h4>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.RuleName\" name=\"parName\" is-required=\"true\">\n                                            </material-form-field>\n                                            <div ng-messages=\"vm.productAttributeRuleForm.parName.$error\" ng-if=\"vm.productAttributeRuleForm.parName.$touched || vm.productAttributeRuleForm.$submitted \">\n                                                <p ng-message=\"required\" class=\"formError\">\n                                                    {{ vm.labels.FootnotesIsMandatory }}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\">\n                                            <material-form-field model=\"vm.selectedRule.isActive\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.IsActive\" element-id=\"active\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                    <div layout=\"row\">\n                                        <div class=\"flex\" flex=\"45\">\n                                            <material-form-field model=\"vm.selectedRule.effectiveDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"vm.labels.EffectiveDate\">\n                                            </material-form-field>\n                                        </div>\n                                        <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                            <material-form-field model=\"vm.selectedRule.expirationDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"vm.labels.ExpirationDate\">\n                                            </material-form-field>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n            </md-tabs>\n        </md-dialog-content>\n        <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n            <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n            <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n        </md-dialog-actions>\n    </form>\n</md-dialog>\n"

/***/ }),
/* 548 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var ruleCriteriaEditorController = function($mdDialog, i18nService, type, criteria, picklistEntries, statementPicklistEntries, criteriaIndex, rulesService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	        vm.alertList = [];
	        vm.criteria = criteria;
	
	        vm.type = type;
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        function getNextRowNumber() {
	            return (vm.criteria.filter.predicates.length + 1);
	        }
	        vm.conditionAssociationPicklistEntries = {
	            PicklistValues: picklistEntries
	        };
	        vm.statementProductPicklistEntries = {
	            PicklistValues: statementPicklistEntries
	        };
	
	        vm.addFilter = function() {
	            var targetField;
	            if (vm.type === 'Action') {
	                if (vm.criteria.actionType && vm.criteria.actionType === 'Validation') {
	                    targetField = {
	                        autocomplete: {
	                            'querySearch': rulesService.targetFieldSearchForCriteria,
	                            'displayName': 'label'
	                        }
	                    }
	                } else {
	                    targetField = {
	                        autocomplete: {
	                            'querySearch': rulesService.targetFieldSearchForActionCriteria,
	                            'displayName': 'label'
	                        }
	                    }
	                }
	            } else {
	                targetField = {
	                    autocomplete: {
	                        'querySearch': rulesService.targetFieldSearchForCriteria,
	                        'displayName': 'label'
	                    }
	                }
	            }
	            vm.criteria.filter.predicates.push({
	                'RowNum': getNextRowNumber(),
	                'RHSSObjectName': null,
	                'RHSFieldType': null,
	                'RHSFieldName': null,
	                'RHSFieldLabel': null,
	                'RHSChildFilterName': null,
	                'RefFieldName': null,
	                'OffsetValue': null,
	                'LHSSObjectName': null,
	                'LHSChildFilterName': null,
	                'FieldValue': '',
	                'FieldType': 'STRING',
	                'FieldName': '',
	                'FieldLabel': '',
	                'CompOper': '',
	                'BoolOper': 'AND',
	                'statementProduct': '',
	                'targetField': targetField
	            });
	        };
	
	        function updateRowNumValue() {
	            var filters = vm.criteria.filter.predicates;
	            for (var i = 0; i < filters.length; i++) {
	                filters[i].RowNum = (i + 1);
	            }
	        }
	
	        vm.removeFilter = function(index) {
	            vm.criteria.filter.predicates.splice(index, 1);
	            updateRowNumValue();
	            vm.prepareConditionExpression();
	        };
	
	        function filterListContainsError() {
	            var containsError = false;
	            if (vm.criteria.filter.predicates.length > 0) {
	                var predicates = vm.criteria.filter.predicates;
	                for (var i = 0; i < predicates.length; i++) {
	
	                    var targetField = predicates[i].targetField,
	                        operator = predicates[i].CompOper;
	                    if (vm.type === 'Action' && vm.criteria.actionType !== 'Validation') {
	                        var statementProduct = predicates[i].statementProduct;
	                        if (angular.isDefined(statementProduct) && statementProduct !== '' && statementProduct !== null) {
	                            containsError = false;
	                            predicates[i].hasError = false;
	                        } else {
	                            containsError = true;
	                            predicates[i].hasError = true;
	                        }
	                    } else {
	                        if (targetField && targetField.autocomplete && targetField.autocomplete.selectedItem) {
	                            if (!targetField.autocomplete.selectedItem.value || !targetField.autocomplete.selectedItem.label) {
	                                containsError = true;
	                                predicates[i].hasError = true;
	                            } else {
	                                predicates[i].hasError = false;
	                            }
	                        } else {
	                            containsError = true;
	                            predicates[i].hasError = true;
	                        }
	                        if (operator === undefined || operator === '') {
	                            containsError = true;
	                            predicates[i].hasError = true;
	                        } else {
	                            if (predicates[i].hasError !== true) {
	                                predicates[i].hasError = false;
	                            }
	
	                        }
	                    }
	
	                }
	            }
	            return containsError;
	        }
	
	        function prepareCriteriaExpression(condExpr) {
	
	            var str = '';
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.criteria.filter.predicates.length > 0) {
	                    var predicates = vm.criteria.filter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	
	                var condExprArr = condExpr.split(' ');
	                for (var i = 0; i < condExprArr.length; i++) {
	                    if (!isNaN(+condExprArr[i])) {
	                        var value = +condExprArr[i];
	                        if (value !== 0) {
	                            if (rowNumArr.indexOf(value) <= -1) {
	                                str += '{' + (value - 1) + '}';
	                            } else {
	                                var predicates = vm.criteria.filter.predicates;
	                                var fieldLabel = predicates[(value - 1)].FieldLabel.trim(),
	                                    fieldValue = predicates[(value - 1)].FieldValue.trim(),
	                                    operator = predicates[(value - 1)].CompOper;
	                                str += prepareExpressionString(fieldLabel, fieldValue, operator);
	                            }
	                        }
	
	                    } else {
	                        str += condExprArr[i] + ' ';
	                    }
	                }
	            }
	
	            return str !== '' ? str.trim() : str;
	        }
	
	        function prepareExpressionString(label, value, operator) {
	            var str = '';
	            switch (operator) {
	                case 'equal to':
	                    {
	                        str = '(' + label + ' = ' + value + ') ';
	                        break;
	                    }
	                case 'not equal to':
	                    {
	                        str = '(' + label + ' != ' + value + ') ';
	                        break;
	                    }
	                case 'starts with':
	                    {
	                        str = '(' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case 'contains':
	                    {
	                        str = '(' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case 'does not contain':
	                    {
	                        str = '(NOT ' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case 'less than':
	                    {
	                        str = '(' + label + ' < ' + value + ') ';
	                        break;
	                    }
	                case 'greater than':
	                    {
	                        str = '(' + label + ' > ' + value + ') ';
	                        break;
	                    }
	                case 'less than or equal to':
	                    {
	                        str = '(' + label + ' <= ' + value + ') ';
	                        break;
	                    }
	                case 'greater than or equal to':
	                    {
	                        str = '(' + label + ' >= ' + value + ') ';
	                        break;
	                    }
	                case 'in':
	                    {
	                        str = '(' + label + ' IN ' + value + ') ';
	                        break;
	                    }
	                case 'not in':
	                    {
	                        str = '(' + label + ' NOT IN ' + value + ') ';
	                        break;
	                    }
	            }
	            return str;
	        }
	
	        vm.prepareConditionExpression = function() {
	            var expr = '';
	            var predicates = vm.criteria.filter.predicates;
	
	            for (var i = 0; i < predicates.length; i++) {
	                if (i === (predicates.length - 1)) {
	                    expr += predicates[i].RowNum;
	                } else {
	                    expr += predicates[i].RowNum + ' AND ';
	                }
	            }
	            vm.criteria.filter.condExpr = expr;
	        };
	
	        function getProduct2Label(value) {
	            var label;
	            for (var i = 0; i < statementPicklistEntries.length; i++) {
	                if (statementPicklistEntries[i].value === value) {
	                    label = statementPicklistEntries[i].label;
	                }
	            }
	            return label;
	        }
	
	        function getValueType(label) {
	            var response;
	            if (label) {
	                response = label.split(' : ')[0];
	            }
	            return response || label;
	        }
	
	        function updateCriteriaContent() {
	            if (vm.criteria.filter.predicates.length > 0) {
	                var predicates = vm.criteria.filter.predicates,
	                    exprStr = '';
	                vm.criteria.fields = [];
	                var condExpr = vm.criteria.filter.condExpr;
	                if (!condExpr) {
	                    vm.prepareConditionExpression();
	                }
	                for (var i = 0; i < predicates.length; i++) {
	                    var temp, label, value, length;
	                    if (vm.type === 'Action' && vm.criteria.actionType !== 'Validation') {
	                        value = predicates[i].statementProduct,
	                            label = getProduct2Label(value);
	                        if (value) {
	                            var samplePrefix = rulesService.getPrefixedAttribute('LineItem__c') + '.' + rulesService.getPrefixedAttribute('ProductId__r') + '.';
	                            value = value.split(samplePrefix)[1];
	                        }
	                    } else {
	                        temp = predicates[i].targetField.autocomplete.selectedItem,
	                            label = temp.label;
	                        var valueType = getValueType(label);
	                        switch (valueType) {
	                            case 'LI':
	                                {
	                                    var tempValue = temp.value;
	                                    value = tempValue.split(rulesService.getPrefixedAttribute('LineItem__c') + '.')[1];
	                                    break;
	                                }
	                            case 'PL':
	                                {
	                                    var tempValue = temp.value;
	                                    value = tempValue.split(rulesService.getPrefixedAttribute('LineItem__c') + '.')[1];
	                                    break;
	                                }
	                            case 'PAV':
	                                {
	                                    var tempValue = temp.value;
	                                    value = tempValue.replace('ProductAttributeValue__c', 'AttributeValueId__r');
	                                    break;
	                                }
	                            case 'PC':
	                                {
	                                    var tempValue = temp.value;
	                                    value = tempValue.split(rulesService.getPrefixedAttribute('LineItem__c') + '.')[1];
	                                    break;
	                                }
	                            case 'P':
	                                {
	                                    var tempValue = temp.value;
	                                    value = tempValue.split(rulesService.getPrefixedAttribute('LineItem__c') + '.')[1];
	                                    break;
	                                }
	
	                        }
	
	                    }
	
	                    predicates[i]['FieldName'] = value;
	                    predicates[i]['FieldLabel'] = label.split(':').length > 1 ? label.split(':')[1].trim() : label;
	                    //vm.criteria.fields.push(predicates[i]['FieldName']);
	                    vm.criteria.fields.push(value);
	                }
	
	                vm.criteria.exprStr = prepareCriteriaExpression(vm.criteria.filter.condExpr);
	                
	
	            } else {
	                vm.criteria.filter.predicates = [];
	            }
	        }
	
	        vm.save = function() {
	            /* TODO : Check here if the half-filled rows are proper or not .else ask user to remove them 
	             * check for target field and operator values only.
	             */
	            if (!filterListContainsError()) {
	                updateCriteriaContent();
	                $mdDialog.hide({
	                    criteria: angular.copy(vm.criteria),
	                    type: type,
	                    index: criteriaIndex
	                });
	            } else {
	                vm.alertList = [];
	                vm.alertList.push({
	                    msg: 'Filter list contains error. Fix them before saving.'
	                })
	            }
	
	
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	    };
	
	    ruleCriteriaEditorController.$inject = [
	        '$mdDialog',
	        'i18nService',
	        'type',
	        'criteria',
	        'picklistEntries',
	        'statementPicklistEntries',
	        'criteriaIndex',
	        'rulesService'
	    ];
	
	    module.exports = ruleCriteriaEditorController;
	})();


/***/ }),
/* 549 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"product-group-criteria-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>{{vm.type}} Criteria</h2>\n            <span flex></span>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.addFilter()\">New Filter</button>\n            <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n                </i>\n            </button>\n        </div>\n        <div class=\"error-indicator\">\n            <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"4000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"rule-criteria-dialog-content\">\n        <div class=\"filter-container\">\n            <div class=\"each-row\" data-ng-repeat=\"item in vm.criteria.filter.predicates\" data-ng-class=\"item.hasError === true ? 'error' :''\">\n                <div class=\"each-row-container\">\n                    <div class=\"btn-group\">\n                        \n                        <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeFilter($index)\">\n                            <i class=\"material-icons\">clear</i>\n                        </button>\n                    </div>\n                    <div class=\"rowNum\">\n                        <material-form-field model=\"item.RowNum\" field-type=\"string\" is-editable=\"false\" field-label=\"'Row Num'\" name=\"rowNum\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"autocomplete\" data-ng-if=\"(vm.type === 'Condition' || vm.type === 'Action') && (vm.criteria.actionType === undefined || vm.criteria.actionType === 'Validation')\">\n                        <material-form-field field-type=\"autocomplete\" field-label=\"'Field'\" name=\"field\" properties=\"item.targetField\" is-required=\"true\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"autocomplete\" data-ng-if=\"vm.type === 'Action' && vm.criteria.actionType !== 'Validation'\">\n                        <material-form-field model=\"item.statementProduct\" field-type=\"picklist\" field-label=\"'Field'\" name=\"field\" properties=\"vm.statementProductPicklistEntries\" is-required=\"true\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"operator\">\n                        <material-form-field model=\"item.CompOper\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.conditionAssociationPicklistEntries\" field-label=\"'Operator'\" name=\"operator\" is-required=\"true\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"value\">\n                        <material-form-field model=\"item.FieldValue\" field-type=\"string\" is-editable=\"true\" field-label=\"'Value'\" name=\"value\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div class=\"clearfix\"></div>\n            </div>\n        </div>\n        <div class=\"advance-filter-container\">\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showAdvancedPanel = true;\" data-ng-if=\"vm.showAdvancedPanel !== true\">Advanced Options</button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showAdvancedPanel = false;vm.prepareConditionExpression();\" data-ng-if=\"vm.showAdvancedPanel === true\">Clear Advanced Options</button>\n            <div class=\"value\" data-ng-if=\"vm.showAdvancedPanel === true \">\n                <material-form-field model=\"vm.criteria.filter.condExpr\" field-type=\"string\" is-editable=\"true\" field-label=\"'Advanced Filter Condition'\" name=\"value\">\n                </material-form-field>\n            </div>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 550 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var avmController = function (i18nService, $mdDialog, selectedAVM, avmType, applicationTypeValues, rulesService, cpqAdminConstants) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	        vm.selectedAvm = selectedAVM.avm;
	
	        vm.appTypePicklistEntries = {
	            PicklistValues: (applicationTypeValues.length ? applicationTypeValues[0].PicklistValues : [])
	        };
	        vm.avmAttributesList = [];
	        vm.alerts = [];
	
	        function prepateAvmAttributesList() {
	            if (selectedAVM.avmAttributesList && selectedAVM.avmAttributesList.length) {
	                for (var i = 0; i < selectedAVM.avmAttributesList.length; i++) {
	                    vm.avmAttributesList.push({
	                        autocomplete: {
	                            querySearch: rulesService.getAVMAttributes,
	                            displayName: 'label',
	                            selectedItem: {
	                                label: selectedAVM.avmAttributesList[i].name,
	                                value: selectedAVM.avmAttributesList[i].field
	                            }
	                        }
	                    });
	                }
	                rulesService.setAVMPopupAttributesList(angular.copy(vm.avmAttributesList));
	            }
	        }
	        prepateAvmAttributesList();
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        vm.save = function() {
	            if (vm.avmForm.$valid && vm.avmForm.ruleName.$viewValue !== ''
	                && isValidEffectiveDateRange()) {
	                $mdDialog.hide({
	                    type: avmType,
	                    avm: angular.copy(vm.selectedAvm),
	                    avmAttributesList: angular.copy(vm.avmAttributesList)
	                });
	            } else {
	                vm.avmForm.ruleName.$setTouched();
	            }
	        };
	
	        function updateSelectedItem(item) {
	            rulesService.setAVMPopupAttributesList(angular.copy(vm.avmAttributesList));
	        }
	        vm.addAttribute = function(index) {
	            vm.avmAttributesList.push({
	                autocomplete: {
	                    querySearch: rulesService.getAVMAttributes,
	                    displayName: 'label',
	                    selectedItemChange: updateSelectedItem
	                }
	            });
	            rulesService.setAVMPopupAttributesList(angular.copy(vm.avmAttributesList));
	        };
	        vm.removeAttribute = function(index) {
	            vm.avmAttributesList.splice(index, 1);
	            rulesService.setAVMPopupAttributesList(angular.copy(vm.avmAttributesList));
	        };
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	            document.querySelector('.avm-dialog-content').scrollTop = 0;
	        }
	
	        vm.closeAlert = function (index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        function isValidEffectiveDateRange() {
	            if (vm.selectedAvm.effectiveDate
	                && vm.selectedAvm.expirationDate
	                && vm.selectedAvm.effectiveDate > vm.selectedAvm.expirationDate) {
	                addAlert(vm.labels.DateRangeValidation, cpqAdminConstants.DANGER);
	                return false;
	            }
	            return true;
	        }
	
	    };
	
	    avmController.$inject = [
	        'i18nService',
	        '$mdDialog',
	        'selectedAVM',
	        'avmType',
	        'applicationTypeValues',
	        'rulesService',
	        'cpqAdminConstants'
	    ];
	
	    module.exports = avmController;
	})();


/***/ }),
/* 551 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"avm-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>Attribute Value Matrix</h2>\n            <span flex></span>\n            <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n                </i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"avm-dialog-content\">\n        <div class=\"md-padding content-wide\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-left\" close=\"vm.closeAlert($index)\"\n                dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <form class=\"avm-detail-form\" novalidate name=\"vm.avmForm\">\n                <div layout=\"row\">\n                    <h4 class=\"dialog-right-heading\"><strong>{{vm.labels.Details}}</strong></h4>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\">\n                        <material-form-field model=\"vm.selectedAvm.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.RuleName\" is-required=\"true\" name=\"ruleName\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.avmForm.ruleName.$error\" ng-if=\"vm.avmForm.ruleName.$touched || vm.avmForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">\n                                {{ vm.labels.FootnotesIsMandatory }}\n                            </p>\n                        </div>\n                    </div>\n                    <div class=\"flex is-active\">\n                        <material-form-field model=\"vm.selectedAvm.isActive\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"vm.labels.IsActive\" element-id=\"avm-isActive\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedAvm.effectiveDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"vm.labels.EffectiveDate\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedAvm.expirationDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"vm.labels.ExpirationDate\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" style=\"height: 95px;\">\n                        <material-form-field model=\"vm.selectedAvm.description\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"'Description'\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\">\n                        <material-form-field model=\"vm.selectedAvm.appType\" field-type=\"picklist\" properties=\"vm.appTypePicklistEntries\" field-label=\"'Application Type'\" name=\"appType\" is-editable=\"true\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex avm-pop-up-checkbox\">\n                        <material-form-field model=\"vm.selectedAvm.treatNullAsWildCard\" field-type=\"checkbox\" field-label=\"'Trust a null value as wild character'\">\n                        </material-form-field>\n                    </div>\n                </div>\n            </form>\n            <div class=\"avm-attributes-container\">\n                <p><b>Matrix Fields</b></p>\n                <div data-ng-if=\"vm.avmAttributesList.length === 0\" class=\"addIcon\">\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addAttribute()\">\n                        <i class=\"material-icons\">add</i>\n                    </button>\n                </div>\n                <div class=\"attribute-container\" data-ng-if=\"vm.avmAttributesList.length > 0\">\n                    <div class=\"each-attribute\" data-ng-repeat=\"item in vm.avmAttributesList\">\n                        <material-form-field model=\"item.model\" field-type=\"autocomplete\" field-label=\"'Attribute'\" properties=\"item\"></material-form-field>\n                        <button class=\"slds-button slds-button--icon\" ng-click=\"vm.removeAttribute($index)\"><i class=\"material-icons\">clear</i></button>\n                        <button class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addAttribute()\" data-ng-if=\"$index === (vm.avmAttributesList.length -1)\"><i class=\"material-icons\">add</i></button>\n                    </div>\n                </div>\n                <div class=\"clearfix\"></div>\n            </div>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 552 */
460,
/* 553 */
461,
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.productGroups.common.directives', [])
			.directive('productGroupsSubMenu', __webpack_require__(555));
	})();


/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var productMenuController = function($scope, $stateParams, i18nService) {
	        var vm = this;
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	    };
	
	    productMenuController.$inject = [
	        '$scope',
	        '$stateParams',
	        'i18nService',
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: productMenuController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(556),
	    };
	};


/***/ }),
/* 556 */
/***/ (function(module, exports) {

	module.exports = "<!-- Header Menu Starting -->\n<ul class=\"nav navbar-nav list-group\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.productGroups.details.form({'id':vm.$stateParams.id, 'productId': vm.$stateParams.productId, 'productName': vm.$stateParams.productName})\">{{vm.labels.Details}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.productGroups.associatedProduct({'id':vm.$stateParams.id, 'productId': vm.$stateParams.productId, 'productName': vm.$stateParams.productName})\">{{vm.labels.AssociatedProduct}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.productGroups.associatedRule({'id':vm.$stateParams.id, 'productId': vm.$stateParams.productId, 'productName': vm.$stateParams.productName})\">ASSOCIATED RULES</a>\n    </li>\n</ul>\n<!--/.nav-collapse -->\n<!-- Header Menu Closed -->\n"

/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.productGroups.common.services', [])
			.service('productGroupsService', __webpack_require__(558));
		//Add product groups module common services here 
	})();

/***/ }),
/* 558 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    module.exports = ['$q', '$sce', '$rootScope', 'remoteService', 'applicationService', 'lodash', 'systemConstants', 'cpqAdminConstants',
	        function($q, $sce, $rootScope, remoteService, applicationService, _, systemConstants, cpqAdminConstants) {
	            var selectedProductGroup,
	                prefix = systemConstants.nsPrefix || '';
	
	            function getSelectedProductGroup() {
	                return selectedProductGroup;
	            }
	
	            function setSelectedProductGroup(productGroup) {
	                selectedProductGroup = productGroup;
	            }
	
	            function getProductGroupDetailsById(productGroupId, retrieveProducts) {
	                var deferQ = $q.defer();
	                if (productGroupId === 'new') {
	                    var temp = {
	                        'Id': '',
	                        'Name': 'New Product Group',
	                    };
	                    setSelectedProductGroup(temp);
	                    return temp;
	                } else if (productGroupId === null) {
	                    temp = undefined;
	                    setSelectedProductGroup(temp);
	                    return temp;
	                } else {
	                    /**
	                     * - Second parameter is boolean value
	                     * - pass true value for retrieve associated product to the product group 
	                     * - If you don't need the associiated product infromation pass false   
	                     */
	                    remoteService.getProductGroupDetails(productGroupId, retrieveProducts)
	                        .then(function(response) {
	                            var productGroup = {
	                                'Id': response.ProductGroupSO.Id,
	                                'Name': response.ProductGroupSO.Name,
	                                'Description': response.ProductGroupSO[prefix + 'Description__c']
	                            };
	                            setSelectedProductGroup(productGroup);
	                            deferQ.resolve(productGroup);
	                        }, function(reason) {
	                            deferQ.reject(reason);
	                        });
	                    return deferQ.promise;
	                }
	            }
	
	            var productGroupsService = {
	                getSelectedProductGroup: getSelectedProductGroup,
	                setSelectedProductGroup: setSelectedProductGroup,
	                getProductGroupDetailsById: getProductGroupDetailsById 
	            };
	            return productGroupsService;
	        }
	    ];
	})();


/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.productGroups.common.filters', [])
	        .filter('productGroupsUserMessageService', __webpack_require__(560));
	
	})();


/***/ }),
/* 560 */
372,
/* 561 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var constants = {
	        statement: 'STMT',
	        condition: 'COND',
	        pa_statement: 'PA-STMT'
	    };
	
	    module.exports = constants;
	
	})();


/***/ }),
/* 562 */
/***/ (function(module, exports) {

	(function() {
	    var productGroupsController = function($state, $scope, cpqAdminConstants, i18nService, productGroupsService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	
	        vm.findStateName = function(stateName) {
	            vm.stateCurrentName = stateName;
	        }
	
	        $scope.$on('$stateChangeSuccess', function(e, toState, toParams) {
	            vm.findStateName(toState.name);
	            updateTabMenus();
	        });
	
	        /* Menu for specific Tabs */
	        vm.tabFirstMenu = '';
	        vm.tabMenuItems = [];
	
	        function updateTabMenus() {
	            var currentState = vm.stateCurrentName,
	                currentHash = currentState.split('app.productGroups.')[1],
	                currentParams = $state.params;
	            switch (currentHash) {
	                case 'details':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewProductGroup;
	                        vm.tabMenuItems = [];
	                        vm.selectedProduct = undefined;
	                        break;
	                    }
	                case 'details.form':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewProductGroup;
	                        vm.tabMenuItems = [];
	                        setProductDetailsForGoBack(currentParams);
	                        if (currentParams.id === cpqAdminConstants.NEW) {
	                            vm.tabFirstMenu = '';
	                        }
	                        break;
	                    }
	                case 'associatedProduct':
	                    {
	                        vm.tabFirstMenu = '';
	                        vm.tabMenuItems = [];
	                        setProductDetailsForGoBack(currentParams);
	                        break;
	                    }
	                case 'associatedRule':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewConstraintRule;
	                        vm.tabMenuItems = [vm.labels.NewProductAttributeRule, vm.labels.NewAttributeValueMatrix];
	                        setProductDetailsForGoBack(currentParams);
	                        break;
	                    }
	            }
	        }
	
	        function setProductDetailsForGoBack(currentParams) {
	            if (currentParams.productId !== null) {
	                vm.selectedProduct = { 'productId': currentParams.productId, 'Name': currentParams.productName };
	            }
	        }
	
	        vm.tabMenuClicked = function(menuName) {
	            var eventName = menuName.split(' ').join('-');
	            $scope.$broadcast(eventName);
	        };
	        vm.findStateName($state.current.name);
	
	        vm.currentState = $state.current.name;
	
	        vm.saveProduct = function() {
	            //Findout another approach of this communication, other than broadcast and emmit
	            $scope.$broadcast('explicitcatalogPageSave');
	        };
	
	        var deRegisterFunc = $scope.$watch(function() {
	            return productGroupsService.getSelectedProductGroup();
	        }, function(newValue) {
	            vm.selectedProductGroup = productGroupsService.getSelectedProductGroup();
	        });
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            vm = null;
	        });
	    };
	
	    productGroupsController.$inject = [
	        '$state',
	        '$scope',
	        'cpqAdminConstants',
	        'i18nService',
	        'productGroupsService'
	    ];
	
	    module.exports = productGroupsController;
	})();


/***/ }),
/* 563 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"product-groups-main-Container\">\n    <div class=\"product-groups-header title-bar\">\n        <div class=\"product-groups-title-container\">\n            <div class=\"tabBreadcrumb\" data-ng-if=\"vm.selectedProduct\">\n                <ol class=\"breadcrumb\">\n                    <li><a data-ui-sref=\"app.product.associations({'id': vm.selectedProduct.productId})\">{{vm.selectedProduct.Name}}</a>\n                    </li>\n                    <li class=\"active\">{{vm.selectedProductGroup.Name}}\n                    </li>\n                </ol>\n            </div> \n            <div href=\"#\" title=\"{{vm.selectedProductGroup.Name}}\">\n                <span class=\"title\">{{vm.selectedProductGroup.Name}}</span>\n            </div>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse noPadding\">\n            <product-groups-sub-menu></product-groups-sub-menu>\n            <!-- Product groups menu bar with its values -->\n            <ul class=\"nav navbar-nav navbar-right\">\n                <div class=\"listProductGroupsBtn\">\n                    <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabFirstMenu)\" data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                    <div class=\"drop drop-menu\" data-ng-if=\"vm.tabMenuItems.length > 0\">\n                        <md-menu md-offset=\"50 50\">\n                            <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                <i class=\"material-icons\">more_vert</i>\n                            </button>\n                            <md-menu-content width=\"6\">\n                                <md-menu-item data-ng-repeat=\"menu in vm.tabMenuItems\">\n                                    <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                        <div layout=\"row\" flex>\n                                            <p flex>{{menu}}</p>\n                                        </div>\n                                    </md-button>\n                                </md-menu-item>\n                            </md-menu-content>\n                        </md-menu>\n                    </div>\n                </div>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n    <div class=\"productGroupsCenterContainer\">\n        <!-- Content layout starts -->\n        <div ui-view=\"productGroupsContainer\" class=\"productGroupsContainer\"></div>\n        <!-- Content layout ends -->\n    </div>\n</div>\n"

/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    __webpack_require__(565);
	    __webpack_require__(575);
	    __webpack_require__(577);
	    __webpack_require__(581);
	    __webpack_require__(585);
	    __webpack_require__(590);
	
	    module.exports = angular.module('cpqAdmin.priceList', [
	
	            'cpqAdmin.priceList.common.services',
	            'cpqAdmin.priceList.common.directives',
	            'cpqAdmin.priceList.list',
	            'cpqAdmin.priceList.details',
	            'cpqAdmin.priceList.items',
	            'cpqAdmin.priceList.categoryAssociation'
	        ])
	        .controller('priceListController', __webpack_require__(594))
	        .constant('priceListConstants', __webpack_require__(595))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceList', {
	                url: '/priceList',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(596),
	                        controller: 'priceListController',
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceList.common.directives', ['cpqAdmin.priceList.common.services'])
	        .directive('priceListSubMenu', __webpack_require__(566))
	        .directive('priceListListing', __webpack_require__(568))
	        .directive('priceListItemsListing', __webpack_require__(570))
	        .directive('priceListTreeContainer', __webpack_require__(572));
	})();


/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var productMenuController = function($stateParams, systemConstants, i18nService) {
	        var vm = this;
	
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	
	    };
	
	    productMenuController.$inject = [
	        '$stateParams',
	        'systemConstants',
	        'i18nService'
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: productMenuController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(567),
	    };
	};


/***/ }),
/* 567 */
/***/ (function(module, exports) {

	module.exports = "<ul class=\"nav navbar-nav price-list-group\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceList.details({id:vm.$stateParams.id})\">{{vm.labels.Details}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceList.pricelistitems({id:vm.$stateParams.id})\">{{vm.labels.PriceListItems}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceList.categoryAssociation({id:vm.$stateParams.id})\">{{vm.labels.AssociatedCategories}}</a>\n    </li>\n</ul>\n"

/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    module.exports = [
	        function() {
	            var priceListingController = function($scope, applicationService, systemConstants, $state, $stateParams,
	                i18nService, remoteService, priceListCommonService, priceListConstants) {
	
	                var vm = this,
	                    prefix = systemConstants.nsPrefix || '',
	                    filter = {},
	                    requestObj = {},
	                    pageNumber = 1;
	
	                vm.labels = i18nService.CustomLabel;
	                vm.disableLeftBtn = true;
	                vm.searchedStr = '';
	                vm.isMaxSQLSizeExceed = false;
	                vm.numberOfProductsPerChunk = priceListConstants.numberOfProductsPerChunk || 50;
	
	                vm.searchPriceList = function() {
	                    filter.SearchString = vm.searchText || '';
	                    filter.ChunkNumber = 1;
	                    filter.NumberOfRecordsPerChunk = vm.numberOfProductsPerChunk;
	                    loadPriceLists();
	                };
	
	                vm.prepareFiltersAndPriceLists = function() {
	                    filter = priceListCommonService.getFilter();
	                    if (filter) {
	                        requestObj = filter;
	                        vm.searchText = filter.SearchString;
	                    } else {
	                        filter = requestObj = {
	                            ChunkNumber: pageNumber || 1,
	                            NumberOfRecordsPerChunk: vm.numberOfProductsPerChunk,
	                            SearchString: vm.searchString || ''
	                        };
	                    }
	                };
	
	                /* On Page load while there are no filters applied */
	                vm.prepareFiltersAndPriceLists();
	
	                vm.getPriceLists = function(type) {
	                    if (type === 'next') {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber + 1);
	                        if (filter.ChunkNumber !== 1) {
	                            vm.disableLeftBtn = false;
	                        }
	                        loadPriceLists();
	                    } else {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber - 1);
	                        if (filter.ChunkNumber === 1) {
	                            vm.disableLeftBtn = true;
	                        }
	                        loadPriceLists();
	                    }
	                };
	
	                var pLDeRegisterFunc = $scope.$watch(function() {
	                    return priceListCommonService.getPriceLists();
	                }, function(newValue, oldValue) {
	                    if (newValue && oldValue) {
	                        processData(newValue);
	                    }
	                }, true);
	                //processData(priceListCommonService.getPriceLists());
	
	                function processData(priceLists) {
	                    /* Used to bind to table body */
	                    vm.priceLists = priceLists;
	                    vm.isMaxSQLSizeExceed = false;
	
	                    /* 
	                     * - Show 'No matching products are found for the search entry XXX', when no return
	                     * return result set is empty.
	                     * - Keep the user messages, until user makes a fresh search which has atleast more
	                     * than 1 result item.
	                     */
	                    if (priceLists.length === 0) {
	                        vm.searchedStr = vm.searchString;
	                    }
	                    /**
	                     * - Check if the response size is less than the current chunk size.
	                     * - If less, disable the next button
	                     * - else keep it enabled
	                     */
	
	                    if (priceLists.length < filter.NumberOfRecordsPerChunk) {
	                        vm.disableRightBtn = true;
	                        updateCenterBtnText(filter, priceLists.length);
	                    } else {
	                        vm.disableRightBtn = false;
	                        updateCenterBtnText(filter, priceLists.length);
	                    }
	
	                    /* Hide the loader on success of service call */
	                    vm.showLoader = false;
	                    document.querySelector('.list-table').scrollTop = 0;
	                }
	
	                function loadPriceLists() {
	
	                    vm.showLoader = true;
	                    var requestObj = filter;
	                    priceListCommonService.loadAllPriceLists(requestObj)
	                        .then(function(response) {}, function(reason) {});
	
	                }
	
	                function updateCenterBtnText(requestObj, endCount) {
	                    /* 
	                     * - Search result might return lesser number of records than current pagination count.
	                     * e.g. current pagination is : 1-150, but search returned only 20 records.
	                     * - Then pagination should be updated to 1-20 instead of 1-150.
	                     * - endCount variable contains the exact number of records and will only be defined, if
	                     * search count is lesser than current pagination sequence.
	                     */
	                    if (requestObj.ChunkNumber === 1) {
	                        vm.disableLeftBtn = true;
	                    }
	                    if (endCount) {
	                        vm.paginationCenterText = '(' + ((requestObj.ChunkNumber - 1) * vm.numberOfProductsPerChunk + 1) + '-' + ((requestObj.ChunkNumber - 1) * vm.numberOfProductsPerChunk + endCount) + ')';
	                        if (endCount < vm.numberOfProductsPerChunk) {
	                            vm.disableRightBtn = true;
	                        }
	                    } else {
	                        vm.paginationCenterText = '(' + ((requestObj.ChunkNumber - 1) * vm.numberOfProductsPerChunk + 1) + '-' + (requestObj.ChunkNumber * vm.numberOfProductsPerChunk) + ')';
	                    }
	                }
	
	                vm.getActiveClass = function(id) {
	                    if ($stateParams.id === id) {
	                        return true;
	                    } else {
	                        return false;
	                    }
	                };
	
	                $scope.$on('destroy', function() {
	                    deRegisterFunc();
	                    pLDeRegisterFunc();
	                    vm = null;
	                });
	
	                vm.loadPriceListDetails = function(toBeLoadedPL) {
	                    /* TODO : (1) Save the already opened PL 
	                     * (2)If save is success, then load the toBeLoadedPL
	                     * (3)Update the common PL Service , so that header will be updated.
	                     */
	
	                    /* Check if there is already anything selected present or not */
	                    priceListCommonService.setSelectedPL(angular.copy(toBeLoadedPL));
	                    $state.go('app.priceList.details', {
	                        id: toBeLoadedPL.id
	                    });
	                };
	            };
	
	            priceListingController.$inject = [
	                '$scope',
	                'applicationService',
	                'systemConstants',
	                '$state',
	                '$stateParams',
	                'i18nService',
	                'remoteService',
	                'priceListCommonService',
	                'priceListConstants'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {},
	                controller: priceListingController,
	                controllerAs: 'vm',
	                bindToController: {
	                    loadViewProducts: '&',
	                    searchText: '='
	                },
	                template: __webpack_require__(569),
	            };
	        }
	    ];
	})();


/***/ }),
/* 569 */
/***/ (function(module, exports) {

	module.exports = "<header>\n    <h4>{{::vm.labels.PricingAllPriceLists}}</h4>\n    <div class=\"search\">\n        <form ng-submit=\"vm.searchPriceList()\" novalidate>\n            <div class=\"search-input-container\">\n                <div class=\"input-group\">\n                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                    <label class=\"ng-binding\">Search</label>\n                </div>\n            </div>\n        </form>\n    </div>\n</header>\n<div data-ng-if=\"vm.priceLists.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n    {{::vm.labels.NoMatchingPriceLists}} <span><b>{{vm.searchedStr}}</b></span>\n</div>\n<div data-ng-if=\"vm.priceLists.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n    {{::vm.labels.MaxSQLSizeExceedMessage}}\n</div>\n<div class=\"list-table\">\n    <table>\n        <tbody>\n            <tr ng-repeat=\"item in vm.priceLists track by item.id\" ng-click=\"vm.loadPriceListDetails(item)\" ng-class=\"{active: vm.getActiveClass(item.id) === true}\">\n                <td>\n                    {{::item.name }}\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<div class=\"pagination product-details-list-pagination\">\n    <div class=\"place product-details-list-place\">\n        {{vm.paginationCenterText}}\n    </div>\n    <div class=\"next-prev\">\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getPriceLists('previous')\">\n            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n        </button>\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getPriceLists('next')\">\n            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n        </button>\n    </div>\n</div>\n"

/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    module.exports = [
	
	        function() {
	
	            var priceListingController = function($scope, listService, productConstants, cpqAdminConstants, applicationService, systemConstants, $state, $stateParams, i18nService) {
	                var vm = this,
	                    prefix = systemConstants.nsPrefix || '',
	                    filter;
	                vm.labels = i18nService.CustomLabel;
	                vm.disableLeftBtn = true;
	                vm.searchedStr = '';
	                vm.isMaxSQLSizeExceed = false;
	
	                /* TODO : (1) Get the selected Pricelist 
	                 * (2) Get the related PL items 
	                 */
	                vm.searchProducts = function() {
	                    var requestObj = {};
	                    filter = listService.getFilters();
	                    if (filter) {
	                        requestObj = filter;
	                    } else {
	
	                        requestObj = {
	                            'ViewName': prefix + productConstants.fieldsetProductList,
	                            "SortField": 'LastModifiedDate',
	                            "SortDirection": cpqAdminConstants.DESCENDING,
	                            'SearchString': vm.searchText || '',
	                            'ChunkNumber': 1,
	                            'NumberOfProductsPerChunk': productConstants.numberOfProductsPerChunk,
	                            'ConfigTypes': []
	                        };
	                    }
	                    loadPriceLists(requestObj);
	                };
	
	                /* On Page load while there are no filters applied */
	                //vm.searchProducts();
	
	                vm.getPriceLists = function(type) {
	                    if (type === 'next') {
	                        filter.ChunkNumber++;
	                        if (filter.ChunkNumber !== 1) {
	                            vm.disableLeftBtn = false;
	                        }
	                        loadPriceLists(filter);
	                    } else {
	                        filter.ChunkNumber--;
	                        if (filter.ChunkNumber === 1) {
	                            vm.disableLeftBtn = true;
	                        }
	                        loadPriceLists(filter);
	                    }
	                };
	
	                function loadPriceLists(requestObj) {
	                    listService.getProductListBySelectedView(requestObj, true)
	                        .then(function(response) {
	                            vm.productList = response.ProductSOs;
	                            vm.isMaxSQLSizeExceed = false;
	                            /**
	                             * - Get the list of column names just once per page load
	                             * - But the response will always have this columns list.
	                             * - We dont need to consider the columns list always from the response
	                             */
	
	                            vm.tableColumnConfig = listService.getColumnList(response.ProductSOs);
	
	                            if (response.ProductSOs.length < requestObj.NumberOfProductsPerChunk) {
	                                vm.disableRightBtn = true;
	                                if (requestObj.ChunkNumber === 1) {
	                                    vm.disableLeftBtn = true;
	                                }
	                                updateCenterBtnText(requestObj, response.ProductSOs.length);
	                            } else {
	                                vm.disableRightBtn = false;
	                                updateCenterBtnText(requestObj);
	                            }
	
	                            if (response.ProductSOs.length === 0) {
	                                vm.searchedStr = requestObj.SearchString;
	                                if (vm.pageNumber === 0) {
	                                    vm.showPagination = false;
	                                }
	                            }
	                        }, function(reason) {
	                            if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                                //reason.message = vm.labels.MaxSQLSizeExceedMessage;
	                                vm.isMaxSQLSizeExceed = true;
	                                vm.productList = [];
	                                vm.tableColumnConfig = [];
	                            }
	                            vm.disableRightBtn = true;
	                            //applicationService.showErrorMessage(reason);
	                        });
	                }
	
	                function updateCenterBtnText(requestObj, endCount) {
	                    /* 
	                     * - Search result might return lesser number of records than current pagination count.
	                     * e.g. current pagination is : 1-150, but search returned only 20 records.
	                     * - Then pagination should be updated to 1-20 instead of 1-150.
	                     * - endCount variable contains the exact number of records and will only be defined, if
	                     * search count is lesser than current pagination sequence.
	                     */
	                    if (endCount) {
	                        vm.paginationCenterText = '(' + ((requestObj.ChunkNumber - 1) * requestObj.NumberOfProductsPerChunk + 1) + '-' + ((requestObj.ChunkNumber - 1) * requestObj.NumberOfProductsPerChunk + endCount) + ')';
	                    } else {
	                        vm.paginationCenterText = '(' + ((requestObj.ChunkNumber - 1) * requestObj.NumberOfProductsPerChunk + 1) + '-' + (requestObj.ChunkNumber * requestObj.NumberOfProductsPerChunk) + ')';
	                    }
	                }
	
	                vm.goToDetailsPage = function(Id) {
	                    $state.go('app.priceList.details', {
	                        id: Id
	                    });
	                };
	                vm.getActiveClass = function(Id) {
	                    if ($stateParams.id === Id) {
	                        return true;
	                    } else {
	                        return false;
	                    }
	                };
	
	                /* On change of filters */
	                var deRegisterFunc = $scope.$watch(function() {
	                    return listService.getFilters()
	                }, function(newValue, oldValue) {
	                    if (newValue && newValue !== oldValue) {
	                        loadPriceLists(newValue);
	                    }
	                }, true);
	
	                $scope.$on('destroy', function() {
	                    deRegisterFunc();
	                    vm = null;
	                });
	            };
	
	            priceListingController.$inject = [
	                '$scope',
	                'listService',
	                'productConstants',
	                'cpqAdminConstants',
	                'applicationService',
	                'systemConstants',
	                '$state',
	                '$stateParams',
	                'i18nService'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {},
	                controller: priceListingController,
	                controllerAs: 'vm',
	                bindToController: {
	                    loadViewProducts: '&',
	                    searchText: '='
	                },
	                template: __webpack_require__(571),
	            };
	        }
	    ];
	})();


/***/ }),
/* 571 */
/***/ (function(module, exports) {

	module.exports = "<div data-ng-if=\"vm.priceLists.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n    {{vm.labels.NoMatchingRecords}} <span><b>{{vm.searchedStr}}</b></span>\n</div>\n<div data-ng-if=\"vm.priceLists.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n    {{vm.labels.MaxSQLSizeExceedMessage}}\n</div>\n<div class=\"list-table\">\n    <table>\n        <tbody>\n            <tr ng-repeat=\"item in vm.tableColumnConfig\" ng-click=\"vm.goToDetailsPage(item.Id)\" ng-class=\"{active: vm.getActiveClass(item.Id) === true}\">\n                <td>\n                    <div class=\"item-name\">{{ item.Name }}</div>\n                    <div class=\"item-type\">{{ item.Name }}</div>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<div class=\"pagination product-details-list-pagination\">\n    <div class=\"place product-details-list-place\">\n        {{vm.paginationCenterText}}\n    </div>\n    <div class=\"next-prev\">\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getPriceLists('previous')\">\n            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n        </button>\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getPriceLists('next')\">\n            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n        </button>\n    </div>\n</div>\n"

/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = [
	
	        function() {
	            var treeContainerController = function($state, $scope, $templateCache, _, systemConstants, priceListConstants, NgTableParams, applicationService, $stateParams, priceListCommonService) {
	                var vm = this,
	                    isPageChanged = false;
	                vm.totalRecords = 0;
	                vm.currentPage = 1;
	                vm.pageSize = priceListConstants.treePanelItemsPerChunk;
	                vm.prefix = systemConstants.nsPrefix || '';
	                vm.showPagination = true;
	                vm.$stateParams = $stateParams;
	                vm.expandedNodes = [];
	                //Show / hide the search component in primary view
	                vm.toggleSearch = function() {
	                    vm.searchText = '';
	                    if (vm.pageType == 'categories') {
	                        vm.searchTree(1);
	                    } else {
	                        var searchBar = document.querySelector('.main-treeview .search-leaf');
	                        angular.element(searchBar).toggleClass('hidden');
	                        if (angular.element(searchBar).hasClass('hidden')) {
	                            vm.searchTree(1);
	                        }
	                    }
	                };
	                //Show / hide the search component in secondary view
	                vm.toggleInnerSearch = function() {
	                    var searchBar = document.querySelector('.sub-treeview .search-leaf');
	                    angular.element(searchBar).toggleClass('hidden');
	                };
	
	                vm.setWidthCent = true;
	
	                vm.slideTreePanelToHide = function() {
	                    vm.expandCollapse()();
	                };
	                //Shows primary panel by default 
	                vm.showPrimaryPanel = true;
	
	                // Calls search method of the parent controller, who is using this directive
	                vm.searchTree = function(pageNo) {
	                    isPageChanged = true;
	                    vm.currentPage = pageNo || 1;
	                    if (vm.pageType === 'pli') {
	                        vm.search()(vm.searchText, vm.currentPage || 1);
	                    } else {
	                        vm.search()(vm.searchText, vm.currentPage || 1);
	                    }
	
	                };
	
	                switch (vm.pageType) {
	                    case 'pli':
	                        $templateCache.put('template.html', __webpack_require__(573));
	                        break;
	                    default:
	                        $templateCache.put('template.html', __webpack_require__(573));
	                        break;
	                }
	                vm.treeOptions = {
	                    nodeChildren: vm.nodeChildren,
	                    choosable: vm.isChoosable || false,
	                    dirSelectable: true,
	                    injectClasses: {
	                        ul: 'a1 ' + vm.pageType + '-list',
	                        li: 'a2',
	                        liSelected: 'a7',
	                        iExpanded: 'a3 fa fa-caret-down',
	                        iCollapsed: 'a4 fa fa-caret-right',
	                        iLeaf: 'a5',
	                        label: 'a6',
	                        labelSelected: 'a8'
	                    },
	                    templateUrl: 'template.html',
	                    //Executes when a node is double clicked in tree component
	                    nodeDblClicked: function(node) {
	                        vm.selectedNode = node;
	                        if (vm.enableDetailPanel) {
	                            vm.getNodeDetails()(node.ClsHierarchySO.Id).then(function(result) {
	                                    if (result) {
	                                        vm.tableParams = new NgTableParams({
	                                            count: 10,
	                                            paginationMaxBlocks: 3,
	                                            paginationMinBlocks: 2,
	                                            filter: {
	                                                Name: ''
	                                            }
	                                        }, {
	                                            dataset: result,
	                                            counts: []
	                                        });
	                                    }
	                                },
	                                function(reason) {
	                                    applicationService.showErrorMessage(reason);
	                                });
	                            vm.showPrimaryPanel = false;
	                        }
	                        vm.setWidthCent = false;
	                    },
	                    isSelectable: function(node) {
	                        if (vm.pageType === 'pli') {
	                            return node.children.length;
	                        } else {
	                            return node.isSelected !== true;
	                        }
	                    },
	                    getHierarchy: function(node) {
	                        if (node.nodeType == undefined && (node[vm.nodeChildren] == undefined || angular.equals(node[vm.nodeChildren][0], {}))) {
	                            vm.getProductStructure(node);
	                        }
	                    },
	                    prefix: vm.prefix
	                };
	
	                function expandAll(array) {
	                    _.each(array, function(node) {
	                        if (node[vm.nodeChildren] && node[vm.nodeChildren].length > 0) {
	                            if (vm.expandedNodes.indexOf(node) === -1) {
	                                vm.expandedNodes.push(node);
	                            }
	                            expandAll(node[vm.nodeChildren]);
	                        }
	                    });
	                }
	
	                //Expand / Collapse tree nodes
	                vm.isExpand = false;
	                vm.expandCollpaseTree = function(isExpand) {
	                    if (isExpand) {
	                        expandAll(vm.data);
	                    } else {
	                        vm.expandedNodes = [];
	                    }
	                };
	
	                vm.dragoverCallback = function() {
	                    return false;
	                };
	
	                function searchCallback() {
	                    if (vm.data.length < vm.pageSize) {
	                        vm.totalRecords = vm.currentPage * vm.pageSize;
	                    } else if (vm.data.length >= vm.pageSize) {
	                        if (vm.totalRecords < vm.currentPage * vm.pageSize + 1)
	                            vm.totalRecords = vm.currentPage * vm.pageSize + 1;
	                        else
	                            vm.totalRecords = vm.currentPage * vm.pageSize;
	                    } else if (vm.data.length == 0) {
	                        vm.currentPage--;
	                        vm.totalRecords = vm.currentPage * vm.pageSize;
	                        vm.search()(null, vm.searchText, vm.currentPage || 1);
	                    }
	                }
	
	                // Search for secondary view in detail view
	                vm.searchItemInDetailView = function() {
	                    vm.search()(vm.innerSearchText, vm.selectedNode);
	                };
	
	                vm.pageChanged = function() {
	                    console.log('Page changed to: ' + vm.currentPage);
	                    vm.search()(vm.searchText, vm.currentPage || 1);
	                };
	
	                $scope.$watch('vm.data', function(newValue, oldValue) {
	                    if (newValue && newValue !== oldValue) {
	                        if (isPageChanged) {
	                            searchCallback();
	                            isPageChanged = false;
	                        } else {
	                            searchCallback();
	                            isPageChanged = false;
	                        }
	                    }
	                });
	
	                // // Get Selected Node
	                vm.showSelected = function(node) {
	                    if (vm.pageType === 'pli') {
	                        /* TODO ; set it in a service.*/
	                        if (node.children.length) {
	                            vm.selectedNode = node;
	                            priceListCommonService.setProductOptionNodeSelected(angular.copy(node));
	                        }
	                    }
	                };
	                vm.expandCollpaseTree(true);
	            };
	            treeContainerController.$inject = [
	                '$state',
	                '$scope',
	                '$templateCache',
	                'lodash',
	                'systemConstants',
	                'priceListConstants',
	                'NgTableParams',
	                'applicationService',
	                '$stateParams',
	                'priceListCommonService'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {
	                    onTreeNodeLabelClick: '&'
	                },
	                controller: treeContainerController,
	                controllerAs: 'vm',
	                bindToController: {
	                    //To show the text as header on the panel
	                    headerText: '=',
	                    //Data source for the tree component
	                    data: '=',
	                    //Specify which page is using this directive. Based on this right template will be loaded.
	                    pageType: '=',
	                    //Calls the method getNodeDetails of the parent controller, who is using this directive.
	                    getNodeDetails: '&',
	                    //Contains the list of details of the selected node
	                    detailOfSelectedNode: '=',
	                    //Invokes the search method of parent controller
	                    search: '&',
	                    //Keeps the dbl clicked node info
	                    selectedNode: '=',
	                    //Specifies whether a detail panel is needed or not.
	                    enableDetailPanel: '=',
	                    nodeChildren: '=',
	                    // Field to show as the visible label text
	                    nodeLabel: '=',
	                    // Field to show as the title text on hover
	                    tooltipField: '=',
	                    //Pass any other extra parameters with 'options', if needed
	                    options: '=',
	                    getProductStructure: '=',
	                    expandCollapse: '&',
	                    isChoosable: '=',
	                    searchText: '=',
	                    currentPage: '='
	                },
	                template: __webpack_require__(574),
	            };
	        }
	    ];
	
	})();


/***/ }),
/* 573 */
/***/ (function(module, exports) {

	module.exports = "<ul {{options.ulClass}}>{{node}}\n    <li ng-repeat=\"node in node.{{options.nodeChildren}}\" ng-class=\"headClass(node)\" {{options.liClass}} set-node-to-data>\n        <i class=\"tree-branch-head\" ng-class=\"iBranchClass()\" ng-click=\"selectNodeHead(node)\"></i>\n        <i class=\"tree-leaf-head {{options.iLeafClass}}\"></i>\n        <div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" tree-transclude\n        ng-click=\"selectNodeLabel(node)\"></div>\n        <treeitem ng-show=\"nodeExpanded()\"></treeitem>\n    </li>\n</ul>\n"

/***/ }),
/* 574 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"pull-right treeview-panel\" ng-class=\"vm.setWidthCent?'setWithCent':''\">\n    <div class=\"treeview-animate-panel\" ng-class=\"{'move':!vm.showPrimaryPanel}\">\n        <div class=\"main-treeview\">\n            <div class=\"tree-wrapper\">\n                <!-- For Price List Item right side tree panel -->\n                <treecontrol class=\"tree-light\" tree-model=\"vm.data\" options=\"vm.treeOptions\" expanded-nodes='vm.expandedNodes' data-ng-if=\"vm.pageType === 'pli'\" selected-node=\"vm.selected\" on-selection=\"vm.showSelected(node)\" expanded-nodes='vm.expandedNodes'>\n                    <span title=\"{{node[vm.tooltipField]}}\" data-ng-if=\"vm.nodeLabel !== ''\" style=\"text-overflow: ellipsis;overflow: hidden;width: 90%;display:inline-block;position: absolute;\">{{(node[vm.nodeLabel])}}</span>\n                </treecontrol>\n                <!-- For Price List Item right side tree panel -->\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceList.common.services', [])
	        .service('priceListCommonService', __webpack_require__(576));
	        
	})();


/***/ }),
/* 576 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var priceListCommonServices = function(systemConstants, moment, remoteService, $q) {
	
	        var filter = {},
	            selectedPL = {},
	            priceLists = [],
	            dateFormat = 'MM/DD/YYYY',
	            selectedOptionNode;
	
	        /* 
	         * Converts a date in string format or in milliseconds to date to format to be used
	         * in datepicker component
	         */
	        function formatDate(date) {
	            if (angular.isDefined(date)) {
	                if (date === null || date === '') {
	                    date = null;
	                } else if (angular.isString(date)) {
	                    date = new Date(date);
	                } else {
	                    date = new Date(date);
	                }
	            }
	            return date ? moment(date).format(dateFormat) : '';
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function setFilter(obj) {
	            filter = obj;
	        }
	
	        function getFilter() {
	            return filter;
	        }
	
	        function setSelectedPL(obj) {
	            selectedPL = obj;
	        }
	
	        function getSelectedPL() {
	            return selectedPL;
	        }
	
	
	        function processAllPriceListResponse(plItems) {
	            var response = [];
	            if (plItems && plItems.length > 0) {
	                for (var i = 0; i < plItems.length; i++) {
	                    var tempItem = plItems[i].PriceListSO,
	                        obj = {};
	                    obj['name'] = tempItem.Name;
	                    obj['id'] = tempItem.Id;
	                    obj['noOfPLI'] = plItems[i].PriceListItemCount || 0;
	                    obj['isActive'] = tempItem[getPrefixedAttribute('Active__c')];
	                    obj['currency'] = tempItem.CurrencyIsoCode || undefined;
	                    obj['description'] = tempItem[getPrefixedAttribute('Description__c')] || '';
	                    obj['effectiveDate'] = formatDate(tempItem[getPrefixedAttribute('EffectiveDate__c')]) || undefined;
	                    obj['expirationDate'] = formatDate(tempItem[getPrefixedAttribute('ExpirationDate__c')]) || undefined;
	
	                    response.push(obj);
	                }
	            }
	            return response;
	        }
	
	        function loadAllPriceLists(requestObj) {
	            /* TODO : 
	             * (1) Set the filter obj . Someone else will observe this later to get the filter details.
	             * (2) Get the result based on request. 
	             * (3) Process the data into a readable format. Store it in priceLists. Others will observe it.
	             * (4) 
	             */
	            var defer = $q.defer();
	            setFilter(requestObj);
	
	            remoteService.getAllPriceLists(requestObj)
	                .then(function(response) {
	                    var processedData = processAllPriceListResponse(response.PriceListDOs);
	                    setPriceLists(processedData);
	                    defer.resolve(true);
	                }, function(reason) {
	                    defer.reject(true);
	                });
	
	            return defer.promise;
	        }
	
	        function setPriceLists(arr) {
	            priceLists = [];
	            priceLists = angular.copy(arr);
	        }
	
	        function getPriceLists() {
	            return priceLists;
	        }
	
	        function setProductOptionNodeSelected(node) {
	            selectedOptionNode = node;
	        }
	
	        function getProductOptionNodeSelected(node) {
	            return selectedOptionNode;
	        }
	        var service = {
	            setFilter: setFilter,
	            getFilter: getFilter,
	            setSelectedPL: setSelectedPL,
	            getSelectedPL: getSelectedPL,
	            setPriceLists: setPriceLists,
	            getPriceLists: getPriceLists,
	            loadAllPriceLists: loadAllPriceLists,
	            processAllPriceListResponse: processAllPriceListResponse,
	            setProductOptionNodeSelected: setProductOptionNodeSelected,
	            getProductOptionNodeSelected: getProductOptionNodeSelected
	        };
	        return service;
	    };
	
	    priceListCommonServices.$inject = [
	        'systemConstants',
	        'moment',
	        'remoteService',
	        '$q'
	    ];
	
	    module.exports = priceListCommonServices;
	})();


/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceList.list', ['cpqAdmin.priceList.details'])
	        .service('priceListService', __webpack_require__(578))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceList.list', {
	                parent: 'app.priceList',
	                url: '/list',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(579),
	                        controller: __webpack_require__(580),
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 578 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var priceListListService = function(remoteService, $q) {
	
	
	        function getAllPriceLists(request) {
	            var defer = $q.defer();
	            /* This API doesnt support sorting by any column */
	            remoteService.getAllPriceLists(request).then(function(response) {
	                defer.resolve(response);
	            }, function(reason) {
	                defer.reject(reason);
	            });
	            return defer.promise;
	        }
	
	        var service = {
	            getAllPriceLists: getAllPriceLists
	        };
	
	        return service;
	    };
	    priceListListService.$inject = [
	        'remoteService',
	        '$q'
	    ];
	
	    module.exports = priceListListService;
	})();


/***/ }),
/* 579 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"pricelist-list-container\">\n    <div class=\"two-col-layout auto-height\">\n        <div class=\"auto-height col-lg-12 noPadding list-table-container\">\n            <div class=\"list-header\">\n                <!-- Search Bar starts -->\n                <div class=\"row noMargin search-container title-bar\">\n                    <div class=\"pricelist-search\">\n                        <div class=\"col-xs-5\">\n                            <div class=\"search-box-container\">\n                                <span class=\"fa fa-filter pointerEventsNone\" disabled data-ng-click=\"vm.resetPagination();\"></span>\n                                <i class=\"search-icon material-icons\" data-ng-click=\"vm.resetPagination()\">search</i>\n                                <form ng-submit=\"vm.resetPagination()\">\n                                    <input type=\"text\" placeholder=\"Search PriceList\" class=\"search-box\" data-ng-model=\"vm.searchString\">\n                                    <i class=\"clear-icon material-icons\" data-ng-if=\"vm.searchString\" data-ng-click=\"vm.clearSearchInput()\">clear</i>\n                                </form>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-3\"></div>\n                        <div class=\"col-xs-4 text-right pricelist-btn-group\">\n                            <div class=\"listBtn\">\n                                <button type=\"button\" class=\"slds-button slds-button_brand\" data-ng-click=\"vm.createNewPriceList()\">{{vm.labels.NewPriceList}}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div preloader add-to-element=\"true\" loading-text=\"vm.loadingText\" data-ng-if=\"vm.showLoader === true\"></div>\n            <div data-ng-if=\"vm.priceLists.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{::vm.labels.NoMatchingPriceLists}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.priceLists.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{::vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"list-table\">\n                <table ng-table=\"vm.tableParams\" class=\"table ng-table-resizable-columns\">\n                    <thead>\n                        <tr>\n                            <!-- This table doesnt supoprt Server side sorting because, API doesnt support it  -->\n                            <th ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\" ng-if=\"::column.show === true\">\n                                {{::column.FieldLabel}}\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"priceList in vm.priceLists track by priceList.id\">\n                            <td data-ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\" ng-if=\"::column.show === true\">\n                                <span data-ng-if=\"::column.FieldName === 'name'\">\n                                    <a data-ng-click=\"vm.loadPricelistDetails(priceList, $event)\" ng-bind-html=\"::priceList[column.FieldName]\" href=\"{{vm.getDetailsPageUrl(priceList.id)}}\"\n                                       target=\"_blank\" class=\"clickable-item\"></a>\n                                </span>\n                                <span data-ng-if=\"::column.FieldName !== 'name'\" ng-bind-html=\"::vm.getFormattedContent(priceList,column)\"></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"pagination-container text-center\" data-ng-if=\"vm.showPagination === true\">\n                <div class=\"btn-group dropup text-right\" role=\"group\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        {{vm.labels.RecordsPerPage | userMessage:vm.numberOfProductsPerChunk}}\n                        <span class=\"caret\"></span>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 50\">50</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 100\">100</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 150\">150</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 200\">200</a></li>\n                    </ul>\n                </div>\n                <div class=\"navigation-control\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProduct('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                    <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProduct('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 580 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var priceListListController = function($scope, $state, priceListService, $filter, NgTableParams, $timeout, i18nService, systemConstants, priceListConstants, cpqAdminConstants,
	        priceListCommonService, priceListDetailsService, $location) {
	        var vm = this;
	
	        vm.labels = i18nService.CustomLabel;
	        var prefix = systemConstants.nsPrefix || '';
	        vm.tableColumnConfig = [{
	            "FieldLabel": vm.labels.PriceListName,
	            "FieldName": "name",
	            "IsRequired": true,
	            "Type": "STRING",
	            "show": true
	        }, {
	            "FieldLabel": vm.labels.IsActive,
	            "FieldName": "isActive",
	            "IsRequired": false,
	            "Type": "BOOLEAN",
	            "show": true
	        }, {
	            "FieldLabel": vm.labels.NumberofPLI,
	            "FieldName": "noOfPLI",
	            "IsRequired": false,
	            "Type": "STRING",
	            "show": true
	        }, {
	            "FieldLabel": vm.labels.Currency,
	            "FieldName": "currency",
	            "IsRequired": false,
	            "Type": "STRING",
	            "show": false
	        }, {
	            "FieldLabel": vm.labels.Description,
	            "FieldName": "description",
	            "IsRequired": false,
	            "Type": "STRING",
	            "show": true
	        }, {
	            "FieldLabel": vm.labels.EffectiveDate,
	            "FieldName": "effectiveDate",
	            "IsRequired": false,
	            "Type": "DATETIME",
	            "show": true
	        }, {
	            "FieldLabel": vm.labels.ExpirationDate,
	            "FieldName": "expirationDate",
	            "IsRequired": false,
	            "Type": "DATETIME",
	            "show": true
	        }];
	
	        /* 
	         * - vm.searchString : is the value present in the search field at any point of time.
	         * - vm.searchedStr : is the value user has entered and either clicked on search icon or hit
	         * enter / return  key.
	         */
	        vm.searchedStr = '';
	        vm.numberOfProductsPerChunk = priceListConstants.numberOfProductsPerChunk;
	
	        vm.pageNumber = 0;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = false;
	        vm.showLoader = false;
	        vm.loadingText = vm.labels.LoadingText;
	        vm.isMaxSQLSizeExceed = false;
	        vm.showPagination = true;
	        updateCenterBtnText();
	        var sortField, sortDirection, pageNumber = 1,
	            configType = '';
	
	        vm.getProduct = function(type) {
	            if (type === 'next') {
	                pageNumber = pageNumber + 1;
	                vm.pageNumber++;
	                if (vm.pageNumber !== 0) {
	                    vm.disableLeftBtn = false;
	                }
	                loadPriceList();
	            } else {
	                pageNumber = pageNumber - 1;
	                vm.pageNumber--;
	                if (vm.pageNumber === 0) {
	                    vm.disableLeftBtn = true;
	                }
	                loadPriceList();
	            }
	        };
	
	        function updateCenterBtnText(endCount) {
	            /* 
	             * - Search result might return lesser number of records than current pagination count.
	             * e.g. current pagination is : 1-150, but search returned only 20 records.
	             * - Then pagination should be updated to 1-20 instead of 1-150.
	             * - endCount variable contains the exact number of records and will only be defined, if
	             * search count is lesser than current pagination sequence.
	             */
	            if (endCount) {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfProductsPerChunk + 1) + '-' + (vm.pageNumber * vm.numberOfProductsPerChunk + endCount) + ')';
	            } else {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfProductsPerChunk + 1) + '-' + ((vm.pageNumber + 1) * vm.numberOfProductsPerChunk) + ')';
	            }
	        };
	
	        vm.resetPagination = function(resetPageNumber) {
	            vm.showPanel = false;
	            if (resetPageNumber) {
	                vm.pageNumber = 0;
	                pageNumber = 1;
	            }
	            vm.pageNumber = 0;
	            pageNumber = 1;
	            vm.disableLeftBtn = true;
	            updateCenterBtnText();
	            loadPriceList();
	        };
	
	        var deRegisterFunc = $scope.$watch('vm.numberOfProductsPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                vm.resetPagination(false);
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            pLDeRegisterFunc();
	            vm = null;
	        });
	
	
	        vm.getFormattedContent = function(priceList, column) {
	            var modifiedValue, precision,
	                fieldType = column.Type,
	                value = priceList[column.FieldName];
	
	            if (vm.systemProperties && vm.systemProperties.PercentageFieldPrecision) {
	                precision = vm.systemProperties.PercentageFieldPrecision;
	            } else if (vm.properties && vm.properties.Precision) {
	                precision = vm.properties.Precision;
	            } else {
	                precision = 5;
	            }
	
	            switch (fieldType) {
	                case cpqAdminConstants.datetime:
	                case cpqAdminConstants.date:
	                    {
	                        var  date= new Date(value);
	                        var dateToUtc = new Date( date.getTime() + Math.abs(date.getTimezoneOffset()*60000) );
	                        modifiedValue = (typeof value === 'undefined' ? ' ' : $filter('aptDateToString')(dateToUtc));
	                        break;
	                    }
	
	                case cpqAdminConstants.boolean:
	                    {
	                        if (value) {
	                            modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	                        } else {
	                            modifiedValue = "<i class='material-icons show'>check_circle</i>";
	                        }
	                        break;
	                    }
	                case cpqAdminConstants.string:
	                case cpqAdminConstants.textarea:
	                case cpqAdminConstants.url:
	                case cpqAdminConstants.multipicklist:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	                default:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	            }
	            return modifiedValue;
	        };
	
	        function createNgTable(data, numberOfProductsPerChunk) {
	            var initialParams = {
	                count: numberOfProductsPerChunk
	            };
	            var initialSettings = {
	                counts: [],
	                paginationMaxBlocks: 0,
	                paginationMinBlocks: 0,
	                dataset: data
	            };
	            return new NgTableParams(initialParams, initialSettings);
	        }
	
	        var pLDeRegisterFunc = $scope.$watch(function() {
	            return priceListCommonService.getPriceLists();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                processData(newValue);
	            }
	        }, true);
	
	        function prepareTableConfig(obj) {
	            if (obj && obj.currency != undefined) {
	                vm.tableColumnConfig[3].show = true;
	            }
	        }
	
	        function processData(priceList) {
	
	            /* Used to bind to table body */
	            vm.priceLists = priceList;
	            vm.isMaxSQLSizeExceed = false;
	
	            if (!vm.tableParams) {
	                prepareTableConfig(priceList[0]);
	                vm.tableParams = createNgTable(priceList, vm.numberOfProductsPerChunk);
	            }
	
	            /* 
	             * - Show 'No matching products are found for the search entry XXX', when no return
	             * return result set is empty.
	             * - Keep the user messages, until user makes a fresh search which has atleast more
	             * than 1 result item.
	             */
	            vm.showPagination = true;
	            if (priceList.length === 0 && vm.searchString !== '') {
	                vm.searchedStr = vm.searchString;
	                if (vm.pageNumber === 0) {
	                    vm.showPagination = false;
	                }
	            }
	            /**
	             * - Check if the response size is less than the current chunk size.
	             * - If less, disable the next button
	             * - else keep it enabled
	             */
	
	            if (priceList.length < vm.numberOfProductsPerChunk) {
	                vm.disableRightBtn = true;
	                updateCenterBtnText(priceList.length);
	            } else {
	                vm.disableRightBtn = false;
	                updateCenterBtnText();
	            }
	
	            /* Hide the loader on success of service call */
	            vm.showLoader = false;
	
	            $timeout(function() {
	                angular.element(window).resize();
	            }, 1000);
	            document.querySelector('.list-table').scrollTop = 0;
	        }
	
	        /**
	         * - When user enters search string and hits enter, this method gets called
	         * - Updates the smart-table pagination object.
	         * - Table header click
	         */
	        function loadPriceList() {
	            /* Show the loader on start of service call */
	            vm.showLoader = true;
	
	            var requestObj = {
	                ChunkNumber: pageNumber,
	                NumberOfRecordsPerChunk: vm.numberOfProductsPerChunk,
	                SearchString: vm.searchString || ''
	            };
	
	            priceListCommonService.loadAllPriceLists(requestObj)
	                .then(function(response) {
	                    if (response) {
	                        vm.showLoader = false;
	                    }
	                }, function(reason) {});
	        }
	
	        loadPriceList();
	        /**
	         * - Clears searc input box
	         * - Makes a service call to reload the table
	         */
	        vm.clearSearchInput = function() {
	            vm.searchString = '';
	            vm.currentPage = 1;
	            vm.showPanel = false;
	            loadPriceList();
	        };
	
	
	        /**
	         * - Show / Hide ascending or descending icon next to the column header when user clicks on header.
	         * - We are not using the default feature of the ngTable. It's doing local sorting and to
	         * bind to its server side sorting, configs are not available as of now.
	         */
	        vm.tableHeaderClick = function(column) {
	            sortField = column.FieldName;
	            if (!column.sortIconCls) {
	                column.sortIconCls = 'st-sort-ascent';
	            }
	            sortDirection = (column.sortIconCls === 'st-sort-ascent' ? cpqAdminConstants.DESCENDING : cpqAdminConstants.ASCENDING);
	            var columnsList = vm.tableColumnConfig;
	            for (var item in columnsList) {
	                if (column.FieldName === columnsList[item].FieldName) {
	                    columnsList[item].showSortIcon = true;
	                    columnsList[item].sortIconCls = column.sortIconCls ? (column.sortIconCls === 'st-sort-ascent' ? 'st-sort-descent' : 'st-sort-ascent') : 'st-sort-descent';
	                } else {
	                    columnsList[item].showSortIcon = false;
	                    columnsList[item].sortIconCls = false;
	                }
	            }
	            vm.resetPagination();
	        };
	
	        vm.loadPricelistDetails = function(priceList, event) {
	            priceListCommonService.setSelectedPL(angular.copy(priceList));
	            $state.go('app.priceList.details', {
	                id: priceList.id
	            });
	            event.preventDefault();
	        };
	
	        vm.getDetailsPageUrl = function(Id) {
	            var absUrl = $location.absUrl();
	            return absUrl.replace('/priceList/list', '/priceList/' + Id + '/details');
	        };
	
	        vm.createNewPriceList = function() {
	            var allPls = priceListCommonService.getPriceLists(),
	                newPl = priceListDetailsService.getSampleNewPriceList();
	            allPls.unshift(angular.copy(newPl));
	            priceListCommonService.setPriceLists(angular.copy(allPls));
	            priceListCommonService.setSelectedPL(angular.copy(newPl));
	            $state.go('app.priceList.details', {
	                id: 'new'
	            });
	        };
	
	    };
	
	    priceListListController.$inject = [
	        '$scope',
	        '$state',
	        'priceListService',
	        '$filter',
	        'NgTableParams',
	        '$timeout',
	        'i18nService',
	        'systemConstants',
	        'priceListConstants',
	        'cpqAdminConstants',
	        'priceListCommonService',
	        'priceListDetailsService',
	        '$location'
	    ];
	
	    module.exports = priceListListController;
	
	})();


/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceList.details', [])
	        .service('priceListDetailsService', __webpack_require__(582))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceList.details', {
	                parent: 'app.priceList',
	                url: '/:id/details',
	                views: {
	                    'priceListContainer': {
	                        template: __webpack_require__(583),
	                        controller: __webpack_require__(584),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    allPicklists: ['priceListDetailsService', '$stateParams', function(priceListDetailsService, $stateParams) {
	                        return priceListDetailsService.getSObjectPicklistFields('PriceList__c', null);
	                    }],
	                    metaData: ['priceListDetailsService', '$stateParams', function(priceListDetailsService, $stateParams) {
	                        return priceListDetailsService.getMetadata($stateParams.id);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 582 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var priceListDetailsService = function($q, moment, i18nService, remoteService, systemConstants, apiCallsService) {
	        var prefix = systemConstants.nsPrefix || '',
	            dateFormat = 'MM/DD/YYYY',
	            allPicklists = [],
	            labels = i18nService.CustomLabel,
	            metadata = [];
	
	        /* 
	         * Converts a date in string format or in milliseconds to date to format to be used
	         * in datepicker component
	         */
	        function formatDate(date) {
	            if (angular.isDefined(date)) {
	                if (date === null || date === '') {
	                    date = null;
	                } else if (angular.isString(date)) {
	                    date = new Date(date);
	                } else {
	                    date = new Date(date);
	                }
	            }
	            return date ? moment(date).format(dateFormat) : '';
	        }
	
	        function getSampleNewPriceList() {
	            var newPriceList = {
	                name: labels.NewPriceList,
	                isActive: true,
	                effectiveDate: undefined,
	                expirationDate: undefined,
	                description: '',
	                adjustmentType: '',
	                currency: getDefaultCurrencyIsoCode(),
	                adjustmentAmount: '',
	                priceListType: 'Standard',
	                owner: '',
	                contractNumber: '',
	                guidePage: '',
	                autocomplete: {
	                    querySearch: searchPriceList,
	                    displayName: 'label'
	                },
	                costModel: {
	                    autocomplete: {
	                        querySearch: apiCallsService.searchSObjectRecords,
	                        displayName: 'Name',
	                        selectedItem: null,
	                        'sObjectName': getPrefixedAttribute('CostModel__c')
	                    }
	                },
	                account: {
	                    autocomplete: {
	                        querySearch: apiCallsService.searchSObjectRecords,
	                        displayName: 'Name',
	                        selectedItem: null,
	                        'sObjectName': getPrefixedAttribute('Account')
	                    }
	                }              
	            };
	            return newPriceList;
	        }
	
	        function preparePriceList(rawObj) {
	            var response = rawObj.PriceListDOs;
	            var priceList = [];
	            if (angular.isDefined(rawObj)) {
	                for (var item in response) {
	                    if (!isNaN(parseInt(item, 10))) {
	                        priceList.push({
	                            label: response[item].PriceListSO.Name,
	                            value: response[item].PriceListSO.Id
	                        });
	                    }
	                }
	            }
	            return priceList;
	        }
	
	        function searchPriceList(searchText) {
	            var requestObj = {
	                ChunkNumber: 1,
	                NumberOfRecordsPerChunk: 50,
	                SearchString: searchText || ''
	            };
	            var defer = $q.defer();
	            remoteService.getAllPriceLists(requestObj)
	                .then(function(response) {
	                    defer.resolve(preparePriceList(response));
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function getSelectedPriceListDetails(priceListId) {
	            var defered = $q.defer();
	            var response = {};
	            if (priceListId === 'new') {
	                response = angular.copy(getSampleNewPriceList());
	            } else {}
	            defered.resolve(response);
	        }
	
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might not be needed. Let's just be sure not to have empty spaces. */
	            return (attribute.includes('__c') === true || attribute.includes('__r') === true) ? (prefix + attribute).trim() : attribute.trim();
	        }
	
	        function preparePlRequestObj(obj) {
	            var response = [],
	                temp = {};
	            temp['Name'] = obj.name;
	            if (obj.id) {
	                temp['Id'] = obj.id;
	            }
	            temp[getPrefixedAttribute('Active__c')] = obj.isActive;
	            temp[getPrefixedAttribute('EffectiveDate__c')] = obj.effectiveDate;
	            temp[getPrefixedAttribute('ExpirationDate__c')] = obj.expirationDate;
	            temp[getPrefixedAttribute('Description__c')] = obj.description;
	            if (obj.autocomplete.selectedItem) {
	                temp[getPrefixedAttribute('BasedOnPriceListId__c')] = obj.autocomplete.selectedItem.value;
	            } else {
	                temp[getPrefixedAttribute('BasedOnPriceListId__c')] = '';
	            }
	            temp[getPrefixedAttribute('BasedOnAdjustmentType__c')] = obj.adjustmentType;
	            temp[getPrefixedAttribute('BasedOnAdjustmentAmount__c')] = obj.adjustmentAmount;
	            temp[getPrefixedAttribute('Type__c')] = obj.priceListType;
	            temp[getPrefixedAttribute('GuidePage__c')] = obj.guidePage || '';
	            temp[getPrefixedAttribute('ContractNumber__c')] = obj.contractNumber || '';
	            if (obj.account.autocomplete && obj.account.autocomplete.selectedItem && obj.account.autocomplete.selectedItem.Id) {
	                temp[getPrefixedAttribute('AccountId__c')] = obj.account.autocomplete.selectedItem.Id;
	            } else {
	                temp[getPrefixedAttribute('AccountId__c')] = '';
	            }
	            if (obj.costModel.autocomplete && obj.costModel.autocomplete.selectedItem && obj.costModel.autocomplete.selectedItem.Id) {
	                temp[getPrefixedAttribute('CostModelId__c')] = obj.costModel.autocomplete.selectedItem.Id;
	            } else {
	                temp[getPrefixedAttribute('CostModelId__c')] = '';
	            }
	
	            if (obj.currency) {
	                temp['CurrencyIsoCode'] = obj.currency || '';
	            }
	
	            var priceListSO = {
	                'PriceListSO': temp
	            };
	            response.push(priceListSO);
	            return response;
	        }
	
	        function createPriceList(plItem) {
	            var defered = $q.defer(),
	                requestObj = preparePlRequestObj(plItem);
	            remoteService.createPriceList(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	
	            return defered.promise;
	        }
	
	        function updatePriceList(plItem) {
	            var defered = $q.defer(),
	                requestObj = preparePlRequestObj(plItem);;
	            remoteService.updatePriceList(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	
	            return defered.promise;
	        }
	
	        function getSObjectPicklistFields(sObjectName, fields) {
	            var defer = $q.defer(),
	                picklistFieldNames;
	            sObjectName = getPrefixedAttribute(sObjectName);
	            if (fields && fields.length) {
	                for (var i = 0; i < fields.length; i++) {
	                    fields[i] = getPrefixedAttribute(fields[i]);
	                }
	                picklistFieldNames = fields;
	            } else {
	                picklistFieldNames = null;
	            }
	            remoteService.getSObjectPicklistFields(sObjectName, picklistFieldNames)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function preparePriceListDetails(response) {
	            var tempItem = response.PriceListSO,
	                obj = {};
	            obj['name'] = tempItem.Name;
	            obj['id'] = tempItem.Id;
	            obj['noOfPLI'] = obj.PriceListItemCount || 0;
	            obj['isActive'] = tempItem[getPrefixedAttribute('Active__c')];
	            obj['description'] = tempItem[getPrefixedAttribute('Description__c')] || '';
	            obj['currency'] = tempItem.CurrencyIsoCode || undefined;
	            obj['effectiveDate'] = tempItem[getPrefixedAttribute('EffectiveDate__c')];
	            obj['expirationDate'] = tempItem[getPrefixedAttribute('ExpirationDate__c')];
	            obj['adjustmentAmount'] = tempItem[getPrefixedAttribute('BasedOnAdjustmentAmount__c')] || '';
	            obj['adjustmentType'] = tempItem[getPrefixedAttribute('BasedOnAdjustmentType__c')] || '';
	            obj['priceListType'] = tempItem[getPrefixedAttribute('Type__c')] || '';
	            obj['contractNumber'] = tempItem[getPrefixedAttribute('ContractNumber__c')] || '';
	            obj['owner'] = tempItem['Owner'] ? tempItem['Owner'].Name : '';
	            obj['guidePage'] = tempItem[getPrefixedAttribute('GuidePage__c')] || '';
	            var basedOnPriceListId = tempItem[getPrefixedAttribute('BasedOnPriceListId__r')] || '';
	            if (basedOnPriceListId) {
	                obj['autocomplete'] = {
	                    querySearch: searchPriceList,
	                    displayName: 'label',
	                    selectedItem: {
	                        value: basedOnPriceListId.Id,
	                        label: basedOnPriceListId.Name
	                    }
	                };
	            } else {
	                obj['autocomplete'] = {
	                    querySearch: searchPriceList,
	                    displayName: 'label'
	                };
	            }
	            var account = tempItem[getPrefixedAttribute('AccountId__r')] || '';
	            if (account) {
	                obj['account'] = {
	                    'autocomplete': {
	                        querySearch: apiCallsService.searchSObjectRecords,
	                        displayName: 'Name',
	                        selectedItem: {
	                            Id: account.Id,
	                            Name: account.Name
	                        },
	                        'sObjectName': getPrefixedAttribute('Account')
	                    }
	                };
	            } else {
	                obj['account'] = {
	                    'autocomplete': {
	                        querySearch: apiCallsService.searchSObjectRecords,
	                        displayName: 'Name',
	                        selectedItem: null,
	                        'sObjectName': getPrefixedAttribute('Account')
	                    }
	                }
	            }
	            var costModel = tempItem[getPrefixedAttribute('CostModelId__r')] || '';
	            if (costModel) {
	                obj['costModel'] = {
	                    'autocomplete': {
	                        querySearch: apiCallsService.searchSObjectRecords,
	                        displayName: 'Name',
	                        selectedItem: {
	                            Id: costModel.Id,
	                            Name: costModel.Name
	                        },
	                        'sObjectName': getPrefixedAttribute('CostModel__c')
	                    }
	                };
	            } else {
	                obj['costModel'] = {
	                    'autocomplete': {
	                        querySearch: apiCallsService.searchSObjectRecords,
	                        displayName: 'Name',
	                        selectedItem: null,
	                        'sObjectName': getPrefixedAttribute('CostModel__c')
	                    }
	                }
	            }
	            return obj;
	        }
	
	        function setMetadata(items) {
	            metadata = items;
	        }
	
	        function getMetadata(pliId) {
	            if (metadata.length) {
	                return metadata;
	            } else {
	                return getPriceListDetails(pliId);
	            }
	        }
	
	        function getPriceListDetails(pliId) {
	            var defer = $q.defer(),
	                requestObj = {
	                    "PriceListId": (pliId === 'new' ? null : pliId)
	                };
	
	            remoteService.getPriceListDetails(requestObj)
	                .then(function(response) {
	                    setMetadata(response.FieldMetadata);
	                    if (pliId === 'new') {
	                        defer.resolve(newPriceListForm());
	                    } else {
	                        defer.resolve(preparePriceListDetails(response));
	                    }
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function getPicklistValues(type) {
	            var response = [],
	                value = '',
	                noneVar = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                };
	            if (allPicklists.length && type) {
	                if (type.indexOf('__c') > -1) {
	                    value = getPrefixedAttribute(type);
	                } else {
	                    value = type;
	                }
	                for (var i = 0; i < allPicklists.length; i++) {
	                    if (allPicklists[i].FieldName === value) {
	                        response = allPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            response.unshift(noneVar);
	            return response;
	        }
	
	        function setAllPicklists(data) {
	            allPicklists = data;
	        }
	
	        function getBasedOnAdjustmentTypePicklists() {
	            return getPicklistValues('BasedOnAdjustmentType__c');
	        }
	
	        function prepareCurrencyValues(picklistValues) {
	            if (picklistValues.length) {
	                for (var i = 0; i < picklistValues.length; i++) {
	                    picklistValues[i].label = picklistValues[i].value + ' - ' + picklistValues[i].label;
	                }
	            }
	            return picklistValues || [];
	        }
	
	        function getCurrencyIsoCodePicklists() {
	            return prepareCurrencyValues(getPicklistValues('CurrencyIsoCode'));
	        }
	
	        function getDefaultCurrencyIsoCode() {
	            var defaultValue = '',
	                allValues = getCurrencyIsoCodePicklists();
	            if (allValues.length) {
	                for (var i = 0; i < allValues.length; i++) {
	                    if (allValues[i].defaultValue === true) {
	                        defaultValue = allValues[i].value;
	                        break;
	                    }
	                }
	            }
	            return defaultValue;
	        }
	
	        function getTypePicklists() {
	            return getPicklistValues('Type__c');
	        }
	        function newPriceListForm() {
	            var obj = {};
	            obj['costModel'] = {
	                    'autocomplete': {
	                        querySearch: apiCallsService.searchSObjectRecords,
	                        displayName: 'Name',
	                        selectedItem: null,
	                        'sObjectName': getPrefixedAttribute('CostModel__c')
	                    }
	                };
	            obj['account'] = {
	                    'autocomplete': {
	                        querySearch: apiCallsService.searchSObjectRecords,
	                        displayName: 'Name',
	                        selectedItem: null,
	                        'sObjectName': getPrefixedAttribute('Account')
	                    }
	                };
	            obj['autocomplete'] = {
	                    querySearch: searchPriceList,
	                    displayName: 'label'
	                };    
	            return obj;
	        };
	        var service = {
	            getSelectedPriceListDetails: getSelectedPriceListDetails,
	            createPriceList: createPriceList,
	            updatePriceList: updatePriceList,
	            getSObjectPicklistFields: getSObjectPicklistFields,
	            searchPriceList: searchPriceList,
	            getSampleNewPriceList: getSampleNewPriceList,
	            getPriceListDetails: getPriceListDetails,
	            getPicklistValues: getPicklistValues,
	            setAllPicklists: setAllPicklists,
	            getBasedOnAdjustmentTypePicklists: getBasedOnAdjustmentTypePicklists,
	            getCurrencyIsoCodePicklists: getCurrencyIsoCodePicklists,
	            getDefaultCurrencyIsoCode: getDefaultCurrencyIsoCode,
	            getTypePicklists: getTypePicklists,
	            getMetadata: getMetadata
	
	        };
	
	        return service;
	    };
	
	    priceListDetailsService.$inject = [
	        '$q',
	        'moment',
	        'i18nService',
	        'remoteService',
	        'systemConstants',
	        'apiCallsService'
	    ];
	
	    module.exports = priceListDetailsService;
	})();


/***/ }),
/* 583 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"pricelist-detail-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <price-list-listing search-text=\"vm.searchText\"></price-list-listing>\n        </div>\n        <div class=\"pricelist-detail-block\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <!-- Create / Update product details form -->\n            <form class=\"pricelist-detail-form\" novalidate name=\"vm.pricelistForm\">\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPl.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.PriceListName\" is-required=\"true\" name=\"name\" max-length=\"{{vm.getFieldValue('Name','Length')}}\"></material-form-field>\n                        <div ng-messages=\"vm.pricelistForm.name.$error\" ng-if=\"vm.pricelistForm.name.$touched || vm.pricelistForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.FootnotesIsMandatory }}</p>\n                        </div>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPl.isActive\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.IsActive\" element-id=\"isActive\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\">\n                        <material-form-field model=\"vm.selectedPl.description\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"::vm.labels.ShortDescription\" max-length=\"{{vm.getFieldValue('Description__c','Length')}}\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPl.effectiveDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.EffectiveDate\"></material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPl.expirationDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.ExpirationDate\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field field-type=\"autocomplete\" properties=\"vm.selectedPl\" field-label=\"::vm.labels.BasedOnPriceList\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPl.adjustmentType\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.adjustmentTypes\" field-label=\"::vm.labels.BasedOnAdjustmentType\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPl.currency\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.currencyTypes\" field-label=\"::vm.labels.Currency\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPl.adjustmentAmount\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"::vm.labels.BasedOnAdjustmentAmount\" scale=\"{{vm.getFieldValue('BasedOnAdjustmentAmount__c','Scale')}}\" precision=\"{{vm.getFieldValue('BasedOnAdjustmentAmount__c','Precision')}}\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPl.priceListType\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.plType\" field-label=\"::vm.labels.priceListType\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field field-type=\"autocomplete\" properties=\"vm.selectedPl.account\" field-label=\"::vm.labels.Account\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field field-type=\"autocomplete\" properties=\"vm.selectedPl.costModel\" field-label=\"::vm.labels.CostModel\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPl.owner\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.Owner\" is-disabled=\"true\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex align-with-text-area\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPl.contractNumber\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.ContractNumber\" name=\"contractNumber\" max-length=\"{{vm.getFieldValue('ContractNumber__c','Length')}}\"></material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPl.guidePage\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"::vm.labels.GuidePage\" max-length=\"{{vm.getFieldValue('GuidePage__c','Length')}}\"></material-form-field>\n                    </div>\n                </div>\n            </form>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListingPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.pageSave()\" data-ng-disabled=\"!vm.enableSave\">Save</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 584 */
/***/ (function(module, exports) {

	(function() {
	
	
	    'use strict';
	    var pricelistDetailsController = function($q, $scope, $rootScope, $state, $stateParams, applicationService,
	        priceListDetailsService, systemConstants, i18nService, cpqAdminConstants, productConstants, $mdDialog, priceListCommonService, allPicklists, metaData) {
	
	        var vm = this,
	            isFormSaved = false,
	            selectedImageIndex = 0,
	            currentlySelectedProduct;
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	
	        priceListDetailsService.setAllPicklists(allPicklists);
	
	        var metaDataInfo = priceListDetailsService.getMetadata();
	        vm.adjustmentTypes = {
	            PicklistValues: priceListDetailsService.getBasedOnAdjustmentTypePicklists()
	        };
	
	        vm.currencyTypes = {
	            PicklistValues: priceListDetailsService.getCurrencyIsoCodePicklists()
	        };
	
	        vm.plType = {
	            PicklistValues: priceListDetailsService.getTypePicklists()
	        };
	
	        var selectedPl = priceListCommonService.getSelectedPL();
	
	        if (Object.keys(selectedPl).length === 0) {
	            var filter = {
	                SearchString: '',
	                ChunkNumber: 1,
	                NumberOfRecordsPerChunk:50
	            };
	            priceListCommonService.loadAllPriceLists(filter)
	                .then(function() {
	
	                    var allPLs = priceListCommonService.getPriceLists(),
	                        present = false;
	                    for (var i = 0; i < allPLs.length; i++) {
	                        if (allPLs[i].id === $stateParams.id) {
	                            present = true;
	                            priceListCommonService.setSelectedPL(allPLs[i]);
	                            break;
	                        }
	                    }
	                    getPriceListDetails($stateParams.id)
	                        .then(function(response) {
	                            if (!present) {
	                                allPLs.unshift(response);
	                                priceListCommonService.setPriceLists(allPLs);
	                                priceListCommonService.setSelectedPL(response);
	                            }
	                        }, function(reason) {});
	
	                }, function(reason) {});
	        } else {
	            if ($stateParams.id === cpqAdminConstants.NEW) {
	                var defaultCurrency = '';
	                if (vm.currencyTypes.PicklistValues.length) {
	                    for (var i = 0; i < vm.currencyTypes.PicklistValues.length; i++) {
	                        if (vm.currencyTypes.PicklistValues[i].defaultValue === true) {
	                            defaultCurrency = vm.currencyTypes.PicklistValues[i].value;
	                            break;
	                        }
	                    }
	                }
	                selectedPl.currency = defaultCurrency;
	                selectedPl.name = '';
	                vm.selectedPl = selectedPl;
	            } else {
	                isFormSaved = false;
	                if (vm.selectedPl && !vm.selectedPl.id) {
	                    var allPls = priceListCommonService.getPriceLists();
	                    allPls.splice(0, 1);
	                    priceListCommonService.setPriceLists(allPls);
	                }
	                getPriceListDetails(selectedPl.id)
	                    .then(function(response) {}, function(reason) {});
	            }
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function getPriceListDetails(pliId) {
	            var defer = $q.defer();
	            priceListDetailsService.getPriceListDetails(pliId)
	                .then(function(response) {
	                    vm.selectedPl = response;
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	
	            return defer.promise;
	        }
	
	        function findIndex(arr, item) {
	            var index = -1;
	            for (var i = 0; i < arr.length; i++) {
	                if (arr[i].id === item.id) {
	                    index = i;
	                    break;
	                }
	            }
	            return index;
	        }
	
	        function savePriceList(toState, toParams) {
	            if ($stateParams.id === cpqAdminConstants.NEW) {
	                if (vm.pricelistForm.$valid && vm.pricelistForm.$dirty) {
	                    priceListDetailsService.createPriceList(angular.copy(vm.selectedPl))
	                        .then(function(response) {
	                            if (response.length > 0) {
	                                isFormSaved = true;
	                                var allPls = priceListCommonService.getPriceLists(),
	                                    firstItem = priceListCommonService.processAllPriceListResponse(response)[0];
	                                allPls[0] = firstItem;
	                                priceListCommonService.setPriceLists(allPls);
	                                priceListCommonService.setSelectedPL(firstItem);
	                                if (toState) {
	                                    toParams.id = response[0].PriceListSO.Id;
	                                    $state.go(toState, toParams);
	                                } else {
	                                    addAlert('Created successfully', cpqAdminConstants.SUCCESS);
	                                    $state.go('app.priceList.details', {
	                                        id: response[0].PriceListSO.Id
	                                    });
	                                }
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMesage(reason);
	                        });
	                } else {
	                    if ((toState.name === 'app.priceList.pricelistitems' || toState.name === 'app.priceList.categoryAssociation') && toParams.id === 'new') {
	                        isFormSaved = false;
	                        if (vm.pricelistForm.name.$viewValue === '') {
	                            vm.pricelistForm.name.$setTouched();
	                            vm.pricelistForm.name.$setValidity("required", false);
	                        }
	                        return false;
	                    } else if (toState.name === 'app.priceList.details' && toParams.id) {
	                        isFormSaved = true;
	                        var allPls = priceListCommonService.getPriceLists();
	                        allPls.splice(0, 1);
	                        priceListCommonService.setPriceLists(allPls);
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        }
	                    }
	
	
	                }
	
	            } else {
	                if (vm.pricelistForm.$valid && vm.pricelistForm.$dirty) {
	                    priceListDetailsService.updatePriceList(angular.copy(vm.selectedPl))
	                        .then(function(response) {
	                            isFormSaved = true;
	                            if (toState) {
	                                $state.go(toState, toParams);
	                            } else {
	                                addAlert('Updated successfully', cpqAdminConstants.SUCCESS);
	                                getPriceListDetails(vm.selectedPl.id)
	                                    .then(function(response) {}, function(reason) {});
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMesage(reason);
	                        });
	                } else {
	                    isFormSaved = true;
	                    if (toState) {
	                        $state.go(toState, toParams);
	                    }
	                }
	            }
	        }
	
	        vm.pageSave = function(toState, toParams) {
	            if (vm.selectedPl) {
	                savePriceList(toState, toParams);
	            } else {
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                }
	            }
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.priceList.list') {
	                return true;
	            } else if (isFormSaved === true) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.pageSave(toState, toParams);
	            }
	        });
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	        $scope.$watchGroup(['vm.pricelistForm.$valid', 'vm.pricelistForm.$invalid'], function() {
	            if (vm.pricelistForm && vm.pricelistForm.$valid) {
	                vm.enableSave = true;
	            } else {
	                vm.enableSave = false;
	            }
	        });
	
	        $scope.$on(vm.labels.NewPriceList.split(' ').join('-'), function() {
	            createNewPriceList();
	        });
	
	        function createNewPriceList() {
	            var allPls = priceListCommonService.getPriceLists(),
	                newPl = priceListDetailsService.getSampleNewPriceList();
	            allPls.unshift(angular.copy(newPl));
	            priceListCommonService.setPriceLists(angular.copy(allPls));
	            priceListCommonService.setSelectedPL(angular.copy(newPl));
	            $state.go('app.priceList.details', {
	                id: 'new'
	            });
	        };
	
	        vm.setFilters = function() {
	            var filterObj = {
	                SearchString: vm.searchText || '',
	                ChunkNumber: 1
	            };
	            listService.setFilters(filterObj);
	        };
	
	        function getFilters() {
	            var filter = listService.getFilters();
	            if (filter && filter.SearchString) {
	                vm.searchText = filter.SearchString;
	            }
	        }
	
	        vm.goToListingPage = function() {
	            $state.go('app.priceList.list');
	        };
	
	        function getField(fieldName) {
	            var fieldObj, name;
	            if (fieldName.indexOf('__c') > -1) {
	                fieldName = getPrefixedAttribute(fieldName);
	            }
	            if (metaDataInfo) {
	                for (var i = 0; i < metaDataInfo.length; i++) {
	                    var name = metaDataInfo[i].FieldName;
	                    if (name === fieldName) {
	                        fieldObj = metaDataInfo[i];
	                        break;
	                    }
	                }
	            }
	            return fieldObj;
	        }
	        vm.getFieldValue = function(fieldName, fieldValueToBeExtracted) {
	            var field = getField(fieldName);
	            if (field) {
	                return field[fieldValueToBeExtracted];
	            } else {
	                return '';
	            }
	
	        };
	    };
	
	    pricelistDetailsController.$inject = [
	        '$q',
	        '$scope',
	        '$rootScope',
	        '$state',
	        '$stateParams',
	        'applicationService',
	        'priceListDetailsService',
	        'systemConstants',
	        'i18nService',
	        'cpqAdminConstants',
	        'productConstants',
	        '$mdDialog',
	        'priceListCommonService',
	        'allPicklists',
	        'metaData'
	
	    ];
	
	    module.exports = pricelistDetailsController;
	
	})();


/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceList.items', [])
	        .service('priceListItemsService', __webpack_require__(586))
	        .filter('userMessage', __webpack_require__(587))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceList.pricelistitems', {
	                parent: 'app.priceList',
	                url: '/:id/pricelistitems',
	                views: {
	                    'priceListContainer': {
	                        template: __webpack_require__(588),
	                        controller: __webpack_require__(589),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    allProducts: ['priceListItemsService', '$stateParams', function(priceListItemsService, $stateParams) {
	                        return priceListItemsService.productSearchByName('', 1);
	                    }],
	                    priceListMetaData: ['priceListItemsService', function(priceListItemsService) {
	                        return priceListItemsService.getPriceListMetaData();
	                    }],
	                    associatedPriceListItems: ['priceListItemsService', '$stateParams', function(priceListItemsService, $stateParams) {
	                        return priceListItemsService.getAssociatedPriceListItems($stateParams.id);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 586 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var priceListItemsService = function($q, i18nService, $stateParams, remoteService, systemConstants, productConstants, cpqAdminConstants, priceListConstants, listService, applicationService) {
	        var prefix = systemConstants.nsPrefix || '',
	            uniqueProductIds = [],
	            priceListItemPicklistMetaData = [],
	            labels = i18nService.CustomLabel;
	
	
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function getPriceListItemPicklistMetaData(type) {
	            if (type) {
	                var noneValue = {
	                        label: labels.NoneAsPickListValue,
	                        value: ''
	                    },
	                    requiredValueType = priceListItemPicklistMetaData[type];
	                requiredValueType.unshift(noneValue);
	                return requiredValueType;
	            } else {
	                return priceListItemPicklistMetaData;
	            }
	        }
	
	        function setPriceListItemPicklistMetaData(allPicklists) {
	            priceListItemPicklistMetaData = allPicklists;
	        }
	
	        function productSearchByName(searchText, chunkNumber) {
	            var defer = $q.defer();
	            var requestObj = {
	                'ViewName': prefix + productConstants.fieldsetProductList,
	                "SortField": 'LastModifiedDate',
	                "SortDirection": cpqAdminConstants.DESCENDING,
	                'SearchString': searchText || '',
	                'ChunkNumber': chunkNumber || 1,
	                'NumberOfProductsPerChunk': productConstants.numberOfProductsPerChunk,
	                'ConfigType': ''
	            };
	            listService.getProductListBySelectedView(requestObj, false)
	                .then(function(response) {
	                    defer.resolve(response.ProductSOs);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            return defer.promise;
	        }
	
	        function getSamplePriceListItem() {
	            var sampleData = {
	                Id: ''
	            };
	            sampleData[getPrefixedAttribute('ProductId__r')] = {
	                Name: '',
	                Id: ''
	            };
	            sampleData[getPrefixedAttribute('ChargeType__c')] = labels.StandardPrice;
	            sampleData[getPrefixedAttribute('PriceType__c')] = labels.OneTime;
	            sampleData[getPrefixedAttribute('ListPrice__c')] = 0;
	            sampleData[getPrefixedAttribute('Frequency__c')] = '';
	            sampleData[getPrefixedAttribute('PriceMethod__c')] = labels.PerUnit;
	            sampleData[getPrefixedAttribute('Active__c')] = true;
	            sampleData[getPrefixedAttribute('Sequence__c')] = '';
	
	            return sampleData;
	        }
	
	
	        function getPriceListMetaData() {
	            var defer = $q.defer();
	            remoteService.getPriceListItemPicklistMetadata().then(function(response) {
	                setPriceListItemPicklistMetaData(response);
	                defer.resolve(response);
	            }, function(reason) {
	                defer.reject(reason);
	            });
	
	            return defer.promise;
	        }
	
	        function deletePricingData(id) {
	            var defered = $q.defer(),
	                requestObj = {
	                    PriceListItemIds: [id]
	                };
	            remoteService.deletePricingData(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        /* TODO : Halfway done*/
	        function prepareStructure(items) {
	            var response = [],
	                uniqueProducts = [];
	            if (items && items.length) {
	                for (var i = 0; i < items.length; i++) {
	                    var priceListItemSO = items[i].PriceListItemSO,
	                        productId = priceListItemSO[getPrefixedAttribute('ProductId__c')];
	                    if (productId) {
	                        var uniqueProduct = uniqueProducts.find(function(item) {
	                            return productId === item.id;
	                        });
	                        if (uniqueProduct) {
	                            priceListItemSO['showPriceList'] = false;
	                        } else {
	                            uniqueProducts.push({ id: productId, lastIndex: i });
	                            priceListItemSO['showPriceList'] = true;
	                        }
	                        if (!priceListItemSO[getPrefixedAttribute('PriceType__c')]) {
	                            priceListItemSO[getPrefixedAttribute('PriceType__c')] = '';
	                        }
	                        if (!priceListItemSO[getPrefixedAttribute('Frequency__c')]) {
	                            priceListItemSO[getPrefixedAttribute('Frequency__c')] = '';
	                        }
	                        if (!priceListItemSO[getPrefixedAttribute('PriceMethod__c')]) {
	                            priceListItemSO[getPrefixedAttribute('PriceMethod__c')] = '';
	                        }
	                        response.push(priceListItemSO);
	
	                        if (uniqueProduct && uniqueProduct.lastIndex !== i) {
	                            response.splice(uniqueProduct.lastIndex + 1, 0, response.splice(i, 1)[0]);
	                            uniqueProduct.lastIndex = uniqueProduct.lastIndex + 1;
	                            //update the last index for the next items
	                            for (var j = 0; j < uniqueProducts.length; j++) {
	                                if (uniqueProducts[j].lastIndex >= uniqueProduct.lastIndex && uniqueProducts[j] != uniqueProduct) {
	                                    uniqueProducts[j].lastIndex++;
	                                }
	                            }
	                        }
	                    }
	                }
	
	            }
	
	            var productIdArray = getUniqueProductIds();
	            for (var i = 0; i < uniqueProducts.length; i++) {
	                if (productIdArray.indexOf(uniqueProducts[i].id) === -1) {
	                    productIdArray.push(uniqueProducts[i].id);
	                }
	            }
	            setUniqueProductIds(productIdArray);
	            return response;
	        }
	
	        function getAssociatedPriceListItems(plId, searchText, chunkNumber) {
	            var defered = $q.defer(),
	                requestObj = {
	                    "SearchString": searchText || null,
	                    "PriceListId": plId,
	                    "NumberOfRecordsPerChunk": priceListConstants.numberOfProductsPerChunk,
	                    "ChunkNumber": chunkNumber || 1
	                };
	            remoteService.getPriceListItemsForPriceList(requestObj)
	                .then(function(response) {
	                    defered.resolve(prepareStructure(response.PriceListItemDOs));
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function setUniqueProductIds(items) {
	            uniqueProductIds = items;
	        }
	
	        function getUniqueProductIds() {
	            return uniqueProductIds;
	        }
	
	        function createPriceListItems(payload) {
	            var defer = $q.defer();
	            var request = [];
	            for (var i = 0; i < payload.length; i++) {
	                var priceList = {};
	                priceList[prefix + 'ChargeType__c'] = payload[i][prefix + 'ChargeType__c'];
	                priceList[prefix + 'ListPrice__c'] = payload[i][prefix + 'ListPrice__c'];
	                priceList[prefix + 'PriceType__c'] = payload[i][prefix + 'PriceType__c'];
	                priceList[prefix + 'Frequency__c'] = payload[i][prefix + 'Frequency__c'];
	                priceList[prefix + 'PriceMethod__c'] = payload[i][prefix + 'PriceMethod__c'];
	                priceList[prefix + 'Active__c'] = payload[i][prefix + 'Active__c'];
	                priceList[prefix + 'PriceListId__c'] = $stateParams.id;
	                priceList[prefix + 'ProductId__c'] = payload[i][prefix + 'ProductId__r']['Id'];
	                priceList[prefix + 'Sequence__c'] = payload[i][prefix + 'Sequence__c'] || '';
	                request.push(priceList);
	            }
	            remoteService.createPriceListItems(request).then(function(response) {
	                defer.resolve(response);
	            }, function(reason) {
	                defer.reject(reason);
	            });
	
	            return defer.promise;
	        }
	
	        function updatePriceListItems(productId, payload) {
	            var defer = $q.defer();
	            var request = [];
	            for (var i = 0; i < payload.length; i++) {
	                var priceList = {};
	                priceList.Id = payload[i].Id;
	                priceList[prefix + 'ChargeType__c'] = payload[i][prefix + 'ChargeType__c'];
	                priceList[prefix + 'ListPrice__c'] = payload[i][prefix + 'ListPrice__c'];
	                priceList[prefix + 'PriceType__c'] = payload[i][prefix + 'PriceType__c'];
	                priceList[prefix + 'Frequency__c'] = payload[i][prefix + 'Frequency__c'];
	                priceList[prefix + 'Active__c'] = payload[i][prefix + 'Active__c'];
	                priceList[prefix + 'PriceListId__c'] = $stateParams.id;
	                priceList[prefix + 'PriceMethod__c'] = payload[i][prefix + 'PriceMethod__c'];
	                priceList[prefix + 'Criteria__c'] = payload[i][prefix + 'Criteria__c'] || '';
	                priceList[prefix + 'Sequence__c'] = payload[i][prefix + 'Sequence__c'] || '';
	                request.push(priceList);
	            }
	            remoteService.updatePriceListItems(request).then(function(response) {
	                defer.resolve(response);
	            }, function(reason) {
	                defer.reject(reason);
	            });
	
	            return defer.promise;
	        }
	
	        function preparePriceListDetails(response) {
	            var tempItem = response.PriceListSO,
	                obj = {};
	            obj['name'] = tempItem.Name;
	            obj['id'] = tempItem.Id;
	            obj['isActive'] = tempItem[getPrefixedAttribute('Active__c')];
	            obj['description'] = tempItem[getPrefixedAttribute('Description__c')] || '';
	            obj['currency'] = tempItem.CurrencyIsoCode || undefined;
	            obj['adjustmentAmount'] = tempItem[getPrefixedAttribute('BasedOnAdjustmentAmount__c')] || '';
	            obj['adjustmentType'] = tempItem[getPrefixedAttribute('BasedOnAdjustmentType__c')] || '';
	            obj['priceListType'] = tempItem[getPrefixedAttribute('Type__c')] || '';
	
	            return obj;
	        }
	
	        function getPriceListDetails(pliId) {
	            var defer = $q.defer(),
	                requestObj = {
	                    "PriceListId": pliId
	                }
	            remoteService.getPriceListDetails(requestObj)
	                .then(function(response) {
	                    defer.resolve(preparePriceListDetails(response));
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	        var service = {
	            productSearchByName: productSearchByName,
	            getSamplePriceListItem: getSamplePriceListItem,
	            getPriceListMetaData: getPriceListMetaData,
	            deletePricingData: deletePricingData,
	            getAssociatedPriceListItems: getAssociatedPriceListItems,
	            getUniqueProductIds: getUniqueProductIds,
	            setUniqueProductIds: setUniqueProductIds,
	            createPriceListItems: createPriceListItems,
	            updatePriceListItems: updatePriceListItems,
	            getPriceListDetails: getPriceListDetails,
	            getPriceListItemPicklistMetaData: getPriceListItemPicklistMetaData
	        };
	
	        return service;
	    };
	
	    priceListItemsService.$inject = [
	        '$q',
	        'i18nService',
	        '$stateParams',
	        'remoteService',
	        'systemConstants',
	        'productConstants',
	        'cpqAdminConstants',
	        'priceListConstants',
	        'listService',
	        'applicationService'
	    ];
	
	    module.exports = priceListItemsService;
	})();

/***/ }),
/* 587 */
372,
/* 588 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"pricelist-item-container\" data-ng-class=\"vm.isRightPanelVisible?'pricelist-item-slideRight-tree-panel':'pricelist-item-slideLeft-tree-panel'\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <header>\n                <h4>Products</h4>\n                <div class=\"search\">\n                    <form ng-submit=\"vm.searchProduct(true)\" novalidate>\n                        <div class=\"search-input-container\">\n                            <div class=\"input-group\">\n                                <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                                <label class=\"ng-binding\">Search</label>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </header>\n            <div data-ng-if=\"vm.associatedPlis.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{vm.labels.NoMatchingPriceListItems}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.associatedPlis.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"list-table\">\n                <table>\n                    <tbody>\n                        <tr ng-repeat=\"item in vm.productsList track by item.Id\" ng-class=\"{'activeList': $index == vm.activeList, 'drag-disabled': item.dragDisable, 'selected': item.selected }\" dnd-draggable=\"vm.getSelectedItemsToDrag(vm.productsList, item)\" dnd-droppable-in=\".dropzone\" dnd-effect-allowed=\"copy\" dnd-disable-if=\"item.dragDisable\" dnd-selected=\"item.selected = !item.selected\">\n                            <td>\n                                <div class=\"item-name\">{{ item.Name }}</div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"pagination product-details-list-pagination\">\n                <div class=\"place product-details-list-place\">\n                    {{vm.paginationCenterText}}\n                </div>\n                <div class=\"next-prev\">\n                    <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProducts('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n                    </button>\n                    <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProducts('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"pricelist-items-detail-block\">\n            <form name=\"vm.pricingForm\">\n                <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n                <div class=\"fixingHeaderPricing\" layout=\"row\">\n                    <div class=\"flex-20 action\">{{::vm.labels.Action}}</div>\n                    <div class=\"flex-20 price-list\">{{::vm.labels.Products}}</div>\n                    <div class=\"flex-10 charge-type\">{{::vm.labels.ChargeType}}</div>\n                    <div class=\"flex-10\">{{::vm.labels.ListPrice}}</div>\n                    <div class=\"flex-10\">{{::vm.labels.PriceType}}</div>\n                    <div class=\"flex-10\">{{::vm.labels.Frequency}}</div>\n                    <div class=\"flex-10 price-method\">{{::vm.labels.PriceMethod}}</div>\n                    <div class=\"flex-4\">{{::vm.labels.Active}}</div>\n                </div>\n                <div class=\"price-table\">\n                    <div class=\"dropzone\" dnd-list=\"vm.priceListItems\" ng-click=\"vm.onListClick($index, 'activeList')\" dnd-drop=\"vm.onDroppedProduct(event, index, item)\">\n                        <div data-ng-repeat=\"item in vm.priceListItems track by $index\" data-ng-class=\"{horizontalBorder:item.showPriceList, pricingDivBackgroundColor:$index==(vm.priceListItems.length-1) && item.showPriceList, errorBcgColor:item.hasError}\" dnd-disable-if=\"!item.showPriceList\" layout=\"row\">\n                            <div class=\"flex-20 action\">\n                                <div class=\"btn-group\" role=\"group\" aria-label=\"...\" data-ng-if=\"item.showPriceList\">\n                                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addSubItem($index, item[vm.prefix + 'ProductId__r']);\">\n                                        <i class=\"material-icons\">add</i>\n                                    </button>\n                                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.openChargeTypeCriteriaPopup($index,item)\">\n                                        <i class=\"material-icons\">flare</i>\n                                    </button>\n                                    <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                                        <i class=\"material-icons\">more_vert</i>\n                                    </button>\n                                    <ul class=\"dropdown-menu\">\n                                        <li data-ng-click=\"vm.removeItem($index,item.Id)\" class=\"action-Menu\">\n                                            <span class=\"removePriceList\">\n                                                <i class=\"material-icons\">clear</i>\n                                                 <span class=\"remove-label\">{{vm.labels.Remove}}</span>\n                                            </span>\n                                        </li>\n                                        <li class=\"action-Menu\">\n                                            <span class=\"removePriceList\">\n                                            <i class=\"material-icons\">settings</i>\n                                            <a href=\"{{vm.getPLIAdvancedPageUrl(item.Id)}}\" target=\"_blank\" class=\"remove-label\">{{vm.labels.Advanced}}</a>\n                                            </span>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                            <div class=\"flex-20 price-list\" data-ng-class=\"item.showPriceList ? 'no-border' : 'with-border text-right'\">\n                                <span data-ng-show=\"item.showPriceList\" class=\"text-info\"> <a href=\"{{vm.getProductPageUrl(item[vm.prefix + 'ProductId__r']['Id'])}}\" target=\"_blank\" class=\"remove-label\">{{item[vm.prefix + 'ProductId__r']['Name']}}</a>  \n                                </span>\n                                <div class=\"btn-group\" role=\"group\" aria-label=\"...\" data-ng-if=\"!item.showPriceList\">\n                                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addSubItem($index, item[vm.prefix + 'ProductId__r'])\">\n                                        <i class=\"material-icons\">add</i>\n                                    </button>\n                                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.openChargeTypeCriteriaPopup($index,item)\">\n                                        <i class=\"material-icons\">flare</i>\n                                    </button>\n                                    <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                                        <i class=\"material-icons\">more_vert</i>\n                                    </button>\n                                    <ul class=\"dropdown-menu\">\n                                        <li data-ng-click=\"vm.removeItem($index,item.Id)\" class=\"action-Menu\">\n                                            <span class=\"removePriceList\">\n                                        <i class=\"material-icons\">clear</i>\n                                        <span class=\"remove-label\">{{vm.labels.Remove}}</span></span>\n                                        </li>\n                                        <li class=\"action-Menu\" data-ng-if=\"item.Id\">\n                                            <span class=\"removePriceList\">\n                                            <i class=\"material-icons\">settings</i>\n                                             <a href=\"{{vm.getPLIAdvancedPageUrl(item.Id)}}\" target=\"_blank\" class=\"remove-label\">{{vm.labels.Advanced}}</a>\n                                            </span>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </div>\n                            <div class=\"flex-10 charge-type\">\n                                <material-form-field model=\"item[vm.prefix + 'ChargeType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.chargeTypePicklistEntries\" class=\"flex\"></material-form-field>\n                            </div>\n                            <div class=\"flex-10\">\n                                <material-form-field model=\"item[vm.prefix + 'ListPrice__c']\" field-type=\"currency\" is-editable=\"true\"></material-form-field>\n                            </div>\n                            <div class=\"flex-10 price-method\">\n                                <material-form-field model=\"item[vm.prefix + 'PriceType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.priceTypePicklistEntries\" data-ng-click=\"vm.trackSelectedRowIndex($index)\"></material-form-field>\n                            </div>\n                            <div class=\"flex-10\">\n                                <material-form-field model=\"item[vm.prefix + 'Frequency__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.frequencyPicklistEntries\" is-disabled=\"{{item[vm.prefix + 'PriceType__c'] === 'One Time' || item[vm.prefix + 'PriceType__c'] === ''}}\"></material-form-field>\n                            </div>\n                            <div class=\"flex-10\">\n                                <material-form-field model=\"item[vm.prefix + 'PriceMethod__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.priceMethodsTypePicklistEntries\"></material-form-field>\n                            </div>\n                            <div class=\"flex-5 text-center\">\n                                <material-form-field model=\"item[vm.prefix + 'Active__c']\" field-type=\"checkbox\" is-editable=\"true\"></material-form-field>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"clearfix\"></div>\n                </div>\n                <div class=\"pagination-container text-center pagination-block\" data-ng-if=\"vm.priceListItems.length > 0\">\n                    <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                        <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableCenterLeftBtn\" data-ng-click=\"vm.getAssociatedPriceListItem('previous')\">\n                            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                        <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableCenterRightBtn\" data-ng-click=\"vm.getAssociatedPriceListItem('next')\">\n                            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                        </button>\n                    </div>\n                </div>\n            </form>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">Save</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\n</div>\n<div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n    <div class=\"modalOverlay\">\n        <div class=\"modalHeaderBody\">\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n            <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n        </div>\n        <div class=\"modal-Footer text-right\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Cancel}}</span>\n            </button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Ok}}</span>\n            </button>\n        </div>\n    </div>\n</div>\n</div>\n"

/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var pricelistItemsController = function($q, $location, $filter, $scope, $state, $timeout, $mdDialog, $stateParams, $templateCache, i18nService, systemConstants, allProducts, applicationService, priceListCommonService, priceListConstants, priceListItemsService, priceListMetaData, associatedPriceListItems) {
	
	        var vm = this,
	            isFormSaved = false,
	            prefix = systemConstants.nsPrefix || '',
	            selectedImageIndex = 0,
	            currentlySelectedProduct,
	            leftPageNumber = 1,
	            centerPageNumber = 1,
	            isDirty = false,
	            _sampleTemplate = priceListItemsService.getSamplePriceListItem();
	
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.searchedStr = '';
	        vm.isMaxSQLSizeExceed = false;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = true;
	        vm.disableCenterLeftBtn = true;
	        vm.disableCenterRightBtn = true;
	        vm.productsList = allProducts;
	
	        vm.priceListItems = associatedPriceListItems;
	
	        var selectedPl = priceListCommonService.getSelectedPL();
	
	        function getPriceListDetails(plId) {
	            var defer = $q.defer();
	            priceListItemsService.getPriceListDetails(plId)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	
	            return defer.promise;
	        }
	
	        if (Object.keys(selectedPl).length === 0) {
	            getPriceListDetails($stateParams.id)
	                .then(function(response) {
	                    priceListCommonService.setSelectedPL(response);
	                }, function(reason) {});
	        }
	
	        function disableProducts() {
	            var uniqueProductIds = priceListItemsService.getUniqueProductIds();
	            for (var j = 0; j < vm.productsList.length; j++) {
	                var productId = vm.productsList[j].Id;
	                if (uniqueProductIds.indexOf(productId) > -1) {
	                    vm.productsList[j].dragDisable = true;
	                } else {
	                    vm.productsList[j].dragDisable = false;
	                }
	            }
	        }
	
	        disableProducts();
	
	        vm.numberOfProductsPerChunk = priceListConstants.treePanelItemsPerChunk;
	        vm.stateParams = $stateParams;
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	
	        vm.priceTypePicklistEntries = {
	            //PicklistValues: priceListMetaData.PriceTypes,
	            PicklistValues: priceListItemsService.getPriceListItemPicklistMetaData('PriceTypes'),
	            methodToCallInController: updateFrequency
	        };
	        vm.chargeTypePicklistEntries = {
	            PicklistValues: priceListItemsService.getPriceListItemPicklistMetaData('ChargeTypes'),
	            methodToCallInController: updateChargeType
	        };
	        vm.priceMethodsTypePicklistEntries = {
	            PicklistValues: priceListItemsService.getPriceListItemPicklistMetaData('PriceMethods')
	        };
	        vm.frequencyPicklistEntries = {
	            PicklistValues: priceListItemsService.getPriceListItemPicklistMetaData('Frequency'),
	            methodToCallInController: updateFrequencyError
	        };
	
	        var selectedRowIndex;
	        vm.trackSelectedRowIndex = function(index) {
	            selectedRowIndex = index;
	        };
	
	        function updateFrequency(obj) {
	            if (selectedRowIndex >= 0) {
	                if (obj === vm.labels.OneTime) {
	                    vm.priceListItems[selectedRowIndex][vm.prefix + 'Frequency__c'] = '';
	                } else if (obj === '') {
	                    vm.priceListItems[selectedRowIndex][vm.prefix + 'Frequency__c'] = '';
	                }
	            }
	        }
	
	        function updateChargeType(obj) {
	            if (selectedRowIndex >= 0) {
	                if (obj !== undefined) {
	                    vm.priceListItems[selectedRowIndex].hasError = false;
	                }
	            }
	        }
	
	        function updateFrequencyError(obj) {
	            if (selectedRowIndex >= 0) {
	                if (obj !== undefined) {
	                    vm.priceListItems[selectedRowIndex].hasError = false;
	                }
	            }
	        }
	        /**
	         * When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed incase of errors in saving the page or the form
	         * is invalid. This form contains some mandatory field.
	         *
	         * If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        function createPriceListItem(obj) {
	            /* Check for validity of the newly added items */
	            priceListItemsService.createPriceListItem(obj.pli)
	                .then(function(response) {
	                    //Get all with specific pagination .Re-render here all the items once again
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	
	        function updatePriceListItem(toState, toParams) {
	            var defer = $q.defer();
	            /* Check content validity here */
	            if (!addAndPrepareMatrixEntries() && !prepareProductOption()) {
	                priceListItemsService.updatePriceListItem(angular.copy(vm.selectedPli))
	                    .then(function(response) {
	                        isFormSaved = true;
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        } else {
	                            vm.loadPLIDetail(response)
	                                .then(function(responses) {
	                                    defer.resolve(true);
	                                }, function(reason) {
	                                    defer.reject(true);
	                                });
	                        }
	                    }, function(reason) {
	                        isFormSaved = false;
	                        applicationService.showErrorMessage(reason);
	                        defer.reject(false);
	                    });
	
	            } else {
	                defer.reject(false);
	            }
	
	            return defer.promise;
	        }
	
	        vm.goToListPage = function() {
	            $state.go('app.priceList.list');
	        };
	
	        vm.searchProduct = function(pageToBeReset) {
	            leftPageNumber = (pageToBeReset ? 1 : leftPageNumber);
	            priceListItemsService.productSearchByName(vm.searchText, leftPageNumber)
	                .then(function(response) {
	                    vm.isMaxSQLSizeExceed = false;
	                    vm.productsList = [];
	                    vm.productsList = response;
	                    updateLeftPaginationcomponent();
	                    disableProducts();
	                    document.querySelector('.list-table').scrollTop = 0;
	                }, function(reason) {
	                    if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                        vm.productsList = [];
	                        vm.isMaxSQLSizeExceed = true;
	                    } else {
	                        vm.productsList = [];
	                    }
	                    vm.disableRightBtn = true;
	                });
	        };
	
	        vm.getProducts = function(type) {
	            if (type === 'next') {
	                leftPageNumber++;
	                vm.searchProduct();
	            } else {
	                leftPageNumber--;
	                vm.searchProduct();
	            }
	        };
	
	        /* Enable / Disable save button based on content present or not in the center panel */
	
	
	        function updateLeftPaginationcomponent() {
	            if (vm.productsList.length === 0 && vm.searchText !== '') {
	                vm.searchedStr = vm.searchText;
	            }
	            if (leftPageNumber > 1) {
	                vm.disableLeftBtn = false;
	            } else {
	                vm.disableLeftBtn = true;
	            }
	            if (vm.productsList.length < priceListConstants.numberOfProductsPerChunk) {
	                vm.disableRightBtn = true;
	                updateCenterBtnText(vm.productsList.length);
	            } else {
	                vm.disableRightBtn = false;
	                updateCenterBtnText();
	            }
	        }
	
	        function updateCenterBtnText(endCount) {
	            if (endCount) {
	                vm.paginationCenterText = '(' + ((leftPageNumber - 1) * priceListConstants.numberOfProductsPerChunk + 1) + '-' + ((leftPageNumber - 1) * priceListConstants.numberOfProductsPerChunk + endCount) + ')';
	            } else {
	                vm.paginationCenterText = '(' + ((leftPageNumber - 1) * priceListConstants.numberOfProductsPerChunk + 1) + '-' + (leftPageNumber * priceListConstants.numberOfProductsPerChunk) + ')';
	            }
	        }
	        updateLeftPaginationcomponent();
	
	        function updateCenterPaginationcomponent() {
	            if (centerPageNumber > 1) {
	                vm.disableCenterLeftBtn = false;
	            }
	            if (vm.priceListItems.length < priceListConstants.numberOfProductsPerChunk) {
	                vm.disableCenterRightBtn = true;
	            } else {
	                if (centerPageNumber > 1) {
	                    vm.disableCenterRightBtn = false;
	                } else {
	                    vm.disableCenterRightBtn = false;
	                    vm.disableCenterLeftBtn = true;
	                }
	            }
	        }
	        updateCenterPaginationcomponent();
	
	        vm.cancelRemove = function() {
	            vm.confiramtionPopup = false;
	            resetDeleteSetup();
	        };
	
	        $scope.$on('destroy', function() {
	            vm = null;
	        });
	
	        function addNewPriceListItem(index, droppedProduct) {
	            /*
	             * Treat the page content as dirty. Because, a new node just got added to the center panel.
	             */
	            isDirty = true;
	            var uniqueProductIds = priceListItemsService.getUniqueProductIds();
	            for (var i = 0; i < droppedProduct.length; i++) {
	                var template = angular.copy(_sampleTemplate);
	                template[getPrefixedAttribute('ProductId__r')]['Name'] = droppedProduct[i].Name;
	                template[getPrefixedAttribute('ProductId__r')]['Id'] = droppedProduct[i].Id;
	                template['showPriceList'] = true;
	                template[getPrefixedAttribute('Sequence__c')] = 1;
	                vm.priceListItems.push(template);
	
	                var productId = droppedProduct[i].Id;
	                if (uniqueProductIds.indexOf(productId) > -1) {
	                    /* Do nothing as of now. There might be some use case related to this later. */
	                } else {
	                    uniqueProductIds.push(productId);
	                }
	            }
	            priceListItemsService.setUniqueProductIds(uniqueProductIds);
	            savePage();
	        }
	
	        vm.onListClick = function(index, attr) {
	            vm[attr] = index;
	        };
	        /**
	         * Drag and drop price list
	         */
	        vm.onDroppedProduct = function(event, index, droppedProduct) {
	
	            // add the dragDisable attr after drag completeted
	            angular.forEach(vm.productsList, function(item, key) {
	                angular.forEach(droppedProduct, function(list) {
	                    if (list.Name === item.Name) {
	                        item.dragDisable = true;
	                        delete item['selected'];
	                    }
	                });
	            });
	
	            addNewPriceListItem(index, droppedProduct);
	        };
	
	        vm.getSelectedItemsToDrag = function(list, item) {
	            item.selected = true;
	            return list.filter(function(item) {
	                return item.selected;
	            });
	        };
	        /**
	         * - getIndex stores the to be removed list index .
	         */
	        var toBeRemovedIndex;
	        var toBeRemovedPricelistItemId;
	
	        vm.removeItem = function(index, pliId) {
	            /*
	             * Treat the page content as dirty. Because, a new node just got added to the center panel.
	             */
	            vm.confiramtionPopup = true;
	            toBeRemovedIndex = index;
	            toBeRemovedPricelistItemId = pliId;
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.DeleteMessageBody,
	                messageNote: vm.labels.DeleteMessageNote
	            }
	        };
	
	        function updateUniqueProductIds(type, id) {
	            var items = priceListItemsService.getUniqueProductIds(),
	                index;
	            if (type === 'add') {
	                items.push(id);
	                priceListItemsService.setUniqueProductIds(items);
	            } else if (type === 'remove') {
	                index = items.indexOf(id);
	                items.splice(index, 1);
	                priceListItemsService.setUniqueProductIds(items);
	            }
	        }
	
	        function removePLI(pliId) {
	            priceListItemsService.deletePricingData(pliId)
	                .then(function(response) {
	                    if (response) {
	                        var productId = vm.priceListItems[toBeRemovedIndex][getPrefixedAttribute('ProductId__r')]['Id'];
	                        vm.priceListItems.splice(toBeRemovedIndex, 1);
	                        toBeRemovedPricelistItemId = '';
	                        toBeRemovedIndex = '';
	                        updateUniqueProductIds('remove', productId);
	                        disableProducts();
	                    }
	                }, function(reason) {
	                    toBeRemovedPricelistId = '';
	                    toBeRemovedIndex = '';
	                    vm.confiramtionPopup = false;
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        vm.confirmRemove = function() {
	
	            vm.confiramtionPopup = false;
	            var removedPriceList;
	            if (toBeRemovedPricelistItemId) {
	                removePLI(toBeRemovedPricelistItemId);
	            } else {
	                toBeRemovedPricelistItemId = '';
	                var productId = vm.priceListItems[toBeRemovedIndex][getPrefixedAttribute('ProductId__r')]['Id'];
	                vm.priceListItems.splice(toBeRemovedIndex, 1);
	                toBeRemovedIndex = '';
	                updateUniqueProductIds('remove', productId);
	                disableProducts();
	            }
	        };
	
	        function getPLISequence(product) {
	            var sequence = 0,
	                nextSequence = 1,
	                sequenceArr = [];
	            for (var i = 0; i < vm.priceListItems.length; i++) {
	                if (vm.priceListItems[i][getPrefixedAttribute('ProductId__c')] === product.Id) {
	                    var eachSequence = vm.priceListItems[i][getPrefixedAttribute('Sequence__c')] || '';
	                    eachSequence = +eachSequence;
	                    if (sequenceArr.indexOf(eachSequence) <= -1) {
	                        sequenceArr.push(eachSequence);
	                    }
	                }
	            }
	            if (sequenceArr.length > 0) {
	                sequence = Math.max.apply(Math, sequenceArr);;
	                if (sequence) {
	                    nextSequence = sequence + 1;
	                }
	            }
	            return nextSequence;
	        }
	        vm.addSubItem = function(index, product) {
	            isDirty = true;
	            var template = angular.copy(_sampleTemplate);
	            template[getPrefixedAttribute('ProductId__r')]['Name'] = product.Name;
	            template[getPrefixedAttribute('ProductId__r')]['Id'] = product.Id;
	
	            template['showPriceList'] = false;
	            /* Get the PLI count with same product*/
	            var sequence = getPLISequence(product);
	            template[getPrefixedAttribute('Sequence__c')] = sequence;
	            vm.priceListItems.splice((index + 1), 0, template);
	            savePage();
	        };
	
	        function loadPriceLists() {
	            priceListItemsService.getAssociatedPriceListItems($stateParams.id, '', centerPageNumber)
	                .then(function(response) {
	                    vm.priceListItems = [];
	                    vm.priceListItems = response;
	                    updateCenterPaginationcomponent();
	                    disableProducts();
	                });
	        }
	
	        vm.getAssociatedPriceListItem = function(type) {
	            /* Save and then load the next / previous items */
	            if (type === 'next') {
	                centerPageNumber++;
	                loadPriceLists();
	            } else {
	                centerPageNumber--;
	                loadPriceLists();
	            }
	        };
	
	        /* Save functionality */
	        var isFormSaved = false;
	
	
	        function isPriceTypeRelationshipNotDefined() {
	            var notMaintained = false,
	                indices = [];
	            for (var item = 0; item < vm.priceListItems.length; item++) {
	                /* Find what is the price type and frequence type for each record*/
	                var priceType = vm.priceListItems[item][vm.prefix + 'PriceType__c'],
	                    frequenceType = vm.priceListItems[item][vm.prefix + 'Frequency__c'];
	                /* Check if price type is 'Recurring', then there should be a frequency value. Else error*/
	                if ((priceType === vm.labels.Recurring || priceType === vm.labels.Usage) && !frequenceType) {
	                    notMaintained = true;
	                    indices.push(item + 1);
	                }
	            }
	            return {
	                notMaintained: notMaintained,
	                indices: indices
	            };
	        }
	
	        function getFinalPricingItems(data, action) {
	            var newList = [];
	            for (var item = 0; item < data.length; item++) {
	                if (action == 'add' && data[item].Id === '') {
	                    newList.push(data[item]);
	                } else if (action == 'edit' && data[item].Id !== '') {
	                    newList.push(data[item]);
	                }
	            }
	            return newList;
	        }
	
	        var isFormSaved = false,
	            addAPIStatus, updateAPIStatus, editedState,
	            stateInfo = {
	                to: '',
	                param: '',
	                event: ''
	            };
	        /**
	         * - When all API calls respond back with success as true, this method gets called
	         */
	        function processSuccessState() {
	            editedState = '';
	            isFormSaved = true;
	            if (stateInfo.to) {
	                $state.go(stateInfo.to, stateInfo.param);
	            } else {
	                addAlert(vm.labels.SaveSuccess, 'success');
	            }
	            /* Get all data once again after update / create new */
	            loadPriceLists();
	        };
	
	        /**
	         * - When any API calls respond back with success as false, this method gets called
	         */
	        function processErrorState() {
	            editedState = '';
	            addAlert(vm.labels.SaveError, 'error');
	            if (stateInfo.event) {
	                stateInfo.event.preventDefault();
	            }
	        }
	
	        /**
	         * - Helper method to execute success or error state processor
	         */
	        function updateAPICallStatus() {
	            if (editedState === 'both') {
	                if (addAPIStatus === true && updateAPIStatus === true) {
	                    processSuccessState();
	                }
	            } else if (editedState === 'addState') {
	                if (addAPIStatus === true) {
	                    processSuccessState();
	                } else if (addAPIStatus === false) {
	                    processErrorState();
	                }
	
	            } else if (editedState === 'updateState') {
	                if (updateAPIStatus === true) {
	                    processSuccessState();
	                } else if (updateAPIStatus === false) {
	                    processErrorState();
	                }
	            }
	        }
	
	        /* 
	         * Utility method to add error CSS class to data model objects of they fail to comply with below
	         * 2 conditions.
	         * - For existing price list item, charge can't be empty
	         * - Frequency can't be empty for Price type as 'One Time'
	         **/
	        function updateErrorAttribute(indexArr) {
	            if (indexArr) {
	                for (var i = 0; i < indexArr.length; i++) {
	                    var index = indexArr[i];
	                    vm.priceListItems[index - 1].hasError = true;
	                }
	            }
	        }
	
	        function isChargeTypeBlankForEdit() {
	            var notMaintained = false,
	                indices = [];
	            for (var i = 0; i < vm.priceListItems.length; i++) {
	                var chargeType = vm.priceListItems[i][vm.prefix + 'ChargeType__c'];
	
	                if (chargeType === '' || chargeType === undefined) {
	                    notMaintained = true;
	                    indices.push(i + 1);
	                }
	            }
	            return {
	                notMaintained: notMaintained,
	                indices: indices
	            };
	        }
	        /*
	         * Save method prepares the final payload.
	         * Checks the pricing item with price list values.
	         * Makes service save call.
	         */
	        function savePage(e, toState, toParams) {
	            //Find out if there is any item without a selected priceList.
	            if (isChargeTypeBlankForEdit().notMaintained) {
	                var indices = isChargeTypeBlankForEdit().indices;
	                indices.length > 0 ? updateErrorAttribute(indices) : angular.noop();
	                addAlert(vm.labels.NoChargeType + ' : ' + indices.join(','), 'danger');
	
	            } else if (isPriceTypeRelationshipNotDefined().notMaintained) {
	                var indices = isPriceTypeRelationshipNotDefined().indices;
	                indices.length > 0 ? updateErrorAttribute(indices) : angular.noop();
	                addAlert(vm.labels.NoFrequency + ' : ' + indices.join(','), 'danger');
	
	            } else {
	                var payload = angular.copy(vm.priceListItems);
	
	                var newlyAddedPriceListItems = getFinalPricingItems(payload, 'add');
	                var updatedPriceListItems = getFinalPricingItems(payload, 'edit');
	                if (newlyAddedPriceListItems.length > 0 && updatedPriceListItems.length > 0) {
	                    editedState = 'both';
	                }
	                if (newlyAddedPriceListItems && newlyAddedPriceListItems.length > 0) {
	                    editedState = (editedState === 'both' ? 'both' : 'addState');
	                    priceListItemsService.createPriceListItems(newlyAddedPriceListItems)
	                        .then(function(res) {
	                            stateInfo = {
	                                to: toState,
	                                param: toParams
	                            };
	                            addAPIStatus = true;
	                            updateAPICallStatus();
	                        }, function(reason) {
	                            stateInfo = {
	                                to: toState,
	                                param: toParams,
	                                event: e
	                            };
	                            addAPIStatus = false;
	                            updateAPICallStatus();
	                        });
	                }
	
	                if (updatedPriceListItems && updatedPriceListItems.length > 0) {
	                    editedState = (editedState === 'both' ? 'both' : 'updateState');
	                    priceListItemsService.updatePriceListItems($stateParams.id, updatedPriceListItems)
	                        .then(function(res) {
	                            stateInfo = {
	                                to: toState,
	                                param: toParams
	                            };
	                            updateAPIStatus = true;
	                            updateAPICallStatus();
	                        }, function(reason) {
	                            stateInfo = {
	                                to: toState,
	                                param: toParams,
	                                event: e
	                            };
	                            updateAPIStatus = false;
	                            updateAPICallStatus();
	                        });
	                }
	            }
	        };
	        /**
	         * When user clicks on the 'Save Product' button, an event named 'explicitPageSave' gets broadcasted.
	         * A page has to listen to that event and do the page specific save functionality.
	         */
	        vm.explicitPageSave = function() {
	            if ((vm.priceListItems.length > 0) && (isDirty || vm.pricingForm.$dirty)) {
	                savePage();
	            }
	        };
	
	        /**
	         * When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed incase of errors in saving the page.
	         *
	         * If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	
	            if (toState.name === 'app.priceList.list') {
	                return true;
	            } else if (isFormSaved) {
	                // Update the 'new' state with updated record id.
	                // TODO : update toParams to new record id created
	                return true;
	            } else {
	                if ((vm.priceListItems.length > 0) && (isDirty || vm.pricingForm.$dirty)) {
	                    e.preventDefault();
	                    savePage(e, toState, toParams);
	                } else {
	                    return true;
	                }
	            }
	
	        });
	        vm.goToPriceListItem = function(pliId) {
	            $state.go('app.priceListItem.details', {
	                'id': pliId
	            });
	        };
	
	        vm.getPLIAdvancedPageUrl = function(id) {
	            var absUrl = $location.absUrl(),
	                existingPath = '/priceList/' + $stateParams.id + '/pricelistitems',
	                toBeUpdatedPath = '/priceListItem/' + id + '/details';
	            return absUrl.replace(existingPath, toBeUpdatedPath);
	        };
	        vm.getProductPageUrl = function(id) {
	            var absUrl = $location.absUrl(),
	                existingPath = '/priceList/' + $stateParams.id + '/pricelistitems',
	                toBeUpdatedPath = '/product/' + id + '/details';
	            return absUrl.replace(existingPath, toBeUpdatedPath);
	        };
	
	        vm.openChargeTypeCriteriaPopup = function(index, pli) {
	            $mdDialog.show({
	                controller: __webpack_require__(424),
	                template: __webpack_require__(425),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	                    selectedPli: function() {
	                        return { PriceListItemSO: pli };
	                    }
	                }
	            }).then(function(response) {
	                /* Update the PLI here */
	                isDirty = true;
	                vm.priceListItems[index] = response.pli.PriceListItemSO;
	            });
	        };
	
	    };
	
	    pricelistItemsController.$inject = [
	        '$q',
	        '$location',
	        '$filter',
	        '$scope',
	        '$state',
	        '$timeout',
	        '$mdDialog',
	        '$stateParams',
	        '$templateCache',
	        'i18nService',
	        'systemConstants',
	        'allProducts',
	        'applicationService',
	        'priceListCommonService',
	        'priceListConstants',
	        'priceListItemsService',
	        'priceListMetaData',
	        'associatedPriceListItems'
	    ];
	
	    module.exports = pricelistItemsController;
	
	})();


/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceList.categoryAssociation', [])
	        .service('categoryAssociationService', __webpack_require__(591))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceList.categoryAssociation', {
	                parent: 'app.priceList',
	                url: '/:id/categoryAssociation',
	                views: {
	                    'priceListContainer': {
	                        template: __webpack_require__(592),
	                        controller: __webpack_require__(593),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    allCategories: ['categoryAssociationService', function(categoryAssociationService) {
	                        return categoryAssociationService.getAllCategories({});
	                    }],
	                    categoriesAssociatedToPriceList: ['categoryAssociationService', '$stateParams', function(categoryAssociationService, $stateParams) {
	                        return categoryAssociationService.getCategoriesAssociatedToPriceList({priceListId: $stateParams.id});
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 591 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var categoryAssociationService = function($q, remoteService, systemConstants, priceListConstants) {
	        var prefix = systemConstants.nsPrefix || '';
	
	        function getAllCategories(requestObject) {
	            var requestObject = {
	                SearchString: requestObject.SearchString || "",
	                NumberOfCategoriesPerChunk: requestObject.NumberOfCategoriesPerChunk || priceListConstants.numberOfProductsPerChunk,
	                ChunkNumber: requestObject.ChunkNumber || 1,
	                PriceListId: null,
	                IsCategoryHierarchyRetrieval: true,
	                SortField: "Name",
	                Types: [ "Offering", "Both" ],
	                SortDirection: "ASC"
	            };
	            return remoteService.getAllCategories(requestObject);
	        }
	
	        function getCategoriesAssociatedToPriceList(requestObject) {
	            var requestObject = {
	              PriceListId: requestObject.priceListId,
	              SearchString: "",
	              ChunkNumber: requestObject.ChunkNumber || 1,
	              NumberOfCategoriesPerChunk: requestObject.NumberOfCategoriesPerChunk || priceListConstants.numberOfProductsPerChunk
	            };
	            return remoteService.getCategoriesAssociatedToPriceList(requestObject);
	        }
	
	        function associateCategory(cId, pId) {
	            return remoteService.associateCategoryToPriceList(cId, pId);
	        }
	
	        function removeCategory(cId, pId) {
	            return remoteService.removeCategoryFromPriceList(cId, pId);
	        }
	
	        var service = {
	            getAllCategories: getAllCategories,
	            getCategoriesAssociatedToPriceList: getCategoriesAssociatedToPriceList,
	            associateCategory: associateCategory,
	            removeCategory: removeCategory
	        };
	
	        return service;
	    };
	
	    categoryAssociationService.$inject = [
	        '$q',
	        'remoteService',
	        'systemConstants',
	        'priceListConstants'
	    ];
	
	    module.exports = categoryAssociationService;
	})();


/***/ }),
/* 592 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <!-- Angular UI-Bootsrap alert module -->\n    <div class=\"asscoiated-PriceList\">\n        <div class=\"left-tree tree-view left-panel\" class=\"setWithCent\" resizable r-directions=\"[ 'right']\" r-flex=\"true\">\n            <header>\n                <h4>{{vm.labels.AllCategories}}</h4>\n                <div class=\"search\">\n                    <form ng-submit=\"vm.searchCategory(null, vm.searchText, 1)\" novalidate>\n                        <div class=\"search-input-container\">\n                            <div class=\"input-group\">\n                                <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required drop-disable/>\n                                <label class=\"ng-binding\">Search</label>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </header>\n            <div class=\"list-other-Panel list-table\">\n                <!-- price lists -->\n                <div class=\"associated-price-list\">\n                    <table>\n                        <tbody class=\"list\">\n                            <tr data-ng-repeat=\"list in vm.allCategories track by list.Id\" ng-click=\"vm.onListClick($index, 'activeList')\" \n                                ng-class=\"{'activeList': $index == vm.activeList, 'drag-disabled': list.dragDisable, 'selected': list.selected, 'disableColor':list.dragDisable }\" dnd-draggable=\"vm.getSelectedItemsToDrag(vm.allCategories, list)\" \n                                dnd-droppable-in=\".dropzone\" dnd-effect-allowed=\"copy\" dnd-disable-if=\"list.dragDisable\" dnd-selected=\"list.selected = !list.selected\">\n                                <td>\n                                    {{ list[vm.prefix + 'HierarchyId__r'].Name }}\n                                </td>\n                            </tr>\n                            <tr data-ng-if=\"vm.allCategories.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                                <td>\n                                    {{vm.labels.NoMatchingCategories}} <span><b>{{vm.searchedStr}}</b></span>\n                                </td>\n                            </tr>\n                            <tr data-ng-if=\"vm.priceLists.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                                <td>\n                                    {{vm.labels.MaxSQLSizeExceedMessage}}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <div class=\"pagination pagination-container text-center pagination-block\">\n                    <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                        <div class=\"place product-details-list-place\">\n                            {{vm.paginationLeftText}}\n                        </div>\n                        <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getCategories('previous')\">\n                            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n                        </button>\n                        <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getCategories('next')\">\n                            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <!-- Tree container directive -->\n        <div class=\"assigned-PriceList\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"2000\">{{alert.msg}}</uib-alert>\n            <!-- Table header start here -->\n            <div class=\"page-title\">\n                <div class=\"image-action\">{{vm.labels.Action}}</div>\n                <div class=\"product-heirarchy\">{{vm.labels.Name}}</div>\n                <div class=\"product-heirarchy\">{{vm.labels.Type}}</div>\n                <div class=\"product-heirarchy\">{{vm.labels.Active}}</div>\n            </div>\n            <!-- Table header ends here -->\n            <div class=\"dnd-container \">\n                <ul dnd-list=\"vm.finalData\" dnd-drop=\"vm.addAssociateCategory(event, index, item)\">\n                    <li ng-repeat=\"item in vm.finalData\" dnd-moved=\"vm.finalData.splice($index, 1)\" dnd-selected=\"vm.finalData.selected=item\" ng-class=\"{ 'selected': vm.finalData.selected===item}\">\n                        <!-- Each breadcrumb design starts here -->\n                        <div class=\"category-breadcrumb-list\">\n                            <div class=\"image-action\">\n                                <i class=\"material-icons close-icon\" data-ng-click=\"vm.removeCategory($index, item)\">clear</i>\n                            </div>\n                            <div class=\"product-heirarchy\">\n                                <span>{{item.Name}}</span>\n                            </div>\n                            <div class=\"product-heirarchy\">\n                                {{item[vm.prefix + 'Type__c']}}\n                            </div>\n                            <div class=\"product-heirarchy\">\n                                <span ng-bind-html=\"vm.getFormattedContent(item)\"></span>\n                                <!-- {{item.Active__c}} -->\n                            </div>\n                        </div>\n                        <!-- Each breadcrumb design ends here -->\n                    </li>\n                </ul>\n            </div>\n            <div class=\"pagination-container text-center pagination-block \" data-ng-if=\"vm.finalData.length> 0\">\n                <div class=\"navigation-control\" role=\"group\" aria-label=\"...\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableAssociatedLeftBtn\" data-ng-click=\"vm.getAssociatedCategory('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                    <span>{{vm.paginationMiddleText}}</span>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableAssociatedRightBtn\" data-ng-click=\"vm.getAssociatedCategory('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                    </button>\n                </div>\n            </div>\n            <div class=\"catalog-aspl-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">Save</a>\n                </div>\n            </div>\n            <a data-ui-sref=\"app.product.associations({'id': vm.$stateParams.productId })\" class=\"toast\" data-ng-if=\"vm.$stateParams.productId\">Go Back to \"{{vm.$stateParams.productName}}\"</a>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 593 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var categoryAssociation = function($scope, $state, $stateParams, allCategories,
	        categoryAssociationService, systemConstants, i18nService, cpqAdminConstants, priceListConstants,applicationService,categoriesAssociatedToPriceList, priceListCommonService, priceListItemsService, $q) {
	
	        var vm = this,
	            isFormSaved = false,
	            selectedImageIndex = 0,
	            currentlySelectedProduct,
	            leftPagerNumber = 1,
	            middlePagerNumber = 1,
	            chunkNoForCategories = priceListConstants.numberOfProductsPerChunk;
	            
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.pageNumber = 0;
	        vm.pageAssociatedNumber = 0;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = false;
	        vm.disableAssociatedLeftBtn = true;
	        vm.disableAssociatedRightBtn = false;
	        var pageNumber = 1;
	        var pageAssociatedNumber = 1;
	        vm.allCategories = allCategories.CategoryHierarchySOs;
	        traverseData(categoriesAssociatedToPriceList.CategorySOs);
	        disableLeafNodeAfterChunk();
	        var selectedPl = priceListCommonService.getSelectedPL();
	
	        function getPriceListDetails(plId) {
	            var defer = $q.defer();
	            priceListItemsService.getPriceListDetails(plId)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	
	            return defer.promise;
	        }
	
	        if (Object.keys(selectedPl).length === 0) {
	            getPriceListDetails($stateParams.id)
	                .then(function(response) {
	                    priceListCommonService.setSelectedPL(response);
	                }, function(reason) {});
	        }
	
	        function traverseData(array) {
	            vm.finalData = [];
	            for (var i = 0; i < array.length; i++) {
	                if(array[i][vm.prefix + 'Type__c'] === 'Both') {
	                    array[i][vm.prefix + 'Type__c'] = vm.labels.OfferingAndOptionGroup;
	                } 
	                vm.finalData.push(array[i]);
	            }
	            if (vm.finalData.length >= chunkNoForCategories) {
	                vm.disableAssociatedRightBtn = false;
	            } else {
	                vm.disableAssociatedRightBtn = true;
	            }
	            updatePaginationComponent(middlePagerNumber,vm.finalData,1); //Pagination for middle
	        };
	
	        /**
	         * Disable the Leaf node which are associated to category  after new data will come
	         */
	
	        function disableLeafNodeAfterChunk() {
	            if (vm.finalData) {
	                for (var j = 0; j < vm.finalData.length; j++) {
	                    var newItem = vm.finalData[j];
	                    disableAssociatedNode(newItem);
	                }
	            }
	        }
	
	        /******
	        * Search Categories
	        **/
	        vm.searchCategory = function(e, searchText, pageNumber) {
	            leftPagerNumber = pageNumber;
	            getAllCategoriesList(null, searchText, pageNumber);
	        };
	        /**
	         * Get All Categories Based on Chunk
	         */
	
	        function getAllCategoriesList(e, searchText, pageNo) {
	            pageNumber = pageNo;
	            var requestObject = {
	                ChunkNumber: pageNumber,
	                NumberOfCategoriesPerChunk: chunkNoForCategories,
	                SearchString: vm.searchText || ''
	            };
	            categoryAssociationService.getAllCategories(requestObject)
	                .then(function(response) {
	                    vm.allCategories = response.CategoryHierarchySOs;
	                    updatePaginationComponent(leftPagerNumber,vm.allCategories,0);
	                    vm.isMaxSQLSizeExceed = false;
	                    var responseLength = vm.allCategories.length;
	                    if (vm.finalData) {
	                        for (var j = 0; j < vm.finalData.length; j++) {
	                            var newItem = vm.finalData[j];
	                            disableAssociatedNode(newItem);
	                        }
	                        if (pageNumber === 1) {
	                            vm.disableLeftBtn = true;
	                        }
	                        if (responseLength < chunkNoForCategories) {
	                            vm.disableRightBtn = true;
	                        } else {
	                            vm.disableRightBtn = false;
	                        }
	                        if (responseLength === 0) {
	                            vm.searchedStr = vm.searchText;
	                        }
	                    }
	                    document.querySelector('.associated-price-list').scrollTop = 0;
	                    vm.selectedNodes = [];//To clear selected nodes from left panel
	                }, function(reason) {
	                    /* 
	                     * - If exception is of type 'Maximum SOQL offset allowed is 2000', then show a message to
	                     * user 'Please refine your search criteria to find your product'.
	                     * - Else show the exception message to the user as it is.
	                     */
	                    if (reason.message === vm.labels.MaxSQLSizeExceed) {
	                        vm.allCategories = [];
	                        vm.isMaxSQLSizeExceed = true;
	                    } else {
	                        applicationService.showErrorMessage(reason);
	                    }
	                    vm.disableRightBtn = true;
	
	                });
	        };
	
	        /*Next & Previous Button Change Click*/
	        vm.getCategories = function(type) {
	            if (type === 'next') {
	                ++leftPagerNumber;
	                vm.disableLeftBtn = false;
	            } else {
	                --leftPagerNumber;
	                if (leftPagerNumber === 1) {
	                    vm.disableLeftBtn = true;
	                }
	            }
	            getAllCategoriesList(null, null, leftPagerNumber);
	        };
	
	        vm.getFormattedContent = function(item) {
	            var modifiedValue = '';
	            var isActive = (item[vm.prefix + 'Active__c'] !== undefined) ? item[vm.prefix + 'Active__c'] : item[vm.prefix + 'HierarchyId__r'][vm.prefix + 'Active__c'];
	            if (isActive) {
	                modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	            } else {
	                modifiedValue = "<i class='material-icons show'>check_circle</i>";
	            }
	            return modifiedValue;
	        };
	
	        /**
	         *  Add Associated Category to Price List on Leaf drop in Middle Container
	         */
	        vm.addAssociateCategory = function (e, index, items) {
	            isFormSaved = true;
	            for (var i = 0; i < items.length; i++) {
	                (function (j) { 
	                        var ClassificationName = items[j][vm.prefix + 'HierarchyId__c'];
	                        categoryAssociationService.associateCategory(ClassificationName, $stateParams.id)
	                            .then(function (response) {
	                                var categoryType = (items[j][vm.prefix + 'HierarchyId__r'][vm.prefix + 'Type__c'] === 'Both') ? vm.labels.OfferingAndOptionGroup : items[j][vm.prefix + 'HierarchyId__r'][vm.prefix + 'Type__c'];
	                                items[j][vm.prefix + 'Type__c'] = categoryType;
	                                vm.finalData.splice(index, 0, items[j]);
	                                index++;
	                                // add the dragDisable attri after drag completeted
	                                disableAssociatedNode(items[j]);
	                            }, function (reason) {
	                                applicationService.showErrorMessage(reason);
	                        });
	                })(i);
	            }
	        };
	
	        /**
	         * Disable the leaf in the All Price List Panel if already associated
	         */
	        function disableAssociatedNode(item) {
	            var idVar = (item[vm.prefix + 'HierarchyId__r']) ? item[vm.prefix + 'HierarchyId__r'].Id : item.Id;
	            angular.forEach(vm.allCategories, function(childItem, childKey) {
	                if (idVar === childItem[vm.prefix + 'HierarchyId__r'].Id) {
	                    childItem.dragDisable = true;
	                    delete childItem['selected'];
	                }
	            });
	        };
	
	        vm.getSelectedItemsToDrag = function (list, item) {
	            item.selected = true;
	            return list.filter(function (item) { return item.selected; });
	        };
	
	        /**
	         * Remove price list associated to Category
	         */
	
	        vm.removeCategory = function(index, item) {
	            isFormSaved = true;
	            categoryAssociationService.removeCategory(item.Id, $stateParams.id)
	                .then(function(response) {
	                    // remove the dragDisable attri after remove completeted
	                    enableAssociatedNode(item);
	                    vm.finalData.splice(index, 1);
	                    //getAssociatedPriceList();
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        };
	
	        /**
	         * Enable the leaf in the All Price List Panel if not associated
	         */
	
	        function enableAssociatedNode(item) {
	            var idVar = (item[vm.prefix + 'HierarchyId__r']) ? item[vm.prefix + 'HierarchyId__r'].Id : item.Id;
	            angular.forEach(vm.allCategories, function(childItem, childKey) {
	                if (idVar === childItem[vm.prefix + 'HierarchyId__r'].Id) {
	                    childItem.dragDisable = false;
	                }
	            });
	        }
	
	        /*Next & Previous Button Change Click*/
	
	        vm.getAssociatedCategory = function(type) { 
	            if (type === 'next') {
	                vm.disableAssociatedLeftBtn = false;
	                ++middlePagerNumber;
	            } else {
	                --middlePagerNumber;
	                if(middlePagerNumber === 1) {
	                    vm.disableAssociatedLeftBtn = true;
	                }
	            }
	            getAssociatedCatalog();
	        };
	
	        function getAssociatedCatalog() {
	            categoryAssociationService.getCategoriesAssociatedToPriceList({
	                priceListId: $stateParams.id,
	                ChunkNumber: middlePagerNumber
	            }).then(function(response){
	                traverseData(response.CategorySOs);
	                disableLeafNodeAfterChunk();
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        function updatePaginationComponent(pageNo,data,location) {
	            var paging;
	            if (data.length < chunkNoForCategories && data.length !== 0) {
	                paging  = '(' + ((pageNo - 1) * chunkNoForCategories + 1) + '-' + ((pageNo - 1) * chunkNoForCategories + data.length) + ')';
	            } else if (data.length === 0) {
	                paging = '';
	            } else {
	                paging  = '(' + ((pageNo - 1) * chunkNoForCategories + 1) + '-' + (pageNo * chunkNoForCategories) + ')';
	            }
	            (location === 0) ? vm.paginationLeftText = paging : vm.paginationMiddleText = paging;
	        }
	
	        updatePaginationComponent(leftPagerNumber,vm.allCategories,0); //For left side pagination
	
	        vm.explicitPageSave = function() {
	            if(isFormSaved) {
	                addAlert(vm.labels.SavedSuccessfully, cpqAdminConstants.SUCCESS);
	                $state.go($state.current, {}, {reload: true});    
	            } 
	        };
	
	        vm.goToListPage = function() {
	            $state.go('app.priceList.list');
	        };
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	       
	    };
	
	    categoryAssociation.$inject = [
	        '$scope',
	        '$state',
	        '$stateParams',
	        'allCategories',
	        'categoryAssociationService',
	        'systemConstants',
	        'i18nService',
	        'cpqAdminConstants',
	        'priceListConstants',
	        'applicationService',
	        'categoriesAssociatedToPriceList',
	        'priceListCommonService',
	        'priceListItemsService',
	        '$q'
	    ];
	
	    module.exports = categoryAssociation;
	
	})();


/***/ }),
/* 594 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var pricelistController = function($state, $scope, $rootScope, i18nService, priceListCommonService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	
	
	        function findStateName(stateName) {
	            vm.stateCurrentName = stateName;
	        }
	        findStateName($state.current.name);
	
	        $scope.$on('$stateChangeSuccess', function(e, toState, toParams) {
	            findStateName(toState.name);
	            updateTabMenus();
	        });
	
	        /* Menu for specific Tabs */
	        vm.tabFirstMenu = '';
	        vm.tabMenuItems = [];
	
	        function updateTabMenus() {
	            var currentState = vm.stateCurrentName,
	                currentHash = currentState.split('app.priceList.')[1];
	            switch (currentHash) {
	                case 'details':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewPriceList;
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                case 'pricelistitems':
	                    {
	                        vm.tabFirstMenu = '';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	            }
	        }
	
	        vm.tabMenuClicked = function(menuName) {
	            var eventName = menuName.split(' ').join('-');
	            $scope.$broadcast(eventName);
	        };
	
	        vm.currentState = $state.current.name;
	
	        $scope.$watch(function() {
	            return priceListCommonService.getSelectedPL();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                vm.selectedPL = newValue;
	            }
	        }, true);
	    };
	
	    pricelistController.$inject = [
	        '$state',
	        '$scope',
	        '$rootScope',
	        'i18nService',
	        'priceListCommonService'
	    ];
	
	    module.exports = pricelistController;
	})();


/***/ }),
/* 595 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		var constants = {
			/*
			 * This object can be any level nested depending on modularity we want to achieve 
			 * - Either per page
			 * - Per standalone functionality
			 */
			'new': 'new',
			'update': 'update',
			'numberOfProductsPerChunk': 50,
			'treePanelItemsPerChunk': 25
			
		};
	
		module.exports = constants;
	
	})();

/***/ }),
/* 596 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"mainPriceListContent\">\n    <div class=\"pricelist-main-Container\">\n        <div class=\"pricelist-header title-bar\">\n            <div class=\"pricelist-title-container title\">\n                <div class=\"pricelist-info\">\n                    <span class=\"title\">{{vm.selectedPL.name}}</span>\n                </div>\n            </div>\n            <div id=\"navbar\">\n                <price-list-sub-menu></price-list-sub-menu>\n                <!-- Product menu bar with its values -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"list-product-btn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabFirstMenu)\" data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                        <div class=\"drop drop-menu\" data-ng-if=\"::vm.tabMenuItems.length > 0\">\n                            <md-menu md-offset=\"50 50\">\n                                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                    <i class=\"material-icons\">more_vert</i>\n                                </button>\n                                <md-menu-content width=\"2\">\n                                    <md-menu-item data-ng-repeat=\"menu in ::vm.tabMenuItems\">\n                                        <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                            <div layout=\"row\" flex>\n                                                <p flex>{{::menu}}</p>\n                                            </div>\n                                        </md-button>\n                                    </md-menu-item>\n                                </md-menu-content>\n                            </md-menu>\n                        </div>\n                    </div>\n                </ul>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"pricelistCenterContainer\">\n            <!-- Content layout starts -->\n            <div ui-view=\"priceListContainer\" class=\"pricelistContainer\"></div>\n            <!-- Content layout ends -->\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    __webpack_require__(598);
	    __webpack_require__(604);
	    __webpack_require__(606);
	    //require('./chargeTypeCriteria/chargeTypeCriteria.module.js');
	    __webpack_require__(610);
	    __webpack_require__(622);
	    __webpack_require__(625);
	    __webpack_require__(629);
	    __webpack_require__(633);
	    __webpack_require__(637);
	
	    module.exports = angular.module('cpqAdmin.priceListItem', [
	
	            'cpqAdmin.priceListItem.common.services',
	            'cpqAdmin.priceListItem.common.directives',
	            'cpqAdmin.priceListItem.details',
	           // 'cpqAdmin.priceListItem.chargetypecriteria',
	            'cpqAdmin.priceListItem.matrices',
	            'cpqAdmin.priceListItem.miscellaneous',
	            'cpqAdmin.priceListItem.taxbilling',
	            'cpqAdmin.priceListItem.financerevenue',
	            'cpqAdmin.priceListItem.defaults',
	            'cpqAdmin.priceListItem.options'
	        ])
	        .controller('priceListItemController', __webpack_require__(641))
	        .constant('priceListItemConstants', __webpack_require__(642))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceListItem', {
	                url: '/priceListItem',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(643),
	                        controller: 'priceListItemController',
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceListItem.common.directives', ['cpqAdmin.priceListItem.common.services'])
	        .directive('priceListItemSubMenu', __webpack_require__(599))
	        .directive('priceListItemTreeContainer', __webpack_require__(601));
	})();


/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var priceListItemSubMenuController = function($stateParams, systemConstants, i18nService) {
	        var vm = this;
	
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	
	    };
	
	    priceListItemSubMenuController.$inject = [
	        '$stateParams',
	        'systemConstants',
	        'i18nService'
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: priceListItemSubMenuController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(600),
	    };
	};


/***/ }),
/* 600 */
/***/ (function(module, exports) {

	module.exports = "<ul class=\"nav navbar-nav price-list-group\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceListItem.details({id:vm.$stateParams.id})\">{{vm.labels.Details}}</a>\n    </li>\n    <!-- <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceListItem.chargetypecriteria({id:vm.$stateParams.id})\">CHARGE TYPE CRITERIA</a>\n    </li> -->\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceListItem.options({id:vm.$stateParams.id})\">{{vm.labels.Options}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceListItem.matrices({id:vm.$stateParams.id})\">{{vm.labels.Matrices}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceListItem.defaults({id:vm.$stateParams.id})\">{{vm.labels.Defaults}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceListItem.taxbilling({id:vm.$stateParams.id})\">{{vm.labels.TaxAndBilling}} </a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceListItem.financerevenue({id:vm.$stateParams.id})\">{{vm.labels.FinanceAndRevenue}} </a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceListItem.miscellaneous({id:vm.$stateParams.id})\">{{vm.labels.Miscellaneous}}</a>\n    </li>\n</ul>"

/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = [
	
	        function() {
	            var treeContainerController = function($state, $scope, $templateCache, _, systemConstants, priceListConstants, NgTableParams, applicationService, $stateParams, priceListItemCommonService) {
	                var vm = this,
	                    isPageChanged = false;
	                vm.totalRecords = 0;
	                vm.currentPage = 1;
	                vm.pageSize = priceListConstants.treePanelItemsPerChunk;
	                vm.prefix = systemConstants.nsPrefix || '';
	                vm.showPagination = true;
	                vm.$stateParams = $stateParams;
	                vm.expandedNodes = [];
	                //Show / hide the search component in primary view
	                vm.toggleSearch = function() {
	                    vm.searchText = '';
	                    if (vm.pageType == 'categories') {
	                        vm.searchTree(1);
	                    } else {
	                        var searchBar = document.querySelector('.main-treeview .search-leaf');
	                        angular.element(searchBar).toggleClass('hidden');
	                        if (angular.element(searchBar).hasClass('hidden')) {
	                            vm.searchTree(1);
	                        }
	                    }
	                };
	                //Show / hide the search component in secondary view
	                vm.toggleInnerSearch = function() {
	                    var searchBar = document.querySelector('.sub-treeview .search-leaf');
	                    angular.element(searchBar).toggleClass('hidden');
	                };
	
	                vm.setWidthCent = true;
	
	                vm.slideTreePanelToHide = function() {
	                    vm.expandCollapse()();
	                };
	                //Shows primary panel by default 
	                vm.showPrimaryPanel = true;
	
	                // Calls search method of the parent controller, who is using this directive
	                vm.searchTree = function(pageNo) {
	                    isPageChanged = true;
	                    vm.currentPage = pageNo || 1;
	                    if (vm.pageType === 'pli') {
	                        vm.search()(vm.searchText, vm.currentPage || 1);
	                    } else {
	                        vm.search()(vm.searchText, vm.currentPage || 1);
	                    }
	
	                };
	
	                switch (vm.pageType) {
	                    case 'pli':
	                        $templateCache.put('template.html', __webpack_require__(602));
	                        break;
	                    default:
	                        $templateCache.put('template.html', __webpack_require__(602));
	                        break;
	                }
	                vm.treeOptions = {
	                    nodeChildren: vm.nodeChildren,
	                    choosable: vm.isChoosable || false,
	                    dirSelectable: true,
	                    injectClasses: {
	                        ul: 'a1 ' + vm.pageType + '-list',
	                        li: 'a2',
	                        liSelected: 'a7',
	                        iExpanded: 'a3 fa fa-caret-down',
	                        iCollapsed: 'a4 fa fa-caret-right',
	                        iLeaf: 'a5',
	                        label: 'a6',
	                        labelSelected: 'a8'
	                    },
	                    templateUrl: 'template.html',
	                    //Executes when a node is double clicked in tree component
	                    nodeDblClicked: function(node) {
	                        vm.selectedNode = node;
	                        if (vm.enableDetailPanel) {
	                            vm.getNodeDetails()(node.ClsHierarchySO.Id).then(function(result) {
	                                    if (result) {
	                                        vm.tableParams = new NgTableParams({
	                                            count: 10,
	                                            paginationMaxBlocks: 3,
	                                            paginationMinBlocks: 2,
	                                            filter: {
	                                                Name: ''
	                                            }
	                                        }, {
	                                            dataset: result,
	                                            counts: []
	                                        });
	                                    }
	                                },
	                                function(reason) {
	                                    applicationService.showErrorMessage(reason);
	                                });
	                            vm.showPrimaryPanel = false;
	                        }
	                        vm.setWidthCent = false;
	                    },
	                    isSelectable: function(node) {
	                        if (vm.pageType === 'pli') {
	                            return node.children.length;
	                        } else {
	                            return node.isSelected !== true;
	                        }
	                    },
	                    getHierarchy: function(node) {
	                        if (node.nodeType == undefined && (node[vm.nodeChildren] == undefined || angular.equals(node[vm.nodeChildren][0], {}))) {
	                            vm.getProductStructure(node);
	                        }
	                    },
	                    prefix: vm.prefix
	                };
	
	                function expandAll(array) {
	                    _.each(array, function(node) {
	                        if (node[vm.nodeChildren] && node[vm.nodeChildren].length > 0) {
	                            if (vm.expandedNodes.indexOf(node) === -1) {
	                                vm.expandedNodes.push(node);
	                            }
	                            expandAll(node[vm.nodeChildren]);
	                        }
	                    });
	                }
	
	                //Expand / Collapse tree nodes
	                vm.isExpand = false;
	                vm.expandCollpaseTree = function(isExpand) {
	                    if (isExpand) {
	                        expandAll(vm.data);
	                    } else {
	                        vm.expandedNodes = [];
	                    }
	                };
	
	                vm.dragoverCallback = function() {
	                    return false;
	                };
	
	                function searchCallback() {
	                    if (vm.data.length < vm.pageSize) {
	                        vm.totalRecords = vm.currentPage * vm.pageSize;
	                    } else if (vm.data.length >= vm.pageSize) {
	                        if (vm.totalRecords < vm.currentPage * vm.pageSize + 1)
	                            vm.totalRecords = vm.currentPage * vm.pageSize + 1;
	                        else
	                            vm.totalRecords = vm.currentPage * vm.pageSize;
	                    } else if (vm.data.length == 0) {
	                        vm.currentPage--;
	                        vm.totalRecords = vm.currentPage * vm.pageSize;
	                        vm.search()(null, vm.searchText, vm.currentPage || 1);
	                    }
	                }
	
	                // Search for secondary view in detail view
	                vm.searchItemInDetailView = function() {
	                    vm.search()(vm.innerSearchText, vm.selectedNode);
	                };
	
	                vm.pageChanged = function() {
	                    console.log('Page changed to: ' + vm.currentPage);
	                    vm.search()(vm.searchText, vm.currentPage || 1);
	                };
	
	                $scope.$watch('vm.data', function(newValue, oldValue) {
	                    if (newValue && newValue !== oldValue) {
	                        if (isPageChanged) {
	                            searchCallback();
	                            isPageChanged = false;
	                        } else {
	                            searchCallback();
	                            isPageChanged = false;
	                        }
	                    }
	                });
	
	                // // Get Selected Node
	                vm.showSelected = function(node) {
	                    if (vm.pageType === 'pli') {
	                        /* TODO ; set it in a service.*/
	                        if (node.children.length) {
	                            vm.selectedNode = node;
	                            priceListItemCommonService.setProductOptionNodeSelected(angular.copy(node));
	                        }
	                    }
	                };
	                vm.expandCollpaseTree(true);
	            };
	            treeContainerController.$inject = [
	                '$state',
	                '$scope',
	                '$templateCache',
	                'lodash',
	                'systemConstants',
	                'priceListConstants',
	                'NgTableParams',
	                'applicationService',
	                '$stateParams',
	                'priceListItemCommonService'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {
	                    onTreeNodeLabelClick: '&'
	                },
	                controller: treeContainerController,
	                controllerAs: 'vm',
	                bindToController: {
	                    //To show the text as header on the panel
	                    headerText: '=',
	                    //Data source for the tree component
	                    data: '=',
	                    //Specify which page is using this directive. Based on this right template will be loaded.
	                    pageType: '=',
	                    //Calls the method getNodeDetails of the parent controller, who is using this directive.
	                    getNodeDetails: '&',
	                    //Contains the list of details of the selected node
	                    detailOfSelectedNode: '=',
	                    //Invokes the search method of parent controller
	                    search: '&',
	                    //Keeps the dbl clicked node info
	                    selectedNode: '=',
	                    //Specifies whether a detail panel is needed or not.
	                    enableDetailPanel: '=',
	                    nodeChildren: '=',
	                    // Field to show as the visible label text
	                    nodeLabel: '=',
	                    // Field to show as the title text on hover
	                    tooltipField: '=',
	                    //Pass any other extra parameters with 'options', if needed
	                    options: '=',
	                    getProductStructure: '=',
	                    expandCollapse: '&',
	                    isChoosable: '=',
	                    searchText: '=',
	                    currentPage: '='
	                },
	                template: __webpack_require__(603),
	            };
	        }
	    ];
	
	})();


/***/ }),
/* 602 */
573,
/* 603 */
574,
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceListItem.common.services', [])
	        .service('priceListItemCommonService', __webpack_require__(605));
	        
	})();


/***/ }),
/* 605 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var priceListItemCommonServices = function($stateParams, systemConstants, remoteService, $q, productConstants, cpqAdminConstants, listService, applicationService, priceListItemConstants) {
	
	        var selectedPli = {},
	            prefix = systemConstants.nsPrefix || '',
	            selectedOptionNode,
	            metaData = [];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function getSelectedPLI() {
	            return selectedPli;
	        }
	
	        function setSelectedPLI(item) {
	            selectedPli = item;
	        }
	
	        function getInitials(str) {
	            var response = '';
	            if (str && str.length > 0) {
	                var words = str.split(' ');
	                for (var j = 0; j < words.length; j++) {
	                    response += words[j].charAt(0);
	                }
	            }
	            return response === '' ? str : response;
	        }
	
	        function getMetaData(pliId) {
	            if (metaData.length) {
	                return metaData;
	            } else {
	                return getPriceListItemDetails(pliId);
	            }
	        }
	
	        function setMetaData(items) {
	            metaData = items;
	        }
	
	        function getPriceListItemDetails(pliId) {
	            var defered = $q.defer(),
	                requestObj = [pliId];
	
	            remoteService.getPriceListItemDetails(requestObj)
	                .then(function(response) {
	                    setSelectedPLI(response[0]);
	                    setMetaData(response[0].FieldMetadata);
	                    defered.resolve(response[0]);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function truncateNames(obj) {
	            var sampleLabel, str;
	            if (obj && obj.length > 0) {
	                for (var i = 0; i < obj.length; i++) {
	                    var temp = obj[i].label,
	                        leftSide = temp.split(' : ')[0],
	                        rightSide = temp.split(' : ')[1];
	                    if (leftSide !== sampleLabel) {
	                        str = getInitials(leftSide);
	                        sampleLabel = leftSide;
	                    }
	                    //obj[i].label = str + ' : ' + rightSide;
	                    obj[i].label = rightSide;
	                }
	            }
	            return obj;
	        }
	
	        function searchTargetAttributesForLineItems(searchText) {
	            var deferQ = $q.defer();
	            remoteService.searchTargetAttributes(searchText)
	                .then(function(response) {
	                    deferQ.resolve(truncateNames(getItems(response, getPrefixedAttribute('LineItem__c'))));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function getMatchingPicklistValues(obj, searchText) {
	            var response = [];
	            if (obj && obj.length > 0) {
	                for (var i = 0; i < obj.length; i++) {
	                    var temp = obj[i],
	                        label = temp.label;
	                    if (label === searchText) {
	                        response = temp.picklistValues || [];
	                        break;
	                    }
	
	                }
	            }
	            return response;
	        }
	
	
	        function getChargeTypeFilterLabel(sObjectLabel, fieldName, fieldLabel) {
	            var response = '';
	            /* Check if the name contains any extra pre tag */
	            if (fieldName.split('.').length > 1) {
	                var firstName = fieldName.split('.')[0];
	                if (firstName === getPrefixedAttribute('AttributeValueId__r')) {
	                    //response = 'PAV : ' + fieldLabel;
	                    response = fieldLabel;
	                } else {
	                    //response = getInitials(sObjectLabel) + ' : ' + fieldLabel;
	                    response = fieldLabel;
	                }
	            } else {
	                //response = getInitials(sObjectLabel) + ' : ' + fieldLabel;
	                response = fieldLabel;
	            }
	            return response;
	        }
	
	        function getItems(data, type) {
	            var response = [];
	            if (data && data.length) {
	                for (var i = 0; i < data.length; i++) {
	                    if (data[i].sObjectName === type) {
	                        response.push(data[i]);
	                    }
	                }
	            }
	            return response || [];
	        }
	
	        function searchTargetAttributesForProductAttributes(searchText) {
	            var deferQ = $q.defer();
	            remoteService.searchTargetAttributes(searchText)
	                .then(function(response) {
	                    deferQ.resolve(truncateNames(getItems(response, getPrefixedAttribute('ProductAttributeValue__c'))));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function preparePF(arr) {
	            var response = [];
	            if (arr) {
	                for (var i = 0; i < arr.length; i++) {
	                    response.push({
	                        Name: arr[i],
	                        Id: arr[i]
	                    });
	                }
	            }
	            return response;
	        }
	
	        function productFamilySearch(searchText) {
	            var deferQ = $q.defer();
	            remoteService.searchProductFamily(searchText)
	                .then(function(response) {
	                    deferQ.resolve(preparePF(JSON.parse(response)));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        /*
	         * Returns search result for auto-complete product group component.
	         */
	        function productGroupSearch(searchText) {
	            var defer = $q.defer();
	
	            remoteService.searchProductGroups(searchText)
	                .then(function(response) {
	                    defer.resolve(JSON.parse(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return defer.promise;
	
	        }
	
	        function getAssociatedPriceListItems(plId, searchText, chunkNumber) {
	            var defered = $q.defer(),
	                requestObj = {
	                    "SearchString": searchText || null,
	                    "PriceListId": plId,
	                    "NumberOfRecordsPerChunk": priceListItemConstants.numberOfProductsPerChunk,
	                    "ChunkNumber": chunkNumber || 1
	                };
	            remoteService.getPriceListItemsForPriceList(requestObj)
	                .then(function(response) {
	                    defered.resolve(response.PriceListItemDOs);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function processPliAutocompleteData(data) {
	            var response = [];
	            for (var i = 0; i < data.length; i++) {
	                response.push({
	                    Name: data[i].PriceListItemSO[getPrefixedAttribute('ProductId__r')].Name + ' - ' + data[i].PriceListItemSO[getPrefixedAttribute('ChargeType__c')],
	                    Id: data[i].PriceListItemSO.Id
	                });
	            }
	            return response;
	        }
	
	        function pliSearch(searchText) {
	            var defer = $q.defer();
	            getAssociatedPriceListItems(selectedPli.PriceListItemSO[getPrefixedAttribute('PriceListId__c')], searchText, 1)
	                .then(function(response) {
	                    defer.resolve(processPliAutocompleteData(response));
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function productSearch(searchText, item) {
	            var defer = $q.defer();
	
	            if (item.relationTo === priceListItemConstants.product) {
	                return productSearchByName(searchText);
	            } else if (item.relationTo === priceListItemConstants.productGroup) {
	                return productGroupSearch(searchText);
	            } else if (item.relationTo === priceListItemConstants.productFamily) {
	                return productFamilySearch(searchText);
	            } else if (item.relationTo === priceListItemConstants.priceListItem) {
	                return pliSearch(searchText);
	            } else {
	                defer.resolve([]);
	            }
	
	            return defer.promise;
	        }
	
	        function productSearchByName(searchText) {
	            var defer = $q.defer();
	            var requestObj = {
	                'ViewName': prefix + productConstants.fieldsetProductList,
	                "SortField": 'LastModifiedDate',
	                "SortDirection": cpqAdminConstants.DESCENDING,
	                'SearchString': searchText || '',
	                'ChunkNumber': 1,
	                'NumberOfProductsPerChunk': productConstants.numberOfProductsPerChunk,
	                'ConfigType': ''
	            };
	            listService.getProductListBySelectedView(requestObj, false)
	                .then(function(response) {
	                    defer.resolve(response.ProductSOs);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            return defer.promise;
	        }
	
	        function processRequestParams(pli) {
	            delete pli.selected;
	            delete pli.FieldMetadata;
	            if (pli.PriceListItemSO) {
	                delete pli.PriceListItemSO[getPrefixedAttribute('APTS_Ext_Id__c')];
	                delete pli.PriceListItemSO.CreatedBy;
	                delete pli.PriceListItemSO.CreatedById;
	                delete pli.PriceListItemSO.CreatedDate;
	                delete pli.PriceListItemSO.LastModifiedBy;
	                delete pli.PriceListItemSO.LastModifiedById;
	                delete pli.PriceListItemSO.LastModifiedDate;
	                delete pli.PriceListItemSO.LastReferencedDate;
	                delete pli.PriceListItemSO.LastViewedDate;
	                delete pli.PriceListItemSO[getPrefixedAttribute('ProductId__r')];
	                delete pli.PriceListItemSO[getPrefixedAttribute('PriceListId__r')];
	                delete pli.PriceListItemSO[getPrefixedAttribute('RelatedItemId__r')];
	                delete pli.PriceListItemSO.SystemModstamp;
	                delete pli.PriceListItemSO.text;
	                delete pli.PriceListItemSO.autocomplete;
	                delete pli.PriceListItemSO.relatedPli;
	                delete pli.PriceListItemSO.relatedAdjustmentAmountSource;
	                delete pli.PriceListItemSO.effectiveDate;
	                delete pli.PriceListItemSO.expirationDate;
	                delete pli.PriceListItemSO.relationTo;
	                delete pli.PriceListItemSO.text;
	                delete pli.PriceListItemSO.taxCode;
	                delete pli.PriceListItemSO.ARAccount;
	                delete pli.PriceListItemSO.RevRecPolicy;
	                delete pli.PriceListItemSO.RevenueSplitPolicy;
	                delete pli.PriceListItemSO.UBARAccount;
	                delete pli.PriceListItemSO.DRAccount;
	                delete pli.PriceListItemSO.RRAccount;
	                delete pli.PriceListItemSO.UBAccount;
	                pli = prepareCriteria(pli);
	                delete pli.PriceListItemSO.chargeTypeCriteria;
	
	
	            }
	            if (pli.PriceMatrixDOs) {
	                for (var i = 0; i < pli.PriceMatrixDOs.length; i++) {
	                    var priceMatrixDOs = pli.PriceMatrixDOs[i],
	                        priceMatrixSO = priceMatrixDOs.PriceMatrixSO;
	
	                    delete priceMatrixDOs.selected;
	                    delete priceMatrixSO.CreatedBy;
	                    delete priceMatrixSO.CreatedDate;
	                    delete priceMatrixSO.CreatedById;
	                    delete priceMatrixSO.LastModifiedBy;
	                    delete priceMatrixSO.LastModifiedById;
	                    delete priceMatrixSO.LastModifiedDate;
	                    delete priceMatrixSO.LastReferencedDate;
	                    delete priceMatrixSO.LastViewedDate;
	                    delete priceMatrixSO[getPrefixedAttribute('PriceListItemId__r')];
	                    delete priceMatrixSO.SystemModstamp;
	                    delete priceMatrixSO.text;
	                }
	            }
	
	            if (pli.RelatedPriceListItemSOs) {
	                for (var i = 0; i < pli.RelatedPriceListItemSOs.length; i++) {
	                    var relatedPriceListItemSO = pli.RelatedPriceListItemSOs[i];
	
	                    delete relatedPriceListItemSO.CreatedBy;
	                    delete relatedPriceListItemSO.CreatedById;
	                    delete relatedPriceListItemSO.CreatedDate;
	                    delete relatedPriceListItemSO.IsDeleted;
	                    delete relatedPriceListItemSO.LastModifiedBy;
	                    delete relatedPriceListItemSO.LastModifiedById;
	                    delete relatedPriceListItemSO.LastModifiedDate;
	                    delete relatedPriceListItemSO.Owner;
	                    delete relatedPriceListItemSO.Name;
	                    delete relatedPriceListItemSO.OwnerId;
	                    delete relatedPriceListItemSO.PriceListItemId__r;
	                    delete relatedPriceListItemSO.RelatedProductId__r;
	                    delete relatedPriceListItemSO.RelatedProductGroupId__r;
	                    delete relatedPriceListItemSO.RelatedPriceListItemId__r;
	                    delete relatedPriceListItemSO.SystemModstamp;
	                    delete relatedPriceListItemSO.hasError;
	
	                    if (relatedPriceListItemSO.relationTo === priceListItemConstants.product) {
	                        relatedPriceListItemSO[getPrefixedAttribute('RelatedProductId__c')] = relatedPriceListItemSO.autocomplete.selectedItem.Id;
	                    }
	                    if (relatedPriceListItemSO.relationTo === priceListItemConstants.productGroup) {
	                        relatedPriceListItemSO[getPrefixedAttribute('RelatedProductGroupId__c')] = relatedPriceListItemSO.autocomplete.selectedItem.Id;
	                    }
	                    if (relatedPriceListItemSO.relationTo === priceListItemConstants.productFamily) {
	                        relatedPriceListItemSO[getPrefixedAttribute('RelatedProductFamily__c')] = relatedPriceListItemSO.autocomplete.selectedItem.Id;
	                    }
	                    if (relatedPriceListItemSO.relationTo === priceListItemConstants.priceListItem) {
	                        relatedPriceListItemSO[getPrefixedAttribute('RelatedPriceListItemId__c')] = relatedPriceListItemSO.autocomplete.selectedItem.Id;
	                    }
	                    if (relatedPriceListItemSO.relationTo === priceListItemConstants.custom) {
	                        relatedPriceListItemSO[getPrefixedAttribute('RelatedCustomGroupFieldId__c')] = relatedPriceListItemSO.autocomplete.selectedItem.Id;
	                    }
	                    delete relatedPriceListItemSO.relationTo;
	                    delete relatedPriceListItemSO.autocomplete;
	                    delete relatedPriceListItemSO.text;
	                }
	            }
	            return pli;
	        }
	
	        function updatePriceListItem(pli) {
	            var defered = $q.defer(),
	                processedRequest = processRequestParams(pli),
	                requestObj = [processedRequest];
	
	            remoteService.updatePriceListItem(requestObj)
	                .then(function(response) {
	                    defered.resolve(response[0]);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function prepareCriteria(item) {
	            var criteria = item.PriceListItemSO.chargeTypeCriteria;
	            if (criteria) {
	                var linepredicates = criteria.filter.predicates;
	                if (linepredicates.length > 0) {
	                    for (var i = 0; i < linepredicates.length; i++) {
	                        var temp = linepredicates[i];
	                        delete temp.hasError;
	                        delete temp.targetField;
	                        delete temp.picklistValues;
	                        delete temp.statementProduct;
	                    }
	                }
	                var productAttributePredicates = criteria.filter.childFilter.predicates;
	                if (productAttributePredicates.length > 0) {
	                    for (var i = 0; i < productAttributePredicates.length; i++) {
	                        var temp = productAttributePredicates[i];
	                        delete temp.hasError;
	                        delete temp.targetField;
	                        delete temp.picklistValues;
	                    }
	                }
	                if (linepredicates.length > 0 || productAttributePredicates.length > 0) {
	                    item.PriceListItemSO[getPrefixedAttribute('Criteria__c')] = JSON.stringify(criteria, null, ' ');
	                } else {
	                    item.PriceListItemSO[getPrefixedAttribute('Criteria__c')] = '';
	                }
	
	            } else {
	                if (!item.PriceListItemSO[getPrefixedAttribute('Criteria__c')]) {
	                    item.PriceListItemSO[getPrefixedAttribute('Criteria__c')] = '';
	                }
	            }
	
	            return item;
	        }
	
	        function getSObjectPicklistFields(sObjectName, fields) {
	            var defer = $q.defer(),
	                picklistFieldNames;
	            sObjectName = getPrefixedAttribute(sObjectName);
	            if (fields && fields.length) {
	                for (var i = 0; i < fields.length; i++) {
	                    fields[i] = getPrefixedAttribute(fields[i]);
	                }
	                picklistFieldNames = fields;
	            } else {
	                picklistFieldNames = null;
	            }
	            remoteService.getSObjectPicklistFields(sObjectName, picklistFieldNames)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function setProductOptionNodeSelected(node) {
	            selectedOptionNode = node;
	        }
	
	        function getProductOptionNodeSelected(node) {
	            return selectedOptionNode;
	        }
	        var service = {
	            getSelectedPLI: getSelectedPLI,
	            setSelectedPLI: setSelectedPLI,
	            getPriceListItemDetails: getPriceListItemDetails,
	            searchTargetAttributesForLineItems: searchTargetAttributesForLineItems,
	            getMatchingPicklistValues: getMatchingPicklistValues,
	            getChargeTypeFilterLabel: getChargeTypeFilterLabel,
	            searchTargetAttributesForProductAttributes: searchTargetAttributesForProductAttributes,
	            productSearch: productSearch,
	            updatePriceListItem: updatePriceListItem,
	            getSObjectPicklistFields: getSObjectPicklistFields,
	            setProductOptionNodeSelected: setProductOptionNodeSelected,
	            getProductOptionNodeSelected: getProductOptionNodeSelected,
	            getMetaData: getMetaData
	        };
	        return service;
	    };
	
	    priceListItemCommonServices.$inject = [
	        '$stateParams',
	        'systemConstants',
	        'remoteService',
	        '$q',
	        'productConstants',
	        'cpqAdminConstants',
	        'listService',
	        'applicationService',
	        'priceListItemConstants'
	    ];
	
	    module.exports = priceListItemCommonServices;
	})();


/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceListItem.details', [])
	        .service('priceListItemDetailsService', __webpack_require__(607))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceListItem.details', {
	                parent: 'app.priceListItem',
	                url: '/:id/details',
	                views: {
	                    'priceListItemContainer': {
	                        template: __webpack_require__(608),
	                        controller: __webpack_require__(609),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    selectedPriceListItemDetails: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getPriceListItemDetails($stateParams.id);
	                    }],
	                    allPicklists: ['priceListItemDetailsService', '$stateParams', function(priceListItemDetailsService, $stateParams) {
	                        return priceListItemDetailsService.getSObjectPicklistFields('PriceListItem__c', null);
	                    }],
	                    allRelatedPriceListItemPicklists: ['priceListItemDetailsService', '$stateParams', function(priceListItemDetailsService, $stateParams) {
	                        return priceListItemDetailsService.getSObjectPicklistFields('RelatedPriceListItem__c', null);
	                    }],
	                    metaData: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getMetaData($stateParams.id);
	                    }],
	
	                }
	            })
	        }]);
	})();


/***/ }),
/* 607 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var priceListItemDetailsService = function($q, remoteService, systemConstants, cpqAdminConstants, apiCallsService, priceListItemConstants) {
	        var prefix = systemConstants.nsPrefix || '',
	            dateFormat = 'MM/DD/YYYY',
	            allPicklists = [],
	            allRelatedPriceListItemPicklists = [];
	
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	
	        function getPriceListItemDetails(pliId) {
	            var defered = $q.defer(),
	                requestObj = [pliId];
	
	            remoteService.getPriceListItemDetails(requestObj)
	                .then(function(response) {
	                    defered.resolve(response[0].PriceListItemSO);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function setAllPicklists(data) {
	            allPicklists = data;
	        }
	
	        function getPicklistValues(type) {
	            var response = [],
	                noneVar = {
	                    label: '--None--',
	                    value: ''
	                };
	            if (allPicklists.length && type) {
	                for (var i = 0; i < allPicklists.length; i++) {
	                    if (allPicklists[i].FieldName === getPrefixedAttribute(type)) {
	                        response = allPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            response.unshift(noneVar);
	            return response;
	        }
	
	        function getChargeTypes() {
	            var items = getPicklistValues('ChargeType__c');
	            items.shift();
	            return items;
	        }
	
	        function getPriceTypes() {
	            return getPicklistValues('PriceType__c') || [];
	        }
	
	        function getPriceMethods() {
	            return getPicklistValues('PriceMethod__c') || [];
	        }
	
	        function getRelatedAdjustmentTypes() {
	            return getPicklistValues('RelatedAdjustmentType__c') || [];
	        }
	
	        function getFrequencies() {
	            return getPicklistValues('Frequency__c') || [];
	        }
	
	        function getBillingFrequencies() {
	            return getPicklistValues('BillingFrequency__c') || [];
	        }
	
	        function getRelatedChargeTypes() {
	            return getPicklistValues('RelatedChargeType__c') || [];
	        }
	
	        function getRelatedAdjustmentAppliesToValues() {
	            return getPicklistValues('RelatedAdjustmentAppliesTo__c') || [];
	        }
	
	        function getPercentAppliesToValues() {
	            return getPicklistValues('RelatedPercentAppliesTo__c') || [];
	        }
	
	        function getPriceUom() {
	            return getPicklistValues('PriceUom__c') || [];
	        }
	
	        function getMinMaxPriceAppliesTo() {
	            return getPicklistValues('MinMaxPriceAppliesTo__c') || [];
	        }
	
	        function getType() {
	            return getPicklistValues('Type__c') || [];
	        }
	
	        function getSubType() {
	            return getPicklistValues('SubType__c') || [];
	        }
	
	        function getSObjectPicklistFields(sObjectName, fields) {
	            var defer = $q.defer(),
	                picklistFieldNames;
	            sObjectName = getPrefixedAttribute(sObjectName);
	            if (fields && fields.length) {
	                for (var i = 0; i < fields.length; i++) {
	                    fields[i] = getPrefixedAttribute(fields[i]);
	                }
	                picklistFieldNames = fields;
	            } else {
	                picklistFieldNames = null;
	            }
	            remoteService.getSObjectPicklistFields(sObjectName, picklistFieldNames)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function getRelationToValues() {
	            return [{
	                label: priceListItemConstants.product,
	                value: priceListItemConstants.product
	            }, {
	                label: priceListItemConstants.productFamily,
	                value: priceListItemConstants.productFamily
	            }, {
	                label: priceListItemConstants.productGroup,
	                value: priceListItemConstants.productGroup
	            }, {
	                label: priceListItemConstants.priceListItem,
	                value: priceListItemConstants.priceListItem
	            }, {
	                label: priceListItemConstants.custom,
	                value: priceListItemConstants.custom
	            }];
	        }
	
	        function getRelatedPricingPicklistValues(type) {
	            var response = [],
	                noneVar = {
	                    label: '--None--',
	                    value: ''
	                };
	            if (allRelatedPriceListItemPicklists.length && type) {
	                for (var i = 0; i < allRelatedPriceListItemPicklists.length; i++) {
	                    if (allRelatedPriceListItemPicklists[i].FieldName === getPrefixedAttribute(type)) {
	                        response = allRelatedPriceListItemPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            response.unshift(noneVar);
	            return response;
	        }
	
	        function getRelatedPricingChargeTypes() {
	            return getRelatedPricingPicklistValues('RelatedChargeType__c') || [];
	        }
	
	        function getRelatedPricingAdjustmentTypes() {
	            return getRelatedPricingPicklistValues('RelatedAdjustmentType__c') || [];
	        }
	
	
	
	        function setAllRelatedPriceListItemPicklists(data) {
	            allRelatedPriceListItemPicklists = data;
	        }
	
	        function deleteRelatedPricing(id) {
	            var defered = $q.defer(),
	                requestObj = {
	                    'RelatedPriceListItemIds': [id]
	                };
	            remoteService.deletePricingData(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function getFilteredFormulaFields(searchText) {
	            var defered = $q.defer(),
	                properties = {
	                    autocomplete: {
	                        sObjectName: getPrefixedAttribute('FormulaField__c')
	                    },
	                    numberOfRecordsPerChunk: cpqAdminConstants.MAX_CHUNK_SIZE,
	                    otherFields: [getPrefixedAttribute('BusinessObject__c')]
	                };
	            apiCallsService.searchSObjectRecords(searchText, properties)
	                .then(function(response) {
	                    if (response) {
	                        //return only those which has business object as LineItem__c
	                        response = response.filter(function(item) {
	                            return item[getPrefixedAttribute('BusinessObject__c')] === getPrefixedAttribute('LineItem__c');
	                        });
	                        defered.resolve(response);
	                    }
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	
	        var service = {
	            getPriceListItemDetails: getPriceListItemDetails,
	            getSObjectPicklistFields: getSObjectPicklistFields,
	            getChargeTypes: getChargeTypes,
	            getPriceTypes: getPriceTypes,
	            getPriceMethods: getPriceMethods,
	            getRelatedAdjustmentTypes: getRelatedAdjustmentTypes,
	            getBillingFrequencies: getBillingFrequencies,
	            getFrequencies: getFrequencies,
	            getRelatedAdjustmentAppliesToValues: getRelatedAdjustmentAppliesToValues,
	            setAllPicklists: setAllPicklists,
	            getRelationToValues: getRelationToValues,
	            getRelatedPricingChargeTypes: getRelatedPricingChargeTypes,
	            getRelatedPricingAdjustmentTypes: getRelatedPricingAdjustmentTypes,
	            deleteRelatedPricing: deleteRelatedPricing,
	            setAllRelatedPriceListItemPicklists: setAllRelatedPriceListItemPicklists,
	            getPercentAppliesToValues: getPercentAppliesToValues,
	            getPriceUom: getPriceUom,
	            getMinMaxPriceAppliesTo: getMinMaxPriceAppliesTo,
	            getType: getType,
	            getSubType: getSubType,
	            getFilteredFormulaFields: getFilteredFormulaFields
	        };
	
	        return service;
	    };
	
	    priceListItemDetailsService.$inject = [
	        '$q',
	        'remoteService',
	        'systemConstants',
	        'cpqAdminConstants',
	        'apiCallsService',
	        'priceListItemConstants'
	    ];
	
	    module.exports = priceListItemDetailsService;
	})();


/***/ }),
/* 608 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"detail-container\">\n        <div class=\"pricelistitem-detail-block\">\n            <uib-alert ng-repeat=\"alert in vm.alertList\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <form novalidate name=\"vm.pliDetailsForm\">\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field field-type=\"string\" field-label=\"::vm.labels.PriceList\" is-editable=\"true\" is-disabled=\"true\" model=\"vm.pli.PriceListItemSO[vm.prefix + 'PriceListId__r'].Name\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex expression-field\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field field-type=\"string\" field-label=\"::vm.labels.ChargeTypeCriteria\" is-editable=\"true\" is-disabled=\"true\" model=\"vm.chargeTypeExpression\">\n                        </material-form-field>\n                        <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.openChargeTypeCriteriaPopup()\">\n                            <i class=\"fa fa-external-link\"></i>\n                        </button>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field field-type=\"autocomplete\" properties=\"vm.pli.PriceListItemSO\" field-label=\"::vm.labels.Product\" name=\"product\" is-required=\"true\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'ChargeType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.chargeTypePicklistEntries\" field-label=\"::vm.labels.ChargeType\" name=\"chargeType\" is-required=\"true\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'Active__c']\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.Active\" element-id=\"isActive\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\" style=\"margin-top:10px;\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'Sequence__c']\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"::vm.labels.Sequence\" scale=\"{{vm.getFieldValue('Sequence__c','Scale')}}\" precision=\"{{vm.getFieldValue('Sequence__c','Precision')}}\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\" class=\"align-bottom\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'ListPrice__c']\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"::vm.labels.ListPrice\" name=\"listPrice\" scale=\"{{vm.getFieldValue('ListPrice__c','Scale')}}\" precision=\"{{vm.getFieldValue('ListPrice__c','Precision')}}\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'Cost__c']\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"::vm.labels.Cost\" name=\"cost\" scale=\"{{vm.getFieldValue('Cost__c','Scale')}}\" precision=\"{{vm.getFieldValue('Cost__c','Precision')}}\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO.effectiveDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.EffectiveDate\" name=\"effectiveDate\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO.expirationDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.ExpirationDate\" name=\"expirationDate\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'PriceType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.priceTypePicklistEntries\" field-label=\"::vm.labels.PriceType\" name=\"priceType\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\" data-ng-if=\"vm.pli.PriceListItemSO[vm.prefix+'PriceType__c'] !== 'One Time'\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'Frequency__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.frequencyPicklistEntries\" field-label=\"::vm.labels.Frequency\" name=\"billingFrequency\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'PriceMethod__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.priceMethodPicklistEntries\" field-label=\"::vm.labels.PriceMethod\" name=\"priceMethod\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex marginTop\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'RelatedAdjustmentAmount__c']\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"::vm.labels.RelatedAdjustmentAmount\" name=\"relatedAdjustmentAmount\" data-ng-if=\"vm.pli.PriceListItemSO[vm.prefix+'PriceMethod__c'] === 'Related Price'\" scale=\"{{vm.getFieldValue('RelatedAdjustmentAmount__c','Scale')}}\" precision=\"{{vm.getFieldValue('RelatedAdjustmentAmount__c','Precision')}}\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\" data-ng-if=\"vm.pli.PriceListItemSO[vm.prefix+'PriceMethod__c'] === 'Percentage'\">\n                    <div class=\"flex marginTop\" flex=\"45\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'RelatedPercent__c']\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"vm.labels.Percent\" scale=\"{{vm.getFieldValue('RelatedPercent__c','Scale')}}\" precision=\"{{vm.getFieldValue('RelatedPercent__c','Precision')}}\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'RelatedPercentAppliesTo__c']\" field-type=\"picklist\" is-editable=\"true\" field-label=\"vm.labels.PercentAppliesTo\" properties=\"vm.percentAppliesToPicklistEntries\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\" data-ng-if=\"vm.pli.PriceListItemSO[vm.prefix+'PriceMethod__c'] === 'Percentage'\">\n                    <div class=\"flex marginTop\" flex=\"45\">\n                        <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"vm.pli.PriceListItemSO.relatedPli\" field-label=\"vm.labels.RelatedPriceListItems\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'PriceUom__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.priceUomPicklistEntries\" field-label=\"::vm.labels.PriceUom\" name=\"priceUom\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\" data-ng-if=\"vm.pli.PriceListItemSO[vm.prefix+'PriceMethod__c'] === 'Related Price'\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'RelatedAdjustmentType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.relatedAdjustmentTypePicklistEntries\" field-label=\"::vm.labels.RelatedAdjustmentType\" name=\"relatedAdjustmentType\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.pli.PriceListItemSO[vm.prefix+'RelatedAdjustmentAppliesTo__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.relatedAdjustmentAppliesToPicklistEntries\" field-label=\"::vm.labels.RelatedAdjustmentAppliesTo\" name=\"relatedAdjustmentAppliesTo\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\" data-ng-if=\"vm.pli.PriceListItemSO[vm.prefix+'PriceMethod__c'] === 'Related Price'\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"vm.pli.PriceListItemSO.relatedAdjustmentAmountSource\" field-label=\"vm.labels.RelatedAdjustmentAmountSource\">\n                        </material-form-field>\n                    </div>\n                </div>\n            </form>\n            <md-card md-theme=\"default\" data-ng-if=\"vm.pli.PriceListItemSO[vm.prefix+'PriceMethod__c'] === 'Related Price'\">\n                <md-card-title>\n                    <md-card-title-text>\n                        <span class=\"md-headline\">Related Pricing</span>\n                    </md-card-title-text>\n                </md-card-title>\n                <md-card-content>\n                    <div class=\"related-pricing-header\">\n                        <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-click=\"vm.addRPPricingRow()\">\n                            Add Row\n                        </button>\n                    </div>\n                    <div class=\"product-option\">\n                        <div class=\"pricing-table-container\">\n                            <div class=\"pricing-table-header\">\n                                <div class=\"action\">{{::vm.labels.Action}}</div>\n                                <div>{{::vm.labels.RelationTo}}</div>\n                                <div>{{::vm.labels.RelatedItem}}</div>\n                                <div>{{::vm.labels.ChargeType}}</div>\n                                <div>{{::vm.labels.AdjustmentAmount}}</div>\n                                <div>{{::vm.labels.AdjustmentType}}</div>\n                                <div>{{::vm.labels.RelatedCustomGroup}}</div>\n                            </div>\n                            <div class=\"clearfix\"></div>\n                            <div class=\"pricing-table-body\">\n                                <div data-ng-repeat=\"item in vm.pli.RelatedPriceListItemSOs\" class=\"individual-row\" ng-class=\"{'hasError' : item.hasError === true }\">\n                                    <div class=\"action\">\n                                        <button class=\"slds-button slds-button--icon\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                            <i class=\"material-icons\">more_vert</i>\n                                        </button>\n                                        <ul class=\"dropdown-menu\">\n                                            <li data-ng-click=\"vm.showRemoveConfirmation(item.Id,'RelatedPricing',$index)\" class=\"action-Menu\">\n                                                <a href=\"\">\n                                                    <i class=\"material-icons pull-left\">clear</i>\n                                                    <span class=\"drop-down-label pull-left\">{{vm.labels.Remove}}</span>\n                                                    <p class=\"clearfix\"></p>\n                                                </a>\n                                            </li>\n                                            <li data-ng-click=\"vm.addRPPricingRow($index)\" class=\"action-Menu\">\n                                                <a href=\"\">\n                                                    <i class=\"material-icons pull-left\">add</i>\n                                                    <span class=\"drop-down-label pull-left\">{{vm.labels.Add}}</span>\n                                                    <p class=\"clearfix\"></p>\n                                                </a>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"item\">\n                                        <material-form-field model=\"item.relationTo\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.relatedPricingRelationToPicklistEntries\" field-label=\"''\" data-ng-click='vm.trackRPSelectEvent($index)'>\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"item individual-row-relatedItem\">\n                                        <material-form-field field-type=\"autocomplete\" properties=\"item\" field-label=\"::vm.labels.RelatedItem\">\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"item individual-row-relatedChargeType\">\n                                        <material-form-field model=\"item[vm.prefix+'RelatedChargeType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.relatedPricingChargeTypesPicklistEntries\" field-label=\"''\" ng-if=\"item.relationTo != 'Price List Item'\">\n                                        </material-form-field>\n                                        <div class=\"individual-row-no-relatedChargeType\" ng-if=\"item.relationTo === 'Price List Item'\"> {{item[vm.prefix+'RelatedChargeType__c'] || '- - -'}}</div>\n                                    </div>\n                                    <div class=\"item individual-row-relatedAdjustmentAmount\">\n                                        <material-form-field model=\"item[vm.prefix+'RelatedAdjustmentAmount__c']\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"''\" scale=\"{{vm.getFieldValue('RelatedAdjustmentAmount__c','Scale')}}\" precision=\"{{vm.getFieldValue('RelatedAdjustmentAmount__c','Precision')}}\">\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"item individual-row-relatedAdjustmentType\">\n                                        <material-form-field model=\"item[vm.prefix+'RelatedAdjustmentType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.relatedPricingAdjustmentTypesPicklistEntries\" field-label=\"''\">\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"item individual-row-relatedCustomGroup\">\n                                        <material-form-field model=\"item[vm.prefix+'RelatedCustomGroup__c']\" field-type=\"string\" is-editable=\"true\" field-label=\"''\" ng-if=\"item.relationTo === vm.labels.Custom\">\n                                        </material-form-field>\n                                        <div class=\"individual-row-no-relatedCustomGroup\" ng-if=\"item.relationTo !== vm.labels.Custom\"> - - - </div>\n                                    </div>\n                                    <div class=\"clearfix\"></div>\n                                </div>\n                                <div class=\"clearfix\"></div>\n                            </div>\n                        </div>\n                    </div>\n                </md-card-content>\n            </md-card>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.pageSave()\" data-ng-disabled=\"vm.disableSaveBtn === true\">Save</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confirmationPopup\">\n</div>\n<div class=\"modalBody\" ng-show=\"vm.confirmationPopup\">\n    <div class=\"modalOverlay\">\n        <div class=\"modalHeaderBody\">\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n            <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n        </div>\n        <div class=\"modal-Footer text-right\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Cancel}}</span>\n            </button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Ok}}</span>\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var priceListItemDetailsController = function($q, $scope, $mdDialog, $rootScope, $state, $stateParams, applicationService, systemConstants, i18nService, selectedPriceListItemDetails, priceListItemDetailsService, allPicklists, priceListItemCommonService, allRelatedPriceListItemPicklists, apiCallsService, cpqAdminConstants, metaData, priceListItemConstants) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '',
	            isFormSaved = false;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.pli = selectedPriceListItemDetails;
	        vm.chargeTypeExpression = '';
	        vm.alertList = [];
	        vm.disableSaveBtn = false;
	        var metaDataInfo = priceListItemCommonService.getMetaData();
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function prepareAutoCompleteFields() {
	            if (vm.pli) {
	                var temp = vm.pli.PriceListItemSO;
	                temp['effectiveDate'] = temp[getPrefixedAttribute("EffectiveDate__c")];
	                temp['expirationDate'] = temp[getPrefixedAttribute("ExpirationDate__c")];
	                temp['relationTo'] = 'Product';
	                if (temp[getPrefixedAttribute("ProductId__r")]) {
	                    temp['autocomplete'] = {
	                        'querySearch': priceListItemCommonService.productSearch,
	                        'displayName': 'Name',
	                        'selectedItem': {
	                            Name: temp[getPrefixedAttribute("ProductId__r")].Name,
	                            Id: temp[getPrefixedAttribute("ProductId__r")].Id
	                        }
	                    };
	                } else {
	                    temp['autocomplete'] = {
	                        'querySearch': priceListItemCommonService.productSearch,
	                        'displayName': 'Name'
	                    };
	                }
	                if (temp[getPrefixedAttribute("RelatedItemId__r")]) {
	                    temp['relatedPli'] = {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': {
	                                Name: temp[getPrefixedAttribute("RelatedItemId__r")].Name,
	                                Id: temp[getPrefixedAttribute("RelatedItemId__r")].Id
	                            },
	                            'sObjectName': getPrefixedAttribute('PriceListItem__c')
	                        }
	                    };
	
	                } else {
	                    temp['relatedPli'] = {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('PriceListItem__c')
	                        }
	                    };
	                }
	                if (temp[getPrefixedAttribute("RelatedAdjustmentAmountSourceId__r")]) {
	                    temp['relatedAdjustmentAmountSource'] = {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': {
	                                Name: temp[getPrefixedAttribute("RelatedAdjustmentAmountSourceId__r")].Name,
	                                Id: temp[getPrefixedAttribute("RelatedAdjustmentAmountSourceId__r")].Id
	                            },
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    };
	
	                } else {
	                    temp['relatedAdjustmentAmountSource'] = {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    };
	                }
	            }
	        }
	        prepareAutoCompleteFields();
	
	        priceListItemDetailsService.setAllPicklists(allPicklists);
	        priceListItemDetailsService.setAllRelatedPriceListItemPicklists(allRelatedPriceListItemPicklists);
	
	        vm.chargeTypePicklistEntries = {
	            PicklistValues: priceListItemDetailsService.getChargeTypes()
	        };
	        vm.priceTypePicklistEntries = {
	            PicklistValues: priceListItemDetailsService.getPriceTypes()
	        };
	        vm.priceMethodPicklistEntries = {
	            PicklistValues: priceListItemDetailsService.getPriceMethods()
	        };
	        vm.relatedAdjustmentTypePicklistEntries = {
	            PicklistValues: priceListItemDetailsService.getRelatedAdjustmentTypes()
	        };
	        vm.billingFrequencyPicklistEntries = {
	            PicklistValues: priceListItemDetailsService.getBillingFrequencies()
	        };
	        vm.frequencyPicklistEntries = {
	            PicklistValues: priceListItemDetailsService.getFrequencies()
	        };
	        vm.relatedAdjustmentAppliesToPicklistEntries = {
	            PicklistValues: priceListItemDetailsService.getRelatedAdjustmentAppliesToValues()
	        };
	        vm.percentAppliesToPicklistEntries = {
	            PicklistValues: priceListItemDetailsService.getPercentAppliesToValues()
	        };
	        vm.priceUomPicklistEntries = {
	            PicklistValues: priceListItemDetailsService.getPriceUom()
	        };
	
	        function isFormValid() {
	            var isValid = true;
	            if (vm.pliDetailsForm.$valid) {
	
	                var chargeType = vm.pli.PriceListItemSO[getPrefixedAttribute('ChargeType__c')],
	                    priceType = vm.pli.PriceListItemSO[getPrefixedAttribute('PriceType__c')],
	                    frequency = vm.pli.PriceListItemSO[getPrefixedAttribute('Frequency__c')],
	                    priceMethod = vm.pli.PriceListItemSO[getPrefixedAttribute('PriceMethod__c')],
	                    relatedAdjustmentAmount = vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedAdjustmentAmount__c')],
	                    relatedAdjustmentType = vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedAdjustmentType__c')],
	                    relatedAdjustmentAppliesTo = vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedAdjustmentAppliesTo__c')];
	                if (chargeType && chargeType === '') {
	                    isValid = false;
	                    addAlert({
	                        type: cpqAdminConstants.DANGER,
	                        msg: vm.labels.MandatoryFieldsWarning
	                    });
	                }
	                if (priceType && priceType !== 'One Time') {
	                    if (!frequency) {
	                        isValid = false;
	                        addAlert({
	                            type: cpqAdminConstants.DANGER,
	                            msg: vm.labels.NoFrequency
	                        });
	                        return isValid;
	                    }
	                    if (priceType === 'Usage' && priceMethod === 'Related Price') {
	                        isValid = false;
	                        addAlert({
	                            type: cpqAdminConstants.DANGER,
	                            msg: vm.labels.NoUsageAndRelatedPrice
	                        });
	                        return isValid;
	                    }
	                } else {
	                    if (priceType === 'One Time') {
	                        vm.pli.PriceListItemSO[getPrefixedAttribute('Frequency__c')] = '';
	                    }
	                }
	                if (priceMethod && priceMethod !== 'Related Price') {
	                    vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedAdjustmentAmount__c')] = '';
	                    vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedAdjustmentType__c')] = '';
	                    vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedAdjustmentAppliesTo__c')] = '';
	                    vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedAdjustmentAmountSourceId__c')] = '';
	                }
	                if (priceMethod && priceMethod !== 'Percentage') {
	                    vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedPercent__c')] = '';
	                    vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedPercentAppliesTo__c')] = '';
	                    vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedItemId__c')] = '';
	                }
	            } else {
	                isValid = false;
	                addAlert({
	                    type: cpqAdminConstants.DANGER,
	                    msg: vm.labels.MandatoryFieldsWarning
	                });
	                return isValid;
	            }
	            return isValid;
	        }
	
	        function removeExtraFields() {
	            var temp = vm.pli,
	                priceMethod = vm.pli.PriceListItemSO[getPrefixedAttribute('PriceMethod__c')];
	            vm.pli.PriceListItemSO[getPrefixedAttribute('ProductId__c')] = vm.pli.PriceListItemSO.autocomplete.selectedItem.Id;
	            if (priceMethod && priceMethod === 'Percentage') {
	                var relatedPricing = vm.pli.PriceListItemSO.relatedPli.autocomplete;
	                if (relatedPricing && relatedPricing.selectedItem && relatedPricing.selectedItem.Id) {
	                    vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedItemId__c')] = relatedPricing.selectedItem.Id;
	                } else {
	                    vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedItemId__c')] = '';
	                }
	                delete vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedItemId__r')];
	            }
	            vm.pli.PriceListItemSO[getPrefixedAttribute("EffectiveDate__c")] = vm.pli.PriceListItemSO.effectiveDate;
	            vm.pli.PriceListItemSO[getPrefixedAttribute("ExpirationDate__c")] = vm.pli.PriceListItemSO.expirationDate;
	
	            if (priceMethod && priceMethod === 'Related Price') {
	                var relatedAdjustmentAmountSource = vm.pli.PriceListItemSO.relatedAdjustmentAmountSource.autocomplete;
	                if (relatedAdjustmentAmountSource && relatedAdjustmentAmountSource.selectedItem && relatedAdjustmentAmountSource.selectedItem.Id) {
	                    vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedAdjustmentAmountSourceId__c')] = relatedAdjustmentAmountSource.selectedItem.Id;
	                } else {
	                    vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedAdjustmentAmountSourceId__c')] = '';
	                }
	                delete vm.pli.PriceListItemSO[getPrefixedAttribute('RelatedAdjustmentAmountSourceId__r')];
	            }
	        }
	
	        function reloadCenterContent() {
	            if (vm.pli.PriceListItemSO[vm.prefix + 'PriceMethod__c'] === 'Related Price') {
	                priceListItemCommonService.getPriceListItemDetails($stateParams.id)
	                    .then(function(response) {
	                        vm.pli = response;
	                        priceListItemCommonService.setSelectedPLI(response);
	                        prepareAutoCompleteFields();
	                        getRelatedPricingData();
	                    });
	            }
	        }
	
	
	
	        vm.pageSave = function(e, toState, toParams) {
	            /* IF valid and dirty then update it*/
	            vm.pliDetailsForm.$setSubmitted();
	            if (vm.pliDetailsForm.$valid && isFormValid()) {
	                removeExtraFields();
	                if (vm.pli.PriceListItemSO[vm.prefix + 'PriceMethod__c'] === 'Related Price') {
	                    if (!checkRelatedPricing()) {
	                        vm.disableSaveBtn = true;
	                        priceListItemCommonService.updatePriceListItem(angular.copy(vm.pli))
	                            .then(function(response) {
	                                isFormSaved = true;
	                                if (toState) {
	                                    $state.go(toState, toParams);
	                                } else {
	                                    vm.pli = response;
	                                    priceListItemCommonService.setSelectedPLI(response);
	                                    reloadCenterContent();
	                                    vm.disableSaveBtn = false;
	                                    addAlert({
	                                        type: cpqAdminConstants.SUCCESS,
	                                        msg: vm.labels.SavedSuccessfully
	                                    });
	                                }
	                            }, function(reason) {
	                                isFormSaved = false;
	                                applicationService.showErrorMessage(reason);
	                                vm.disableSaveBtn = false;
	                            });
	                    } else {}
	                } else {
	                    vm.disableSaveBtn = true;
	                    priceListItemCommonService.updatePriceListItem(angular.copy(vm.pli))
	                        .then(function(response) {
	                            isFormSaved = true;
	                            if (toState) {
	                                $state.go(toState, toParams);
	                            } else {
	                                vm.pli = response;
	                                priceListItemCommonService.setSelectedPLI(response);
	                                reloadCenterContent();
	                                vm.disableSaveBtn = false;
	                                addAlert({
	                                    type: cpqAdminConstants.SUCCESS,
	                                    msg: vm.labels.SavedSuccessfully
	                                });
	                            }
	                        }, function(reason) {
	                            isFormSaved = false;
	                            applicationService.showErrorMessage(reason);
	                            vm.disableSaveBtn = false;
	                        });
	                }
	
	            }
	        };
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	
	            if (isFormSaved) {
	                return true;
	            } else {
	                if (vm.pliDetailsForm.$dirty) {
	                    e.preventDefault();
	                    vm.pageSave(e, toState, toParams);
	                } else {
	                    if (toState) {
	                        isFormSaved = true;
	                        $state.go(toState, toParams);
	                    } else {
	                        return true;
	                    }
	                }
	            }
	        });
	
	        vm.relatedPricingRelationToPicklistEntries = {
	            PicklistValues: priceListItemDetailsService.getRelationToValues(),
	            methodToCallInController: resetRelatedItemField
	        };
	        vm.relatedPricingChargeTypesPicklistEntries = {
	            PicklistValues: priceListItemDetailsService.getRelatedPricingChargeTypes()
	        };
	        vm.relatedPricingAdjustmentTypesPicklistEntries = {
	            PicklistValues: priceListItemDetailsService.getRelatedPricingAdjustmentTypes()
	        };
	        var selectedRPPricingRowIndex;
	        vm.trackRPSelectEvent = function(index) {
	            selectedRPPricingRowIndex = index;
	        };
	
	        function resetRelatedItemField(value) {
	            if (vm.pli.RelatedPriceListItemSOs[selectedRPPricingRowIndex].autocomplete) {
	                delete vm.pli.RelatedPriceListItemSOs[selectedRPPricingRowIndex].autocomplete.selectedItem;
	                vm.pli.RelatedPriceListItemSOs[selectedRPPricingRowIndex][getPrefixedAttribute('RelatedChargeType__c')] = '';
	            }
	            if (value === priceListItemConstants.custom) {
	                vm.pli.RelatedPriceListItemSOs[selectedRPPricingRowIndex]['autocomplete'] = {
	                    querySearch: priceListItemDetailsService.getFilteredFormulaFields,
	                    displayName: 'Name',
	                    sObjectName: getPrefixedAttribute('FormulaField__c'),
	                    selectedItemChange: updateChargeTypeForRelatedPricing
	                };
	            } else {
	                vm.pli.RelatedPriceListItemSOs[selectedRPPricingRowIndex]['autocomplete'] = {
	                    querySearch: priceListItemCommonService.productSearch,
	                    displayName: 'Name',
	                    selectedItemChange: updateChargeTypeForRelatedPricing
	                };    
	            }
	            
	        }
	        vm.addRPPricingRow = function(index) {
	            var temp = {
	                relationTo: '',
	                autocomplete: {
	                    querySearch: priceListItemCommonService.productSearch,
	                    displayName: 'Name',
	                    selectedItemChange: updateChargeTypeForRelatedPricing
	                }
	            };
	            temp[getPrefixedAttribute('PriceListItemId__c')] = vm.pli.PriceListItemSO.Id;
	            temp[getPrefixedAttribute('RelatedChargeType__c')] = '';
	            temp[getPrefixedAttribute('RelatedAdjustmentAmount__c')] = '';
	            temp[getPrefixedAttribute('RelatedAdjustmentType__c')] = '';
	
	            if (index >= 0) {
	                vm.pli.RelatedPriceListItemSOs.splice((index + 1), 0, angular.copy(temp));
	            } else {
	                vm.pli.RelatedPriceListItemSOs.push(angular.copy(temp));
	            }
	        };
	
	        /* Delete functionality */
	        var toBeRemovedId, toBeRemovedType, toBeRemovedIndex;
	
	        function resetDeleteSetup() {
	            toBeRemovedId = toBeRemovedType = toBeRemovedIndex = undefined;
	        }
	        vm.showRemoveConfirmation = function(id, removedType, index) {
	            vm.confirmationPopup = true;
	            toBeRemovedId = id;
	            toBeRemovedType = removedType;
	            toBeRemovedIndex = index;
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.ConfirmRelatedPricingDelete,
	                messageNote: vm.labels.DeleteMessageNote
	            }
	        };
	
	        function removeRelatedPricing(relatedPricingId, index) {
	            if (relatedPricingId) {
	                priceListItemDetailsService.deleteRelatedPricing(relatedPricingId)
	                    .then(function(response) {
	                        vm.pli.RelatedPriceListItemSOs.splice(index, 1);
	                        resetDeleteSetup();
	                    }, function(reason) {});
	            } else {
	                vm.pli.RelatedPriceListItemSOs.splice(index, 1);
	                resetDeleteSetup();
	            }
	        }
	
	        vm.confirmRemove = function() {
	            vm.confirmationPopup = false;
	            removeRelatedPricing(toBeRemovedId, toBeRemovedIndex);
	        };
	
	        vm.cancelRemove = function() {
	            vm.confirmationPopup = false;
	            resetDeleteSetup();
	        };
	
	        /* Delete functionality */
	        function checkRelatedPricing() {
	            var hasError = false;
	            for (var i = 0; i < vm.pli.RelatedPriceListItemSOs.length; i++) {
	                var relatedPriceListItemSO = vm.pli.RelatedPriceListItemSOs[i];
	                if (!relatedPriceListItemSO.relationTo || !relatedPriceListItemSO.autocomplete.selectedItem) {
	                    hasError = true;
	                    vm.pli.RelatedPriceListItemSOs[i].hasError = true;
	                    break;
	                } else {
	                    vm.pli.RelatedPriceListItemSOs[i].hasError = false;
	                    if (relatedPriceListItemSO.relationTo === 'Price List Item') {
	                        relatedPriceListItemSO[getPrefixedAttribute('RelatedChargeType__c')] = '';
	                    }
	                }
	            }
	            return hasError;
	        }
	
	        function updateChargeTypeForRelatedPricing(selectedItem, item) {
	            /* Get scope and index of the matrix entry */
	            // console.log(item);
	            if (selectedItem && item && item.relationTo === "Price List Item") {
	                item[getPrefixedAttribute('RelatedChargeType__c')] = selectedItem.Name.split(' - ')[1];
	            }
	        }
	
	        function getRelatedPricingData() {
	            var relatedData = vm.pli.RelatedPriceListItemSOs,
	                productGroup = getPrefixedAttribute('RelatedProductGroupId__c'),
	                product = getPrefixedAttribute('RelatedProductId__c'),
	                productFamily = getPrefixedAttribute('RelatedProductFamily__c'),
	                priceListItem = getPrefixedAttribute('RelatedPriceListItemId__c'),
	                custom = getPrefixedAttribute('RelatedCustomGroupFieldId__c');
	
	            for (var i = 0; i < relatedData.length; i++) {
	                if (relatedData[i][product]) {
	                    relatedData[i]['relationTo'] = priceListItemConstants.product;
	                    relatedData[i]['autocomplete'] = {
	                        querySearch: priceListItemCommonService.productSearch,
	                        displayName: 'Name',
	                        selectedItem: relatedData[i][getPrefixedAttribute('RelatedProductId__r')],
	                        selectedItemChange: updateChargeTypeForRelatedPricing
	                    };
	                }
	                if (relatedData[i][productGroup]) {
	                    relatedData[i]['relationTo'] = priceListItemConstants.productGroup;
	                    relatedData[i]['autocomplete'] = {
	                        querySearch: priceListItemCommonService.productSearch,
	                        displayName: 'Name',
	                        selectedItem: relatedData[i][getPrefixedAttribute('RelatedProductGroupId__r')],
	                        selectedItemChange: updateChargeTypeForRelatedPricing
	                    };
	                }
	                if (relatedData[i][productFamily]) {
	                    relatedData[i]['relationTo'] = priceListItemConstants.productFamily;
	                    relatedData[i]['autocomplete'] = {
	                        querySearch: priceListItemCommonService.productSearch,
	                        displayName: 'Name',
	                        selectedItem: {
	                            Name: relatedData[i][productFamily],
	                            Id: relatedData[i][productFamily]
	                        },
	                        selectedItemChange: updateChargeTypeForRelatedPricing
	                    };
	                }
	                if (relatedData[i][priceListItem]) {
	                    relatedData[i]['relationTo'] = priceListItemConstants.priceListItem;
	                    relatedData[i]['autocomplete'] = {
	                        querySearch: priceListItemCommonService.productSearch,
	                        displayName: 'Name',
	                        selectedItem: relatedData[i][getPrefixedAttribute('RelatedPriceListItemId__r')],
	                        selectedItemChange: updateChargeTypeForRelatedPricing
	                    };
	                }
	                if (relatedData[i][custom]) {
	                    relatedData[i]['relationTo'] = priceListItemConstants.custom;
	                    relatedData[i]['autocomplete'] = {
	                        'querySearch': priceListItemDetailsService.getFilteredFormulaFields,
	                        'displayName': 'Name',
	                        'selectedItem': {
	                            Name: relatedData[i][getPrefixedAttribute("RelatedCustomGroupFieldId__r")].Name,
	                            Id: relatedData[i][getPrefixedAttribute("RelatedCustomGroupFieldId__r")].Id
	                        },
	                        'sObjectName': getPrefixedAttribute('FormulaField__c')
	                    };
	                }
	            }
	        }
	        if (vm.pli.PriceListItemSO[vm.prefix + 'PriceMethod__c'] === 'Related Price') {
	            getRelatedPricingData();
	        }
	
	        function extractExpression() {
	            var chargeTypeCriteria = vm.pli.PriceListItemSO[getPrefixedAttribute('Criteria__c')];
	            var chargeTypeCriteriaObj = ((chargeTypeCriteria !== undefined && chargeTypeCriteria !== '') ? JSON.parse(chargeTypeCriteria) : '');
	            if (chargeTypeCriteriaObj) {
	                vm.chargeTypeExpression = chargeTypeCriteriaObj.exprStr;
	            } else {
	                vm.chargeTypeExpression = '';
	            }
	
	        }
	        extractExpression();
	        vm.openChargeTypeCriteriaPopup = function() {
	            $mdDialog.show({
	                controller: __webpack_require__(424),
	                template: __webpack_require__(425),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	                    selectedPli: function() {
	                        return { PriceListItemSO: vm.pli.PriceListItemSO };
	                    }
	                }
	            }).then(function(response) {
	                /* Update the PLI here */
	                vm.pli.PriceListItemSO = response.pli.PriceListItemSO;
	                extractExpression();
	            });
	        };
	
	        function getField(fieldName) {
	            var fieldObj, name;
	            if (fieldName.indexOf('__c') > -1) {
	                fieldName = getPrefixedAttribute(fieldName);
	            }
	            if (metaDataInfo) {
	                for (var i = 0; i < metaDataInfo.length; i++) {
	                    var name = metaDataInfo[i].FieldName;
	                    if (name === fieldName) {
	                        fieldObj = metaDataInfo[i];
	                        break;
	                    }
	                }
	            }
	            return fieldObj;
	        }
	        vm.getFieldValue = function(fieldName, fieldValueToBeExtracted) {
	            var field = getField(fieldName);
	            if (field) {
	                return field[fieldValueToBeExtracted];
	            } else {
	                return '';
	            }
	
	        };
	    };
	
	    priceListItemDetailsController.$inject = [
	        '$q',
	        '$scope',
	        '$mdDialog',
	        '$rootScope',
	        '$state',
	        '$stateParams',
	        'applicationService',
	        'systemConstants',
	        'i18nService',
	        'selectedPriceListItemDetails',
	        'priceListItemDetailsService',
	        'allPicklists',
	        'priceListItemCommonService',
	        'allRelatedPriceListItemPicklists',
	        'apiCallsService',
	        'cpqAdminConstants',
	        'metaData',
	        'priceListItemConstants'
	    ];
	
	    module.exports = priceListItemDetailsController;
	
	})();


/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceListItem.matrices', [])
	        .service('matricesService', __webpack_require__(611))
	        .filter('userMessage', __webpack_require__(612))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceListItem.matrices', {
	                parent: 'app.priceListItem',
	                url: '/:id/matrices',
	                views: {
	                    'priceListItemContainer': {
	                        template: __webpack_require__(613),
	                        controller: __webpack_require__(614),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    selectedPriceListItemDetails: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getPriceListItemDetails($stateParams.id);
	                    }],
	                    allPriceMatrixEntryPicklists: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getSObjectPicklistFields('PriceMatrixEntry__c', null);
	                    }],
	                    allPriceMatrixPicklists: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getSObjectPicklistFields('PriceMatrix__c', null);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 611 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var matricesService = function($q, systemConstants, remoteService, priceListItemConstants, apiCallsService) {
	        var prefix = systemConstants.nsPrefix || '',
	            allPriceMatrixEntryPicklists = [];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function setAllMatrixEntryPicklists(data) {
	            allPriceMatrixEntryPicklists = data;
	        }
	
	        function getPriceMatrix(priceMatrixId, numberOfEntriesPerChunk, chunkNumber) {
	            var defered = $q.defer(),
	                requestObj = {
	                    "PriceMatrixId": priceMatrixId,
	                    "NumberOfEntriesPerChunk": numberOfEntriesPerChunk || priceListItemConstants.treePanelItemsPerChunk,
	                    "ChunkNumber": chunkNumber || 1
	                };
	
	            remoteService.getPriceMatrix(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function getMatrixEntryPicklistValues(type) {
	            var response = [];
	            if (allPriceMatrixEntryPicklists.length && type) {
	                for (var i = 0; i < allPriceMatrixEntryPicklists.length; i++) {
	                    if (allPriceMatrixEntryPicklists[i].FieldName === getPrefixedAttribute(type)) {
	                        response = allPriceMatrixEntryPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            return response;
	        }
	
	        function getMatrixEntryAdjustmentTypes() {
	            return getMatrixEntryPicklistValues('AdjustmentType__c') || [];
	        }
	
	        function deleteMatrix(id) {
	            var defered = $q.defer(),
	                requestObj = {
	                    'PriceMatrixIds': [id]
	                };
	            remoteService.deletePricingData(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function deleteMatrixEntry(id) {
	            var defered = $q.defer(),
	                requestObj = {
	                    PriceMatrixEntryIds: [id]
	                };
	            remoteService.deletePricingData(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function processPriceDimensions(dimensions) {
	            var response = [];
	            for (var i = 0; i < dimensions.length; i++) {
	                response.push({
	                    Name: dimensions[i].PriceDimensionSO.Name,
	                    Id: dimensions[i].PriceDimensionSO.Id
	                });
	            }
	            return response;
	        }
	
	        function getPriceDimensions(searchText) {
	            var deferQ = $q.defer(),
	                requestObj = {
	                    "SearchString": searchText || ''
	                };
	            remoteService.getPriceDimensions(requestObj)
	                .then(function(response) {
	                    deferQ.resolve(processPriceDimensions(response.PriceDimensionDOs));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function getSampleData(type) {
	            if (type === 'Dimension') {
	                return {
	                    id: '',
	                    adjustmentAmount: '',
	                    adjustmentType: '',
	                    adjustmentAmountSource: {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    },
	                    dimension1: '',
	                    dimension2: '',
	                    dimension3: '',
	                    dimension4: '',
	                    dimension5: '',
	                    dimension6: '',
	                    priceMatrixId: '',
	                    sequence: ''
	                };
	            } else if (type === 'Usage') {
	                return {
	                    id: '',
	                    sequence: '',
	                    from: '',
	                    to: '',
	                    unitPrice: '',
	                    flatPrice: '',
	                    isIncluded: false,
	                    priceMatrixId: ''
	
	                };
	            } else if (type === 'Condition') {
	                return {
	                    id: '',
	                    sequence: '',
	                    adjustmentAmount: '',
	                    adjustmentType: '',
	                    adjustmentAmountSource: {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    },
	                    expression: '',
	                    priceMatrixId: ''
	                };
	            }
	        }
	
	
	
	        var service = {
	            getPriceMatrix: getPriceMatrix,
	            getMatrixEntryAdjustmentTypes: getMatrixEntryAdjustmentTypes,
	            setAllMatrixEntryPicklists: setAllMatrixEntryPicklists,
	            deleteMatrix: deleteMatrix,
	            getPriceDimensions: getPriceDimensions,
	            deleteMatrixEntry: deleteMatrixEntry,
	            getSampleData: getSampleData
	        };
	        return service;
	    };
	
	    matricesService.$inject = [
	        '$q',
	        'systemConstants',
	        'remoteService',
	        'priceListItemConstants',
	        'apiCallsService'
	    ];
	    module.exports = matricesService;
	})()


/***/ }),
/* 612 */
372,
/* 613 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"matrices-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <header>\n                <h4>Matrices</h4>\n            </header>\n            <div ng-if=\"vm.selectedPli.PriceMatrixDOs.length === 0\" class=\"no-matrices-available\"> {{vm.labels.NoMatricesAvailable}} </div>\n            <div class=\"list-table\" ng-if=\"vm.selectedPli.PriceMatrixDOs.length > 0\">\n                <ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedMatrix(event, index, item)\" class=\"right-matrix-list\">\n                    <li ng-repeat=\"item in vm.selectedPli.PriceMatrixDOs\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" ng-class=\"{active: item.selected === true}\" ng-click=\"vm.loadMatrixDetails($index)\">\n                        <span class=\"drag-icon-placeholder\">||</span>\n                        <div class=\"each-matrix-item\">\n                            <div class=\"item-name\">{{ item.PriceMatrixSO.Name }}</div>\n                            <div class=\"item-type\">{{ item.PriceMatrixSO[vm.prefix +'MatrixType__c'] }}</div>\n                        </div>\n                        <div class=\"clear-all\"></div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n        <div class=\"matrices-detail-block\">\n            <uib-alert ng-repeat=\"alert in vm.alertList\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <div class=\"pricing-header\" ng-if=\"vm.showCenterMatrixPanel === true\">\n                <i class=\"material-icons\" data-ng-click=\"vm.showRemoveConfirmation(vm.selectedMatrix.PriceMatrixSO.Id,'Matrix')\" aria-hidden=\"true\">clear</i>\n                <p data-ng-click=\"vm.openMatrixPopup('edit')\">{{vm.selectedMatrix.PriceMatrixSO.Name}}</p>\n            </div>\n            <div class=\"matrix-container\" data-ng-if=\"vm.showCenterMatrixPanel === true \">\n                <div ng-include=\"'dimension.html'\" data-ng-if=\"vm.matrixType === 'Dimension' && vm.matrixTable.headers.length > 2 \"></div>\n                <div ng-include=\"'condition.html'\" data-ng-if=\"vm.matrixType === 'Condition'\"></div>\n                <div ng-include=\"'usage.html'\" data-ng-if=\"vm.matrixType === 'Usage'\"></div>\n                <div class=\"pagination-container text-center\">\n                    <div class=\"navigation-control\">\n                        <div class=\"btn-group dropup text-right\" role=\"group\">\n                            <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                {{vm.labels.RecordsPerPage | userMessage:vm.numberOfProductsPerChunk}}\n                                <span class=\"caret\"></span>\n                            </button>\n                            <ul class=\"dropdown-menu\">\n                                <li><a href=\"#\" data-ng-click=\"vm.numberOfProductsPerChunk = 25\">25</a></li>\n                                <li><a href=\"#\" data-ng-click=\"vm.numberOfProductsPerChunk = 50\">50</a></li>\n                                <li><a href=\"#\" data-ng-click=\"vm.numberOfProductsPerChunk = 75\">75</a></li>\n                                <li><a href=\"#\" data-ng-click=\"vm.numberOfProductsPerChunk = 100\">100</a></li>\n                            </ul>\n                        </div>\n                        <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableMatrixEntryLeftBtn\" data-ng-click=\"vm.getMatrixEntry('previous')\">\n                            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                        <span class=\"disabled\">{{vm.MatrixEntryPaginationCenterText}}</span>\n                        <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableMatrixEntryRightBtn\" data-ng-click=\"vm.getMatrixEntry('next')\">\n                            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\" data-ng-disabled=\"vm.disableSaveBtn === true\">Save</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\n</div>\n<div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n    <div class=\"modalOverlay\">\n        <div class=\"modalHeaderBody\">\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n            <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n        </div>\n        <div class=\"modal-Footer text-right\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Cancel}}</span>\n            </button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Ok}}</span>\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    var matricesController = function($q, $stateParams, $state, $scope, systemConstants, i18nService, $mdDialog, selectedPriceListItemDetails, applicationService, priceListItemConstants, $timeout, matricesService, allPriceMatrixEntryPicklists, allPriceMatrixPicklists, priceListItemCommonService, $templateCache, apiCallsService) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '',
	            isFormSaved = false;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.selectedPli = selectedPriceListItemDetails;
	        vm.numberOfProductsPerChunk = priceListItemConstants.treePanelItemsPerChunk;
	        vm.alertList = [];
	        vm.disableSaveBtn = false;
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        $templateCache.put('usage.html', __webpack_require__(615));
	        $templateCache.put('condition.html', __webpack_require__(616));
	        $templateCache.put('dimension.html', __webpack_require__(617));
	
	        matricesService.setAllMatrixEntryPicklists(allPriceMatrixEntryPicklists);
	
	        vm.adjustmentTypePicklistValues = {
	            PicklistValues: matricesService.getMatrixEntryAdjustmentTypes()
	        }
	
	
	        $scope.$on('New Matrix'.split(' ').join('-'), function() {
	            vm.openMatrixPopup('new');
	        });
	
	        function getNextSequence(arr) {
	            var nextSequence,
	                maxSequence,
	                tempSeqArr = [];
	            if (arr && arr.length) {
	                for (var i = 0; i < arr.length; i++) {
	                    if (arr[i].PriceMatrixSO[getPrefixedAttribute('Sequence__c')]) {
	                        tempSeqArr.push(+arr[i].PriceMatrixSO[getPrefixedAttribute('Sequence__c')]);
	                    }
	                }
	                if (tempSeqArr.length > 0) {
	                    maxSequence = Math.max.apply(Math, tempSeqArr);;
	                    if (maxSequence) {
	                        nextSequence = maxSequence + 1;
	                    }
	                }
	            }
	            return nextSequence || 1;
	        }
	
	        function getNewMatrixSample() {
	            var sample = {
	                PriceMatrixEntrySOs: [],
	                PriceMatrixSO: {
	                    Name: ''
	                }
	            };
	            sample.PriceMatrixSO[getPrefixedAttribute('Sequence__c')] = getNextSequence(vm.selectedPli.PriceMatrixDOs);
	            sample.PriceMatrixSO[getPrefixedAttribute('Description__c')] = '';
	            sample.PriceMatrixSO[getPrefixedAttribute('StopProcessingMoreMatrices__c')] = false;
	            sample.PriceMatrixSO[getPrefixedAttribute('MatrixType__c')] = 'Dimension';
	            sample.PriceMatrixSO[getPrefixedAttribute('PriceListItemId__c')] = vm.selectedPli.PriceListItemSO[getPrefixedAttribute('PriceListItemId__c')];
	            sample.PriceMatrixSO[getPrefixedAttribute('EnableDateRange__c')] = false;
	
	            return sample;
	        }
	
	        function prepareDimensionMatrixEntries() {
	            var temp = vm.matrixTable.values,
	                priceMatrixEntrySOs = [],
	                hasError = false;
	
	            if (vm.selectedPli && vm.selectedMatrix && (selectedMatrixIndex !== undefined)) {
	                for (var i = 0; i < temp.length; i++) {
	                    var eachObj = {};
	                    if (temp[i].id) {
	                        eachObj['Id'] = temp[i].id;
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentAmount__c')] = temp[i].adjustmentAmount;
	                    eachObj[getPrefixedAttribute('AdjustmentType__c')] = temp[i].adjustmentType;
	                    eachObj[getPrefixedAttribute('PriceMatrixId__c')] = temp[i].priceMatrixId;
	                    eachObj[getPrefixedAttribute('Sequence__c')] = temp[i].sequence;
	                    eachObj[getPrefixedAttribute('PeriodStartDate__c')] = temp[i].startDate;
	                    eachObj[getPrefixedAttribute('PeriodEndDate__c')] = temp[i].endDate;
	                    if (temp[i].adjustmentAmountSource.autocomplete && temp[i].adjustmentAmountSource.autocomplete.selectedItem && temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = '';
	                    }
	                    for (var j = 0; j < 6; j++) {
	                        var field = 'dimension' + (j + 1);
	                        if (temp[i][field]) {
	                            if ((temp[i][field] !== '') || (temp[i][field] !== undefined)) {
	                                eachObj[getPrefixedAttribute('Dimension' + (j + 1) + 'Value__c')] = temp[i][field];
	                                temp[i].hasError = false;
	                            } else {
	                                /*temp[i].hasError = true;
	                                hasError = true;
	                                break;*/
	                            }
	                        } else {
	                            /*temp[i].hasError = true;
	                            hasError = true;
	                            break;*/
	
	                        }
	                    }
	                    priceMatrixEntrySOs.push(eachObj);
	                }
	                vm.selectedPli.PriceMatrixDOs[selectedMatrixIndex].PriceMatrixEntrySOs = priceMatrixEntrySOs;
	            }
	            return hasError;
	        }
	
	        function prepareUsageMatrixEntries() {
	            var temp = vm.matrixTable.values,
	                priceMatrixEntrySOs = [],
	                hasError = false;
	
	            if (vm.selectedPli && vm.selectedMatrix && (selectedMatrixIndex !== undefined)) {
	                for (var i = 0; i < temp.length; i++) {
	                    var eachObj = {};
	                    if (temp[i].id) {
	                        eachObj['Id'] = temp[i].id;
	                    }
	                    eachObj[getPrefixedAttribute('TierStartValue__c')] = temp[i].from;
	                    eachObj[getPrefixedAttribute('TierEndValue__c')] = temp[i].to;
	                    eachObj[getPrefixedAttribute('FlatPrice__c')] = temp[i].flatPrice;
	                    eachObj[getPrefixedAttribute('UsageRate__c')] = temp[i].unitPrice;
	                    eachObj[getPrefixedAttribute('IsIncluded__c')] = temp[i].isIncluded;
	                    eachObj[getPrefixedAttribute('PriceMatrixId__c')] = temp[i].priceMatrixId;
	                    eachObj[getPrefixedAttribute('PeriodStartDate__c')] = temp[i].startDate;
	                    eachObj[getPrefixedAttribute('PeriodEndDate__c')] = temp[i].endDate;
	                    priceMatrixEntrySOs.push(eachObj);
	                }
	                vm.selectedPli.PriceMatrixDOs[selectedMatrixIndex].PriceMatrixEntrySOs = priceMatrixEntrySOs;
	            }
	            return hasError;
	        }
	
	        function prepareConditionMatrixEntries() {
	            var temp = vm.matrixTable.values,
	                priceMatrixEntrySOs = [],
	                hasError = false;
	
	            if (vm.selectedPli && vm.selectedMatrix && (selectedMatrixIndex !== undefined)) {
	
	                for (var i = 0; i < temp.length; i++) {
	                    var eachObj = {};
	                    if (temp[i].id) {
	                        eachObj['Id'] = temp[i].id;
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentAmount__c')] = temp[i].adjustmentAmount;
	                    eachObj[getPrefixedAttribute('AdjustmentType__c')] = temp[i].adjustmentType;
	                    if (temp[i].adjustmentAmountSource.autocomplete && temp[i].adjustmentAmountSource.autocomplete.selectedItem && temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = '';
	                    }
	                    eachObj[getPrefixedAttribute('PriceMatrixId__c')] = temp[i].priceMatrixId;
	                    var condition = temp[i].condition,
	                        conditionObj;
	                    if (condition) {
	                        conditionObj = JSON.parse(temp[i].condition);
	                    } else {
	                        conditionObj = '';
	                    }
	                    if (!conditionObj.exprStr) {
	                        hasError = true;
	                        temp[i].hasError = true;
	                        break;
	                    } else {
	                        delete temp[i].hasError;
	                    }
	                    eachObj[getPrefixedAttribute('Condition__c')] = temp[i].condition ? temp[i].condition : '';
	                    eachObj[getPrefixedAttribute('Sequence__c')] = temp[i].sequence;
	                    eachObj[getPrefixedAttribute('PeriodStartDate__c')] = temp[i].startDate;
	                    eachObj[getPrefixedAttribute('PeriodEndDate__c')] = temp[i].endDate;
	                    priceMatrixEntrySOs.push(eachObj);
	                }
	                if (hasError) {
	                    /*addAlert({
	                        type: 'error',
	                        msg: 'Please fill condition criteria of all rows'
	                    });*/
	                    return hasError;
	                } else {
	                    vm.selectedPli.PriceMatrixDOs[selectedMatrixIndex].PriceMatrixEntrySOs = priceMatrixEntrySOs;
	                    return hasError;
	                }
	            }
	            return hasError;
	        }
	
	        function prepareMatrixEntries() {
	            var hasError = false;
	            if (vm.selectedMatrix) {
	                var selectedPriceMatrix = vm.selectedMatrix,
	                    priceMatrixSO = selectedPriceMatrix.PriceMatrixSO,
	                    matrixType = priceMatrixSO[getPrefixedAttribute('MatrixType__c')];
	                if (matrixType === 'Dimension') {
	                    hasError = prepareDimensionMatrixEntries();
	                } else if (matrixType === 'Usage') {
	                    hasError = prepareUsageMatrixEntries();
	                } else if (matrixType === 'Condition') {
	                    hasError = prepareConditionMatrixEntries();
	                }
	            }
	            return hasError;
	        }
	
	        function updatePriceListItem(toState, toParams) {
	            var defer = $q.defer();
	            if (vm.selectedPli) {
	                if (!prepareMatrixEntries()) {
	                    vm.disableSaveBtn = true;
	                    priceListItemCommonService.updatePriceListItem(angular.copy(vm.selectedPli))
	                        .then(function(response) {
	                            isFormSaved = true;
	                            if (toState) {
	                                $state.go(toState, toParams);
	                            } else {
	                                vm.disableSaveBtn = false;
	                                defer.resolve(response);
	                            }
	                        }, function(reason) {
	                            isFormSaved = false;
	                            applicationService.showErrorMessage(reason);
	                            vm.disableSaveBtn = false;
	                            defer.reject(false);
	                        });
	                } else {
	                    defer.reject(false);
	                }
	            } else {
	                defer.resolve(true);
	            }
	
	            return defer.promise;
	        }
	
	        var priceMatrixEntryPageNumber = 0,
	            selectedMatrixIndex,
	            noOfMatrixEntriesPerchunk = vm.numberOfProductsPerChunk;
	
	        function resetMatrixTable() {
	            priceMatrixEntryPageNumber = 0;
	            vm.selectedMatrix = null;
	            selectedMatrixIndex = undefined;
	            vm.showCenterMatrixPanel = false;
	            vm.matrixTable = {
	                headers: [],
	                values: []
	            };
	        }
	        vm.disableMatrixEntryLeftBtn = true;
	
	        vm.matrixTable = {
	            headers: [],
	            values: []
	        };
	
	        function createMatrixObj(obj) {
	            /* TODO : This has to call for update udpatePli with new entry to matrix so object */
	            vm.selectedPli.PriceMatrixDOs.push(obj.matrix);
	            updatePriceListItem()
	                .then(function(response) {
	                    priceListItemCommonService.getPriceListItemDetails($stateParams.id)
	                        .then(function(res) {
	                            vm.selectedPli = res;
	                            manageSaveBtnState();
	                            resetMatrixTable();
	                            vm.loadMatrixDetails(vm.selectedPli.PriceMatrixDOs.length - 1);
	                        });
	                }, function(reason) {});
	        }
	
	        function updateMatrixObj(obj) {
	            /* 
	             * TODO : This has to call for update udpatePli with new entry to matrix so object 
	             * This might have to do something with redrawing if the center matrix table 
	             */
	            vm.selectedPli.PriceMatrixDOs[selectedMatrixIndex].PriceMatrixSO = obj.matrix.PriceMatrixSO;
	            updatePriceListItem()
	                .then(function(response) {
	                    vm.selectedPli = response;
	                    loadMatrixDetailsCall(selectedMatrixIndex);
	                    /* Render the details here again with updated dimentions */
	                }, function(reason) {});
	        }
	
	        vm.openMatrixPopup = function(type) {
	            $mdDialog.show({
	                    controller: __webpack_require__(618),
	                    template: __webpack_require__(619),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    controllerAs: 'vm',
	                    resolve: {
	                        selectedMatrix: function() {
	                            return type && type == 'new' ? angular.copy(getNewMatrixSample()) : vm.selectedMatrix;
	                        },
	                        type: function() {
	                            return type;
	                        },
	                        allPicklists: function() {
	                            return allPriceMatrixPicklists;
	                        }
	                    }
	                })
	                .then(function(requestObj) {
	                    if (requestObj.type === 'new') {
	                        createMatrixObj(requestObj);
	                    } else {
	                        updateMatrixObj(requestObj);
	                        /* This has to do with redrawing of the matrix entry content at the center panel */
	                    }
	                }, function() {});
	        };
	
	        function highlightCurrentMatrix(index) {
	            var allMatrices = vm.selectedPli.PriceMatrixDOs;
	            for (var i = 0; i < allMatrices.length; i++) {
	                if (i === index) {
	                    allMatrices[i].selected = true;
	                } else {
	                    allMatrices[i].selected = false;
	                }
	            }
	        }
	
	        var columnLoadedCount = [];
	
	        function reorderMatrixColumns(index, dateRangeEnabled) {
	            columnLoadedCount.push(index);
	            if (columnLoadedCount.length === 6) {
	                var finalReorderedColumn = [];
	                for (var i = 0; i < 6; i++) {
	                    for (var j = 0; j < vm.matrixTable.headers.length; j++) {
	                        if (vm.matrixTable.headers[j].valueField === ('dimension' + (i + 1))) {
	                            finalReorderedColumn.push(angular.copy(vm.matrixTable.headers[j]));
	                            break;
	                        }
	                    }
	                }
	                if (dateRangeEnabled) {
	                    finalReorderedColumn.push({
	                        name: vm.labels.StartDate,
	                        valueField: 'startDate',
	                        fieldType: 'DATETIME'
	                    });
	                    finalReorderedColumn.push({
	                        name: vm.labels.EndDate,
	                        valueField: 'endDate',
	                        fieldType: 'DATETIME'
	                    });
	
	                }
	                finalReorderedColumn.push({
	                    name: vm.labels.AdjustmentAmount,
	                    valueField: 'adjustmentAmount',
	                    fieldType: 'STRING'
	                });
	                finalReorderedColumn.push({
	                    name: vm.labels.AdjustmentType,
	                    valueField: 'adjustmentType',
	                    fieldType: 'PICKLIST',
	                    picklistValues: {
	                        PicklistValues: matricesService.getMatrixEntryAdjustmentTypes()
	                    }
	                });
	                finalReorderedColumn.push({
	                    name: vm.labels.AdjustmentAmountSource,
	                    valueField: 'adjustmentAmountSource',
	                    fieldType: 'AUTOCOMPLETE',
	                    'autocomplete': {
	                        'querySearch': apiCallsService.searchSObjectRecords,
	                        'displayName': 'Name',
	                        'selectedItem': null,
	                        'sObjectName': getPrefixedAttribute('FormulaField__c')
	                    }
	                });
	                vm.matrixTable.headers = finalReorderedColumn;
	            }
	        }
	
	        function prepareDimensionMatrixHeaders(response, dateRangeEnabled) {
	            var selectedPriceMatrix = response.PriceMatrixDO || response.PriceMatrixDOs,
	                priceMatrixSO = selectedPriceMatrix.PriceMatrixSO,
	                priceDimensionDOs = selectedPriceMatrix.PriceDimensionDOs;
	            columnLoadedCount = [];
	            for (var i = 0; i < 6; i++) {
	                var objName = getPrefixedAttribute('Dimension' + (i + 1) + 'Id__r');
	                if (priceMatrixSO[objName]) {
	                    var fieldType = 'STRING',
	                        picklistValues = [];
	                    for (var j = 0; j < priceDimensionDOs.length; j++) {
	                        if (priceDimensionDOs[j].PriceDimensionSO.Id === priceMatrixSO[objName].Id) {
	                            fieldType = priceDimensionDOs[j].FieldDO.Type;
	                            if (fieldType === 'MULTIPICKLIST') {
	                                fieldType = 'PICKLIST';
	                            }
	                            picklistValues = priceDimensionDOs[j].FieldDO.PicklistValues;
	                            break;
	                        }
	                    }
	                    vm.matrixTable.headers.push({
	                        name: priceMatrixSO[objName].Name,
	                        valueField: 'dimension' + (i + 1),
	                        fieldType: fieldType,
	                        picklistValues: {
	                            PicklistValues: picklistValues || []
	                        }
	                    });
	                    reorderMatrixColumns(i, dateRangeEnabled);
	
	                } else {
	                    reorderMatrixColumns(i, dateRangeEnabled);
	                }
	            }
	        }
	
	        function prepareUsageMatrixHeaders(response, dateRangeEnabled) {
	            vm.matrixTable.headers = [
	                { name: 'From' },
	                { name: 'To' },
	                { name: 'Unit Price' },
	                { name: 'Flat Price' },
	                { name: 'Is Included' }
	            ];
	            if (dateRangeEnabled) {
	                vm.matrixTable.headers.splice(2, 0, { name: 'Start Date' });
	                vm.matrixTable.headers.splice(3, 0, { name: 'End Date' });
	            }
	        }
	
	        function prepareConditionMatrixHeaders(response, dateRangeEnabled) {
	            vm.matrixTable.headers = [
	                { name: 'Expression' },
	                { name: 'Adjustment Amount' },
	                { name: 'Adjustment Type' },
	                { name: vm.labels.AdjustmentAmountSource }
	            ];
	            if (dateRangeEnabled) {
	                vm.matrixTable.headers.splice(1, 0, { name: 'Start Date' });
	                vm.matrixTable.headers.splice(2, 0, { name: 'End Date' });
	            }
	        }
	
	        function prepareMatrixTableHeaders(response) {
	            var selectedPriceMatrix = response.PriceMatrixDO || response.PriceMatrixDOs,
	                priceMatrixSO = selectedPriceMatrix.PriceMatrixSO,
	                priceDimensionDOs = selectedPriceMatrix.PriceDimensionDOs,
	                matrixType = priceMatrixSO[getPrefixedAttribute('MatrixType__c')],
	                dateRangeEnabled = priceMatrixSO[getPrefixedAttribute('EnableDateRange__c')] || false;
	            vm.matrixType = matrixType;
	            vm.matrixTable.headers = [];
	            if (matrixType === 'Dimension') {
	                prepareDimensionMatrixHeaders(response, dateRangeEnabled);
	            } else if (matrixType === 'Usage') {
	                prepareUsageMatrixHeaders(response, dateRangeEnabled);
	            } else if (matrixType === 'Condition') {
	                prepareConditionMatrixHeaders(response, dateRangeEnabled);
	            }
	        }
	
	        function prepareDimensionTableContent(priceMatrixEntrySO, dateRangeEnabled) {
	            if (priceMatrixEntrySO.length) {
	                for (var i = 0; i < priceMatrixEntrySO.length; i++) {
	                    var temp = {};
	                    temp['id'] = priceMatrixEntrySO[i].Id;
	                    temp['sequence'] = priceMatrixEntrySO[i][getPrefixedAttribute('Sequence__c')];
	                    temp['adjustmentAmount'] = priceMatrixEntrySO[i][getPrefixedAttribute('AdjustmentAmount__c')] || '';
	                    temp['adjustmentType'] = priceMatrixEntrySO[i][getPrefixedAttribute('AdjustmentType__c')] || '';
	                    temp['priceMatrixId'] = priceMatrixEntrySO[i][getPrefixedAttribute('PriceMatrixId__c')] || '';
	                    const adjustmentAmountSource = priceMatrixEntrySO[i][getPrefixedAttribute('AdjustmentAmountSourceId__r')];
	                    temp['adjustmentAmountSource'] = {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    };
	                    if (adjustmentAmountSource) {
	                        temp.adjustmentAmountSource.autocomplete.selectedItem = {
	                            Name: adjustmentAmountSource.Name,
	                            Id: adjustmentAmountSource.Id
	                        };
	                    }
	                    for (var j = 0; j < 6; j++) {
	                        var field = getPrefixedAttribute('Dimension' + (j + 1) + 'Value__c');
	                        if (priceMatrixEntrySO[i][field]) {
	                            temp['dimension' + (j + 1)] = priceMatrixEntrySO[i][field];
	                        }
	                    }
	                    if (dateRangeEnabled) {
	                        temp['showDateFields'] = true;
	                        var startDate = priceMatrixEntrySO[i][getPrefixedAttribute('PeriodStartDate__c')];
	                        var endDate = priceMatrixEntrySO[i][getPrefixedAttribute('PeriodEndDate__c')];
	                        temp['startDate'] = startDate;
	                        temp['endDate'] = endDate;
	                    } else {
	                        temp['showDateFields'] = false;
	                    }
	                    vm.matrixTable.values.push(temp);
	                }
	            }
	        }
	
	        function prepareUsageTableContent(priceMatrixEntrySO, dateRangeEnabled) {
	            if (priceMatrixEntrySO.length) {
	                for (var i = 0; i < priceMatrixEntrySO.length; i++) {
	                    var temp = {};
	                    temp['id'] = priceMatrixEntrySO[i].Id;
	                    temp['sequence'] = priceMatrixEntrySO[i][getPrefixedAttribute('Sequence__c')];
	                    temp['from'] = priceMatrixEntrySO[i][getPrefixedAttribute('TierStartValue__c')] || '';
	                    temp['to'] = priceMatrixEntrySO[i][getPrefixedAttribute('TierEndValue__c')] || '';
	                    temp['unitPrice'] = priceMatrixEntrySO[i][getPrefixedAttribute('UsageRate__c')] || '';
	                    temp['flatPrice'] = priceMatrixEntrySO[i][getPrefixedAttribute('FlatPrice__c')] || '';
	                    temp['isIncluded'] = priceMatrixEntrySO[i][getPrefixedAttribute('IsIncluded__c')] || false;
	                    temp['priceMatrixId'] = priceMatrixEntrySO[i][getPrefixedAttribute('PriceMatrixId__c')] || '';
	                    if (dateRangeEnabled) {
	                        temp['showDateFields'] = true;
	                        var startDate = priceMatrixEntrySO[i][getPrefixedAttribute('PeriodStartDate__c')];
	                        var endDate = priceMatrixEntrySO[i][getPrefixedAttribute('PeriodEndDate__c')];
	                        temp['startDate'] = startDate;
	                        temp['endDate'] = endDate;
	                    } else {
	                        temp['showDateFields'] = false;
	                    }
	                    vm.matrixTable.values.push(temp);
	                }
	            }
	        }
	
	        function getConditionExpression(conditionObj) {
	            var obj = JSON.parse(conditionObj);
	            return obj.exprStr;
	        }
	
	        function prepareConditionTableContent(priceMatrixEntrySO, dateRangeEnabled) {
	            if (priceMatrixEntrySO.length) {
	                for (var i = 0; i < priceMatrixEntrySO.length; i++) {
	                    var temp = {};
	                    temp['id'] = priceMatrixEntrySO[i].Id;
	                    temp['sequence'] = priceMatrixEntrySO[i][getPrefixedAttribute('Sequence__c')];
	                    temp['expression'] = getConditionExpression(priceMatrixEntrySO[i][getPrefixedAttribute('Condition__c')])
	                    temp['adjustmentAmount'] = priceMatrixEntrySO[i][getPrefixedAttribute('AdjustmentAmount__c')] || '';
	                    temp['adjustmentType'] = priceMatrixEntrySO[i][getPrefixedAttribute('AdjustmentType__c')] || '';
	                    const adjustmentAmountSource = priceMatrixEntrySO[i][getPrefixedAttribute('AdjustmentAmountSourceId__r')];
	                    temp['adjustmentAmountSource'] = {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    };
	                    if (adjustmentAmountSource) {
	                        temp.adjustmentAmountSource.autocomplete.selectedItem = {
	                            Name: adjustmentAmountSource.Name,
	                            Id: adjustmentAmountSource.Id
	                        };
	                    }
	                    temp['priceMatrixId'] = priceMatrixEntrySO[i][getPrefixedAttribute('PriceMatrixId__c')] || '';
	                    temp['condition'] = priceMatrixEntrySO[i][getPrefixedAttribute('Condition__c')] || '';
	                    if (dateRangeEnabled) {
	                        temp['showDateFields'] = true;
	                        var startDate = priceMatrixEntrySO[i][getPrefixedAttribute('PeriodStartDate__c')];
	                        var endDate = priceMatrixEntrySO[i][getPrefixedAttribute('PeriodEndDate__c')];
	                        temp['startDate'] = startDate;
	                        temp['endDate'] = endDate;
	                    } else {
	                        temp['showDateFields'] = false;
	                    }
	                    vm.matrixTable.values.push(temp);
	                }
	            }
	        }
	
	        function prepareMatrixTableContent(response) {
	            var selectedPriceMatrix = response.PriceMatrixDO,
	                priceMatrixSO = selectedPriceMatrix.PriceMatrixSO,
	                priceMatrixEntrySO = selectedPriceMatrix.PriceMatrixEntrySOs,
	                matrixType = priceMatrixSO[getPrefixedAttribute('MatrixType__c')],
	                dateRangeEnabled = priceMatrixSO[getPrefixedAttribute('EnableDateRange__c')] || false;
	
	            if (matrixType === 'Dimension') {
	                prepareDimensionTableContent(priceMatrixEntrySO, dateRangeEnabled);
	            } else if (matrixType === 'Usage') {
	                prepareUsageTableContent(priceMatrixEntrySO, dateRangeEnabled);
	            } else if (matrixType === 'Condition') {
	                prepareConditionTableContent(priceMatrixEntrySO, dateRangeEnabled);
	            }
	        }
	
	        function updateMatrixEntryPagination(length) {
	            var pageNumber = priceMatrixEntryPageNumber,
	                endCount = length;
	
	            if (priceMatrixEntryPageNumber === 0) {
	                vm.disableMatrixEntryLeftBtn = true;
	            } else {
	                vm.disableMatrixEntryLeftBtn = false;
	            }
	            if (endCount < vm.numberOfProductsPerChunk) {
	                vm.disableMatrixEntryRightBtn = true;
	            } else {
	                vm.disableMatrixEntryRightBtn = false;
	            }
	
	            if (endCount < vm.numberOfProductsPerChunk) {
	                vm.MatrixEntryPaginationCenterText = '(' + (priceMatrixEntryPageNumber * vm.numberOfProductsPerChunk + 1) + '-' + (priceMatrixEntryPageNumber * vm.numberOfProductsPerChunk + endCount) + ')';
	            } else {
	                vm.MatrixEntryPaginationCenterText = '(' + (priceMatrixEntryPageNumber * vm.numberOfProductsPerChunk + 1) + '-' + ((priceMatrixEntryPageNumber + 1) * vm.numberOfProductsPerChunk) + ')';
	            }
	        }
	
	        function loadMatrixEntries(type, pageNumber, previousSelectedMatrixIndex) {
	            var index = selectedMatrixIndex;
	            if (previousSelectedMatrixIndex >= 0) {
	                index = previousSelectedMatrixIndex;
	                selectedMatrixIndex = previousSelectedMatrixIndex;
	                vm.selectedMatrix = vm.selectedPli.PriceMatrixDOs[index];
	                vm.showCenterMatrixPanel = true;
	                highlightCurrentMatrix(index);
	            } else {
	                index = selectedMatrixIndex;
	            }
	
	            var selectedPriceMatrix = vm.selectedPli.PriceMatrixDOs[index],
	                priceMatrixSO = selectedPriceMatrix.PriceMatrixSO,
	                priceMatrixId = priceMatrixSO.Id,
	                toBeCalledWithPageNumber;
	            if (pageNumber >= 0) {
	                toBeCalledWithPageNumber = (type === 'next' ? (pageNumber + 1) : (pageNumber + 1));
	                priceMatrixEntryPageNumber = pageNumber;
	                vm.isRightPanelVisible = true;
	            } else {
	                toBeCalledWithPageNumber = priceMatrixEntryPageNumber;
	            }
	
	            matricesService.getPriceMatrix(priceMatrixId, vm.numberOfProductsPerChunk, toBeCalledWithPageNumber)
	                .then(function(response) {
	                    prepareMatrixTableHeaders(response);
	                    prepareMatrixTableContent(response);
	                    updateMatrixEntryPagination(response.PriceMatrixDO.PriceMatrixEntrySOs.length);
	                }, function(reason) {});
	        }
	
	        function loadMatrixDetailsCall(index) {
	            /*Todo : if product option is selected already, then save */
	
	            resetMatrixTable();
	            selectedMatrixIndex = index;
	            var selectedPriceMatrix = vm.selectedPli.PriceMatrixDOs[index];
	            vm.selectedMatrix = selectedPriceMatrix;
	            vm.showCenterMatrixPanel = true;
	            highlightCurrentMatrix(index);
	            loadMatrixEntries();
	        }
	
	        vm.loadMatrixDetails = function(index) {
	            /* 
	             * TODO : Save if any is opened already. and then load this new one 
	             *  1. get the right pricing matrix from the right side panel. use matrix id for this .
	             *  2. make the header array and value array from the selected pli.
	             *  3. load the data in the center of the panel 
	             */
	
	            if (vm.selectedMatrix && Object.keys(vm.selectedMatrix).length > 0) {
	                updatePriceListItem()
	                    .then(function(response) {
	                        $timeout(function() {
	                            vm.numberOfProductsPerChunk = priceListItemConstants.treePanelItemsPerChunk;
	                            loadMatrixDetailsCall(index);
	                        }, 100);
	
	                    }, function(reason) {});
	            } else {
	                loadMatrixDetailsCall(index);
	            }
	        };
	        vm.getMatrixEntry = function(type) {
	            var selectedMIndex = selectedMatrixIndex,
	                matrixEntryPageNumber;
	            if (type === 'next') {
	                priceMatrixEntryPageNumber++;
	            } else if (type === 'previous') {
	                priceMatrixEntryPageNumber--;
	            }
	            matrixEntryPageNumber = priceMatrixEntryPageNumber;
	            /* TODO : Save the current 25 items first and on success load the rest data set */
	            /* Prepare the MatrixDO if any and then call the udpate PLI */
	            updatePriceListItem()
	                .then(function(response) {
	                    loadMatrixEntries(type, matrixEntryPageNumber, selectedMIndex);
	                }, function(reason) {});
	
	        };
	        var matrixEntriesDeregisterFunction = $scope.$watch('vm.numberOfProductsPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                if (vm.selectedMatrix && Object.keys(vm.selectedMatrix).length > 0) {
	                    var selectedIndex = selectedMatrixIndex;
	                    updatePriceListItem()
	                        .then(function(response) {
	                            $timeout(function() {
	                                priceMatrixEntryPageNumber = 0;
	                                loadMatrixDetailsCall(selectedIndex);
	                            }, 100);
	                        }, function(reason) {});
	                }
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            matrixEntriesDeregisterFunction();
	            vm = null;
	        });
	
	        var toBeRemovedId, typeToBeRemoved, toBeRemovedIndex;
	
	        function resetDeleteSetup() {
	            toBeRemovedId = typeToBeRemoved = toBeRemovedIndex = undefined;
	        }
	
	        vm.showRemoveConfirmation = function(id, type, index) {
	            vm.confiramtionPopup = true;
	            toBeRemovedId = id;
	            typeToBeRemoved = type;
	            toBeRemovedIndex = (type === 'Matrix' ? selectedMatrixIndex : index);
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.ConfirmMatrixDelete,
	                messageNote: vm.labels.DeleteMessageNote
	            }
	        };
	
	        function reloadPliDetails() {
	            priceListItemCommonService.getPriceListItemDetails($stateParams.id)
	                .then(function(response) {
	                    vm.selectedPli = response;
	                    manageSaveBtnState();
	                });
	        }
	
	        function reSequenceMatrixEntries() {
	            for (var item = 0; item < vm.matrixTable.values.length; item++) {
	                vm.matrixTable.values[item].sequence = ((item + 1) + (priceMatrixEntryPageNumber * vm.numberOfProductsPerChunk));
	            }
	        }
	
	        function removeMatrixEntry(matrixEntryId, index) {
	            if (matrixEntryId) {
	                matricesService.deleteMatrixEntry(matrixEntryId)
	                    .then(function(response) {
	                        vm.matrixTable.values.splice(index, 1);
	                        updateMatrixEntryPagination(vm.matrixTable.values.length);
	                        resetDeleteSetup();
	                        reSequenceMatrixEntries();
	                    }, function(reason) {});
	            } else {
	                vm.matrixTable.values.splice(index, 1);
	                updateMatrixEntryPagination(vm.matrixTable.values.length);
	                resetDeleteSetup();
	                reSequenceMatrixEntries();
	            }
	        }
	
	        function sequenceMatrices() {
	            var matrices = vm.selectedPli.PriceMatrixDOs;
	            for (var i = 0; i < matrices.length; i++) {
	                matrices[i].PriceMatrixSO[getPrefixedAttribute('Sequence__c')] = (i + 1);
	            }
	        }
	
	        function removeMatrix(matrixId, index) {
	            vm.disableSaveBtn = true;
	            matricesService.deleteMatrix(matrixId)
	                .then(function(response) {
	                    vm.selectedPli.PriceMatrixDOs.splice(index, 1);
	                    resetMatrixTable();
	                    resetDeleteSetup();
	                    /* Update the sequence number in salesforce*/
	                    sequenceMatrices();
	                    vm.disableSaveBtn = false;
	                    updatePriceListItem()
	                        .then(function(res) {
	                            reloadPliDetails();
	                        });
	
	                }, function(reason) {
	                    vm.disableSaveBtn = false;
	                });
	        }
	
	        vm.confirmRemove = function() {
	            vm.confiramtionPopup = false;
	            if (typeToBeRemoved === 'Matrix') {
	                removeMatrix(toBeRemovedId, toBeRemovedIndex);
	            } else if (typeToBeRemoved === 'MatrixEntry') {
	                removeMatrixEntry(toBeRemovedId, toBeRemovedIndex);
	            }
	
	        };
	
	        vm.cancelRemove = function() {
	            vm.confiramtionPopup = false;
	            resetDeleteSetup();
	        };
	
	        function getNextMatrixSequence() {
	            var nextSequence,
	                sequenceArr = [],
	                maxSequence;
	            for (var i = 0; i < vm.matrixTable.values.length; i++) {
	                var sequence = vm.matrixTable.values[i].sequence;
	                if (sequence) {
	                    sequenceArr.push(sequence);
	                }
	            }
	            if (sequenceArr.length > 0) {
	                maxSequence = Math.max.apply(Math, sequenceArr);;
	                if (maxSequence) {
	                    nextSequence = maxSequence + 1;
	                }
	            }
	            return nextSequence || 1;
	        }
	        vm.addRowToMatrixEntryTable = function(index) {
	            /*TODO : allow only 25 items to be added per page. show warning message after that */
	            if (vm.matrixTable.values.length < vm.numberOfProductsPerChunk) {
	                var matrixType = vm.matrixType,
	                    sampleMatrixEntry,
	                    priceMatrixSO = vm.selectedMatrix.PriceMatrixSO,
	                    dateRangeEnabled = priceMatrixSO[getPrefixedAttribute('EnableDateRange__c')] || false;
	
	                if (matrixType === 'Dimension') {
	                    sampleMatrixEntry = matricesService.getSampleData('Dimension');
	
	                } else if (matrixType === 'Usage') {
	                    sampleMatrixEntry = matricesService.getSampleData('Usage');
	
	                } else if (matrixType === 'Condition') {
	                    sampleMatrixEntry = matricesService.getSampleData('Condition');
	                }
	                if (dateRangeEnabled) {
	                    sampleMatrixEntry['showDateFields'] = true;
	                    sampleMatrixEntry['startDate'] = undefined;
	                    sampleMatrixEntry['endDate'] = undefined;
	                }
	                sampleMatrixEntry.priceMatrixId = vm.selectedMatrix.PriceMatrixSO.Id;
	                sampleMatrixEntry.sequence = getNextMatrixSequence();
	
	                if (index >= 0) {
	                    vm.matrixTable.values.splice((index + 1), 0, angular.copy(sampleMatrixEntry));
	                } else {
	                    vm.matrixTable.values.push(angular.copy(sampleMatrixEntry));
	                }
	                updateMatrixEntryPagination(vm.matrixTable.values.length);
	            } else {
	                applicationService.showErrorMessage({
	                    type: 'error',
	                    message: $filter('userMessage')(vm.labels.NoOfMatrixEntryExceeded, vm.numberOfProductsPerChunk)
	                });
	            }
	
	        };
	
	        vm.save = function(e, toState, toParams) {
	            updatePriceListItem(toState, toParams).then(function(response) {
	                if (response && vm.matrixTable.values.length > 0) {
	                    var selectedMatrix = response.PriceMatrixDOs.find(function(item) {
	                        return item.PriceMatrixSO.Id === vm.selectedMatrix.PriceMatrixSO.Id;
	                    });
	                    for (var i = 0; i < vm.matrixTable.values.length; i++) {
	                        if (!vm.matrixTable.values[i].id) {
	                            vm.matrixTable.values[i].id = selectedMatrix.PriceMatrixEntrySOs[i].Id;
	                        }
	                    }
	                }
	            });
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (isFormSaved) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.save(e, toState, toParams);
	            }
	
	        });
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        function findIndex(arr, obj) {
	            var index;
	            for (var item = 0; item < arr.length; item++) {
	                if (angular.equals(angular.copy(arr[item]), angular.copy(obj))) {
	                    index = item;
	                }
	            }
	            return index;
	        }
	
	        function reSequenceMatrixEntries() {
	            for (var item = 0; item < vm.matrixTable.values.length; item++) {
	                vm.matrixTable.values[item].sequence = ((item + 1) + (priceMatrixEntryPageNumber * vm.numberOfProductsPerChunk));
	            }
	        }
	
	        vm.addDroppedMatrix = function(event, index, item) {
	            var location = findIndex(angular.copy(vm.selectedPli.PriceMatrixDOs), item);
	            if (location >= 0) {
	                vm.selectedPli.PriceMatrixDOs.splice(parseInt(location), 1);
	            }
	            vm.selectedPli.PriceMatrixDOs.splice(parseInt(index), 0, item);
	
	            for (var item = 0; item < vm.selectedPli.PriceMatrixDOs.length; item++) {
	                vm.selectedPli.PriceMatrixDOs[item].PriceMatrixSO[getPrefixedAttribute('Sequence__c')] = (item + 1);
	            }
	
	            if (vm.selectedMatrix) {
	                for (var item = 0; item < vm.selectedPli.PriceMatrixDOs.length; item++) {
	                    if (vm.selectedPli.PriceMatrixDOs[item].PriceMatrixSO.Id === vm.selectedMatrix.PriceMatrixSO.Id) {
	                        vm.selectedMatrix.PriceMatrixSO[getPrefixedAttribute('Sequence__c')] = vm.selectedPli.PriceMatrixDOs[item].PriceMatrixSO[getPrefixedAttribute('Sequence__c')];
	                    }
	                }
	            }
	            return true;
	        };
	
	        vm.addDroppedMatrixEntries = function(event, index, item) {
	            var location = findIndex(angular.copy(vm.matrixTable.values), item);
	            if (location >= 0) {
	                vm.matrixTable.values.splice(parseInt(location), 1);
	            }
	            vm.matrixTable.values.splice(parseInt(index), 0, item);
	
	            reSequenceMatrixEntries();
	
	            return true;
	        };
	
	        function removeExtraFieldsFromConditionCriteria(conditionCriteria) {
	            var filters = conditionCriteria.filter.predicates,
	                childFilters = conditionCriteria.filter.childFilter.predicates;
	            if (filters.length) {
	                for (var i = 0; i < filters.length; i++) {
	                    delete filters[i].picklistValues;
	                    delete filters[i].targetField;
	                }
	            }
	            if (childFilters.length) {
	                for (var i = 0; i < childFilters.length; i++) {
	                    delete childFilters[i].picklistValues;
	                    delete childFilters[i].targetField;
	                }
	            }
	            return conditionCriteria;
	        }
	
	        function updateMatrixEntryObj(obj) {
	            var selectedIndex = obj.index,
	                conditionCriteria = removeExtraFieldsFromConditionCriteria(obj.conditionCriteria),
	                matrixEntry = vm.matrixTable.values[selectedIndex];
	
	            matrixEntry.condition = JSON.stringify(conditionCriteria);
	            matrixEntry.expression = conditionCriteria.exprStr;
	
	        }
	
	        vm.openConditionCriteria = function(condition, index) {
	            $mdDialog.show({
	                    controller: __webpack_require__(620),
	                    template: __webpack_require__(621),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    controllerAs: 'vm',
	                    resolve: {
	                        selectedCondition: function() {
	                            return condition;
	                        },
	                        selectedMatrixEntryIndex: function() {
	                            return index;
	                        }
	                    }
	                })
	                .then(function(requestObj) {
	                    updateMatrixEntryObj(requestObj);
	                }, function() {});
	        };
	
	        function manageSaveBtnState() {
	            if (vm.selectedPli.PriceMatrixDOs.length === 0) {
	                vm.disableSaveBtn = true;
	            } else {
	                vm.disableSaveBtn = false;
	            }
	        }
	        manageSaveBtnState();
	    };
	
	    matricesController.$inject = [
	        '$q',
	        '$stateParams',
	        '$state',
	        '$scope',
	        'systemConstants',
	        'i18nService',
	        '$mdDialog',
	        'selectedPriceListItemDetails',
	        'applicationService',
	        'priceListItemConstants',
	        '$timeout',
	        'matricesService',
	        'allPriceMatrixEntryPicklists',
	        'allPriceMatrixPicklists',
	        'priceListItemCommonService',
	        '$templateCache',
	        'apiCallsService'
	    ];
	
	    module.exports = matricesController;
	})();


/***/ }),
/* 615 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"usage-container\" ng-if=\"vm.matrixType === 'Usage'\">\n    <div class=\"matrix-table-header\" layout=\"row\">\n        <div flex=\"5\"></div>\n        <div flex=\"20\" data-ng-repeat=\"item in vm.matrixTable.headers\" title=\"{{::item.name}}\">{{::item.name}}</div>\n    </div>\n    <div class=\"clearfix\"></div>\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addRowToMatrixEntryTable()\" data-ng-if=\"vm.matrixTable.values.length === 0\">\n        <i class=\"material-icons\">add</i>\n    </button>\n    <div class=\"matrix-table-body\">\n        <ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedMatrixEntries(event, index, item)\" class=\"matrix-entry-list\">\n            <li ng-repeat=\"item in vm.matrixTable.values\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" class=\"individual-row\" layout=\"row\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\" flex=\"5\">\n                    <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                        <i class=\"material-icons\">more_vert</i>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li data-ng-click=\"vm.showRemoveConfirmation(item.id,'MatrixEntry', $index)\" class=\"action-Menu\">\n                            <i class=\"material-icons\">clear</i>\n                            <span class=\"remove-label\">{{vm.labels.Remove}}</span>\n                        </li>\n                        <li class=\"action-Menu\" data-ng-click=\"vm.addRowToMatrixEntryTable($index)\">\n                            <i class=\"material-icons\">add</i>\n                            <span class=\"add-label\">Add</span>\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.from\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.to\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item usage-date-range-field\" ng-if=\"item.showDateFields\" flex=\"20\">\n                    <material-form-field model=\"item.startDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item usage-date-range-field\" ng-if=\"item.showDateFields\" flex=\"20\">\n                    <material-form-field model=\"item.endDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.unitPrice\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.flatPrice\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.isIncluded\" field-type=\"CHECKBOX\" is-editable=\"true\" show-inline=\"true\" field-label=\"''\" class=\"text-center\">\n                    </material-form-field>\n                </div>\n            </li>\n        </ul>\n        <div class=\"clearfix\"></div>\n    </div>\n</div>\n"

/***/ }),
/* 616 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"condition-container\">\n    <div class=\"matrix-table-header\" layout=\"row\">\n        <div flex=\"5\"></div>\n        <div flex=\"20\" data-ng-repeat=\"item in vm.matrixTable.headers\" title=\"{{::item.name}}\" ng-class=\"{'condition-expression' : item.name === 'Expression'}\">{{::item.name}}</div>\n        <!-- <div title=\"{{vm.labels.Expression}}\" class=\"condition-expression\">{{::vm.labels.Expression}}</div>\n        <div title=\"{{vm.labels.AdjustmentAmount}}\">{{::vm.labels.AdjustmentAmount}}</div>\n        <div title=\"{{vm.labels.AdjustmentType}}\">{{::vm.labels.AdjustmentType}}</div> -->\n    </div>\n    <div class=\"clearfix\"></div>\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addRowToMatrixEntryTable()\" data-ng-if=\"vm.matrixTable.values.length === 0\">\n        <i class=\"material-icons\">add</i>\n    </button>\n    <div class=\"matrix-table-body\">\n        <ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedMatrixEntries(event, index, item)\" class=\"matrix-entry-list\">\n            <li ng-repeat=\"item in vm.matrixTable.values\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" class=\"individual-row\" ng-class=\"{'error': item.hasError}\" layout=\"row\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\" flex=\"5\">\n                    <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                        <i class=\"material-icons\">more_vert</i>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li data-ng-click=\"vm.showRemoveConfirmation(item.id,'MatrixEntry', $index)\" class=\"action-Menu\">\n                            <i class=\"material-icons\">clear</i>\n                            <span class=\"remove-label\">{{vm.labels.Remove}}</span>\n                        </li>\n                        <li class=\"action-Menu\" data-ng-click=\"vm.addRowToMatrixEntryTable($index)\">\n                            <i class=\"material-icons\">add</i>\n                            <span class=\"add-label\">Add</span>\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"item\" style=\"position: relative;width: 500px;\" flex=\"20\">\n                    <div style=\"width:calc(100% - 25px);\">\n                        <material-form-field model=\"item.expression\" field-type=\"STRING\" is-editable=\"true\" field-label=\"''\" is-disabled=\"true\">\n                        </material-form-field>\n                    </div>\n                    <button type=\"button\" class=\"slds-button\" style=\"padding: 0px;position: absolute;top: 5px;right: 5px;\" data-ng-click=\"vm.openConditionCriteria(item.condition, $index)\">\n                        <i class=\"fa fa-external-link\"></i>\n                    </button>\n                </div>\n                <div class=\"item usage-date-range-field\" ng-if=\"item.showDateFields\" flex=\"20\">\n                    <material-form-field model=\"item.startDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item usage-date-range-field\" ng-if=\"item.showDateFields\" flex=\"20\">\n                    <material-form-field model=\"item.endDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.adjustmentAmount\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.adjustmentType\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"vm.adjustmentTypePicklistValues\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field field-type=\"autocomplete\" properties=\"item.adjustmentAmountSource\" field-label=\"' '\" name=\"autocompletefield\">\n                    </material-form-field>\n                </div>\n            </li>\n        </ul>\n        <div class=\"clearfix\"></div>\n    </div>\n</div>\n"

/***/ }),
/* 617 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"dimension-container\">\n    <div class=\"matrix-table-header\" layout=\"row\">\n        <div flex=\"5\"></div>\n        <div flex=\"20\" data-ng-repeat=\"item in vm.matrixTable.headers\" title=\"{{::item.name}}\" >{{::item.name}}</div>\n    </div>\n    <div class=\"clearfix\"></div>\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addRowToMatrixEntryTable()\" data-ng-if=\"vm.matrixTable.values.length === 0\">\n        <i class=\"material-icons\">add</i>\n    </button>\n    <div class=\"matrix-table-body\">\n        <ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedMatrixEntries(event, index, item)\" class=\"matrix-entry-list\">\n            <li ng-repeat=\"item in vm.matrixTable.values\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" class=\"individual-row\" layout=\"row\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\" flex=\"5\">\n                    <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                        <i class=\"material-icons\">more_vert</i>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li data-ng-click=\"vm.showRemoveConfirmation(item.id,'MatrixEntry', $index)\" class=\"action-Menu\">\n                            <i class=\"material-icons\">clear</i>\n                            <span class=\"remove-label\">{{vm.labels.Remove}}</span>\n                        </li>\n                        <li class=\"action-Menu\" data-ng-click=\"vm.addRowToMatrixEntryTable($index)\">\n                            <i class=\"material-icons\">add</i>\n                            <span class=\"add-label\">Add</span>\n                        </li>\n                    </ul>\n                </div>\n                <div data-ng-repeat=\"header in vm.matrixTable.headers\" class=\"item\" ng-class=\"{'dimension-date-range-field': header.fieldType === 'DATETIME'}\" flex=\"20\">\n                    <material-form-field model=\"item[header.valueField]\" field-type=\"STRING\" is-editable=\"true\" field-label=\"''\" ng-if=\"header.fieldType !== 'PICKLIST' && header.fieldType !== 'MULTIPICKLIST' && header.fieldType !== 'DATETIME' && header.valueField !== 'adjustmentAmountSource'\">\n                    </material-form-field>\n                    <material-form-field model=\"item[header.valueField]\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"''\" ng-if=\"header.fieldType === 'DATETIME'\">\n                    </material-form-field>\n                    <material-form-field model=\"item[header.valueField]\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"header.picklistValues\" field-label=\"''\" ng-if=\"header.fieldType === 'PICKLIST'\">\n                    </material-form-field>\n                    <material-form-field model=\"item[header.valueField]\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" properties=\"header.picklistValues\" field-label=\"''\" ng-if=\"header.fieldType === 'MULTIPICKLIST'\">\n                    </material-form-field>\n                    <material-form-field field-type=\"autocomplete\" properties=\"item.adjustmentAmountSource\" field-label=\"' '\" name=\"autocompletefield\" ng-if=\"header.valueField === 'adjustmentAmountSource'\">\n                    </material-form-field>\n                </div>\n            </li>\n        </ul>\n        <div class=\"clearfix\"></div>\n    </div>\n</div>\n"

/***/ }),
/* 618 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var priceListItemController = function($scope, $mdDialog, i18nService, systemConstants, selectedMatrix, type, allPicklists, matricesService) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.dimensions = [];
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        vm.alertList = [];
	        vm.selectedMatrix = selectedMatrix;
	
	
	        function prepareDimensions() {
	            var priceMatrixSO = selectedMatrix.PriceMatrixSO;
	            vm.dimensions = [];
	            for (var i = 0; i < 6; i++) {
	                var objName = getPrefixedAttribute('Dimension' + (i + 1) + 'Id__r'),
	                    objValueType = getPrefixedAttribute('Dimension' + (i + 1) + 'ValueType__c'),
	                    id = objName.Id;
	                if (priceMatrixSO[objName]) {
	                    vm.dimensions.push({
	                        id: id,
	                        dimensionValueType: priceMatrixSO[objValueType],
	                        dimensionLabel: 'Dimension ' + (i + 1),
	                        autocomplete: {
	                            'querySearch': matricesService.getPriceDimensions,
	                            'displayName': 'Name',
	                            'selectedItem': {
	                                Name: priceMatrixSO[objName].Name,
	                                Id: priceMatrixSO[objName].Id
	                            }
	                        }
	                    });
	                } else {
	                    vm.dimensions.push({
	                        dimensionValueType: priceMatrixSO[objValueType],
	                        dimensionLabel: 'Dimension ' + (i + 1),
	                        autocomplete: {
	                            'querySearch': matricesService.getPriceDimensions,
	                            'displayName': 'Name'
	                        }
	                    });
	                }
	            }
	        }
	        prepareDimensions();
	
	        function getPicklistValues(type) {
	            var response = [];
	            if (allPicklists.length && type) {
	                for (var i = 0; i < allPicklists.length; i++) {
	                    if (allPicklists[i].FieldName === getPrefixedAttribute(type)) {
	                        response = allPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            return response;
	        }
	        vm.matrixTypePicklistEntries = {
	            PicklistValues: getPicklistValues('MatrixType__c')
	        };
	        vm.dimensionPicklistEntries = {
	            PicklistValues: getPicklistValues('Dimension1ValueType__c')
	        };
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        vm.removeDimension = function(index) {
	            //vm.dimensions.splice(index, 1);
	            /* TODO : remove the selected item of this index .*/
	            var item = vm.dimensions[index];
	            item.dimensionValueType = '';
	            delete item.autocomplete.selectedItem;
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        function addDimensionsToMatrixSo() {
	            var errorFree = true,
	                uniqueEntries = [];
	
	            for (var i = 0; i < vm.dimensions.length; i++) {
	                var dimension = vm.dimensions[i].autocomplete.selectedItem,
	                    objName = getPrefixedAttribute('Dimension' + (i + 1) + 'Id__c'),
	                    relationObjName = getPrefixedAttribute('Dimension' + (i + 1) + 'Id__r'),
	                    objValueType = getPrefixedAttribute('Dimension' + (i + 1) + 'ValueType__c');
	
	                if (dimension && dimension.Id) {
	                    if (uniqueEntries.indexOf(dimension.Id) <= -1) {
	
	                        uniqueEntries.push(dimension.Id);
	
	                        vm.selectedMatrix.PriceMatrixSO[objName] = dimension.Id;
	                        vm.selectedMatrix.PriceMatrixSO[relationObjName] = {
	                            Id: dimension.Id,
	                            Name: dimension.Name
	                        };
	                        vm.selectedMatrix.PriceMatrixSO[objValueType] = vm.dimensions[i].dimensionValueType;
	                    } else {
	                        addAlert({
	                            msg: vm.labels.DuplicateDimensions
	                        });
	                        errorFree = false;
	                        break;
	                    }
	                } else {
	                    vm.selectedMatrix.PriceMatrixSO[objName] = '';
	                    vm.selectedMatrix.PriceMatrixSO[relationObjName] = {
	                        Id: '',
	                        Name: ''
	                    };
	                    vm.selectedMatrix.PriceMatrixSO[objValueType] = '';
	                }
	
	            }
	            return errorFree;
	        }
	        vm.save = function() {
	            vm.matrixDetailsForm.$setSubmitted();
	            if (vm.matrixDetailsForm.$valid) {
	                if (addDimensionsToMatrixSo()) {
	                    $mdDialog.hide({
	                        type: type,
	                        matrix: angular.copy(vm.selectedMatrix)
	                    });
	                }
	            }
	
	        };
	
	    };
	
	    priceListItemController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'selectedMatrix',
	        'type',
	        'allPicklists',
	        'matricesService'
	    ];
	
	    module.exports = priceListItemController;
	})();


/***/ }),
/* 619 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"matrix-dialog\">\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n        </i>\n    </button>\n    <md-dialog-content class=\"matrix-dialog-content\">\n        <md-tabs md-selected=\"vm.selctedTabIndex\" md-dynamic-height md-border-bottom>\n            <md-tab label=\"DETAILS\">\n                <md-content>\n                    <div class=\"error-indicator\">\n                        <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"5000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n                    </div>\n                    <div class=\"md-padding content-wide\">\n                        <form class=\"product-detail-form\" novalidate name=\"vm.matrixDetailsForm\">\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedMatrix.PriceMatrixSO.Name\" field-type=\"STRING\" is-disabled=\"true\" field-label=\"vm.labels.MatrixName\" name=\"matrixName\">\n                                    </material-form-field>\n                                </div>\n                                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                    <material-form-field model=\"vm.selectedMatrix.PriceMatrixSO[vm.prefix+'Sequence__c']\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"vm.labels.Sequence\" name=\"sequence\" is-required=\"true\" is-disabled=\"true\">\n                                    </material-form-field>\n                                    <div ng-messages=\"vm.matrixDetailsForm.sequence.$error\" ng-if=\"vm.matrixDetailsForm.sequence.$touched || vm.matrixDetailsForm.$submitted\">\n                                        <p ng-message=\"required\" class=\"formError\">\n                                            {{vm.labels.MandatoryField}}\n                                        </p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" style=\"height:85px;\">\n                                    <material-form-field model=\"vm.selectedMatrix.PriceMatrixSO[vm.prefix+'Description__c']\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.ShortDescription\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedMatrix.PriceMatrixSO[vm.prefix+ 'StopProcessingMoreMatrices__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.StopProcessingMoreMatrices\" show-inline=\"true\">\n                                    </material-form-field>\n                                </div>\n                                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                    <material-form-field model=\"vm.selectedMatrix.PriceMatrixSO[vm.prefix+'MatrixType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.matrixTypePicklistEntries\" field-label=\"::vm.labels.MatrixType\" name=\"matrixType\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedMatrix.PriceMatrixSO[vm.prefix+ 'EnableDateRange__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.EnableDateRange\" show-inline=\"true\">\n                                    </material-form-field>\n                                </div>\n                                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </md-content>\n            </md-tab>\n            <md-tab label=\"DIMENSIONS\" ng-if=\"vm.selectedMatrix.PriceMatrixSO[vm.prefix+'MatrixType__c'] === 'Dimension'\">\n                <md-content>\n                    <div class=\"dimension-container\">\n                        <div data-ng-repeat=\"item in vm.dimensions\" class=\"each-dimension\">\n                            <div class=\"auto-complete-field\">\n                                <material-form-field field-type=\"autocomplete\" properties=\"item\" field-label=\"::item.dimensionLabel\">\n                                </material-form-field>\n                            </div>\n                            <div class=\"auto-complete-field\">\n                                <material-form-field model=\"item.dimensionValueType\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.dimensionPicklistEntries\" field-label=\"::vm.labels.DimensionValueType\" name=\"dimensionValueType\">\n                                </material-form-field>\n                            </div>\n                            <div class=\"action-items\">\n                                <div class=\"btn-group\" role=\"group\">\n                                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeDimension($index)\">\n                                        <i class=\"material-icons\">clear</i>\n                                    </button>\n                                </div>\n                            </div>\n                            <div class=\"clearfix\"></div>\n                        </div>\n                    </div>\n                </md-content>\n            </md-tab>\n        </md-tabs>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 620 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var conditionCriteriaController = function($scope, systemConstants, $mdDialog, i18nService, selectedCondition, selectedMatrixEntryIndex, priceListItemCommonService) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        let $html = document.querySelector('html');
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	        vm.prefix = prefix;
	        vm.alertList = [];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	        $html.style['overflow-y'] = "hidden";
	        vm.save = function() {
	            if (!lineItemsFilterListContainsError() && !productAttributesFilterListContainsError()) {
	                vm.chargeTypeCriteria.fields = [];
	                updateCriteriaContentForLineItems();
	                updateCriteriaContentForProductAttribute();
	                var lineItemExpStr = prepareLineItemsCriteriaExpression(vm.chargeTypeCriteria.filter.condExpr);
	                var productAttributeExpStr = prepareProductAttributesCriteriaExpression(vm.chargeTypeCriteria.filter.childFilter.condExpr);
	                var finalExpression = '';
	                if (lineItemExpStr) {
	                    finalExpression += lineItemExpStr;
	                }
	                if (productAttributeExpStr) {
	                    if (lineItemExpStr) {
	                        finalExpression += ' AND ';
	                    }
	                    finalExpression += productAttributeExpStr;
	                }
	                vm.chargeTypeCriteria.exprStr = finalExpression;
	
	                $mdDialog.hide({
	                    conditionCriteria: angular.copy(vm.chargeTypeCriteria),
	                    index: selectedMatrixEntryIndex
	                });
	            }
	        };
	
	
	        /* Charge Type Criteria */
	        function updateChargeTypesForLineItems(item) {
	            if (item) {
	                var lineItems = vm.chargeTypeCriteria.filter.predicates;
	                for (var i = 0; i < lineItems.length; i++) {
	                    if (item.label === lineItems[i].targetField.autocomplete.selectedItem.label) {
	
	                        if (item.fieldType) {
	                            lineItems[i].FieldType = item.fieldType;
	                            if (item.fieldType === 'BOOLEAN') {
	                                lineItems[i].FieldValue = false;
	                            } else if (item.fieldType === 'DOUBLE' || item.fieldType === 'CURRENCY' || item.fieldType === 'PERCENT') {
	                                lineItems[i].FieldValue = 0;
	                            } else {
	                                lineItems[i].FieldValue = '';
	                            }
	                        }
	                        if (item.picklistValues) {
	                            lineItems[i].picklistValues = {
	                                PicklistValues: item.picklistValues
	                            };
	                        }
	                        break;
	                    }
	                }
	            }
	        }
	
	        function updateChargeTypesForProductAttributes(item) {
	            if (item) {
	                var productAttributes = vm.chargeTypeCriteria.filter.childFilter.predicates;
	                for (var i = 0; i < productAttributes.length; i++) {
	                    if (item.label === productAttributes[i].targetField.autocomplete.selectedItem.label) {
	                        if (item.fieldType) {
	                            productAttributes[i].FieldType = item.fieldType;
	                            if (item.fieldType === 'BOOLEAN') {
	                                productAttributes[i].FieldValue = false;
	                            } else {
	                                productAttributes[i].FieldValue = '';
	                            }
	                        }
	                        if (item.picklistValues) {
	                            productAttributes[i].picklistValues = {
	                                PicklistValues: item.picklistValues
	                            };
	                        }
	                        break;
	                    }
	                }
	            }
	        }
	
	        function getChargeTypeCriterias() {
	            var lineItems = vm.chargeTypeCriteria;
	            if (lineItems && lineItems.filter && lineItems.filter.predicates) {
	                var lineItemPredicates = lineItems.filter.predicates;
	                for (var i = 0; i < lineItemPredicates.length; i++) {
	                    var value = getPrefixedAttribute('LineItem__c') + '.' + lineItemPredicates[i]['FieldName'],
	                        fieldType = lineItemPredicates[i].FieldType;
	                    if (fieldType === 'PICKLIST' || fieldType === 'MULTIPICKLIST') {
	                        (function(label, j, value, fieldType) {
	                            priceListItemCommonService.searchTargetAttributesForLineItems(label)
	                                .then(function(response) {
	                                    lineItemPredicates[j]['picklistValues'] = {
	                                        PicklistValues: response.length > 0 ? priceListItemCommonService.getMatchingPicklistValues(response, label) : []
	                                    };
	                                    if (fieldType === 'MULTIPICKLIST') {
	                                        lineItemPredicates[j].FieldValue = lineItemPredicates[j].FieldValue.split(';');
	                                    }
	                                    lineItemPredicates[j]['targetField'] = {
	                                        autocomplete: {
	                                            'selectedItemChange': updateChargeTypesForLineItems,
	                                            'querySearch': priceListItemCommonService.searchTargetAttributesForLineItems,
	                                            'displayName': 'label',
	                                            'selectedItem': {
	                                                'value': value,
	                                                'label': priceListItemCommonService.getChargeTypeFilterLabel(lineItems['sObjectLabel'], lineItemPredicates[j]['FieldName'], lineItemPredicates[j]['FieldLabel'])
	                                            }
	                                        }
	                                    };
	                                });
	                        })(lineItemPredicates[i]['FieldLabel'], i, value, fieldType);
	                    } else {
	                        if (fieldType === 'DOUBLE' || fieldType === 'CURRENCY' || fieldType === 'PERCENT') {
	                            lineItemPredicates[i].FieldValue = lineItemPredicates[i].FieldValue ? +lineItemPredicates[i].FieldValue : 0;
	                        }
	                        lineItemPredicates[i]['picklistValues'] = { PicklistValues: [] };
	                        lineItemPredicates[i]['targetField'] = {
	                            autocomplete: {
	                                'selectedItemChange': updateChargeTypesForLineItems,
	                                'querySearch': priceListItemCommonService.searchTargetAttributesForLineItems,
	                                'displayName': 'label',
	                                'selectedItem': {
	                                    'value': value,
	                                    'label': priceListItemCommonService.getChargeTypeFilterLabel(lineItems['sObjectLabel'], lineItemPredicates[i]['FieldName'], lineItemPredicates[i]['FieldLabel'])
	                                }
	                            }
	                        };
	                    }
	
	                }
	            }
	            if (lineItems && lineItems.filter && lineItems.filter.childFilter) {
	                var paItems = lineItems.filter.childFilter.predicates || [];
	                for (var i = 0; i < paItems.length; i++) {
	                    var value = getPrefixedAttribute('ProductAttributeValue__c') + '.' + paItems[i]['FieldName'],
	                        fieldType = paItems[i].FieldType;
	                    if (fieldType === 'PICKLIST' || fieldType === 'MULTIPICKLIST') {
	                        (function(label, j, value, fieldType) {
	                            priceListItemCommonService.searchTargetAttributesForProductAttributes(label)
	                                .then(function(response) {
	                                    paItems[j]['picklistValues'] = {
	                                        PicklistValues: response.length > 0 ? priceListItemCommonService.getMatchingPicklistValues(response, label) : []
	                                    };
	                                    if (fieldType === 'MULTIPICKLIST') {
	                                        paItems[j].FieldValue = paItems[j].FieldValue.split(';');
	                                    }
	                                    paItems[j]['targetField'] = {
	                                        autocomplete: {
	                                            'selectedItemChange': updateChargeTypesForProductAttributes,
	                                            'querySearch': priceListItemCommonService.searchTargetAttributesForProductAttributes,
	                                            'displayName': 'label',
	                                            'selectedItem': {
	                                                'value': value,
	                                                'label': priceListItemCommonService.getChargeTypeFilterLabel(lineItems.filter.childFilter['childSObjectLabel'], paItems[j]['FieldName'], paItems[j]['FieldLabel'])
	                                            }
	                                        }
	                                    };
	                                });
	                        })(paItems[i]['FieldLabel'], i, value, fieldType);
	                    } else {
	                        if (fieldType === 'DOUBLE' || fieldType === 'CURRENCY' || fieldType === 'PERCENT') {
	                            paItems[i].FieldValue = paItems[i].FieldValue ? +paItems[i].FieldValue : 0;
	                        }
	                        paItems[i]['picklistValues'] = { PicklistValues: [] };
	                        paItems[i]['targetField'] = {
	                            autocomplete: {
	                                'selectedItemChange': updateChargeTypesForProductAttributes,
	                                'querySearch': priceListItemCommonService.searchTargetAttributesForProductAttributes,
	                                'displayName': 'label',
	                                'selectedItem': {
	                                    'value': value,
	                                    'label': priceListItemCommonService.getChargeTypeFilterLabel(lineItems.filter.childFilter['childSObjectLabel'], paItems[i]['FieldName'], paItems[i]['FieldLabel'])
	                                }
	                            }
	                        };
	                    }
	                }
	            } else {
	                lineItems.filter.childFilter = {
	                    condExpr: '',
	                    childSObjectLabel: vm.labels.ProductAttributeValue,
	                    childSObjectName: getPrefixedAttribute("ProductAttributeValue__c"),
	                    predicates: [],
	                    relationFieldName: getPrefixedAttribute("LineItemId__c")
	                };
	            }
	        }
	
	
	        var chargeTypeCriteria = selectedCondition;
	        var chargeTypeCriteriaObj = (chargeTypeCriteria !== undefined ? JSON.parse(chargeTypeCriteria) : '');
	        if (chargeTypeCriteriaObj) {
	            vm.chargeTypeCriteria = chargeTypeCriteriaObj;
	            getChargeTypeCriterias();
	
	        } else {
	            vm.chargeTypeCriteria = {
	                searchText: null,
	                exprStr: '',
	                sObjectLabel: vm.labels.LineItem,
	                sObjectName: getPrefixedAttribute("LineItem__c"),
	                fields: [],
	                filter: {
	                    condExpr: '',
	                    predicates: [],
	                    hasRHSFields: false,
	                    childFilter: {
	                        condExpr: '',
	                        childSObjectLabel: vm.labels.ProductAttributeValue,
	                        childSObjectName: getPrefixedAttribute("ProductAttributeValue__c"),
	                        predicates: [],
	                        relationFieldName: getPrefixedAttribute("LineItemId__c")
	                    }
	                }
	            };
	        }
	        if (vm.chargeTypeCriteria.filter.condExpr !== '') {
	            vm.showLIAdvancedPanel = true;
	        } else {
	            vm.showLIAdvancedPanel = false;
	        }
	        if (vm.chargeTypeCriteria.filter.childFilter.condExpr !== '') {
	            vm.showPARAdvancedPanel = true;
	        } else {
	            vm.showPARAdvancedPanel = false;
	        }
	        vm.operatorPicklistEntries = {
	            PicklistValues: [{
	                label: vm.labels.EqualTo,
	                value: vm.labels.EqualTo
	            }, {
	                label: vm.labels.NotEqualTo,
	                value: vm.labels.NotEqualTo
	            }, {
	                label: vm.labels.StartsWith,
	                value: vm.labels.StartsWith
	            }, {
	                label: vm.labels.Contains,
	                value: vm.labels.Contains
	            }, {
	                label: vm.labels.DoesNotContain,
	                value: vm.labels.DoesNotContain
	            }, {
	                label: vm.labels.LessThan,
	                value: vm.labels.LessThan
	            }, {
	                label: vm.labels.GreaterThan,
	                value: vm.labels.GreaterThan
	            }, {
	                label: vm.labels.LessThanOrEqualTo,
	                value: vm.labels.LessThanOrEqualTo
	            }, {
	                label: vm.labels.GreaterThanOrEqualTo,
	                value: vm.labels.GreaterThanOrEqualTo
	            }, {
	                label: vm.labels.In,
	                value: vm.labels.In
	            }, {
	                label: vm.labels.NotIn,
	                value: vm.labels.NotIn
	            }]
	        };
	
	        function getNextRowNumber(type) {
	            if (type === 'Line Items') {
	                return (vm.chargeTypeCriteria.filter.predicates.length + 1);
	            } else if (type === 'Product Attributes') {
	                return (vm.chargeTypeCriteria.filter.childFilter.predicates.length + 1);
	            }
	        }
	
	        function updateAdvancedCondition(type, nextRowNumber) {
	            if (type === 'Line Items') {
	                var expr = vm.chargeTypeCriteria.filter.condExpr,
	                    finalExpression = '';
	                if (expr) {
	                    finalExpression = expr + ' AND ' + nextRowNumber;
	                } else {
	                    finalExpression = nextRowNumber;
	                }
	                vm.chargeTypeCriteria.filter.condExpr = finalExpression;
	            } else if (type === 'Product Attributes') {
	                var expr = vm.chargeTypeCriteria.filter.childFilter.condExpr,
	                    finalExpression = '';
	                if (expr) {
	                    finalExpression = expr + ' AND ' + nextRowNumber;
	                } else {
	                    finalExpression = nextRowNumber;
	                }
	                vm.chargeTypeCriteria.filter.childFilter.condExpr = finalExpression;
	            }
	        }
	        vm.addChargeType = function(type) {
	            var targetField = {},
	                querySearch,
	                nextRowNumber;
	            if (type === 'Line Items') {
	                targetField = {
	                    autocomplete: {
	                        'selectedItemChange': updateChargeTypesForLineItems,
	                        'querySearch': priceListItemCommonService.searchTargetAttributesForLineItems,
	                        'displayName': 'label'
	                    }
	                };
	                nextRowNumber = getNextRowNumber(type);
	                vm.chargeTypeCriteria.filter.predicates.push({
	                    'RowNum': nextRowNumber,
	                    'RHSSObjectName': null,
	                    'RHSFieldType': null,
	                    'RHSFieldName': null,
	                    'RHSFieldLabel': null,
	                    'RHSChildFilterName': null,
	                    'RefFieldName': null,
	                    'OffsetValue': null,
	                    'LHSSObjectName': null,
	                    'LHSChildFilterName': null,
	                    'FieldValue': '',
	                    'FieldType': '',
	                    'FieldName': '',
	                    'FieldLabel': '',
	                    'CompOper': '',
	                    'BoolOper': 'AND',
	                    'statementProduct': '',
	                    'targetField': targetField
	                });
	                updateAdvancedCondition('Line Items', nextRowNumber);
	            } else if (type === 'Product Attributes') {
	                targetField = {
	                    autocomplete: {
	                        'selectedItemChange': updateChargeTypesForProductAttributes,
	                        'querySearch': priceListItemCommonService.searchTargetAttributesForProductAttributes,
	                        'displayName': 'label'
	                    }
	                };
	                nextRowNumber = getNextRowNumber(type);
	                vm.chargeTypeCriteria.filter.childFilter.predicates.push({
	                    'RowNum': nextRowNumber,
	                    'RHSSObjectName': null,
	                    'RHSFieldType': null,
	                    'RHSFieldName': null,
	                    'RHSFieldLabel': null,
	                    'RHSChildFilterName': null,
	                    'RefFieldName': null,
	                    'OffsetValue': null,
	                    'LHSSObjectName': null,
	                    'LHSChildFilterName': null,
	                    'FieldValue': '',
	                    'FieldType': '',
	                    'FieldName': '',
	                    'FieldLabel': '',
	                    'CompOper': '',
	                    'BoolOper': 'AND',
	                    'statementProduct': '',
	                    'targetField': targetField
	                });
	                updateAdvancedCondition('Product Attributes', nextRowNumber);
	            }
	
	        };
	
	        function updateRowNumValue(type) {
	            if (type === 'Line Items') {
	                var filters = vm.chargeTypeCriteria.filter.predicates;
	                for (var i = 0; i < filters.length; i++) {
	                    filters[i].RowNum = (i + 1);
	                }
	            } else if (type === 'Product Attributes') {
	                var filters = vm.chargeTypeCriteria.filter.childFilter.predicates;
	                for (var i = 0; i < filters.length; i++) {
	                    filters[i].RowNum = (i + 1);
	                }
	            }
	        }
	
	        vm.prepareConditionExpression = function(type) {
	            if (type === 'Line Items') {
	                var expr = '',
	                    predicates = vm.chargeTypeCriteria.filter.predicates;
	
	                for (var i = 0; i < predicates.length; i++) {
	                    if (i === (predicates.length - 1)) {
	                        expr += predicates[i].RowNum;
	                    } else {
	                        expr += predicates[i].RowNum + ' AND ';
	                    }
	                }
	                vm.chargeTypeCriteria.filter.condExpr = expr;
	            } else if (type === 'Product Attributes') {
	                var expr = '',
	                    predicates = vm.chargeTypeCriteria.filter.childFilter.predicates;
	
	                for (var i = 0; i < predicates.length; i++) {
	                    if (i === (predicates.length - 1)) {
	                        expr += predicates[i].RowNum;
	                    } else {
	                        expr += predicates[i].RowNum + ' AND ';
	                    }
	                }
	                vm.chargeTypeCriteria.filter.childFilter.condExpr = expr;
	            }
	        };
	
	        function isLineConditionValid() {
	            var isValid = true,
	                condExpr = vm.chargeTypeCriteria.filter.condExpr;
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.chargeTypeCriteria.filter.predicates.length > 0) {
	                    var predicates = vm.chargeTypeCriteria.filter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < rowNumArr.length; i++) {
	                    var value = rowNumArr[i];
	                    if (condExprArr.indexOf(value.toString()) <= -1) {
	                        isValid = false;
	                        break;
	                    }
	                }
	            }
	            return isValid;
	        }
	
	        function lineItemsFilterListContainsError() {
	            var containsError = false;
	            if (vm.chargeTypeCriteria.filter.predicates.length > 0) {
	                var predicates = vm.chargeTypeCriteria.filter.predicates;
	                for (var i = 0; i < predicates.length; i++) {
	                    var targetField = predicates[i].targetField,
	                        operator = predicates[i].CompOper;
	                    if (targetField && targetField.autocomplete && targetField.autocomplete.selectedItem) {
	                        if (!targetField.autocomplete.selectedItem.value || !targetField.autocomplete.selectedItem.label) {
	                            containsError = true;
	                            predicates[i].hasError = true;
	                        } else {
	                            predicates[i].hasError = false;
	                        }
	                    } else {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    }
	                    if (operator === undefined || operator === '') {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    } else {
	                        if (predicates[i].hasError !== true) {
	                            predicates[i].hasError = false;
	                        }
	                    }
	                }
	                if (!isLineConditionValid()) {
	                    containsError = true;
	                    addAlert({
	                        type: 'error',
	                        msg: vm.labels.InvalidLIChargeTypeCondition
	                    });
	                }
	            }
	            return containsError;
	        }
	
	        function isProductAttributeConditionValid() {
	            var isValid = true,
	                condExpr = vm.chargeTypeCriteria.filter.childFilter.condExpr;
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.chargeTypeCriteria.filter.childFilter.predicates.length > 0) {
	                    var predicates = vm.chargeTypeCriteria.filter.childFilter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < rowNumArr.length; i++) {
	                    var value = rowNumArr[i];
	                    if (condExprArr.indexOf(value.toString()) <= -1) {
	                        isValid = false;
	                        break;
	                    }
	                }
	            }
	            return isValid;
	        }
	
	        function productAttributesFilterListContainsError() {
	            var containsError = false;
	            if (vm.chargeTypeCriteria.filter.childFilter.predicates.length > 0) {
	                var predicates = vm.chargeTypeCriteria.filter.childFilter.predicates;
	                for (var i = 0; i < predicates.length; i++) {
	                    var targetField = predicates[i].targetField,
	                        operator = predicates[i].CompOper;
	                    if (targetField && targetField.autocomplete && targetField.autocomplete.selectedItem) {
	                        if (!targetField.autocomplete.selectedItem.value || !targetField.autocomplete.selectedItem.label) {
	                            containsError = true;
	                            predicates[i].hasError = true;
	                        } else {
	                            predicates[i].hasError = false;
	                        }
	                    } else {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    }
	                    if (operator === undefined || operator === '') {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    } else {
	                        if (predicates[i].hasError !== true) {
	                            predicates[i].hasError = false;
	                        }
	                    }
	                }
	                if (!isProductAttributeConditionValid()) {
	                    containsError = true;
	                    addAlert({
	                        type: 'error',
	                        msg: vm.labels.InvalidPAChargeTypeCondition
	                    });
	                }
	            }
	            return containsError;
	        }
	
	        function prepareExpressionString(label, value, operator) {
	            var str = '';
	            switch (operator) {
	                case vm.labels.EqualTo:
	                    {
	                        str = '(' + label + ' = ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.NotEqualTo:
	                    {
	                        str = '(' + label + ' != ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.StartsWith:
	                    {
	                        str = '(' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.Contains:
	                    {
	                        str = '(' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.DoesNotContain:
	                    {
	                        str = '(NOT ' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.LessThan:
	                    {
	                        str = '(' + label + ' < ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.GreaterThan:
	                    {
	                        str = '(' + label + ' > ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.LessThanOrEqualTo:
	                    {
	                        str = '(' + label + ' <= ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.GreaterThanOrEqualTo:
	                    {
	                        str = '(' + label + ' >= ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.In:
	                    {
	                        str = '(' + label + ' IN ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.NotIn:
	                    {
	                        str = '(' + label + ' NOT IN ' + value + ') ';
	                        break;
	                    }
	            }
	            return str;
	        }
	
	        function prepareLineItemsCriteriaExpression(condExpr) {
	
	            var str = '';
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.chargeTypeCriteria.filter.predicates.length > 0) {
	                    var predicates = vm.chargeTypeCriteria.filter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < condExprArr.length; i++) {
	                    if (!isNaN(+condExprArr[i])) {
	                        var value = +condExprArr[i];
	                        if (value !== 0) {
	                            if (rowNumArr.indexOf(value) <= -1) {
	                                str += '{' + (value - 1) + '}';
	                            } else {
	                                var predicates = vm.chargeTypeCriteria.filter.predicates;
	                                var fieldLabel = predicates[(value - 1)].FieldLabel.trim(),
	                                    fieldValue = predicates[(value - 1)].FieldValue,
	                                    operator = predicates[(value - 1)].CompOper,
	                                    fieldType = predicates[(value - 1)].FieldType;
	                                if (angular.isString(fieldValue)) {
	                                    fieldValue = fieldValue.trim();
	                                } else if (angular.isArray(fieldValue)) {
	                                    fieldValue = fieldValue.join(';');
	                                    predicates[(value - 1)].FieldValue = fieldValue;
	                                }
	                                str += prepareExpressionString(fieldLabel, fieldValue, operator);
	                            }
	                        }
	
	                    } else {
	                        str += condExprArr[i] + ' ';
	                    }
	                }
	            }
	
	            return str !== '' ? str.trim() : str;
	        }
	
	        function prepareProductAttributesCriteriaExpression(condExpr) {
	
	            var str = '';
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.chargeTypeCriteria.filter.childFilter.predicates.length > 0) {
	                    var predicates = vm.chargeTypeCriteria.filter.childFilter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < condExprArr.length; i++) {
	                    if (!isNaN(+condExprArr[i])) {
	                        var value = +condExprArr[i];
	                        if (value !== 0) {
	                            if (rowNumArr.indexOf(value) <= -1) {
	                                str += '{' + (value - 1) + '}';
	                            } else {
	                                var predicates = vm.chargeTypeCriteria.filter.childFilter.predicates;
	                                var fieldLabel = predicates[(value - 1)].FieldLabel.trim(),
	                                    fieldValue = predicates[(value - 1)].FieldValue,
	                                    operator = predicates[(value - 1)].CompOper,
	                                    fieldType = predicates[(value - 1)].FieldType;
	                                if (angular.isString(fieldValue)) {
	                                    fieldValue = fieldValue.trim();
	                                } else if (angular.isArray(fieldValue)) {
	                                    fieldValue = fieldValue.join(';');
	                                    predicates[(value - 1)].FieldValue = fieldValue;
	                                }
	
	                                str += prepareExpressionString(fieldLabel, fieldValue, operator);
	                            }
	                        }
	
	                    } else {
	                        str += condExprArr[i] + ' ';
	                    }
	                }
	            }
	
	            return str !== '' ? str.trim() : str;
	        }
	
	
	        vm.removeChargeType = function(index, type) {
	            if (type === 'Line Items') {
	                vm.chargeTypeCriteria.filter.predicates.splice(index, 1);
	            } else if (type === 'Product Attributes') {
	                vm.chargeTypeCriteria.filter.childFilter.predicates.splice(index, 1);
	            }
	            updateRowNumValue(type);
	            vm.prepareConditionExpression(type);
	        };
	
	
	        function getValueType(label) {
	            var response;
	            if (label) {
	                response = label.split(' : ')[0];
	            }
	            return response || label;
	        }
	
	        function updateCriteriaContentForLineItems() {
	            if (vm.chargeTypeCriteria.filter.predicates.length > 0) {
	                var predicates = vm.chargeTypeCriteria.filter.predicates,
	                    exprStr = '';
	
	                var condExpr = vm.chargeTypeCriteria.filter.condExpr;
	                if (!condExpr) {
	                    vm.prepareConditionExpression('Line Items');
	                }
	                for (var i = 0; i < predicates.length; i++) {
	                    var temp,
	                        label,
	                        value,
	                        tempValue,
	                        length,
	                        fieldType = predicates[i].FieldType;
	
	                    if (fieldType === 'MULTIPICKLIST') {
	                        predicates[i].FieldValue = predicates[i].FieldValue.join(';');
	                    }
	                    temp = predicates[i].targetField.autocomplete.selectedItem,
	                        label = temp.label,
	                        tempValue = temp.value;
	                    value = tempValue.split(getPrefixedAttribute('LineItem__c') + '.')[1];
	                    predicates[i]['FieldName'] = value;
	                    predicates[i]['FieldLabel'] = label.split(':').length > 1 ? label.split(':')[1].trim() : label;
	                    vm.chargeTypeCriteria.fields.push(value);
	
	                }
	            } else {
	                vm.chargeTypeCriteria.filter.predicates = [];
	            }
	        }
	
	        function updateCriteriaContentForProductAttribute() {
	            if (vm.chargeTypeCriteria.filter.childFilter.predicates.length > 0) {
	                var predicates = vm.chargeTypeCriteria.filter.childFilter.predicates,
	                    exprStr = '';
	                var condExpr = vm.chargeTypeCriteria.filter.childFilter.condExpr;
	                if (!condExpr) {
	                    vm.prepareConditionExpression('Product Attributes');
	                }
	                for (var i = 0; i < predicates.length; i++) {
	                    var temp, label, value, tempValue,
	                        fieldType = predicates[i].FieldType;
	
	                    if (fieldType === 'MULTIPICKLIST') {
	                        predicates[i].FieldValue = predicates[i].FieldValue.join(';');
	                    };
	                    temp = predicates[i].targetField.autocomplete.selectedItem,
	                        label = temp.label;
	
	                    tempValue = temp.value;
	                    value = tempValue.replace(getPrefixedAttribute('ProductAttributeValue__c'), getPrefixedAttribute('AttributeValueId__r'));
	
	                    predicates[i]['FieldName'] = value.replace(getPrefixedAttribute('AttributeValueId__r.'), '');
	                    predicates[i]['FieldLabel'] = label.split(':').length > 1 ? label.split(':')[1].trim() : label;
	                    vm.chargeTypeCriteria.fields.push(value);
	
	                }
	            } else {
	                vm.chargeTypeCriteria.filter.childFilter.predicates = [];
	            }
	        }
	
	        /* Charge Type Criteria */
	
	        $scope.$on('$destroy', function() {
	            $html.style['overflow-y'] = 'unset';
	        })
	
	    };
	
	    conditionCriteriaController.$inject = [
	        '$scope',
	        'systemConstants',
	        '$mdDialog',
	        'i18nService',
	        'selectedCondition',
	        'selectedMatrixEntryIndex',
	        'priceListItemCommonService'
	    ];
	
	    module.exports = conditionCriteriaController;
	})();


/***/ }),
/* 621 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"pricelist-item-dialog\">\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n        </i>\n    </button>\n    <md-dialog-content class=\"pricelist-item-dialog-content\">\n        <div class=\"error-indicator\">\n            <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"5000\" close=\"vm.closeAlert($index)\" ng-if=\"alert.type === 'error'\">{{alert.msg}}</uib-alert>\n            <uib-alert type=\"warning\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"5000\" close=\"vm.closeAlert($index)\" ng-if=\"alert.type === 'warning'\">{{alert.msg}}</uib-alert>\n        </div>\n        <md-tabs md-selected=\"vm.selctedTabIndex\" md-dynamic-height md-border-bottom class=\"price-list-tabs\">\n            <md-tab label=\"Condition Criteria\">\n                <md-content>\n                    <div class=\"charge-type-criteria-container\">\n                        <md-tabs md-dynamic-height md-border-bottom>\n                            <md-tab label=\"Line Items\">\n                                <md-content>\n                                    <div class=\"charge-type\">\n                                        <button class=\"slds-button slds-button_brand\" ng-click=\"vm.addChargeType('Line Items')\">Add New Criteria</button>\n                                        <div class=\"filter-container\">\n                                            <div class=\"each-row\" data-ng-repeat=\"item in vm.chargeTypeCriteria.filter.predicates\" data-ng-class=\"item.hasError === true ? 'error' :''\">\n                                                <div class=\"each-row-container\">\n                                                    <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                                                        <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                                                            <i class=\"material-icons\">more_vert</i>\n                                                        </button>\n                                                        <ul class=\"dropdown-menu\">\n                                                            <li data-ng-click=\"vm.removeChargeType($index,'Line Items')\" class=\"action-menu\">\n                                                                <i class=\"material-icons\">clear</i>\n                                                                <span class=\"remove-label\">{{::vm.labels.Remove}}</span>\n                                                            </li>\n                                                            <li class=\"action-menu\" data-ng-click=\"vm.addChargeType('Line Items')\">\n                                                                <i class=\"material-icons\">add</i>\n                                                                <span class=\"add-label\">Add</span>\n                                                            </li>\n                                                        </ul>\n                                                    </div>\n                                                    <div class=\"rowNum\">\n                                                        <material-form-field model=\"item.RowNum\" field-type=\"string\" is-editable=\"false\" field-label=\"'Row Num'\" name=\"rowNum\">\n                                                        </material-form-field>\n                                                    </div>\n                                                    <div class=\"autocomplete\">\n                                                        <material-form-field field-type=\"autocomplete\" field-label=\"'Field'\" name=\"field\" properties=\"item.targetField\" is-required=\"true\">\n                                                        </material-form-field>\n                                                    </div>\n                                                    <div class=\"operator\">\n                                                        <material-form-field model=\"item.CompOper\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.operatorPicklistEntries\" field-label=\"'Operator'\" name=\"operator\" is-required=\"true\">\n                                                        </material-form-field>\n                                                    </div>\n                                                    <div ng-class=\"{'value': item.FieldType != 'PICKLIST' && item.FieldType != 'MULTIPICKLIST' && item.FieldType != 'DATETIME' && item.FieldType != 'DATE', 'operator': item.FieldType === 'PICKLIST' || item.FieldType === 'MULTIPICKLIST', 'datetime-field': item.FieldType === 'DATETIME' || item.FieldType === 'DATE' }\">\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"STRING\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'STRING' || (item.FieldType !== 'PICKLIST' && item.FieldType !== 'MULTIPICKLIST' && item.FieldType !== 'DATE' && item.FieldType !== 'DATETIME' && item.FieldType !== 'DOUBLE' && item.FieldType !== 'CURRENCY' && item.FieldType !== 'PERCENT' && item.FieldType !== 'BOOLEAN')\">\n                                                        </material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"DOUBLE\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'DOUBLE'\"></material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'CURRENCY'\">\n                                                        </material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"PERCENT\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'PERCENT'\">\n                                                        </material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'PICKLIST'\">\n                                                        </material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'MULTIPICKLIST'\">\n                                                        </material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"'Value'\" show-inline=\"true\" data-ng-if=\"item.FieldType === 'BOOLEAN'\">\n                                                        </material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'DATETIME' || item.FieldType === 'DATE'\">\n                                                        </material-form-field>\n                                                    </div>\n                                                </div>\n                                                <div class=\"clearfix\"></div>\n                                            </div>\n                                        </div>\n                                        <div class=\"advance-filter-container\">\n                                            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showLIAdvancedPanel = true;\" data-ng-if=\"vm.showLIAdvancedPanel !== true\">Advanced Options</button>\n                                            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showLIAdvancedPanel = false;vm.prepareConditionExpression();\" data-ng-if=\"vm.showLIAdvancedPanel === true\">Clear Advanced Options</button>\n                                            <div class=\"value\" data-ng-if=\"vm.showLIAdvancedPanel === true\">\n                                                <material-form-field model=\"vm.chargeTypeCriteria.filter.condExpr\" field-type=\"string\" is-editable=\"true\" field-label=\"'Advanced Filter Condition'\" name=\"value\">\n                                                </material-form-field>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </md-content>\n                            </md-tab>\n                            <md-tab label=\"Product Attributes\">\n                                <md-content>\n                                    <div class=\"charge-type\">\n                                        <button class=\"slds-button slds-button_brand\" ng-click=\"vm.addChargeType('Product Attributes')\">Add New Criteria</button>\n                                        <div class=\"filter-container\">\n                                            <div class=\"each-row\" data-ng-repeat=\"item in vm.chargeTypeCriteria.filter.childFilter.predicates\" data-ng-class=\"item.hasError === true ? 'error' :''\">\n                                                <div class=\"each-row-container\">\n                                                    <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                                                        <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                                                            <i class=\"material-icons\">more_vert</i>\n                                                        </button>\n                                                        <ul class=\"dropdown-menu\">\n                                                            <li data-ng-click=\"vm.removeChargeType($index,'Product Attributes')\" class=\"action-menu\">\n                                                                <i class=\"material-icons\">clear</i>\n                                                                <span class=\"remove-label\">{{::vm.labels.Remove}}</span>\n                                                            </li>\n                                                            <li class=\"action-menu\" data-ng-click=\"vm.addChargeType('Product Attributes')\">\n                                                                <i class=\"material-icons\">add</i>\n                                                                <span class=\"add-label\">Add</span>\n                                                            </li>\n                                                        </ul>\n                                                    </div>\n                                                    <div class=\"rowNum\">\n                                                        <material-form-field model=\"item.RowNum\" field-type=\"string\" is-editable=\"false\" field-label=\"'Row Num'\" name=\"rowNum\">\n                                                        </material-form-field>\n                                                    </div>\n                                                    <div class=\"autocomplete\">\n                                                        <material-form-field field-type=\"autocomplete\" field-label=\"'Field'\" name=\"field\" properties=\"item.targetField\" is-required=\"true\">\n                                                        </material-form-field>\n                                                    </div>\n                                                    <div class=\"operator\">\n                                                        <material-form-field model=\"item.CompOper\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.operatorPicklistEntries\" field-label=\"'Operator'\" name=\"operator\" is-required=\"true\">\n                                                        </material-form-field>\n                                                    </div>\n                                                    <div ng-class=\"{'value': item.FieldType != 'PICKLIST' && item.FieldType != 'MULTIPICKLIST' && item.FieldType != 'DATETIME' && item.FieldType != 'DATE', 'operator': item.FieldType === 'PICKLIST' || item.FieldType === 'MULTIPICKLIST', 'datetime-field': item.FieldType === 'DATETIME' || item.FieldType === 'DATE' }\">\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"STRING\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'STRING' || (item.FieldType !== 'PICKLIST' && item.FieldType !== 'MULTIPICKLIST' && item.FieldType !== 'DATE' && item.FieldType !== 'DATETIME' && item.FieldType !== 'DOUBLE' && item.FieldType !== 'CURRENCY' && item.FieldType !== 'PERCENT' && item.FieldType !== 'BOOLEAN')\">\n                                                        </material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"DOUBLE\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'DOUBLE'\"></material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'CURRENCY'\">\n                                                        </material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"PERCENT\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'PERCENT'\">\n                                                        </material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'PICKLIST'\">\n                                                        </material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'MULTIPICKLIST'\">\n                                                        </material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"'Value'\" show-inline=\"true\" data-ng-if=\"item.FieldType === 'BOOLEAN'\">\n                                                        </material-form-field>\n                                                        <material-form-field model=\"item.FieldValue\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'DATETIME' || item.FieldType === 'DATE'\">\n                                                        </material-form-field>\n                                                    </div>\n                                                </div>\n                                                <div class=\"clearfix\"></div>\n                                            </div>\n                                        </div>\n                                        <div class=\"advance-filter-container\">\n                                            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showPARAdvancedPanel = true;\" data-ng-if=\"vm.showPARAdvancedPanel !== true\">Advanced Options</button>\n                                            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showPARAdvancedPanel = false;vm.prepareConditionExpression();\" data-ng-if=\"vm.showPARAdvancedPanel === true\">Clear Advanced Options</button>\n                                            <div class=\"value\" data-ng-if=\"vm.showPARAdvancedPanel === true\">\n                                                <material-form-field model=\"vm.chargeTypeCriteria.filter.childFilter.condExpr\" field-type=\"string\" is-editable=\"true\" field-label=\"'Advanced Filter Condition'\" name=\"value\">\n                                                </material-form-field>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </md-content>\n                            </md-tab>\n                        </md-tabs>\n                    </div>\n                </md-content>\n            </md-tab>\n        </md-tabs>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceListItem.miscellaneous', [])
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceListItem.miscellaneous', {
	                parent: 'app.priceListItem',
	                url: '/:id/miscellaneous',
	                views: {
	                    'priceListItemContainer': {
	                        template: __webpack_require__(623),
	                        controller: __webpack_require__(624),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    selectedPriceListItemDetails: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getPriceListItemDetails($stateParams.id);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 623 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"miscellaneous-container\">\n        <div class=\"pricelistitem-miscellaneous-block\">\n            <uib-alert ng-repeat=\"alert in vm.alertList\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'PriceIncludedInBundle__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.PriceIncludedInBundle\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+'AllowManualAdjustment__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" show-inline=\"true\" field-label=\"vm.labels.AllowManualAdjustments\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'EnablePriceRamp__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.EnablePriceRamps\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+'AllocateGroupAdjustment__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.AllocateGroupAdjustment\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'EnableCommitment__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.EnableCommitment\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+'AllowProration__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.AllowProration\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'IsUsageTierModifiable__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.IsUsageTierModifiable\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+'DisableSyncWithOpportunity__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.DisableSyncWithOpportunity\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'DisableAssetIntegration__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.DisableAssetIntegration\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                </div>\n            </div>\n            <div class=\"miscellaneous-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\" data-ng-disabled=\"vm.disableSaveBtn === true\">{{vm.labels.SaveButton}}</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 624 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var miscellaneousController = function($q, $scope, $state, systemConstants, i18nService, selectedPriceListItemDetails, priceListItemCommonService, applicationService, cpqAdminConstants) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '',
	            isFormSaved = false;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.selectedPli = selectedPriceListItemDetails;
	        vm.disableSaveBtn = false;
	        vm.alertList = [];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        function updatePriceListItem(toState, toParams) {
	            var defer = $q.defer();
	            if (vm.selectedPli) {
	                vm.disableSaveBtn = true;
	                priceListItemCommonService.updatePriceListItem(angular.copy(vm.selectedPli))
	                    .then(function(response) {
	                        isFormSaved = true;
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        } else {
	                            addAlert({
	                                type: cpqAdminConstants.SUCCESS,
	                                msg: vm.labels.ProductSaveSuccess
	                            });
	                            vm.disableSaveBtn = false;
	                            defer.resolve(response);
	                        }
	                    }, function(reason) {
	                        isFormSaved = false;
	                        applicationService.showErrorMessage(reason);
	                        vm.disableSaveBtn = false;
	                        defer.reject(false);
	                    });
	
	            } else {
	                defer.resolve(true);
	            }
	
	            return defer.promise;
	        }
	        vm.save = function(e, toState, toParams) {
	            updatePriceListItem(toState, toParams)
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (isFormSaved) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.save(e, toState, toParams);
	            }
	
	        });
	    };
	
	    miscellaneousController.$inject = [
	        '$q',
	        '$scope',
	        '$state',
	        'systemConstants',
	        'i18nService',
	        'selectedPriceListItemDetails',
	        'priceListItemCommonService',
	        'applicationService',
	        'cpqAdminConstants'
	    ];
	
	    module.exports = miscellaneousController;
	})();


/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceListItem.taxbilling', [])
	        .service('taxbillingService', __webpack_require__(626))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceListItem.taxbilling', {
	                parent: 'app.priceListItem',
	                url: '/:id/taxbilling',
	                views: {
	                    'priceListItemContainer': {
	                        template: __webpack_require__(627),
	                        controller: __webpack_require__(628),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    selectedPriceListItemDetails: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getPriceListItemDetails($stateParams.id);
	                    }],
	                    allPicklists: ['priceListItemDetailsService', '$stateParams', function(priceListItemDetailsService, $stateParams) {
	                        return priceListItemDetailsService.getSObjectPicklistFields('PriceListItem__c', null);
	                    }],
	                    metaData: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getMetaData($stateParams.id);
	                    }],
	                }
	            })
	        }]);
	})();


/***/ }),
/* 626 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var taxbillingService = function(systemConstants, i18nService) {
	        var prefix = systemConstants.nsPrefix || '',
	            dateFormat = 'MM/DD/YYYY',
	            allPicklists = [],
	            labels = i18nService.CustomLabel;
	
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function getPicklistValues(type) {
	            var response = [];
	            if (allPicklists.length && type) {
	                for (var i = 0; i < allPicklists.length; i++) {
	                    if (allPicklists[i].FieldName === getPrefixedAttribute(type)) {
	                        response = allPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            return response;
	        }
	
	        function getBillingFrequency() {
	            var noneField = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                },
	                data = getPicklistValues('BillingFrequency__c');
	            data.unshift(noneField);
	            return data;
	        }
	
	        function getBillingRule() {
	            var noneField = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                },
	                data = getPicklistValues('BillingRule__c');
	            data.unshift(noneField);
	            return data;
	        }
	
	        function setAllPicklists(data) {
	            allPicklists = data;
	        }
	
	        var service = {
	            setAllPicklists: setAllPicklists,
	            getBillingFrequency: getBillingFrequency,
	            getBillingRule: getBillingRule
	        };
	        return service;
	    };
	
	    taxbillingService.$inject = [
	        'systemConstants',
	        'i18nService'
	    ];
	
	    module.exports = taxbillingService;
	})();


/***/ }),
/* 627 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"taxbilling-container\">\n        <div class=\"pricelistitem-taxbilling-block\">\n            <uib-alert ng-repeat=\"alert in vm.alertList\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'Taxable__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.IsTaxable\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'BillingRule__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.billingRulePicklistEntries\" field-label=\"vm.labels.BillingRule\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'TaxInclusive__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.IsTaxInclusive\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'BillingFrequency__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.billingFrequencyPicklistEntries\" field-label=\"vm.labels.BillingFrequency\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"vm.selectedPli.PriceListItemSO.taxCode\" field-label=\"'Tax Code'\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix +'MinUsageQuantity__c']\" field-type=\"DOUBLE\" is-editable=\"true\" field-label=\"vm.labels.MinUsageQuantity\" scale=\"{{vm.getFieldValue('MinUsageQuantity__c','Scale')}}\" precision=\"{{vm.getFieldValue('MinUsageQuantity__c','Precision')}}\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix +'MaxUsageQuantity__c']\" field-type=\"DOUBLE\" is-editable=\"true\" field-label=\"vm.labels.MaxUsageQuantity\" scale=\"{{vm.getFieldValue('MaxUsageQuantity__c','Scale')}}\" precision=\"{{vm.getFieldValue('MaxUsageQuantity__c','Precision')}}\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div class=\"taxbilling-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\" data-ng-disabled=\"vm.disableSaveBtn === true\">{{::vm.labels.SaveButton}}</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 628 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var taxBillingController = function($q, $scope, $state, systemConstants, i18nService, selectedPriceListItemDetails, priceListItemCommonService, applicationService, cpqAdminConstants, apiCallsService, allPicklists, taxbillingService, metaData) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '',
	            isFormSaved = false;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.selectedPli = selectedPriceListItemDetails;
	        vm.disableSaveBtn = false;
	        vm.alertList = [];
	
	        taxbillingService.setAllPicklists(allPicklists);
	        var metaDataInfo = priceListItemCommonService.getMetaData();
	
	        vm.billingFrequencyPicklistEntries = {
	            PicklistValues: taxbillingService.getBillingFrequency()
	        };
	        vm.billingRulePicklistEntries = {
	            PicklistValues: taxbillingService.getBillingRule()
	        };
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        var taxCode = vm.selectedPli.PriceListItemSO[getPrefixedAttribute('TaxCodeId__r')];
	        if (taxCode) {
	            vm.selectedPli.PriceListItemSO['taxCode'] = {
	                autocomplete: {
	                    'querySearch': apiCallsService.searchSObjectRecords,
	                    'displayName': 'Name',
	                    'selectedItem': {
	                        Id: taxCode.Id,
	                        Name: taxCode.Name
	                    },
	                    'sObjectName': getPrefixedAttribute('TaxCode__c')
	                }
	            };
	        } else {
	            vm.selectedPli.PriceListItemSO['taxCode'] = {
	                autocomplete: {
	                    'querySearch': apiCallsService.searchSObjectRecords,
	                    'displayName': 'Name',
	                    'selectedItem': null,
	                    'sObjectName': getPrefixedAttribute('TaxCode__c')
	                }
	            };
	        }
	
	        function prepareTaxCode() {
	            if (vm.selectedPli.PriceListItemSO['taxCode'].autocomplete.selectedItem) {
	                vm.selectedPli.PriceListItemSO[getPrefixedAttribute('TaxCodeId__c')] = vm.selectedPli.PriceListItemSO['taxCode'].autocomplete.selectedItem.Id;
	            } else {
	                vm.selectedPli.PriceListItemSO[getPrefixedAttribute('TaxCodeId__c')] = '';
	            }
	        }
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        function updatePriceListItem(toState, toParams) {
	            var defer = $q.defer();
	            if (vm.selectedPli) {
	                prepareTaxCode();
	                vm.disableSaveBtn = true;
	                priceListItemCommonService.updatePriceListItem(angular.copy(vm.selectedPli))
	                    .then(function(response) {
	                        isFormSaved = true;
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        } else {
	                            addAlert({
	                                type: cpqAdminConstants.SUCCESS,
	                                msg: vm.labels.ProductSaveSuccess
	                            });
	                            vm.disableSaveBtn = false;
	                            defer.resolve(response);
	                        }
	                    }, function(reason) {
	                        isFormSaved = false;
	                        applicationService.showErrorMessage(reason);
	                        vm.disableSaveBtn = false;
	                        defer.reject(false);
	                    });
	
	            } else {
	                defer.resolve(true);
	            }
	
	            return defer.promise;
	        }
	        vm.save = function(e, toState, toParams) {
	            updatePriceListItem(toState, toParams)
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (isFormSaved) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.save(e, toState, toParams);
	            }
	
	        });
	
	        function getField(fieldName) {
	            var fieldObj, name;
	            if (fieldName.indexOf('__c') > -1) {
	                fieldName = getPrefixedAttribute(fieldName);
	            }
	            if (metaDataInfo) {
	                for (var i = 0; i < metaDataInfo.length; i++) {
	                    var name = metaDataInfo[i].FieldName;
	                    if (name === fieldName) {
	                        fieldObj = metaDataInfo[i];
	                        break;
	                    }
	                }
	            }
	            return fieldObj;
	        }
	        vm.getFieldValue = function(fieldName, fieldValueToBeExtracted) {
	            var field = getField(fieldName);
	            if (field) {
	                return field[fieldValueToBeExtracted];
	            } else {
	                return '';
	            }
	
	        };
	    };
	
	    taxBillingController.$inject = [
	        '$q',
	        '$scope',
	        '$state',
	        'systemConstants',
	        'i18nService',
	        'selectedPriceListItemDetails',
	        'priceListItemCommonService',
	        'applicationService',
	        'cpqAdminConstants',
	        'apiCallsService',
	        'allPicklists',
	        'taxbillingService',
	        'metaData'
	    ];
	
	    module.exports = taxBillingController;
	})();


/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceListItem.financerevenue', [])
	        .service('financeRevenueService', __webpack_require__(630))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceListItem.financerevenue', {
	                parent: 'app.priceListItem',
	                url: '/:id/financerevenue',
	                views: {
	                    'priceListItemContainer': {
	                        template: __webpack_require__(631),
	                        controller: __webpack_require__(632),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    selectedPriceListItemDetails: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getPriceListItemDetails($stateParams.id);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 630 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var taxbillingService = function(systemConstants) {
	        var prefix = systemConstants.nsPrefix || '';
	
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	
	
	        var service = {};
	        return service;
	    };
	
	    taxbillingService.$inject = [
	        'systemConstants'
	    ];
	
	    module.exports = taxbillingService;
	})();


/***/ }),
/* 631 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"financerevenue-container\">\n        <div class=\"pricelistitem-financerevenue-block\">\n            <uib-alert ng-repeat=\"alert in vm.alertList\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"vm.selectedPli.PriceListItemSO.ARAccount\" field-label=\"vm.labels.ARAccount\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"vm.selectedPli.PriceListItemSO.RevRecPolicy\" field-label=\"vm.labels.RevenueRecognitionPolicy\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"vm.selectedPli.PriceListItemSO.DRAccount\" field-label=\"vm.labels.DeferredRevenueAccount\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"vm.selectedPli.PriceListItemSO.RevenueSplitPolicy\" field-label=\"vm.labels.RevenueSplitPolicy\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"vm.selectedPli.PriceListItemSO.RRAccount\" field-label=\"vm.labels.RecognizedRevenueAccount\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"vm.selectedPli.PriceListItemSO.UBARAccount\" field-label=\"vm.labels.UnbilledARAccount\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"vm.selectedPli.PriceListItemSO.UBAccount\" field-label=\"vm.labels.UnbilledDeferredAccount\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                </div>\n            </div>\n            <div class=\"financerevenue-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\" data-ng-disabled=\"vm.disableSaveBtn === true\">{{vm.labels.SaveButton}}</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 632 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var financeRevenueController = function($q, $scope, $state, systemConstants, i18nService, selectedPriceListItemDetails, priceListItemCommonService, applicationService, cpqAdminConstants, apiCallsService, financeRevenueService) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '',
	            isFormSaved = false,
	            fields = [{
	                name: 'ARAccount',
	                apiName: 'GLAccountMapRule__c',
	                id: 'ARAccountRuleId__c',
	                obj: 'ARAccountRuleId__r'
	            }, {
	                name: 'RevRecPolicy',
	                apiName: 'RevRecPolicy__c',
	                id: 'RevRecPolicyId__c',
	                obj: 'RevRecPolicyId__r'
	            }, {
	                name: 'RevenueSplitPolicy',
	                apiName: 'RevenueSplitPolicy__c',
	                id: 'RevenueSplitPolicyId__c',
	                obj: 'RevenueSplitPolicyId__r'
	            }, {
	                name: 'UBARAccount',
	                apiName: 'GLAccountMapRule__c',
	                id: 'UBARAccountRuleId__c',
	                obj: 'UBARAccountRuleId__r'
	            }, {
	                name: 'DRAccount',
	                apiName: 'GLAccountMapRule__c',
	                id: 'DRAccountRuleId__c',
	                obj: 'DRAccountRuleId__r'
	            }, {
	                name: 'RRAccount',
	                apiName: 'GLAccountMapRule__c',
	                id: 'RRAccountRuleId__c',
	                obj: 'RRAccountRuleId__r'
	            }, {
	                name: 'UBAccount',
	                apiName: 'GLAccountMapRule__c',
	                id: 'UBAccountRuleId__c',
	                obj: 'UBAccountRuleId__r'
	            }];
	
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.selectedPli = selectedPriceListItemDetails;
	        vm.disableSaveBtn = false;
	        vm.alertList = [];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function createLookupField(item) {
	            var name = item.name,
	                field = vm.selectedPli.PriceListItemSO[getPrefixedAttribute(item.obj)];
	            if (field) {
	                vm.selectedPli.PriceListItemSO[name] = {
	                    autocomplete: {
	                        'querySearch': apiCallsService.searchSObjectRecords,
	                        'displayName': 'Name',
	                        'selectedItem': {
	                            Id: field.Id,
	                            Name: field.Name
	                        },
	                        'sObjectName': getPrefixedAttribute(item.apiName)
	                    }
	                };
	            } else {
	                vm.selectedPli.PriceListItemSO[name] = {
	                    autocomplete: {
	                        'querySearch': apiCallsService.searchSObjectRecords,
	                        'displayName': 'Name',
	                        'selectedItem': null,
	                        'sObjectName': getPrefixedAttribute(item.apiName)
	                    }
	                };
	            }
	        }
	
	        function generateLookupFields() {
	            for (var i = 0; i < fields.length; i++) {
	                createLookupField(fields[i]);
	            }
	        }
	        generateLookupFields();
	
	        function prepareLookupFieldValues() {
	            for (var i = 0; i < fields.length; i++) {
	                var name = fields[i].name,
	                    id = fields[i].id;
	                if (vm.selectedPli.PriceListItemSO[name].autocomplete.selectedItem) {
	                    vm.selectedPli.PriceListItemSO[getPrefixedAttribute(id)] = vm.selectedPli.PriceListItemSO[name].autocomplete.selectedItem.Id;
	                } else {
	                    vm.selectedPli.PriceListItemSO[getPrefixedAttribute(id)] = '';
	                }
	            }
	        }
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        function updatePriceListItem(toState, toParams) {
	            var defer = $q.defer();
	            if (vm.selectedPli) {
	                prepareLookupFieldValues();
	                vm.disableSaveBtn = true;
	                priceListItemCommonService.updatePriceListItem(angular.copy(vm.selectedPli))
	                    .then(function(response) {
	                        isFormSaved = true;
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        } else {
	                            addAlert({
	                                type: cpqAdminConstants.SUCCESS,
	                                msg: vm.labels.ProductSaveSuccess
	                            });
	                            vm.disableSaveBtn = false;
	                            defer.resolve(response);
	                        }
	                    }, function(reason) {
	                        isFormSaved = false;
	                        applicationService.showErrorMessage(reason);
	                        vm.disableSaveBtn = false;
	                        defer.reject(false);
	                    });
	
	            } else {
	                defer.resolve(true);
	            }
	            return defer.promise;
	        }
	        vm.save = function(e, toState, toParams) {
	            updatePriceListItem(toState, toParams)
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (isFormSaved) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.save(e, toState, toParams);
	            }
	        });
	    };
	
	    financeRevenueController.$inject = [
	        '$q',
	        '$scope',
	        '$state',
	        'systemConstants',
	        'i18nService',
	        'selectedPriceListItemDetails',
	        'priceListItemCommonService',
	        'applicationService',
	        'cpqAdminConstants',
	        'apiCallsService',
	        'financeRevenueService'
	    ];
	
	    module.exports = financeRevenueController;
	})();


/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceListItem.defaults', [])
	        .service('defaultsService', __webpack_require__(634))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceListItem.defaults', {
	                parent: 'app.priceListItem',
	                url: '/:id/defaults',
	                views: {
	                    'priceListItemContainer': {
	                        template: __webpack_require__(635),
	                        controller: __webpack_require__(636),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    selectedPriceListItemDetails: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getPriceListItemDetails($stateParams.id);
	                    }],
	                    allPicklists: ['priceListItemDetailsService', '$stateParams', function(priceListItemDetailsService, $stateParams) {
	                        return priceListItemDetailsService.getSObjectPicklistFields('PriceListItem__c', null);
	                    }],
	                    metaData: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getMetaData($stateParams.id);
	                    }],
	                }
	            })
	        }]);
	})();


/***/ }),
/* 634 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var defaultsService = function($q, i18nService, systemConstants, remoteService) {
	        var prefix = systemConstants.nsPrefix || '',
	            allPicklists = [],
	            labels = i18nService.CustomLabel;
	
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function getPicklistValues(type) {
	            var response = [];
	            if (allPicklists.length && type) {
	                for (var i = 0; i < allPicklists.length; i++) {
	                    if (allPicklists[i].FieldName === getPrefixedAttribute(type)) {
	                        response = allPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            return response;
	        }
	
	        function setAllPicklists(data) {
	            allPicklists = data;
	        }
	
	        function prepareAdvancedFormulaValues(items) {
	
	            if (items && items.length) {
	                for (var i = 0; i < items.length; i++) {
	                    if (items[i].value) {
	                        items[i].value = items[i].label;
	                    }
	                }
	            }
	            return items;
	        }
	
	        function getDefaultPriceField(selectedPriceFrom) {
	            var deferQ = $q.defer();
	            remoteService.getDefaultPriceFieldItems(selectedPriceFrom)
	                .then(function(response) {
	                    if (selectedPriceFrom === 'Advanced Formula') {
	                        deferQ.resolve(prepareAdvancedFormulaValues(response));
	                    } else {
	                        deferQ.resolve(response);
	                    }
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function getDefaultQuantityField(selectedQuantityFrom) {
	            var deferQ = $q.defer();
	            remoteService.getDefaultQuantityFieldItems(selectedQuantityFrom)
	                .then(function(response) {
	                    if (selectedQuantityFrom === 'Advanced Formula') {
	                        deferQ.resolve(prepareAdvancedFormulaValues(response));
	                    } else {
	                        deferQ.resolve(response);
	                    }
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function getDefaultPriceFrom() {
	            var noneField = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                },
	                data = getPicklistValues('DefaultPriceFrom__c');
	            data.unshift(noneField);
	            return data;
	        }
	
	        function getDefaultQuanitityFrom() {
	            var noneField = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                },
	                data = getPicklistValues('DefaultQuantityFrom__c');
	
	            data.unshift(noneField);
	            return data;
	        }
	
	        function getAutoRenewalType() {
	            var noneField = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                },
	                data = getPicklistValues('AutoRenewalType__c');
	
	            data.unshift(noneField);
	            return data;
	
	        }
	
	        function truncateNames(obj, type) {
	            var sampleLabel, str, response = [],
	                valueType, value;
	            if (type === 'Product Attribute Value :') {
	                valueType = 'ProductAttributeValue__c.';
	            } else if (type === 'Product Configuration :') {
	                valueType = 'LineItem__c.ConfigurationId__r.';
	            }
	            if (obj && obj.length > 0) {
	                for (var i = 0; i < obj.length; i++) {
	                    var temp = obj[i].label,
	                        leftSide = temp.split(' : ')[0],
	                        rightSide = temp.split(' : ')[1];
	                    response.push({
	                        label: rightSide,
	                        value: obj[i].value.split(valueType)[1]
	                    });
	                }
	            }
	            response.unshift({
	                label: labels.NoneAsPickListValue,
	                value: ''
	            });
	            return response;
	        }
	
	        var service = {
	            setAllPicklists: setAllPicklists,
	            getDefaultPriceFrom: getDefaultPriceFrom,
	            getDefaultQuanitityFrom: getDefaultQuanitityFrom,
	            getAutoRenewalType: getAutoRenewalType,
	            getDefaultPriceField: getDefaultPriceField,
	            getDefaultQuantityField: getDefaultQuantityField
	
	        };
	        return service;
	    };
	
	    defaultsService.$inject = [
	        '$q',
	        'i18nService',
	        'systemConstants',
	        'remoteService'
	    ];
	
	    module.exports = defaultsService;
	})();


/***/ }),
/* 635 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"defaults-container\">\n        <div class=\"pricelistitem-defaults-block\">\n            <uib-alert ng-repeat=\"alert in vm.alertList\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+'DefaultQuantityFrom__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.defaultQuantityFromPicklistEntries\" field-label=\"vm.labels.DefaultQuantityFrom\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+'DefaultPriceFrom__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.defautPriceFromPicklistEntries\" field-label=\"vm.labels.DefaultPriceFrom\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+'DefaultQuantityDatasource__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.defaultQuantityFieldPicklistEntries\" field-label=\"vm.labels.DefaultQuantityField\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field field-type=\"autocomplete\" field-label=\"::vm.labels.DefaultPriceField\" name=\"product\" properties=\"vm.defaultPriceFieldAutoComplete\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field field-type=\"DOUBLE\" is-editable=\"true\" model=\"vm.selectedPli.PriceListItemSO[vm.prefix+'DefaultQuantity__c']\" field-label=\"vm.labels.DefaultQuantity\" scale=\"{{vm.getFieldValue('DefaultQuantity__c','Scale')}}\" precision=\"{{vm.getFieldValue('DefaultQuantity__c','Precision')}}\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field field-type=\"DOUBLE\" is-editable=\"true\" model=\"vm.selectedPli.PriceListItemSO[vm.prefix+'DefaultSellingTerm__c']\" field-label=\"vm.labels.DefaultSellingTerm\" scale=\"{{vm.getFieldValue('DefaultSellingTerm__c','Scale')}}\" precision=\"{{vm.getFieldValue('DefaultSellingTerm__c','Precision')}}\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'EnablePriceRamp__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.AutoUpdateQuantity\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'AutoCascadeSellingTerm__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.AutoCascadeSellingTerm\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'AutoCascadeQuantity__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.AutoCascadeQuantity\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'IsSellingTermReadOnly__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.IsSellingTermReadOnly\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'IsQuantityReadOnly__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.IsQuantityReadOnly\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+ 'AutoRenew__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"vm.labels.AutoRenew\" show-inline=\"true\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\">\n                <div class=\"flex\" flex=\"45\">\n                    <material-form-field model=\"vm.selectedPli.PriceListItemSO[vm.prefix+'AutoRenewalType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.autoRenewalTypePicklistEntries\" field-label=\"vm.labels.AutoRenewalType\">\n                    </material-form-field>\n                </div>\n                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                    <material-form-field field-type=\"DOUBLE\" is-editable=\"true\" model=\"vm.selectedPli.PriceListItemSO[vm.prefix+'AutoRenewalTerm__c']\" field-label=\"vm.labels.AutoRenewalTerm\" scale=\"{{vm.getFieldValue('AutoRenewalTerm__c','Scale')}}\" precision=\"{{vm.getFieldValue('AutoRenewalTerm__c','Precision')}}\">\n                    </material-form-field>\n                </div>\n            </div>\n            <div class=\"defaults-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\" data-ng-disabled=\"vm.disableSaveBtn === true\">{{vm.labels.SaveButton}}</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 636 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var defaultsController = function($q, $scope, $state, systemConstants, i18nService, selectedPriceListItemDetails, priceListItemCommonService, applicationService, cpqAdminConstants, apiCallsService, defaultsService, allPicklists, metaData) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '',
	            isFormSaved = false;
	
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.selectedPli = selectedPriceListItemDetails;
	        vm.disableSaveBtn = false;
	        defaultsService.setAllPicklists(allPicklists);
	        vm.alertList = [];
	        var metaDataInfo = priceListItemCommonService.getMetaData();
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        vm.defautPriceFromPicklistEntries = {
	            PicklistValues: defaultsService.getDefaultPriceFrom()
	        };
	
	        vm.defaultQuantityFromPicklistEntries = {
	            PicklistValues: defaultsService.getDefaultQuanitityFrom(),
	            methodToCallInController: updateDefaultQuantityField
	        };
	
	        vm.defaultPriceFieldAutoComplete = {
	            'autocomplete': {
	                'querySearch': apiCallsService.searchSObjectRecords,
	                'displayName': 'Name',
	                'selectedItem': vm.selectedPli.PriceListItemSO[vm.prefix + 'DefaultPriceDatasource__c'],
	                'sObjectName': vm.prefix + 'FormulaField__c',
	                'selectedItemChange': priceFieldSelected
	            }
	        };
	
	        vm.defaultQuantityFieldPicklistEntries = {
	            PicklistValues: []
	        };
	
	        vm.autoRenewalTypePicklistEntries = {
	            PicklistValues: defaultsService.getAutoRenewalType()
	        };
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        /* Get selected price field on selection change */
	        function priceFieldSelected(priceField) {
	            vm.selectedPli.PriceListItemSO[vm.prefix + 'DefaultPriceDatasource__c'] = angular.isDefined(priceField) ? priceField.Name : '';
	        }
	
	        function updateDefaultQuantityField(obj, donotReset) {
	            /* Make API call, get the values and update the respective associated picklist values*/
	            if (!donotReset) {
	                vm.selectedPli.PriceListItemSO[vm.prefix + 'DefaultQuantityDatasource__c'] = '';
	            }
	            if (obj === '') {
	                vm.defaultQuantityFieldPicklistEntries = {
	                    PicklistValues: [{
	                        label: vm.labels.NoneAsPickListValue,
	                        value: ''
	                    }]
	                };
	            } else {
	                defaultsService.getDefaultQuantityField(obj)
	                    .then(function(response) {
	                        vm.defaultQuantityFieldPicklistEntries = {
	                            PicklistValues: response
	                        };
	                    });
	            }
	        }
	
	        /* Get those 2 values and update the respective picklists on page load */
	        function initilizePicklistFields() {
	            var defaultQuantityFrom = vm.selectedPli.PriceListItemSO[vm.prefix + 'DefaultQuantityFrom__c'],
	                defaultPriceFrom = vm.selectedPli.PriceListItemSO[vm.prefix + 'DefaultPriceFrom__c'];
	
	            if (!defaultQuantityFrom) {
	                vm.selectedPli.PriceListItemSO[vm.prefix + 'DefaultQuantityFrom__c'] = '';
	                defaultQuantityFrom = '';
	            }
	            if (!defaultPriceFrom) {
	                vm.selectedPli.PriceListItemSO[vm.prefix + 'DefaultPriceFrom__c'] = '';
	                defaultPriceFrom = '';
	            }
	            updateDefaultQuantityField(defaultQuantityFrom, true);
	        };
	        initilizePicklistFields();
	
	        function prepareFieldValuesBeforeSave() {
	            var defaultQuantityField = vm.selectedPli.PriceListItemSO[vm.prefix + 'DefaultQuantityDatasource__c'],
	                defaultPriceField = vm.selectedPli.PriceListItemSO[vm.prefix + 'DefaultPriceDatasource__c'];
	            if (defaultQuantityField === '' || defaultQuantityField === undefined || defaultQuantityField === null) {
	                vm.selectedPli.PriceListItemSO[vm.prefix + 'DefaultQuantityFrom__c'] = '';
	            }
	            if (defaultPriceField === '' || defaultPriceField === undefined || defaultPriceField === null) {
	                vm.selectedPli.PriceListItemSO[vm.prefix + 'DefaultPriceFrom__c'] = '';
	            }
	        }
	
	        function updatePriceListItem(toState, toParams) {
	            var defer = $q.defer();
	            if (vm.selectedPli) {
	                prepareFieldValuesBeforeSave();
	                vm.disableSaveBtn = true;
	                priceListItemCommonService.updatePriceListItem(angular.copy(vm.selectedPli))
	                    .then(function(response) {
	                        isFormSaved = true;
	                        if (toState) {
	                            $state.go(toState, toParams);
	                        } else {
	                            addAlert({
	                                type: cpqAdminConstants.SUCCESS,
	                                msg: vm.labels.ProductSaveSuccess
	                            });
	                            vm.disableSaveBtn = false;
	                            defer.resolve(response);
	                        }
	                    }, function(reason) {
	                        isFormSaved = false;
	                        applicationService.showErrorMessage(reason);
	                        vm.disableSaveBtn = false;
	                        defer.reject(false);
	                    });
	
	            } else {
	                defer.resolve(true);
	            }
	            return defer.promise;
	        }
	        vm.save = function(e, toState, toParams) {
	            updatePriceListItem(toState, toParams)
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (isFormSaved) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.save(e, toState, toParams);
	            }
	        });
	
	        function getField(fieldName) {
	            var fieldObj, name;
	            if (fieldName.indexOf('__c') > -1) {
	                fieldName = getPrefixedAttribute(fieldName);
	            }
	            if (metaDataInfo) {
	                for (var i = 0; i < metaDataInfo.length; i++) {
	                    var name = metaDataInfo[i].FieldName;
	                    if (name === fieldName) {
	                        fieldObj = metaDataInfo[i];
	                        break;
	                    }
	                }
	            }
	            return fieldObj;
	        }
	        vm.getFieldValue = function(fieldName, fieldValueToBeExtracted) {
	            var field = getField(fieldName);
	            if (field) {
	                return field[fieldValueToBeExtracted];
	            } else {
	                return '';
	            }
	
	        };
	    };
	
	    defaultsController.$inject = [
	        '$q',
	        '$scope',
	        '$state',
	        'systemConstants',
	        'i18nService',
	        'selectedPriceListItemDetails',
	        'priceListItemCommonService',
	        'applicationService',
	        'cpqAdminConstants',
	        'apiCallsService',
	        'defaultsService',
	        'allPicklists',
	        'metaData'
	    ];
	
	    module.exports = defaultsController;
	})();


/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceListItem.options', [])
	        .service('pliOptionsService', __webpack_require__(638))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceListItem.options', {
	                parent: 'app.priceListItem',
	                url: '/:id/options',
	                views: {
	                    'priceListItemContainer': {
	                        template: __webpack_require__(639),
	                        controller: __webpack_require__(640),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    selectedPriceListItemDetails: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getPriceListItemDetails($stateParams.id);
	                    }],
	                    allProductOptionPricePicklists: ['priceListItemCommonService', '$stateParams', function(priceListItemCommonService, $stateParams) {
	                        return priceListItemCommonService.getSObjectPicklistFields('ProductOptionPrice__c', null);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 638 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var pliOptionsService = function($q, $stateParams, i18nService, systemConstants, remoteService) {
	        var prefix = systemConstants.nsPrefix || '',
	            allProductOptionPricePicklists = [],
	            selectedOptionNode,
	            labels = i18nService.CustomLabel;
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function getProductOptionPrice(productId, priceListId) {
	            var defered = $q.defer(),
	                requestObj = {
	                    "ProductId": productId,
	                    "PriceListId": priceListId
	                };
	
	            remoteService.getProductOptionPrice(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function prepareProductOptionTreeStructure(items, productName) {
	            /* Create the tree structure here */
	            var uniqueOptionGroupNames = [],
	                uniqueOptionGroups = [];
	            for (var i = 0; i < items.length; i++) {
	                var optionGroupName = items[i].OptionGroupName;
	                if (optionGroupName) {
	                    var index = uniqueOptionGroupNames.indexOf(optionGroupName);
	                    if (index <= -1) {
	                        var childrenItemName = items[i].PriceListItemSO[getPrefixedAttribute('ProductId__r')].Name;
	                        uniqueOptionGroupNames.push(optionGroupName);
	                        uniqueOptionGroups.push({
	                            name: optionGroupName,
	                            uniqueChildren: [childrenItemName],
	                            children: [{
	                                name: childrenItemName,
	                                children: []
	                            }]
	                        });
	                    } else {
	                        var product = items[i].PriceListItemSO[getPrefixedAttribute('ProductId__r')],
	                            childrenItemName = product && product.Name ? product.Name : '';
	                        if (childrenItemName) {
	                            /* TODO : Check if the children is already present  in the children array */
	                            var uniquechildrenArr = uniqueOptionGroups[index].uniqueChildren;
	                            if (uniquechildrenArr.indexOf(childrenItemName) <= -1) {
	                                uniqueOptionGroups[index].uniqueChildren.push(childrenItemName);
	                                uniqueOptionGroups[index].children.push({
	                                    name: childrenItemName,
	                                    children: []
	                                });
	                            }
	                        }
	                    }
	                } else {
	                    /* Do nothing here as of now.*/
	                }
	
	            }
	            return uniqueOptionGroups;
	        }
	
	        function setProductOptionNodeSelected(node) {
	            selectedOptionNode = node;
	        }
	
	        function getProductOptionNodeSelected(node) {
	            return selectedOptionNode;
	        }
	
	        function setAllProductOptionPricePicklists(data) {
	            allProductOptionPricePicklists = data;
	        }
	
	        function getProductOptionPricePicklistValues(type) {
	            var response = [];
	            if (allProductOptionPricePicklists.length && type) {
	                for (var i = 0; i < allProductOptionPricePicklists.length; i++) {
	                    if (allProductOptionPricePicklists[i].FieldName === getPrefixedAttribute(type)) {
	                        response = allProductOptionPricePicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            return response;
	        }
	
	        function getPoRollupPriceMethodValues() {
	            var noneField = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                },
	                data = getProductOptionPricePicklistValues('RollupPriceMethod__c');
	
	            data.unshift(noneField);
	            return data;
	        }
	
	        function getPOAdjustmentTypeValues() {
	            var noneField = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                },
	                data = getProductOptionPricePicklistValues('AdjustmentType__c');
	
	            data.unshift(noneField);
	            return data;
	        }
	
	        function prepareProductOptionPrice(items) {
	            var response = [];
	            for (var i = 0; i < items.length; i++) {
	                var temp = angular.copy(items[i]),
	                    additionalOptions = temp.additionalOptions;
	                temp[getPrefixedAttribute('AllocateGroupAdjustment__c')] = (additionalOptions.indexOf('Allocate Group Adjustment') > -1) ? true : false;
	                temp[getPrefixedAttribute('AllowManualAdjustment__c')] = (additionalOptions.indexOf('Allow Manual Adjustment') > -1) ? true : false;
	                temp[getPrefixedAttribute('IsQuantityReadOnly__c')] = (additionalOptions.indexOf('Is Quantity Read Only') > -1) ? true : false;
	                temp[getPrefixedAttribute('IsSellingTermReadOnly__c')] = (additionalOptions.indexOf('Is SellingTerm Read Only') > -1) ? true : false;
	                temp[getPrefixedAttribute('PriceIncludedInBundle__c')] = (additionalOptions.indexOf('Price Included In Bundle') > -1) ? true : false;
	                delete temp.additionalOptions;
	                response.push(temp);
	            }
	            return response;
	        }
	
	        function createProductOptionPrice(items) {
	            var defer = $q.defer(),
	                requestObj = prepareProductOptionPrice(items);
	            remoteService.createProductOptionPrice(requestObj)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function updateProductOptionPrice(items) {
	            var defer = $q.defer(),
	                requestObj = prepareProductOptionPrice(items);
	            remoteService.updateProductOptionPrice(requestObj)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        var service = {
	            getProductOptionPrice: getProductOptionPrice,
	            prepareProductOptionTreeStructure: prepareProductOptionTreeStructure,
	            setProductOptionNodeSelected: setProductOptionNodeSelected,
	            getProductOptionNodeSelected: getProductOptionNodeSelected,
	            setAllProductOptionPricePicklists: setAllProductOptionPricePicklists,
	            getPoRollupPriceMethodValues: getPoRollupPriceMethodValues,
	            getPOAdjustmentTypeValues: getPOAdjustmentTypeValues,
	            createProductOptionPrice: createProductOptionPrice,
	            updateProductOptionPrice: updateProductOptionPrice
	        };
	        return service;
	    };
	
	    pliOptionsService.$inject = [
	        '$q',
	        '$stateParams',
	        'i18nService',
	        'systemConstants',
	        'remoteService'
	    ];
	
	    module.exports = pliOptionsService;
	})();


/***/ }),
/* 639 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"options-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <div class=\"list-table\">\n                <div class=\"product-title\" data-ng-click=\"vm.resetCenterContent()\" ng-class=\"{'selected' : vm.titleSelected === true }\">{{vm.selectedPli.PriceListItemSO[vm.prefix + 'ProductId__r'].Name}}</div>\n                <price-list-item-tree-container data=\"vm.productOptionStructure\" page-type='vm.type' node-children=\"vm.nodeChildren\" tooltip-field=\"vm.tooltipField\" node-label=\"vm.nodeLabel\"></price-list-item-tree-container>\n            </div>\n        </div>\n        <div class=\"options-detail-block\">\n            <uib-alert ng-repeat=\"alert in vm.alertList\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <div class=\"product-option\">\n                <div class=\"product-option-header\">\n                    <div class=\"each-header-item\">Item</div>\n                    <div class=\"each-header-item\">{{::vm.labels.ChargeType}}</div>\n                    <div class=\"each-header-item\">{{::vm.labels.PriceType}}</div>\n                    <div class=\"each-header-item\">{{::vm.labels.PriceMethod}}</div>\n                    <div class=\"each-header-item\">{{::vm.labels.ListPrice}}</div>\n                    <div class=\"each-header-item\">{{::vm.labels.AdjustmentAmount}}</div>\n                    <div class=\"each-header-item\">{{::vm.labels.AdjustmentType}}</div>\n                    <div class=\"each-header-item\">{{::vm.labels.RollupMethod}}</div>\n                    <div class=\"each-header-item\">{{::vm.labels.AdditionalOptions}}</div>\n                </div>\n                <div data-ng-repeat=\"item in vm.centerPanelProductOptionStructure\" class=\"each-row\">\n                    <div class=\"each-cell-item\">{{item.PriceListItemSO[vm.prefix+'ProductId__r'].Name}}</div>\n                    <div class=\"each-cell-item\">{{item.PriceListItemSO[vm.prefix+'ChargeType__c']}}</div>\n                    <div class=\"each-cell-item\">{{item.PriceListItemSO[vm.prefix+'PriceType__c']}}</div>\n                    <div class=\"each-cell-item\">{{item.PriceListItemSO[vm.prefix+'PriceMethod__c']}}</div>\n                    <div class=\"each-cell-item\">{{item.PriceListItemSO[vm.prefix+'ListPrice__c']}}</div>\n                    <div class=\"each-cell-item\">\n                        <material-form-field model=\"item.ProductOptionPriceSO[vm.prefix+'AdjustmentAmount__c']\" field-type=\"QUANTITY\" is-editable=\"true\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"each-cell-item\">\n                        <material-form-field model=\"item.ProductOptionPriceSO[vm.prefix+'AdjustmentType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.poAdjustmentTypePicklistEntries\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"each-cell-item\">\n                        <material-form-field model=\"item.ProductOptionPriceSO[vm.prefix+'RollupPriceMethod__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.poRollupMethodPicklistEntries\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"each-cell-item\">\n                        <material-form-field model=\"item.ProductOptionPriceSO.additionalOptions\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" properties=\"vm.additionalOptionsPicklistEntries\">\n                        </material-form-field>\n                    </div>\n                </div>\n            </div>\n            <div class=\"options-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\" data-ng-disabled=\"vm.disableSaveBtn === true\">{{::vm.labels.SaveButton}}</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\n</div>\n<div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n    <div class=\"modalOverlay\">\n        <div class=\"modalHeaderBody\">\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n            <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n        </div>\n        <div class=\"modal-Footer text-right\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Cancel}}</span>\n            </button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Ok}}</span>\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 640 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var optionsController = function($q, $scope, $state, systemConstants, i18nService, selectedPriceListItemDetails, cpqAdminConstants, applicationService, allProductOptionPricePicklists, priceListItemCommonService, pliOptionsService) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '',
	            isFormSaved = false;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.selectedPli = selectedPriceListItemDetails;
	        vm.centerPanelProductOptionStructure = [];
	        vm.productOptionStructure = [];
	        vm.alertList = [];
	        vm.productOptionData = [];
	        vm.type = 'pli';
	        vm.allowedTypes = ['false'];
	        vm.nodeChildren = 'children';
	        vm.nodeLabel = 'name';
	        vm.tooltipField = 'name';
	        vm.disableSaveBtn = false;
	
	        pliOptionsService.setAllProductOptionPricePicklists(allProductOptionPricePicklists);
	
	        vm.poAdjustmentTypePicklistEntries = {
	            PicklistValues: pliOptionsService.getPOAdjustmentTypeValues()
	        };
	
	        vm.poRollupMethodPicklistEntries = {
	            PicklistValues: pliOptionsService.getPoRollupPriceMethodValues()
	        };
	
	        /* 
	         * These below hard coded string are just alias names for some Sobject fields. 
	         * We are not showing those fields in Admin UI. So didnt convert them to localised labels.
	         * These hard coded strings are only needed for writing business logic.
	         */
	        vm.additionalOptionsPicklistEntries = {
	            PicklistValues: [{
	                label: 'Allocate Group Adjustment',
	                value: 'Allocate Group Adjustment'
	            }, {
	                label: 'Allow Manual Adjustment',
	                value: 'Allow Manual Adjustment'
	            }, {
	                label: 'Is Quantity Read Only',
	                value: 'Is Quantity Read Only'
	            }, {
	                label: 'Is SellingTerm Read Only',
	                value: 'Is SellingTerm Read Only'
	            }, {
	                label: 'Price Included In Bundle',
	                value: 'Price Included In Bundle'
	            }]
	        };
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        var keyContainer = [],
	            keyToBeChecked = 0;
	
	        function updateTreeAndCenterPanel(key, toState, toParams) {
	            keyContainer.push(key);
	            if (keyContainer.length === keyToBeChecked) {
	                keyContainer = [];
	                keyToBeChecked = 0;
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                } else {
	                    addAlert({
	                        type: cpqAdminConstants.SUCCESS,
	                        msg: vm.labels.ProductSaveSuccess
	                    });
	                    loadProductOptionPrice();
	                }
	            }
	        }
	
	        function prepareProductOptionPrice(items) {
	            for (var i = 0; i < items.length; i++) {
	                var adjustmentAmount = items[i][getPrefixedAttribute('AdjustmentAmount__c')];
	                if (!adjustmentAmount || adjustmentAmount == 0) {
	                    items[i][getPrefixedAttribute('AdjustmentAmount__c')] = '';
	                    items[i][getPrefixedAttribute('AdjustmentType__c')] = '';
	                }
	            }
	
	            return items;
	        }
	
	        function prepareProductOption(toState, toParams) {
	            var createArr = [],
	                updateArr = [];
	
	            for (var i = 1; i < vm.centerPanelProductOptionStructure.length; i++) {
	                if (vm.centerPanelProductOptionStructure[i].ProductOptionPriceSO.Id) {
	                    updateArr.push(vm.centerPanelProductOptionStructure[i].ProductOptionPriceSO);
	                } else {
	                    createArr.push(vm.centerPanelProductOptionStructure[i].ProductOptionPriceSO);
	                }
	            }
	            if (createArr.length > 0 && updateArr.length === 0) {
	                keyToBeChecked = 1;
	            } else if (createArr.length === 0 && updateArr.length > 0) {
	                keyToBeChecked = 1;
	            } else {
	                keyToBeChecked = 2;
	            }
	
	            if (createArr.length) {
	                var itemsToCreate = [];
	                itemsToCreate = prepareProductOptionPrice(createArr);
	                vm.disableSaveBtn = true;
	                pliOptionsService.createProductOptionPrice(itemsToCreate)
	                    .then(function(response) {
	                        /*DO nothing here */
	                        updateTreeAndCenterPanel(1, toState, toParams);
	                        vm.disableSaveBtn = false;
	                    });
	            }
	            if (updateArr.length) {
	                var itemsToUpdate = [];
	                itemsToUpdate = prepareProductOptionPrice(updateArr);
	                vm.disableSaveBtn = true;
	                pliOptionsService.updateProductOptionPrice(itemsToUpdate)
	                    .then(function(response) {
	                        /*DO nothing here */
	                        updateTreeAndCenterPanel(2, toState, toParams);
	                        vm.disableSaveBtn = false;
	                    });
	            }
	            if (createArr.length === 0 && updateArr.length === 0) {
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                }
	            }
	        }
	
	        function loadProductOptionPrice() {
	            /* 
	             * TODO : Check if product id is present or not.
	             * If present, then load the related option price to it 
	             */
	            var product, productId, priceListId;
	            vm.productOptionStructure = [];
	            if (vm.selectedPli && vm.selectedPli.PriceListItemSO && vm.selectedPli.PriceListItemSO[getPrefixedAttribute('ProductId__r')]) {
	                product = vm.selectedPli.PriceListItemSO[getPrefixedAttribute('ProductId__r')];
	                productId = product.Id;
	                priceListId = vm.selectedPli.PriceListItemSO[getPrefixedAttribute('PriceListId__c')];
	            }
	            if (productId) {
	                pliOptionsService.getProductOptionPrice(productId, priceListId)
	                    .then(function(response) {
	                        if (response && response.length) {
	                            vm.productOptionData = response;
	                            vm.productOptionStructure = pliOptionsService.prepareProductOptionTreeStructure(response, product.Name);
	                            renderProductOptionCentrPanel(undefined, false);
	                        } else {
	                            vm.disableSaveBtn = true;
	                        }
	                    }, function(reason) {});
	            }
	        }
	
	        loadProductOptionPrice();
	
	        vm.save = function(e, toState, toParams) {
	            prepareProductOption(toState, toParams);
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (isFormSaved) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.save(e, toState, toParams);
	            }
	        });
	
	        function renderProductOptionCentrPanel(node, resetFirstRowValues) {
	            /*TODO : get the node name and find all the nodes with that as parent 
	             * Save it before hiding 
	             */
	            var nodeSelectedInService = priceListItemCommonService.getProductOptionNodeSelected();
	            var firstRow;
	            if (!resetFirstRowValues) {
	                firstRow = vm.centerPanelProductOptionStructure[0];
	            }
	            vm.centerPanelProductOptionStructure = [];
	            if (node || nodeSelectedInService) {
	                var nodeName = '';
	                if (node) {
	                    nodeName = node.name;
	                } else if (nodeSelectedInService) {
	                    nodeName = nodeSelectedInService.name;
	                }
	                var structure = [];
	                if (nodeName) {
	                    for (var i = 0; i < vm.productOptionData.length; i++) {
	                        if (vm.productOptionData[i].OptionGroupName === nodeName) {
	                            if (!vm.productOptionData[i].ProductOptionPriceSO[getPrefixedAttribute('AdjustmentAmount__c')]) {
	                                vm.productOptionData[i].ProductOptionPriceSO[getPrefixedAttribute('AdjustmentAmount__c')] = '';
	                            }
	                            if (!vm.productOptionData[i].ProductOptionPriceSO[getPrefixedAttribute('AdjustmentType__c')]) {
	                                vm.productOptionData[i].ProductOptionPriceSO[getPrefixedAttribute('AdjustmentType__c')] = '';
	                            }
	                            if (!vm.productOptionData[i].ProductOptionPriceSO[getPrefixedAttribute('RollupPriceMethod__c')]) {
	                                vm.productOptionData[i].ProductOptionPriceSO[getPrefixedAttribute('RollupPriceMethod__c')] = '';
	                            }
	                            structure.push(vm.productOptionData[i]);
	                        }
	                    }
	                }
	                if (structure.length) {
	                    for (var i = 0; i < structure.length; i++) {
	                        var tempArr = [],
	                            allocateGroupAdjustment = structure[i].ProductOptionPriceSO[getPrefixedAttribute('AllocateGroupAdjustment__c')],
	                            allowManualAdjustment = structure[i].ProductOptionPriceSO[getPrefixedAttribute('AllowManualAdjustment__c')],
	                            isQuantityReadOnly = structure[i].ProductOptionPriceSO[getPrefixedAttribute('IsQuantityReadOnly__c')],
	                            isSellingTermReadOnly = structure[i].ProductOptionPriceSO[getPrefixedAttribute('IsSellingTermReadOnly__c')],
	                            priceIncludedInBundle = structure[i].ProductOptionPriceSO[getPrefixedAttribute('PriceIncludedInBundle__c')];
	
	                        if (allocateGroupAdjustment) {
	                            tempArr.push('Allocate Group Adjustment');
	                        }
	                        if (allowManualAdjustment) {
	                            tempArr.push('Allow Manual Adjustment');
	                        }
	                        if (isQuantityReadOnly) {
	                            tempArr.push('Is Quantity Read Only');
	                        }
	                        if (isSellingTermReadOnly) {
	                            tempArr.push('Is SellingTerm Read Only');
	                        }
	                        if (priceIncludedInBundle) {
	                            tempArr.push('Price Included In Bundle');
	                        }
	                        structure[i].ProductOptionPriceSO['additionalOptions'] = tempArr;
	                    }
	                    if (resetFirstRowValues) {
	                        var firstObj = {
	                            PriceListItemSO: {},
	                            ProductOptionPriceSO: {}
	                        };
	                        firstObj.PriceListItemSO[getPrefixedAttribute('ProductId__r')] = {
	                            Name: nodeName
	                        };
	                        firstObj.ProductOptionPriceSO[getPrefixedAttribute('AdjustmentAmount__c')] = '';
	                        firstObj.ProductOptionPriceSO[getPrefixedAttribute('AdjustmentType__c')] = '';
	                        firstObj.ProductOptionPriceSO[getPrefixedAttribute('RollupPriceMethod__c')] = '';
	                        firstObj.ProductOptionPriceSO['additionalOptions'] = [];
	                        structure.unshift(firstObj);
	                    } else {
	                        structure.unshift(firstRow);
	                    }
	
	                }
	                vm.centerPanelProductOptionStructure = structure;
	
	            }
	        }
	        $scope.$watch(function() {
	            return priceListItemCommonService.getProductOptionNodeSelected();
	        }, function(newValue, oldValue) {
	            if (newValue) {
	                vm.titleSelected = false;
	                renderProductOptionCentrPanel(newValue, true);
	            } else {
	                vm.centerPanelProductOptionStructure = [];
	            }
	        });
	
	        $scope.$watch(function() {
	            return vm.centerPanelProductOptionStructure[0];
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                var newValues = Object.values(newValue.ProductOptionPriceSO),
	                    oldValues = Object.values(oldValue.ProductOptionPriceSO),
	                    changedFieldIndex, changedField,
	                    changedValue;
	                for (var i = 0; i < newValues.length; i++) {
	                    if (newValues[i] !== oldValues[i]) {
	                        changedFieldIndex = i;
	                        changedValue = newValues[i];
	                        break;
	                    }
	                }
	                changedField = Object.keys(newValue.ProductOptionPriceSO)[changedFieldIndex];
	
	                for (var i = 1; i < vm.centerPanelProductOptionStructure.length; i++) {
	                    vm.centerPanelProductOptionStructure[i].ProductOptionPriceSO[changedField] = changedValue;
	                }
	            }
	        }, true);
	
	        vm.resetCenterContent = function() {
	            vm.titleSelected = true;
	            priceListItemCommonService.setProductOptionNodeSelected(null);
	        };
	    };
	
	    optionsController.$inject = [
	        '$q',
	        '$scope',
	        '$state',
	        'systemConstants',
	        'i18nService',
	        'selectedPriceListItemDetails',
	        'cpqAdminConstants',
	        'applicationService',
	        'allProductOptionPricePicklists',
	        'priceListItemCommonService',
	        'pliOptionsService'
	    ];
	
	    module.exports = optionsController;
	})();


/***/ }),
/* 641 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var pricelistItemController = function($state, $scope, $rootScope, i18nService, priceListItemCommonService) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function findStateName(stateName) {
	            vm.stateCurrentName = stateName;
	        }
	        findStateName($state.current.name);
	
	        $scope.$on('$stateChangeSuccess', function(e, toState, toParams) {
	            findStateName(toState.name);
	            updateTabMenus();
	        });
	
	        /* Menu for specific Tabs */
	        vm.tabFirstMenu = '';
	        vm.tabMenuItems = [];
	
	        function updateTabMenus() {
	            var currentState = vm.stateCurrentName,
	                currentHash = currentState.split('app.priceListItem.')[1];
	            switch (currentHash) {
	                case 'matrices':
	                    {
	                        vm.tabFirstMenu = 'New Matrix';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                default:
	                    {
	                        vm.tabFirstMenu = '';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	            }
	        }
	
	        vm.tabMenuClicked = function(menuName) {
	            var eventName = menuName.split(' ').join('-');
	            $scope.$broadcast(eventName);
	        };
	
	        vm.currentState = $state.current.name;
	
	        $scope.$watch(function() {
	            return priceListItemCommonService.getSelectedPLI();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                vm.selectedPLI = newValue;
	                vm.productName = vm.selectedPLI.PriceListItemSO[getPrefixedAttribute('ProductId__r')].Name;
	                vm.chargeType = vm.selectedPLI.PriceListItemSO[getPrefixedAttribute('ChargeType__c')];
	                vm.priceListName = vm.selectedPLI.PriceListItemSO[getPrefixedAttribute('PriceListId__r')].Name;
	            }
	        }, true);
	
	    };
	
	    pricelistItemController.$inject = [
	        '$state',
	        '$scope',
	        '$rootScope',
	        'i18nService',
	        'priceListItemCommonService'
	    ];
	
	    module.exports = pricelistItemController;
	})();


/***/ }),
/* 642 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		var constants = {
			/*
			 * This object can be any level nested depending on modularity we want to achieve 
			 * - Either per page
			 * - Per standalone functionality
			 */
			'new': 'new',
			'update': 'update',
			'numberOfProductsPerChunk': 50,
			'treePanelItemsPerChunk': 25,
			'product': 'Product',
			'productFamily': 'Product Family',
			'productGroup': 'Product Group',
			'priceListItem': 'Price List Item',
			'custom': 'Custom'
		};
	
		module.exports = constants;
	
	})();

/***/ }),
/* 643 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"mainPriceListItemContent\">\n    <div class=\"pricelistitem-main-Container\">\n        <div class=\"pricelistitem-header title-bar\">\n            <div class=\"pricelistitem-title-container title\">\n                <div class=\"pricelist-info\">\n                    <span class=\"title\" title=\"{{vm.productName}}\">{{vm.productName}}</span>\n                    <span class=\"chargeType\">CT : {{vm.chargeType}} , PL : {{vm.priceListName}}</span>\n                </div>\n            </div>\n            <div id=\"navbar\">\n                <price-list-item-sub-menu></price-list-item-sub-menu>\n                <!-- Product menu bar with its values -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"list-product-btn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabFirstMenu)\" data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                        <div class=\"drop drop-menu\" data-ng-if=\"::vm.tabMenuItems.length > 0\">\n                            <md-menu md-offset=\"50 50\">\n                                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                    <i class=\"material-icons\">more_vert</i>\n                                </button>\n                                <md-menu-content width=\"2\">\n                                    <md-menu-item data-ng-repeat=\"menu in ::vm.tabMenuItems\">\n                                        <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                            <div layout=\"row\" flex>\n                                                <p flex>{{::menu}}</p>\n                                            </div>\n                                        </md-button>\n                                    </md-menu-item>\n                                </md-menu-content>\n                            </md-menu>\n                        </div>\n                    </div>\n                </ul>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"pricelistItemCenterContainer\">\n            <!-- Content layout starts -->\n            <div ui-view=\"priceListItemContainer\" class=\"pricelistItemContainer\"></div>\n            <!-- Content layout ends -->\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    module.exports = angular.module('cpqAdmin.applicationManagement', [])
	        .constant('applicationManagementConstants', __webpack_require__(645))
	        .service('applicationManagementService', __webpack_require__(646))
	        .controller('applicationManagementController', __webpack_require__(647))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.applicationManagement', {
	                    url: '/applicationManagement',
	                    views: {
	                        'pageContent@': {
	                            template: __webpack_require__(648),
	                            controller: 'applicationManagementController',
	                            controllerAs: 'vm'
	                        }
	                    },
	                    resolve: {
	                        applicationFeatures: ['applicationManagementService', function(applicationManagementService) {
	                            return applicationManagementService.getApplicationSettings();
	                        }]
	                    }
	                })
	                .state('app.applicationManagement.settingGroup', {
	                    parent: 'app.applicationManagement',
	                    url: '/:id/settingGroup',
	                    template: __webpack_require__(649),
	                    controller: __webpack_require__(650),
	                    controllerAs: 'vm',
	                    params: {
	                        id: {
	                            value: null,
	                            squash: true
	                        }
	                    }
	                })
	                .state('app.applicationManagement-unauthorized', {
	                    url: '/applicationManagement/unauthorized',
	                    views: {
	                        'pageContent@': {
	                            template: __webpack_require__(660),
	                            controller: __webpack_require__(661),
	                            controllerAs: 'vm'
	                        }
	                    }
	                });
	        }]);
	})();


/***/ }),
/* 645 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		var constants = {
			'applicationName': 'CPQ',
			'applicationManagement': 'Application Management',
			'actionColumnLabel': 'CustomAction',
			'cartLineItem': 'Cart Line Item',
			'installedProducts': 'Installed Products',
			'lineItemWaterfall': 'Line Item Waterfall',
			'summaryWaterfall': 'Summary Waterfall',
			'accessCtrlErrorMsg': 'You do not have the level of access necessary to access the feature Application Settings. Contact the administrator if access is necessary.',
			'cartViews': 'Cart Views',
			'cartPage': 'Cart Page',
			'customTemplate': 'Custom',
			'requestSource': 'AdminUI',
			'Public': 'Public',
			'Protected': 'Protected',
			'cartViewLeftColumnMax': 2,
			'displayType' : {
				'MULTIPICKLIST': 'Multi-Select Checkbox'
			}
	
		};
	
		module.exports = constants;
	
	})();

/***/ }),
/* 646 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var applicationManagementService = function($state, $q, $filter, _, remoteService, systemConstants, applicationManagementConstants) {
	        var prefix = systemConstants.nsPrefix || '',
	            applicationFeatures,
	            applicationFlowsDos,
	            selectedApplicationFeature;
	
	        function setApplicationFeatures(applicationFeaturesDOs) {
	            applicationFeatures = prepareApplicationFeatures(applicationFeaturesDOs);
	        }
	
	        function getApplicationFeatures() {
	            return applicationFeatures;
	        }
	
	        function prepareApplicationFeatures(ApplicationFeatureDOs) {
	            var response = {
	                    leftSideList: [],
	                    tabs: []
	                },
	                key, count;
	
	            for (var key = 0; key < ApplicationFeatureDOs.length; key++) {
	                var applicationFeature = ApplicationFeatureDOs[key];
	
	                var tabName = applicationFeature.ApplicationFeatureSO.Name.split(' ').join('_'),
	                    allTabItems = applicationFeature.SettingGroupDOs || [],
	                    settingGroupSOs = [],
	                    uniqueTabs = [],
	                    filterKey = 'SettingGroupSO.' + prefix + 'Sequence__c';
	                allTabItems = $filter('orderBy')(allTabItems, filterKey);
	
	                for (var count = 0; count < allTabItems.length; count++) {
	                    var eachTabItem = allTabItems[count].SettingGroupSO,
	                        name = eachTabItem.Name,
	                        configFlow = eachTabItem[prefix + 'ConfigFlow__c'];
	                    if (uniqueTabs.indexOf(name) > -1) {
	                        var index = uniqueTabs.indexOf(name);
	                        if (configFlow && configFlow === 'Default')
	                            settingGroupSOs[index].items.unshift(eachTabItem);
	                        else
	                            settingGroupSOs[index].items.push(eachTabItem);
	                    } else {
	                        uniqueTabs.push(name);
	                        settingGroupSOs.push({
	                            name: name,
	                            items: [eachTabItem]
	                        });
	                    }
	                }
	
	                if (settingGroupSOs.length) {
	                    applicationFeature.ApplicationFeatureSO['settingGroupId'] = settingGroupSOs[0].items[0].Id;
	                }
	                response.leftSideList.push(applicationFeature.ApplicationFeatureSO);
	
	                response.tabs.push({
	                    name: tabName,
	                    items: settingGroupSOs
	                });
	            }
	            return filterBySequnceNumber(response);
	        }
	
	        function filterBySequnceNumber(ApplicationFeatureDOs) {
	            var filterKey = prefix + 'Sequence__c',
	                index, tabsLength = ApplicationFeatureDOs.tabs.length;
	            if (ApplicationFeatureDOs.leftSideList.length) {
	                ApplicationFeatureDOs.leftSideList = $filter('orderBy')(ApplicationFeatureDOs.leftSideList, filterKey);
	            }
	            return ApplicationFeatureDOs;
	        }
	
	        function setSelectedApplicationFeature(selectedApplicationFeatureDO) {
	            selectedApplicationFeature = selectedApplicationFeatureDO;
	        }
	
	        function getSelectedApplicationFeature() {
	            return selectedApplicationFeature;
	        }
	
	        function getApplicationSettings() {
	            var applicationDetails = { 'ApplicationName': applicationManagementConstants.applicationName },
	                deferQ = $q.defer();
	            remoteService.getApplicationSettings(applicationDetails)
	                .then(function(response) {
	                    if (!response.isSuccess && response.errorMessages && response.errorMessages[0] === applicationManagementConstants.accessCtrlErrorMsg) {
	                        $state.go('app.applicationManagement-unauthorized');
	                        deferQ.reject(false);
	                    } else {
	                        setApplicationFeatures(response.ApplicationFeatureDOs);
	                        deferQ.resolve(response);
	                    }
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function getSettingGroupsByApplicationFeature(ApplicationFeatureDO) {
	            var applicationFeatureName = ApplicationFeatureDO.Name.split(' ').join('_'),
	                tabs = getApplicationFeatures().tabs,
	                tabsLength = tabs.length,
	                index,
	                settingGroups = [];
	            for (index = 0; index < tabsLength; index++) {
	                var tab = tabs[index];
	                if (tab.name === applicationFeatureName) {
	                    settingGroups = tab.items;
	                }
	            }
	            return settingGroups;
	        }
	
	        function getApplicationSettingsByGroups(settingGroupIdList) {
	            var deferQ = $q.defer(),
	                settingGrouIds = {
	                    'SettingGroupIdList': settingGroupIdList
	                };
	            remoteService.getApplicationSettingsByGroups(settingGrouIds).then(function(response) {
	                if (!response.isSuccess && response.errorMessages && response.errorMessages[0] === applicationManagementConstants.accessCtrlErrorMsg) {
	                    $state.go('app.applicationManagement-unauthorized');
	                    deferQ.reject(false);
	                } else {
	                    (response.errorMessages) ? delete response.errorMessages: true;
	                    (response.isSuccess) ? delete response.isSuccess: true;
	                    deferQ.resolve(response);
	                }
	            }, function(reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        function updateApplicationSettingsAndGroups(settingGroupList) {
	            return remoteService.updateApplicationSettingsAndGroups2(settingGroupList);
	        }
	
	        function loadDefaultSettings() {
	            return remoteService.loadDefaultSettings();
	        }
	
	        function getPicklistForAction() {
	            var actionList = {
	                'type': {
	                    'PicklistValues': [{
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Task",
	                        "value": "Task"
	                    }, {
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Action",
	                        "value": "Action"
	                    }, {
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Sidebar Action",
	                        "value": "Sidebar Action"
	                    }]
	                },
	                'area': {
	                    'PicklistValues': [{
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Left",
	                        "value": "Left"
	                    }, {
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Right",
	                        "value": "Right"
	                    }, {
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Center",
	                        "value": "Center"
	                    }, {
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "More",
	                        "value": "More"
	                    }]
	                },
	                'action': {
	                    'PicklistValues': [{
	                        "active": true,
	                        "defaultValue": true,
	                        "label": "--None--",
	                        "value": ""
	                    }, {
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Save",
	                        "value": "Save"
	                    }, {
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Quick Save",
	                        "value": "QuickSave"
	                    }, {
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Generate",
	                        "value": "Generate"
	                    }, {
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Submit for Approval",
	                        "value": "SubmitApproval"
	                    }, {
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Quick Redirect",
	                        "value": "QuickRedirect"
	                    }]
	                },
	                'behavior': {
	                    'PicklistValues': [{
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Self",
	                        "value": "Self"
	                    }, {
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "New Window",
	                        "value": "New Window"
	                    }, {
	                        "active": true,
	                        "defaultValue": false,
	                        "label": "Dialog Window",
	                        "value": "IFrame"
	                    }]
	                }
	            };
	            return actionList;
	        }
	
	        function getSampleActionList() {
	            var sample = {
	                "Id": "",
	                "IsDeleted": false,
	                "Name": ""
	            };
	            sample[prefix + 'Sequence__c'] = '';
	            sample[prefix + 'ActionName__c'] = '';
	            sample[prefix + 'ActionLabelName__c'] = '';
	            sample[prefix + 'DisplayAs__c'] = 'Action';
	            sample[prefix + 'ActionArea__c'] = 'Center';
	            sample[prefix + 'ActionStyleClass__c'] = '';
	            sample[prefix + 'ActionPage__c'] = '';
	            sample[prefix + 'ActionParams__c'] = '';
	            sample[prefix + 'Behavior__c'] = 'Self';
	            sample[prefix + 'IsEnabled__c'] = false;
	            sample[prefix + 'AlwaysDisplay__c'] = false;
	            sample[prefix + 'DisplayType__c'] = '';
	            sample[prefix + 'Flow__c'] = '';
	            return sample;
	        }
	
	        function prepareActionListsForDisplay(SettingListDOs) {
	            var settingLists = [];
	            for (var index = 0; index < SettingListDOs.length; index++) {
	                var settingList = SettingListDOs[index],
	                    actionName = settingList[prefix + 'ActionName__c'],
	                    displayType = settingList[prefix + 'DisplayType__c'];
	                // Identify the default action    
	                if (actionName.indexOf(applicationManagementConstants.actionColumnLabel) > -1) {
	                    settingList['isDefault'] = true;
	                } else {
	                    settingList['isDefault'] = false;
	                }
	                if (displayType === applicationManagementConstants.cartLineItem) {
	                    settingList[prefix + 'ActionType__c'] = settingList[prefix + 'ActionType__c'] || '';
	                }
	                delete settingList['SetupOwnerId'];
	                delete settingList['CreatedDate'];
	                delete settingList['CreatedById'];
	                delete settingList['LastModifiedDate'];
	                delete settingList['LastModifiedById'];
	                delete settingList['SystemModstamp'];
	                settingLists.push(settingList);
	            }
	            var filterKey = prefix + 'Sequence__c',
	                settingLists = $filter('orderBy')(settingLists, filterKey);
	            return settingLists;
	        }
	
	        function prepareSettingListJSONForUpdateAction(CustomSettingName, ConfigFlow, RecordKey, SettingListDOs) {
	            var settingListJSON = [];
	            for (var index = 0; index < SettingListDOs.length; index++) {
	                var temp = {
	                    'attributes': {
	                        'type': CustomSettingName,
	                    }
	                };
	                temp['Name'] = SettingListDOs[index].Name;
	                temp['IsDeleted'] = SettingListDOs[index].IsDeleted;
	                temp[prefix + 'ActionArea__c'] = SettingListDOs[index][prefix + 'ActionArea__c'];
	                temp[prefix + 'ActionLabelName__c'] = SettingListDOs[index][prefix + 'ActionLabelName__c'];
	                temp[prefix + 'ActionName__c'] = SettingListDOs[index][prefix + 'ActionName__c'];
	                temp[prefix + 'AlwaysDisplay__c'] = SettingListDOs[index][prefix + 'AlwaysDisplay__c'];
	                temp[prefix + 'DisplayAs__c'] = SettingListDOs[index][prefix + 'DisplayAs__c'];
	                temp[prefix + 'DisplayType__c'] = SettingListDOs[index][prefix + 'DisplayType__c'] || RecordKey;
	                temp[prefix + 'Flow__c'] = SettingListDOs[index][prefix + 'Flow__c'];
	                temp[prefix + 'IsEnabled__c'] = SettingListDOs[index][prefix + 'IsEnabled__c'];
	                temp[prefix + 'Sequence__c'] = SettingListDOs[index][prefix + 'Sequence__c'];
	                temp[prefix + 'ActionPage__c'] = SettingListDOs[index][prefix + 'ActionPage__c'] || null;
	                temp[prefix + 'ActionParams__c'] = SettingListDOs[index][prefix + 'ActionParams__c'] || null;
	                temp[prefix + 'ActionStyleClass__c'] = SettingListDOs[index][prefix + 'ActionStyleClass__c'] || null;
	                temp[prefix + 'ActionType__c'] = SettingListDOs[index][prefix + 'ActionType__c'] || null;
	                temp[prefix + 'Behavior__c'] = SettingListDOs[index][prefix + 'Behavior__c'] || null;
	                settingListJSON.push(temp);
	            }
	            return JSON.stringify(settingListJSON);
	        }
	
	        function prepareListForDisplay(ApplicationSettingDOs) {
	            var applicationSettingDOs = [];
	            _.each(ApplicationSettingDOs, function(item) {
	                var fieldName = item.ApplicationSettingSO[prefix + 'FieldName__c'];
	                if (fieldName) {
	                    var label = item.ApplicationSettingSO[prefix + 'FieldLabel__c'],
	                        customSettingName = item.ApplicationSettingSO[prefix + 'CustomSettingName__c'],
	                        dataType = item.ApplicationSettingSO[prefix + 'DataType__c'],
	                        displayType = item.ApplicationSettingSO[prefix + 'DisplayType__c'],
	                        helpText = item.ApplicationSettingSO[prefix + 'HelpText__c'];
	                    if (item.SettingList.length) {
	                        var fieldValue = item.SettingList[0][fieldName] || '',
	                            settingListID = item.SettingList[0].Id;
	                        if (applicationManagementConstants.displayType.MULTIPICKLIST === displayType) {
	                            fieldValue = fieldValue !== '' ? fieldValue.split(',') : fieldValue; 
	                            if (item.selectedOptionValues) {
	                                for (var i = 0; i < fieldValue.length ; i++) {
	                                    fieldValue[fieldValue[i]] = item.selectedOptionValues[fieldValue[i]];
	                                }
	                            }
	                        }
	                    } else {
	                        var fieldValue = '',
	                            settingListID = '';
	                    }
	                    var applicationSettingDO = {
	                        'label': label,
	                        'fieldName': fieldName,
	                        'fieldValue': fieldValue,
	                        'customSettingName': customSettingName,
	                        'settingListID': settingListID,
	                        'dataType': dataType,
	                        'displayType': displayType,
	                        'helpText': helpText
	                    };
	                    if (displayType === 'Picklist' || displayType === applicationManagementConstants.displayType.MULTIPICKLIST) {
	                        if (!item.availableOptionValues && !item.selectedOptionValues) {
	                            var staticPicklistOptions = item.ApplicationSettingSO[prefix + 'StaticPicklistOptions__c'],
	                            picklistValues = { 'PicklistValues': [] };
	                            if (staticPicklistOptions) {
	                                var staticPicklistOptionsArray = staticPicklistOptions.split(',');
	                                picklistValues['PicklistValues'] = prepareStaticPicklist(staticPicklistOptionsArray);
	                            }
	                        } else {
	                            var pickAvailableListOptions = item.availableOptionValues || {};
	                            var pickSelectedListOptions = item.selectedOptionValues || {};
	                            picklistValues = { 'PicklistValues': [] };
	                            picklistValues['PicklistValues'] = prepareDynamicPicklist(Object.assign(pickSelectedListOptions, pickAvailableListOptions));
	                        }
	                        
	                        applicationSettingDO['picklistValues'] = picklistValues;
	                    }
	                    applicationSettingDOs.push(applicationSettingDO);
	                }
	            });
	            return applicationSettingDOs;
	        }
	
	        function prepareStaticPicklist(staticPicklistDOs) {
	            var index, staticPicklistDOsLength = staticPicklistDOs.length,
	                staticPicklists = [];
	            for (index = 0; index < staticPicklistDOsLength; index++) {
	                var staticPicklist = {
	                    "active": true,
	                    "defaultValue": true,
	                    "label": staticPicklistDOs[index],
	                    "value": staticPicklistDOs[index]
	                };
	                staticPicklists.push(staticPicklist);
	            }
	            return staticPicklists;
	        }
	
	        function prepareDynamicPicklist(dynamicListDOs) {
	            var dynamicPicklists = [];
	
	            for (var key in dynamicListDOs) {
	                var dynamicPicklist = {
	                    "active": true,
	                    "defaultValue": true,
	                    "label": dynamicListDOs[key],
	                    "value": key
	                };
	                dynamicPicklists.push(dynamicPicklist);
	            }
	
	            return dynamicPicklists;
	        }
	
	        function prepareSettingListJSONForUpdateList(ApplicationSettingSO) {
	            var fieldName = ApplicationSettingSO['fieldName'],
	                fieldValue = ApplicationSettingSO['fieldValue'],
	                customSettingName = ApplicationSettingSO['customSettingName'],
	                settingListID = ApplicationSettingSO['settingListID'],
	                settingListJSON = [],
	                temp = {
	                    'attributes': {
	                        'type': customSettingName,
	                    },
	                    'Id': settingListID,
	                };
	            if (ApplicationSettingSO.displayType === applicationManagementConstants.displayType.MULTIPICKLIST) {   
	                temp[fieldName] = fieldValue.join();
	            } else {
	                temp[fieldName] = fieldValue;
	            }
	            
	            settingListJSON.push(temp);
	            return JSON.stringify(settingListJSON);
	        }
	
	        function getApplicationFlows() {
	            var deferQ = $q.defer();
	            remoteService.getApplicationFlows().then(function(response) {
	                if (!response.isSuccess && response.errorMessages && response.errorMessages[0] === applicationManagementConstants.accessCtrlErrorMsg) {
	                    $state.go('app.applicationManagement-unauthorized');
	                    deferQ.reject(false);
	                } else {
	                    deferQ.resolve(response);
	                }
	            }, function(reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        function createApplicationFlows(FlowSO) {
	            return remoteService.createApplicationFlows(FlowSO);
	        }
	
	        function updateApplicationFlows(FlowSO) {
	            return remoteService.updateApplicationFlows2(FlowSO);
	        }
	
	        function deleteApplicationFlow(FlowSOId) {
	            return remoteService.deleteApplicationFlow2(FlowSOId);
	        }
	
	        function getSampleFlowManagement() {
	            var sample = {
	                'FlowSO': {},
	                'ExistingFlowId': null
	            };
	            sample.FlowSO.Name = '';
	            sample.FlowSO[prefix + 'AssetsPage__c'] = prefix + 'Cart';
	            sample.FlowSO[prefix + 'CartPage__c'] = prefix + 'Cart';
	            sample.FlowSO[prefix + 'CatalogPage__c'] = prefix + 'Cart';
	            sample.FlowSO[prefix + 'OptionsPage__c'] = prefix + 'Cart';
	            sample.FlowSO[prefix + 'ProductAttributeDetailPage__c'] = prefix + 'Cart';
	            return sample;
	        }
	
	        function getSampleColumnsList() {
	            var sample = {
	                "Id": "",
	                "IsDeleted": false,
	                "Name": ""
	            };
	            sample[prefix + 'DisplayType__c'] = '';
	            sample[prefix + 'FieldName__c'] = '';
	            sample[prefix + 'Flow__c'] = '';
	            sample[prefix + 'HeaderStyle__c'] = '';
	            sample[prefix + 'IsEditable__c'] = '';
	            sample[prefix + 'IsSortable__c'] = '';
	            sample[prefix + 'IsPricePoint__c'] = false;
	            sample[prefix + 'Sequence__c'] = '';
	            return sample;
	        }
	
	        function prepareColumnsListsForDisplay(SettingListDOs) {
	            var settingLists = [];
	            for (var index = 0; index < SettingListDOs.length; index++) {
	                var settingList = SettingListDOs[index];
	                delete settingList['SetupOwnerId'];
	                delete settingList['CreatedDate'];
	                delete settingList['CreatedById'];
	                delete settingList['LastModifiedDate'];
	                delete settingList['LastModifiedById'];
	                delete settingList['SystemModstamp'];
	                settingLists.push(settingList);
	            }
	            var filterKey = prefix + 'Sequence__c'
	            settingLists = $filter('orderBy')(settingLists, filterKey);
	            return settingLists;
	        }
	
	        function prepareSettingListJSONForUpdateColumns(CustomSettingName, ConfigFlow, RecordKey, SettingListDOs) {
	            var settingListJSON = [];
	            for (var index = 0; index < SettingListDOs.length; index++) {
	                var temp = {
	                    'attributes': {
	                        'type': CustomSettingName,
	                    }
	                };
	                temp['Name'] = SettingListDOs[index].Name;
	                temp['IsDeleted'] = SettingListDOs[index].IsDeleted;
	                temp[prefix + 'DisplayType__c'] = SettingListDOs[index][prefix + 'DisplayType__c'] || RecordKey;
	                temp[prefix + 'FieldName__c'] = SettingListDOs[index][prefix + 'FieldName__c'];
	                temp[prefix + 'Flow__c'] = SettingListDOs[index][prefix + 'Flow__c'];
	                temp[prefix + 'HeaderStyle__c'] = SettingListDOs[index][prefix + 'HeaderStyle__c'];
	                temp[prefix + 'Style__c'] = SettingListDOs[index][prefix + 'Style__c'];
	                temp[prefix + 'StyleClass__c'] = SettingListDOs[index][prefix + 'StyleClass__c'];
	                temp[prefix + 'IsEditable__c'] = SettingListDOs[index][prefix + 'IsEditable__c'];
	                temp[prefix + 'IsSortable__c'] = SettingListDOs[index][prefix + 'IsSortable__c'];
	                temp[prefix + 'IsPricePoint__c'] = SettingListDOs[index][prefix + 'IsPricePoint__c'];
	                temp[prefix + 'Sequence__c'] = SettingListDOs[index][prefix + 'Sequence__c'];
	                settingListJSON.push(temp);
	            }
	            return JSON.stringify(settingListJSON);
	        }
	
	        // Getting Group By fields for Cart Views
	        function getGroupByFields() {
	            return remoteService.getCartViewGroupByFields();
	        }
	
	        // Getting available fields for Cart Views
	        function getViewFieldsForFlow(flowName, isCartPage) {
	            if (isCartPage) {
	                return remoteService.getCartViewColumnsForFlow(flowName);
	            } else {
	                return remoteService.getAssetViewColumnsForFlow(flowName);
	            }
	            
	        }
	
	        // Getting the flows for Cart Views
	        function getFlows() {
	            return remoteService.getFlows();
	        }
	
	        // Getting the views data based on flows for Cart Views
	        function getAllGridViews(flowName, isCartPage) {
	            if (isCartPage) {
	                return remoteService.getAllCartViews(flowName);
	            } else {
	                return remoteService.getAllAssetViews(flowName);
	            }
	            
	        }
	
	        //Creating cart views
	        function createGridViewSettings(requestObj, isCartPage) {
	            if (isCartPage) {
	                return remoteService.createCartViewSettings(requestObj);
	            } else {
	                 return remoteService.createAssetViewSettings(requestObj);
	            }
	        }
	
	        //Sample custom list for cart views
	        function getSampleCustomList(sampleObject) {
	            var sample = {};
	            sample[prefix + 'DisplayType__c'] = 'Cart Line Item';
	            sample[prefix + 'FieldName__c'] = (sampleObject[prefix + 'FieldName__c']) ? sampleObject[prefix + 'FieldName__c'] : '';
	            sample[prefix + 'Sequence__c'] = (sampleObject[prefix + 'Sequence__c']) ? sampleObject[prefix + 'Sequence__c'] : '';
	            sample[prefix + 'Pinned__c'] = (sampleObject[prefix + 'Pinned__c']) ? sampleObject[prefix + 'Pinned__c'] : 'Right';
	            sample['fieldSectionPicklist'] = sampleObject.fieldSectionPicklist;
	            return sample;
	        }
	
	        //Delete cart views.
	        function deleteGridView(requestObj, isCartPage) {
	            if (isCartPage) {
	                return remoteService.deleteCartView(requestObj);
	            } else {
	                return remoteService.deleteAssetView(requestObj);
	            }
	            
	        }
	
	        //Update Cart views.
	        function updateGridViewSettings(requestObj, isCartPage) {
	            if (isCartPage) {
	                return remoteService.updateCartViewSettings(requestObj);
	            } else {
	                return remoteService.updateAssetViewSettings(requestObj);
	            }    
	        }
	
	        //To get user/profile/role
	        function getUserRecords(searchText, properties) {
	            var request = {
	                "SObjectName": properties.autocomplete.sObjectName,
	                "SearchString": searchText,
	                "SortField": "Name",
	                "SortDirection": "ASC",
	                "ChunkNumber": 1,
	                "NumberOfRecordsPerChunk": properties.numberOfRecordsPerChunk || 20
	            };
	            var deferQ = $q.defer();
	            remoteService.searchSObjectRecords(request).then(function (response) {
	                deferQ.resolve(prepareUserResponse(response.SObjectRecordsJsonString));
	            }, function (reason) {
	                applicationService.showErrorMessage(reason);
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        function prepareUserResponse(userObject) {
	            var userResponse = [];
	            JSON.parse(userObject).forEach(function(value){
	                delete value.attributes;
	                userResponse.push(value);
	            });
	            return userResponse;
	        }
	
	        //To prepare picklist values for cart views
	        function preparePickList(data) {
	            var picklistValues = [];
	            if (!_.isEmpty(data)) {
	                var index, fieldsLength = data.length;
	                for (index = 0; index < fieldsLength; index++) {
	                    if (data[index].Value && data[index].FieldType && data[index].FieldType  === 'REFERENCE') {
	                        if (data[index].Value === prefix + 'ProductId__c' || data[index].Value === prefix + 'ProductId__r') { 
	                            continue; 
	                        }
	                        if (data[index].IsEditable === false) {
	                            data[index].Value = data[index].Value.replace('__c', '__r');    
	                        }
	                    }
	                    if (data[index].Value === prefix + 'ChargeType__c') {
	                        continue;
	                    }                    
	                    picklistValues.push({
	                        label: data[index].CartViewName || data[index].Label || data[index],
	                        value: data[index].CartViewName || data[index].Value || data[index]
	                    });
	                }
	            }
	            return {
	                'PicklistValues': picklistValues
	            };
	        }
	
	        var applicationService = {
	            setApplicationFeatures: setApplicationFeatures,
	            getApplicationFeatures: getApplicationFeatures,
	            setSelectedApplicationFeature: setSelectedApplicationFeature,
	            getSelectedApplicationFeature: getSelectedApplicationFeature,
	            getApplicationSettings: getApplicationSettings,
	            getSettingGroupsByApplicationFeature: getSettingGroupsByApplicationFeature,
	            getApplicationSettingsByGroups: getApplicationSettingsByGroups,
	            updateApplicationSettingsAndGroups: updateApplicationSettingsAndGroups,
	            loadDefaultSettings: loadDefaultSettings,
	            getPicklistForAction: getPicklistForAction,
	            getSampleActionList: getSampleActionList,
	            prepareActionListsForDisplay: prepareActionListsForDisplay,
	            prepareColumnsListsForDisplay: prepareColumnsListsForDisplay,
	            prepareSettingListJSONForUpdateAction: prepareSettingListJSONForUpdateAction,
	            prepareListForDisplay: prepareListForDisplay,
	            prepareSettingListJSONForUpdateList: prepareSettingListJSONForUpdateList,
	            getSampleFlowManagement: getSampleFlowManagement,
	            getApplicationFlows: getApplicationFlows,
	            createApplicationFlows: createApplicationFlows,
	            updateApplicationFlows: updateApplicationFlows,
	            deleteApplicationFlow: deleteApplicationFlow,
	            getSampleColumnsList: getSampleColumnsList,
	            prepareSettingListJSONForUpdateColumns: prepareSettingListJSONForUpdateColumns,
	            getFlows: getFlows,
	            getAllGridViews: getAllGridViews,
	            getGroupByFields: getGroupByFields,
	            getViewFieldsForFlow: getViewFieldsForFlow,
	            createGridViewSettings: createGridViewSettings,
	            getSampleCustomList: getSampleCustomList,
	            deleteGridView: deleteGridView,
	            updateGridViewSettings: updateGridViewSettings,
	            getUserRecords: getUserRecords,
	            preparePickList: preparePickList
	        };
	
	        return applicationService;
	    };
	
	    applicationManagementService.$inject = ['$state', '$q', '$filter', 'lodash', 'remoteService', 'systemConstants', 'applicationManagementConstants'];
	
	    module.exports = applicationManagementService;
	})();


/***/ }),
/* 647 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var applicationManagementController = function($scope, $timeout, $state, $location, i18nService, systemConstants, applicationManagementConstants, applicationService, applicationManagementService, applicationFeatures) {
	        var vm = this,
	            toGoApplicationFeature = undefined, // Contains selected application feature information
	            toBeActiveApplicationFeatureindex = undefined, // Contains selected application feature index
	            saveByApplicationFeatureOrSettingGroup = undefined,
	            toBeActiveSettingGroupId = undefined,
	            leftPanelScrollTop = 0;
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.hostName = $location.absUrl().split('#')[0];
	        vm.labels = i18nService.CustomLabel;
	
	        vm.configSettings = [
	            {
	                Name: vm.labels.SmartSearchSettings,
	                toState: 'app.smartSearchSettings.searchConnectionSettings'
	            }, {
	                Name: vm.labels.ObjectSummarySettings,
	                toState: 'app.objectSummarySettings' 
	            }, {
	                Name: vm.labels.FavoritesSettings,
	                toState: 'app.favoritesSettings' 
	            }, {
	                Name: vm.labels.LookupFieldSettings,
	                toState: 'app.lookupFieldSettings' 
	            }
	        ]; 
	 
	        applicationManagementService.setApplicationFeatures(applicationFeatures.ApplicationFeatureDOs); // Set the application features Details in application service
	        vm.applicationFeatures = applicationManagementService.getApplicationFeatures(); // Contains all application features Destails
	        vm.activeSettingGroupIndex = 0; // Contains tab active index
	
	        /**
	         * - This method will call while user click the application feature link
	         */
	        vm.changeApplicationFeature = function(index, ApplicationFeatureDO) {
	            toGoApplicationFeature = ApplicationFeatureDO;
	            toBeActiveApplicationFeatureindex = index;
	            $scope.$broadcast('saveApplicationSettingGroup');
	            saveByApplicationFeatureOrSettingGroup = 'applicationFeatures';
	            getLeftScrollPosition();
	        };
	
	        /**
	         * - This method is call from watch method while change the getSelectedApplicationFeature data change
	         */
	        function updateSelectedApplicationFeature() {
	            getLeftScrollPosition();
	            vm.applicationFeatures = applicationManagementService.getApplicationFeatures();
	            var applicationFeatureActiveIndex = vm.selectedApplicationFeature.applicationFeatureActiveIndex;
	            var applicationFeaturesTitle = vm.selectedApplicationFeature.title;
	            if (applicationFeatureActiveIndex >= 0 && applicationFeaturesTitle !== applicationManagementConstants.applicationManagement) {
	                vm.settingGroups = applicationManagementService.getSettingGroupsByApplicationFeature(vm.applicationFeatures.leftSideList[applicationFeatureActiveIndex]);
	                if ((vm.activeSettingGroupIndex !== vm.selectedApplicationFeature.settingGroupNameActiveIndex) || (vm.selectedApplicationFeature.settingGroupNameActiveIndex === undefined))
	                    vm.activeSettingGroupIndex = vm.selectedApplicationFeature.settingGroupNameActiveIndex;
	            } else {
	                vm.settingGroups = undefined;
	            }
	        }
	
	        /**
	         * - emit event - get 
	         * - This method is used for get the child controller save method return data
	         * - If true means it will redirect to selected application feature
	         */
	        $scope.$on('savedSettingGroupResponse', function(event, data) {
	            if (data.message) {
	                // Re-render the application feature name and application setting group name
	                applicationManagementService.getApplicationSettings().then(function(response) {
	                    if (response) {
	                        vm.applicationFeatures = applicationManagementService.getApplicationFeatures();
	
	                        // Identify the clicked event applicationFeature(from left panel) / SettingGroup(from top link)
	                        if (saveByApplicationFeatureOrSettingGroup === 'applicationFeatures') {
	                            var settingGroupLists = applicationManagementService.getSettingGroupsByApplicationFeature(toGoApplicationFeature);
	                            if (settingGroupLists.length) {
	                                vm.settingGroups = settingGroupLists;
	                                $state.go('app.applicationManagement.settingGroup', { 'id': vm.settingGroups[0].items[0].Id });
	                                vm.selectedApplicationFeature.applicationFeatureActiveIndex = toBeActiveApplicationFeatureindex;
	                            } else {
	                                var errorDetails = {
	                                    message: vm.labels.NoRecordsToDisplay
	                                };
	                                applicationService.showErrorMessage(errorDetails);
	                            }
	                        } else {
	                            $state.go('app.applicationManagement.settingGroup', { 'id': toBeActiveSettingGroupId });
	                        }
	
	                        $timeout(function() {
	                            setLeftScrollPosition();
	                        }, 0);
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(errorDetails);
	                });
	            } else {
	                var settingGroupNameActiveIndex = applicationManagementService.getSelectedApplicationFeature().settingGroupNameActiveIndex;
	                if (vm.activeSettingGroupIndex !== settingGroupNameActiveIndex) {
	                    vm.activeSettingGroupIndex = settingGroupNameActiveIndex;
	                }
	            }
	        });
	
	        /**
	         * - This method call while click the setting group link
	         */
	        vm.goToSettingGroupPage = function(event, index, settingGroup) {
	            saveByApplicationFeatureOrSettingGroup = 'settingGroup';
	            toBeActiveSettingGroupId = settingGroup.Id;
	            $scope.$broadcast('saveApplicationSettingGroup');
	            event.preventDefault();
	        };
	
	        /**
	         * - This method call while user click load default 
	         */
	        vm.loadDefault = function() {
	            applicationManagementService.loadDefaultSettings().then(function(response) {
	                $state.reload();
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        };
	
	        /**
	         * Get the left panel scroll position while click application feature
	         */
	        function getLeftScrollPosition() {
	            leftPanelScrollTop = angular.element(document.querySelector('.list-table')).prop('scrollTop');
	        }
	
	        /**
	         * Set the left panel scroll position after finished the getApplicationSettings api call
	         */
	        function setLeftScrollPosition() {
	            document.querySelector('.list-table').scrollTop = leftPanelScrollTop;
	        }
	
	        /** 
	         * - Watch the getSelectedApplicationFeature data
	         */
	        var deRegisterFunc = $scope.$watch(function() {
	            if (vm.selectedApplicationFeature && ((vm.activeSettingGroupIndex !== vm.selectedApplicationFeature.settingGroupNameActiveIndex) || (vm.selectedApplicationFeature.settingGroupNameActiveIndex === undefined))) {
	                vm.activeSettingGroupIndex = vm.selectedApplicationFeature.settingGroupNameActiveIndex;
	            }
	            return applicationManagementService.getSelectedApplicationFeature();
	        }, function(newValue, oldValue) {
	            if ((newValue && oldValue && newValue !== oldValue) || (vm.selectedApplicationFeature === undefined)) {
	                vm.selectedApplicationFeature = applicationManagementService.getSelectedApplicationFeature();
	                updateSelectedApplicationFeature();
	            }
	        }, true);
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            vm = null;
	        });
	
	        /**
	         * Method for redirect to config settings page
	         */
	        vm.gotoConfigSettings = function(toState) {
	            $state.go(toState);
	        };
	
	    }
	
	    applicationManagementController.$inject = [
	        '$scope',
	        '$timeout',
	        '$state',
	        '$location',
	        'i18nService',
	        'systemConstants',
	        'applicationManagementConstants',
	        'applicationService',
	        'applicationManagementService',
	        'applicationFeatures'
	    ];
	
	    module.exports = applicationManagementController;
	
	})();


/***/ }),
/* 648 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"application-management-main-Container\">\n    <div class=\"application-management-header title-bar\">\n        <div class=\"application-management-title-container\">\n            <div href=\"#\" title=\"{{vm.selectedFeaturesTitle}}\">\n                <i class=\"fa fa-image\"></i>\n                <span class=\"title\">{{vm.selectedApplicationFeature.title}}</span>\n            </div>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse noPadding navbar-tabs\">\n            <md-tabs md-no-ink md-selected=\"vm.activeSettingGroupIndex\" data-ng-if=\"vm.selectedApplicationFeature.title !== 'Application Management'\">\n                <md-tab data-ng-repeat=\"item in vm.settingGroups\">\n                    <a href=\"{{vm.hostName}}#/app/applicationManagement/{{item.items[0].Id}}/settingGroup\" data-ng-click=\"vm.goToSettingGroupPage($event, $index, item.items[0])\">{{item.name}}</a>\n                </md-tab>\n            </md-tabs>\n            <ul class=\"nav navbar-nav navbar-right\" data-ng-if=\"vm.selectedApplicationFeature.title === 'Application Management'\">\n                <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.loadDefault()\">{{vm.labels.LoadDefaults}}</button>\n            </ul>\n        </div>\n    </div>\n    <div class=\"application-management-content\">\n        <div class=\"sub-page-container\">\n            <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n                <div class=\"list-table\">\n                    <table>\n                        <tbody>\n                            <tr data-ng-repeat=\"list in vm.configSettings track by $index\">\n                                <td data-ng-click=\"vm.gotoConfigSettings(list.toState);\">\n                                    <a ui-sref=\"{{list.toState}}\">{{::list.Name}}</a>\n                                </td>\n                            </tr> \n                            <tr data-ng-repeat=\"item in vm.applicationFeatures.leftSideList\" data-ng-class=\"{'active': $index === vm.selectedApplicationFeature.applicationFeatureActiveIndex}\">\n                                <td data-ng-click=\"vm.changeApplicationFeature($index, item)\">\n                                    <a href=\"{{vm.hostName}}#/app/applicationManagement/{{item.settingGroupId}}/settingGroup\" data-ng-if=\"item.settingGroupId\">{{item.Name}}</a>\n                                    <p data-ng-if=\"!item.settingGroupId\">{{item.Name}}</p>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div class=\"application-management-center-container\">\n                <!-- Content layout starts -->\n                <div ui-view class=\"application-management-container\"></div>\n                <!-- Content layout ends -->\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n    <div class=\"modalOverlay\">\n        <div class=\"modalHeaderBody\">\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n            <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n        </div>\n        <div class=\"modal-Footer text-right\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.CancelButton}}</span>\n            </button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Ok}}</span>\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 649 */
/***/ (function(module, exports) {

	module.exports = "<uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n<div class=\"application-management-template\" ng-include=\"'application-management-template'\" data-ng-if=\"vm.displayType === 'Application Management'\"></div>\n<div class=\"application-management-template\" ng-include=\"'application-management-actions-template'\" data-ng-if=\"vm.displayType === 'Actions'\"></div>\n<div class=\"application-management-template\" ng-include=\"'application-management-list-template'\" data-ng-if=\"vm.displayType === 'List'\"></div>\n<div class=\"application-management-template\" ng-include=\"'application-management-columns-template'\" data-ng-if=\"vm.displayType === 'Columns'\"></div>\n<div class=\"application-management-template\" ng-include=\"'application-management-flow-management-template'\" data-ng-if=\"vm.displayType === 'Flow'\"></div>\n<div class=\"application-management-template\" ng-include=\"'application-management-custom-template'\" data-ng-if=\"vm.displayType === vm.applicationManagementConstants.customTemplate\"></div>\n<div class=\"application-management-footer\" data-ng-if=\"vm.displayType !== 'Application Management'\">\n    <div class=\"container-fluid\">\n        <span><span  class=\"help-text-align\" ng-click=\"vm.showModal($event)\">{{vm.labels.ClickHere}}</span> {{vm.labels.CustomSettingsMaintenanceJob}}</span>\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToApplicationManagementPage()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">{{vm.labels.SaveButton}}</a>\n    </div>\n</div>\n<div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\n</div>\n<div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n    <div class=\"modalOverlay\">\n        <div class=\"modalHeaderBody\">\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n            <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n        </div>\n        <div class=\"modal-Footer text-right\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.CancelButton}}</span>\n            </button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Ok}}</span>\n            </button>\n        </div>\n    </div>\n</div>\n<custom-settings-maintenance ng-if=\"vm.displayModal\" event=\"vm.event maintenance\" maintenance=\"customSettingsMaintenance\"></custom-settings-maintenance>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    var applicationManagementSettingGroupController = function($scope, $q, $state, $stateParams, $templateCache, $location, $mdDialog, i18nService, systemConstants, cpqAdminConstants, applicationService, applicationManagementConstants, applicationManagementService, _, $filter) {
	        /**
	         * - Load the template For application managemnt home page &
	         * - Render template based on display type (action, list, columns)
	         */
	        $templateCache.put('application-management-template', __webpack_require__(651));
	        $templateCache.put('application-management-actions-template', __webpack_require__(652));
	        $templateCache.put('application-management-list-template', __webpack_require__(653));
	        $templateCache.put('application-management-columns-template', __webpack_require__(654));
	        $templateCache.put('application-management-flow-management-template', __webpack_require__(655));
	        $templateCache.put('application-management-preview-button-group-template', __webpack_require__(656));
	        $templateCache.put('application-management-custom-template', __webpack_require__(657));
	
	        var vm = this,
	            isFormSaved = false,
	            editedState, addAPIStatus, updateAPIStatus, leftSectionOption,
	            settingGroupId = $stateParams.id, // Contains state id
	            toBeRemovedIndex = undefined,
	            selectedActionConfigFlow = undefined, // Contains the selected config flow of actions (display type)
	            listResponse = undefined, // Contains response data of list(type)
	            selectedColumnsConfigFlow = undefined, // Contains the selected config flow of columns (display type)
	            columnSectionObj = {},
	            listItemsforCotermination,
	            leftPinnedItems = [];
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.hostName = $location.absUrl().split('#')[0];
	        vm.applicationFeatures = applicationManagementService.getApplicationFeatures(); // get the selected application feature details
	        vm.actionListsResponse = undefined; // Contains response data of actions(type)
	        vm.columnsListsResponse = undefined; // Contains response data of columns(type)
	        vm.applicationManagementConstants = applicationManagementConstants;
	        vm.gridViews = [];
	        vm.isCartPage = isCartPage;
	        vm.displayModal = false;
	
	        /**
	         * - This method will call while click the application feature name from home page link
	         */
	        vm.changeApplicationFeature = function(event, index, ApplicationFeatureDO) {
	            var settingGroupLists = applicationManagementService.getSettingGroupsByApplicationFeature(ApplicationFeatureDO);
	            if (settingGroupLists.length) {
	                vm.settingGroups = settingGroupLists;
	                var SettingGroupsId = vm.settingGroups[0].items[0].Id;
	                $state.go('app.applicationManagement.settingGroup', { 'id': SettingGroupsId });
	                event.preventDefault();
	            } else {
	                var errorDetails = {
	                    message: vm.labels.NoRecordsToDisplay
	                };
	                applicationService.showErrorMessage(errorDetails);
	            }
	        };
	
	        /**
	         * - This method is used for get the data of particular setting group based on the display type
	         */
	        function showTemplateByDisplayType(displayType) {
	            switch (displayType) {
	                case 'Actions':
	                    {
	                        vm.displayType = 'Actions';
	                        vm.actionLists = [];
	                        vm.actionConfigFlow = settingGroupId;
	                        applicationManagementService.getApplicationSettingsByGroups([settingGroupId]).then(function(response) {
	                            vm.actionListsResponse = response;
	                            if (response.SettingGroupList[0].ApplicationSettingDOs.length) {
	                                vm.actionLists = applicationManagementService.prepareActionListsForDisplay(response.SettingGroupList[0].ApplicationSettingDOs[0].SettingList);
	                                selectedActionConfigFlow = response.SettingGroupList[0].SettingGroupSO[vm.prefix + 'ConfigFlow__c'];
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                        break;
	                    }
	                case 'List':
	                    {
	                        vm.displayType = 'List';
	                        vm.listItems = [];
	                        applicationManagementService.getApplicationSettingsByGroups([settingGroupId]).then(function(response) {
	                            listResponse = response;
	                            vm.listItems = applicationManagementService.prepareListForDisplay(response.SettingGroupList[0].ApplicationSettingDOs);
	                            listItemsforCotermination = _.cloneDeep(vm.listItems);
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                        break;
	                    }
	                case 'Columns':
	                    {
	                        vm.displayType = 'Columns';
	                        vm.columnsLists = [];
	                        vm.columnsConfigFlow = settingGroupId;
	                        applicationManagementService.getApplicationSettingsByGroups([settingGroupId]).then(function(response) {
	                            vm.columnsListsResponse = response;
	                            if (response.SettingGroupList[0].ApplicationSettingDOs.length) {
	                                vm.columnsLists = applicationManagementService.prepareColumnsListsForDisplay(response.SettingGroupList[0].ApplicationSettingDOs[0].SettingList);
	                                selectedColumnsConfigFlow = response.SettingGroupList[0].SettingGroupSO[vm.prefix + 'ConfigFlow__c'];
	                                var recordKey = response.SettingGroupList[0].ApplicationSettingDOs[0].ApplicationSettingSO[vm.prefix + 'RecordKey__c'];
	                                if (recordKey)
	                                    hideAndShowColumnByRecordKey(recordKey);
	                                vm.fieldNamePicklist = {
	                                    'PicklistValues': prepareFieldNamePicklist(response.SettingGroupList[0].ApplicationSettingDOs[0].FieldMetadata)
	                                };
	                                setSequenceForColumnsList(0);
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                        break;
	                    }
	                case 'Flow':
	                    {
	                        vm.displayType = 'Flow';
	                        vm.flowManagementLists = [];
	                        applicationManagementService.getApplicationFlows().then(function(response) {
	                            vm.flowManagementLists = response;
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                        break;
	                    }
	                case 'Application Management':
	                    {
	                        vm.displayType = 'Application Management';
	                        break;
	                    }
	                case vm.applicationManagementConstants.customTemplate:
	                    {
	                        vm.displayType = vm.applicationManagementConstants.customTemplate;
	                        var flows = [];
	                        columnSectionObj.PicklistValues = [{
	                                label: vm.labels.Left,
	                                value: vm.labels.Left
	                            },
	                            {
	                                label: vm.labels.Middle,
	                                value: vm.labels.Middle
	                            },
	                            {
	                                label: vm.labels.Right,
	                                value: vm.labels.Right
	                            }];
	                        vm.gridViews.userTypesSelected = vm.labels.UserProfiles;
	                        vm.gridViews.userTypes = [{
	                                label: vm.labels.UserProfiles,
	                                value: vm.labels.UserProfiles
	                            },
	                            {
	                                label: vm.labels.UserRoles,
	                                value: vm.labels.UserRoles
	                            },
	                            {
	                                label: vm.labels.Users,
	                                value: vm.labels.Users
	                            }
	                        ];
	                        vm.gridViews.getUsers = {
	                            model: [],
	                            autocomplete: {
	                                querySearch: applicationManagementService.getUserRecords,
	                                displayName: 'Name',
	                                selectedItem: null,
	                                'sObjectName': 'User'
	                            }
	                        };
	                        vm.gridViews.getUsersProfile = {
	                            model: [],
	                            autocomplete: {
	                                querySearch: applicationManagementService.getUserRecords,
	                                displayName: 'Name',
	                                selectedItem: null,
	                                'sObjectName': 'Profile'
	                            }
	                        };
	                        vm.gridViews.getUsersRole = {
	                            model: [],
	                            autocomplete: {
	                                querySearch: applicationManagementService.getUserRecords,
	                                displayName: 'Name',
	                                selectedItem: null,
	                                'sObjectName': 'UserRole'
	                            }
	                        };
	                        // Prepending none value
	                        var noneField = { 
	                            label: vm.labels.NoneAsPickListValue,
	                            value: ''
	                        }
	                        // For getting flows
	                        applicationManagementService.getFlows()
	                            .then(function(response) {
	                                flows = applicationManagementService.preparePickList(response);
	                                flows["methodToCallInController"] = onChangeflowPicklist;
	                                if (!vm.gridViews.configFlowPicklist.PicklistValues) {
	                                    flows.PicklistValues.unshift(noneField);
	                                    vm.gridViews.configFlowPicklist = flows;
	                                } else {
	                                    vm.gridViews.configFlowPicklist.PicklistValues.splice(1);
	                                    flows.PicklistValues.forEach((item) => {
	                                        vm.gridViews.configFlowPicklist.PicklistValues.push(item);
	                                    });
	                                }
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                        vm.gridViews.gridViewConfigFlow = '';
	                        // For getting Group By fieled values
	                        applicationManagementService.getGroupByFields().then(function(response) {
	                            vm.gridViews.groupByFields = applicationManagementService.preparePickList(checkForProductField(response));
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                        emptyViewFields();
	                        break;
	                    }
	                default:
	                    vm.displayType = undefined;
	            }
	        }
	
	        // For getting all views
	        function populateGridViewNames(flowName) {
	            applicationManagementService.getAllGridViews(flowName, isCartPage())
	                .then(function(response) {
	                    prepareGridViewNamesPicklist(response.ListViewDO);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function prepareGridViewNamesPicklist(listViewDO) {
	            var views = [];
	            vm.gridViews.viewNamesDefault = '';
	            vm.gridViews.viewsDO = listViewDO;
	            views = applicationManagementService.preparePickList(listViewDO);
	            views["methodToCallInController"] = onChangeViewsPicklist;
	            views.PicklistValues.unshift({
	                label: vm.labels.New,
	                value: vm.labels.New
	            });
	            vm.gridViews.viewNames = views;
	        }
	
	        // For getting available fieled values
	        function populateAvailableFieldsForFlow(flowName) {
	            applicationManagementService.getViewFieldsForFlow(flowName, isCartPage()).then(function(response) {
	                vm.gridViews.fieldNamePicklist = applicationManagementService.preparePickList(response);
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        /*
	         * Viewnames Picklist change trigger function
	         */
	        function onChangeViewsPicklist(selectedItem) {
	            emptyViewFields(selectedItem === vm.labels.New);
	            if(selectedItem !== vm.labels.New) {
	                var gridViewsDO = vm.gridViews.viewsDO.filter(function(item){
	                                    return item.CartViewName === selectedItem;
	                                });
	                if(gridViewsDO.length === 1) {
	                    vm.gridViews.selectedViewDO = angular.copy(gridViewsDO[0]);
	                    renderGridView(vm.gridViews.selectedViewDO);
	                    vm.customForm.$setPristine();
	                }
	            }
	        }
	
	        /*
	        * Empty view fields
	        */
	        function emptyViewFields(isNewView) {
	            vm.columnsLists = [];
	            vm.gridViews.newViewName = '';
	            vm.gridViews.groupByFieldsDefault = '';
	            vm.gridViews.viewAccessLevel = false;
	            vm.gridViews.isDefaultView = false;
	            vm.gridViews.getUsers.model = [];               
	            vm.gridViews.getUsersProfile.model = [];
	            vm.gridViews.getUsersRole.model = [];
	            vm.gridViews.selectedViewDO = {};
	            if (isNewView && !isCartPage()) {
	                var columnObject = {};
	                columnObject[vm.prefix + 'Sequence__c'] = vm.columnsLists.length + 1;
	                viewGridViewObject(columnObject);
	            }
	        }
	
	        /*
	         * Flow Picklist change trigger function
	         */
	        function onChangeflowPicklist(selectedItem) {
	            if(selectedItem === "") {
	                emptyViwePickListValues();
	            } else {
	                populateGridViewNames(selectedItem);
	                populateAvailableFieldsForFlow(selectedItem);
	            }
	            emptyViewFields();
	            vm.customForm.$setPristine();
	        }
	
	        /*
	        * - Call the Method while click the new button and action for custom template
	        */
	        vm.addNewCustomList = function() {
	            var sampleObject = {};
	            sampleObject[vm.prefix + 'Sequence__c'] = vm.columnsLists.length + 1;
	            viewGridViewObject(sampleObject);
	        };
	
	        /*
	        * Preparing crate cart view request object
	        */
	        function prepareGridViewObject() {
	            var accessLevel = vm.gridViews.viewAccessLevel;
	            if (isCartPage()) {
	                    var requestObj = {
	                    CartViewName : vm.gridViews.newViewName,
	                    CartViewType : (accessLevel) ? applicationManagementConstants.Public : applicationManagementConstants.Protected ,
	                    LeftColumns  : prepareViewColumns(vm.labels.Left),
	                    MiddleColumns: prepareViewColumns(vm.labels.Middle),
	                    RightColumns : prepareViewColumns(vm.labels.Right),
	                    FlowName     : vm.gridViews.gridViewConfigFlow,
	                    GroupBy      : vm.gridViews.groupByFieldsDefault,
	                    IsDefault    : vm.gridViews.isDefaultView
	                };
	            } else {
	                var requestObj = {
	                    CartViewName : vm.gridViews.newViewName,
	                    CartViewType : (accessLevel) ? applicationManagementConstants.Public : applicationManagementConstants.Protected ,
	                    FlowName     : vm.gridViews.gridViewConfigFlow,
	                    IsDefault    : vm.gridViews.isDefaultView,
	                    Columns      : prepareViewColumns(),
	                };
	            }
	            
	            if(!accessLevel) {
	                switch (vm.gridViews.userTypesSelected) {
	                    case vm.labels.Users:
	                        requestObj.UserSO = angular.copy(vm.gridViews.getUsers.model);
	                    break;
	                    case vm.labels.UserProfiles:
	                        requestObj.ProfileSO = angular.copy(vm.gridViews.getUsersProfile.model);
	                    break;
	                    case vm.labels.UserRoles:
	                        requestObj.RoleSO = angular.copy(vm.gridViews.getUsersRole.model);
	                    break;
	                }
	            }
	            vm.columnsLists = $filter('orderBy')(vm.columnsLists, vm.prefix + 'Pinned__c');
	            vm.gridViews.selectedViewDO = requestObj;
	            return requestObj;
	        }
	
	        /*
	        * Preparing view columns
	        */
	        function prepareViewColumns(pinnedValue) {
	            var viewColumns = [];
	            if (pinnedValue) {
	                    vm.columnsLists.forEach(function(item) {
	                    if(item[vm.prefix + 'Pinned__c'] === pinnedValue) {
	                        viewColumns.push({
	                            ColumnName: item[vm.prefix + 'FieldName__c'],
	                            ColumnSequence: item[vm.prefix + 'Sequence__c']
	                        });
	                    }
	                });
	                if(pinnedValue === vm.labels.Left) { // Setting up Product field by default to the left column
	                    viewColumns.unshift({
	                            ColumnName: vm.prefix + 'ProductId__r',
	                            ColumnSequence: 0
	                        });
	                }
	            } else {
	                vm.columnsLists.forEach(function(item) {
	                    viewColumns.push({
	                        ColumnName: item[vm.prefix + 'FieldName__c'],
	                        ColumnSequence: item[vm.prefix + 'Sequence__c']
	                    });
	
	                });
	                viewColumns.unshift({
	                    ColumnName: vm.prefix + 'ProductId__r',
	                    ColumnSequence: 0
	                });
	            }
	            
	            return viewColumns;
	        }
	
	        /*
	        * Rendering cart view
	        */
	        function renderGridView(gridViewObject) {
	            vm.gridViews.newViewName = gridViewObject.CartViewName;
	            vm.gridViews.groupByFieldsDefault = gridViewObject.GroupBy;
	            vm.gridViews.isDefaultView = gridViewObject.IsDefault;
	            vm.gridViews.viewAccessLevel = (gridViewObject.CartViewType === applicationManagementConstants.Public) ? true : false;
	            if(!vm.gridViews.viewAccessLevel) {
	                if (!_.isEmpty(gridViewObject.UserSO)) {
	                    vm.gridViews.userTypesSelected = vm.labels.Users;
	                    vm.gridViews.getUsers.model = gridViewObject.UserSO;
	                } else if (!_.isEmpty(gridViewObject.RoleSO)) {
	                    vm.gridViews.userTypesSelected = vm.labels.UserRoles;
	                    vm.gridViews.getUsersRole.model = gridViewObject.RoleSO;
	                } else if (!_.isEmpty(gridViewObject.ProfileSO)) {
	                    vm.gridViews.userTypesSelected = vm.labels.UserProfiles;
	                    vm.gridViews.getUsersProfile.model = gridViewObject.ProfileSO;
	                }
	            }
	            vm.columnsLists = [];
	            if (isCartPage()) {
	                if(!_.isEmpty(gridViewObject.LeftColumns)) {
	                    processColumnList(gridViewObject.LeftColumns, vm.labels.Left);    
	                }
	                if(!_.isEmpty(gridViewObject.MiddleColumns)) {
	                    processColumnList(gridViewObject.MiddleColumns, vm.labels.Middle);    
	                }
	                if(!_.isEmpty(gridViewObject.RightColumns)) {
	                    processColumnList(gridViewObject.RightColumns, vm.labels.Right);    
	                }
	            } else {
	                processColumnList(gridViewObject.Columns);
	            }
	        }
	
	        /*
	        * To prepare cart view columns for rendering
	        */
	        function processColumnList(columns, pinned) {
	            var columnObject = {}, index, fieldsLength = columns.length;
	            if (isCartPage()) {
	                for (index = 0; index < fieldsLength; index++) {
	                    if (pinned === vm.labels.Left && (columns[index].ColumnName === vm.prefix + 'ProductId__c' || columns[index].ColumnName === vm.prefix + 'ProductId__r')) {
	                        continue; 
	                    }
	                    columnObject[vm.prefix + 'FieldName__c'] = columns[index].ColumnName;
	                    columnObject[vm.prefix + 'Sequence__c'] = columns[index].ColumnSequence;
	                    columnObject[vm.prefix + 'Pinned__c'] = pinned;
	                    viewGridViewObject(columnObject);           
	                }
	            } else {
	                for (index = 0; index < fieldsLength; index++) {
	                    if ((columns[index].ColumnName === vm.prefix + 'ProductId__c' || columns[index].ColumnName === vm.prefix + 'ProductId__r')) {
	                        continue; 
	                    }
	                    columnObject[vm.prefix + 'FieldName__c'] = columns[index].ColumnName;
	                    columnObject[vm.prefix + 'Sequence__c'] = columns[index].ColumnSequence;
	                    viewGridViewObject(columnObject);           
	                }
	            }
	            
	        }
	
	        /*
	        * Getting sample object
	        */
	        function viewGridViewObject(gridViewObject) {
	            gridViewObject.fieldSectionPicklist = angular.copy(columnSectionObj);
	            var sampleTemplate = angular.copy(applicationManagementService.getSampleCustomList(gridViewObject));
	            vm.columnsLists.push(sampleTemplate);
	            vm.customForm ? vm.customForm.$setDirty() : '';
	        }
	
	        /*
	        * Delete cart view
	        */
	        vm.gridViews.deleteView = function() {
	            applicationManagementService.deleteGridView({"ViewRecordDO": angular.copy(vm.gridViews.selectedViewDO)}, isCartPage()).then(function(response) {
	                addAlert(vm.labels.DeleteSuccessful, cpqAdminConstants.SUCCESS);
	                emptyViwePickListValues();
	                showTemplateByDisplayType(vm.displayType);
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        };
	
	        /*
	        * Validations
	        */
	        function isFormValid() {
	            var returnValue = true;
	            if(!vm.gridViews.viewAccessLevel) {
	                switch (vm.gridViews.userTypesSelected) {
	                    case vm.labels.Users:
	                        if(vm.gridViews.getUsers.model.length === 0) {
	                            vm.formError = vm.labels.PleaseSelectUser;
	                            returnValue = false;
	                        } else {
	                            vm.gridViews.getUsersProfile.model = [];
	                            vm.gridViews.getUsersRole.model = [];
	                        }    
	                    break;
	                    case vm.labels.UserProfiles:
	                        if(vm.gridViews.getUsersProfile.model.length === 0) {
	                            vm.formError = vm.labels.PleaseSelectUserProfile;
	                            returnValue = false;
	                        } else {
	                            vm.gridViews.getUsers.model = [];               
	                            vm.gridViews.getUsersRole.model = [];       
	                        }    
	                    break;
	                    case vm.labels.UserRoles:
	                        if(vm.gridViews.getUsersRole.model.length === 0) {
	                            vm.formError = vm.labels.PleaseSelectUserRole;
	                            returnValue = false;
	                        } else {
	                            vm.gridViews.getUsers.model = [];               
	                            vm.gridViews.getUsersProfile.model = [];
	                        }    
	                    break;
	                }
	            }
	            if(_.isEmpty(vm.columnsLists)) {
	                vm.formError = vm.labels.PleaseSelectColumnField;
	                returnValue = false;
	            }
	            if(isDuplicateFieldName(vm.columnsLists, vm.prefix + 'FieldName__c')) {
	                vm.formError = vm.labels.FieldNameMustBeUnique;
	                returnValue = false;
	            }
	            if(!vm.customForm.$dirty && vm.gridViews.viewNamesDefault && vm.gridViews.viewNamesDefault !== vm.labels.New) {  
	                vm.formError = vm.labels.FieldsNotChanged;
	                returnValue = false;
	            }
	            return returnValue;
	        }
	
	        //Cart view:- Setting up group by default field as "Product"
	        function checkForProductField(fields) {
	            var productIndex = _.findIndex(fields, function(field) {
	                return field.Value == vm.prefix + 'ProductId__c' || field.Value == vm.prefix + 'ProductId__r';
	            });
	            if(productIndex < 0) {
	                fields.unshift({
	                    Label: vm.labels.Product,
	                    Value: vm.prefix + 'ProductId__r'
	                });
	            }
	            return fields;
	        }
	
	        /*
	        * After Form submit successfully
	        */
	        function setFormUpdatedValues(listViewDO, successMessage) {
	            isFormSaved = true;
	            prepareGridViewNamesPicklist(listViewDO);
	            addAlert(successMessage, cpqAdminConstants.SUCCESS);
	            vm.gridViews.viewNamesDefault = vm.gridViews.newViewName;
	        }
	
	        /*
	        * Emptying view pick list values
	        */
	
	        function emptyViwePickListValues() {
	            vm.gridViews.viewNamesDefault = '';
	            vm.gridViews.viewNames = {};
	            vm.gridViews.fieldNamePicklist = {};
	            vm.gridViews.viewsDO = [];
	        }
	
	        /*
	        * To check duplicate column values
	        */
	        function isDuplicateFieldName(fieldListArray, propertyName) {
	            var seenDuplicate = false, toCheckForDuplicate = {};
	            fieldListArray.map(function(item) {
	                var itemPropertyName = item[propertyName];    
	                if (itemPropertyName in toCheckForDuplicate) {
	                    toCheckForDuplicate[itemPropertyName].duplicate = true;
	                    item.hasError = true;
	                    seenDuplicate = true;
	                }
	                else {
	                    toCheckForDuplicate[itemPropertyName] = item;
	                    delete item.hasError;
	                }
	            });
	            return seenDuplicate;
	        }
	
	        /*
	        *  Limiting Number of Fields in Left Hand Section of Cart View
	        */
	        vm.trackSelectedRowIndex = function(index) {
	            leftPinnedItems = _.filter(vm.columnsLists, function(list) { 
	                                return list[vm.prefix + 'Pinned__c'] === vm.labels.Left; 
	                            });
	            leftSectionOption = vm.columnsLists[index].fieldSectionPicklist.PicklistValues[0];
	            if (leftPinnedItems.length >= vm.applicationManagementConstants.cartViewLeftColumnMax) {
	                leftSectionOption.isOptionDisable = true;
	            } else if (leftSectionOption.isOptionDisable) {
	                delete leftSectionOption.isOptionDisable;
	            }
	        }
	
	        /**
	         * - Find the selected setting group by state id
	         */
	        function findSettingGroupDisplayTypeById(Id, applicationFeaturesList) {
	            if (Id !== null) {
	                var tabs = applicationFeaturesList.tabs,
	                    index;
	                for (index = 0; index < tabs.length; index++) {
	                    var tabItems = tabs[index].items,
	                        key, leftSideListName = tabs[index].name;
	                    for (key = 0; key < tabItems.length; key++) {
	                        var settingGroupItems = tabItems[key].items,
	                            count;
	                        for (count = 0; count < settingGroupItems.length; count++) {
	                            if (settingGroupItems[count].Id === Id) {
	                                setConfigFlow(key, tabs[index]);
	                                var leftSideActiveIndex = findApplicationFeatureIndexByName(leftSideListName);
	                                changeSeletedApplicationFeature(leftSideActiveIndex, key);
	                                showTemplateByDisplayType(settingGroupItems[count][vm.prefix + 'DisplayType__c']);
	                            }
	                        }
	                    }
	                }
	            } else {
	                var selectedApplicationFeature = {
	                    title: applicationManagementConstants.applicationManagement,
	                    applicationFeatureActiveIndex: undefined,
	                    settingGroupNameActiveIndex: 0,
	                };
	                vm.selectedApplicationFeature = selectedApplicationFeature;
	                applicationManagementService.setSelectedApplicationFeature(selectedApplicationFeature);
	                showTemplateByDisplayType(applicationManagementConstants.applicationManagement);
	            }
	        }
	        findSettingGroupDisplayTypeById(settingGroupId, vm.applicationFeatures);
	
	        /**
	         * - Find the application feature index by application feature name 
	         */
	        function findApplicationFeatureIndexByName(selectedApplicationFeatureName) {
	            var leftSideList = vm.applicationFeatures.leftSideList,
	                index;
	            for (index = 0; index < leftSideList.length; index++) {
	                var applicationFeatureName = leftSideList[index].Name.split(' ').join('_');
	                if (selectedApplicationFeatureName === applicationFeatureName) {
	                    return index;
	                }
	            }
	        }
	
	        /**
	         * - Set the config flow deatils for picklist
	         */
	        function setConfigFlow(selectedSettingGroupIndex, selectedSettingGroup) {
	            vm.configFlowPicklist = {
	                'methodToCallInController': onChangeConfigFlowPicklist
	            }
	            var SettingGroupDOs = selectedSettingGroup.items[selectedSettingGroupIndex].items,
	                index, picklistValues = [];
	            for (index = 0; index < SettingGroupDOs.length; index++) {
	                var selectedFlowId = SettingGroupDOs[index].Id,
	                    selectedFlowName = SettingGroupDOs[index][vm.prefix + 'ConfigFlow__c'],
	                    PicklistValue = {
	                        "active": true,
	                        "defaultValue": true,
	                        "label": selectedFlowName,
	                        "value": selectedFlowId
	                    };
	                picklistValues.push(PicklistValue);
	            }
	            vm.configFlowPicklist['PicklistValues'] = picklistValues;
	        }
	
	        function isCartPage() {
	            return vm.selectedApplicationFeature.title === applicationManagementConstants.cartPage;
	        }
	
	        /**
	         * - Set the selected application feature (selected application feature (index, title), setting group index & form error status)
	         */
	        function changeSeletedApplicationFeature(applicationFeatureIndex, settingGroupIndex) {
	            var applicationFeatureName = vm.applicationFeatures.leftSideList[applicationFeatureIndex].Name;
	            var selectedApplicationFeature = {
	                title: applicationFeatureName,
	                applicationFeatureActiveIndex: applicationFeatureIndex,
	                settingGroupNameActiveIndex: settingGroupIndex
	            };
	            vm.selectedApplicationFeature = selectedApplicationFeature;
	            applicationManagementService.setSelectedApplicationFeature(selectedApplicationFeature);
	        }
	
	        /**
	         * - Call the Method while click the remove button
	         */
	        vm.removeItem = function(index) {
	            toBeRemovedIndex = index;
	            if (!isCartPage() && vm.displayType === vm.applicationManagementConstants.customTemplate) {
	                vm.confiramtionPopup = false;
	                removeColumnsItem();
	            } else {
	                vm.confiramtionPopup = true;
	                vm.confirmationDetails = {
	                    messageTitle: vm.labels.DeleteMessageTitle,
	                    messageBody: vm.labels.DeleteMessageBodyApplicationManagement,
	                    messageNote: vm.labels.DeleteMessageNote
	                }
	            }
	            
	        };
	
	        /**
	         * - Call the Method while click the ok button of confirm popup
	         */
	        vm.confirmRemove = function() {
	            vm.confiramtionPopup = false;
	            if (vm.displayType === 'Actions') {
	                removeActionItem();
	            } else if (vm.displayType === 'Columns' || vm.displayType === 'Custom') {
	                removeColumnsItem();
	            } else if (vm.displayType === 'Flow') {
	                removeFlowManagement();
	            } else {
	
	            }
	        };
	
	        /**
	         * - Call the Method while click the cancel button of confirm popup
	         */
	        vm.cancelRemove = function() {
	            vm.confiramtionPopup = false;
	            toBeRemovedIndex = undefined;
	        };
	
	        /** 
	         * validate name field is empty or not
	         */
	        function isNameNotDefined(arrayName) {
	            var notMaintained = false,
	                indices = [];
	            for (var item in vm[arrayName]) {
	                if (!isNaN(parseInt(item, 10))) {
	                    var name = vm[arrayName][item]['Name'];
	                    if (name === '' || name == undefined) {
	                        notMaintained = true;
	                        indices.push(parseInt(item, 10) + 1);
	                    } else {
	                        if (vm[arrayName][item]['hasError']) {
	                            delete vm[arrayName][item]['hasError'];
	                        }
	                    }
	                }
	            }
	            return {
	                notMaintained: notMaintained,
	                indices: indices
	            };
	        }
	
	        /**
	         * set hasError class to invalid field
	         */
	        function updateErrorAttributeOfAction(arrayName, indexArr) {
	            if (indexArr) {
	                for (var i = 0; i < indexArr.length; i++) {
	                    var index = indexArr[i];
	                    vm[arrayName][index - 1].hasError = true;
	                }
	            }
	        }
	
	        /** ------------ Action Begin -------------- **/
	
	        vm.area = applicationManagementService.getPicklistForAction().area;
	        vm.action = applicationManagementService.getPicklistForAction().action;
	        vm.type = applicationManagementService.getPicklistForAction().type;
	        vm.behavior = applicationManagementService.getPicklistForAction().behavior;
	
	        /**
	         * - Call the Method while click the new button and action
	         */
	        vm.addNewActionList = function() {
	            var sampleTemplate = angular.copy(applicationManagementService.getSampleActionList()),
	                date = new Date();
	            sampleTemplate[vm.prefix + 'Sequence__c'] = vm.actionLists.length + 1;
	            sampleTemplate[vm.prefix + 'Flow__c'] = selectedActionConfigFlow;
	            sampleTemplate[vm.prefix + 'ActionName__c'] = applicationManagementConstants.actionColumnLabel + sampleTemplate[vm.prefix + 'Sequence__c'];
	            sampleTemplate[vm.prefix + 'DisplayType__c'] = vm.actionListsResponse.SettingGroupList[0].ApplicationSettingDOs[0].ApplicationSettingSO[vm.prefix + 'RecordKey__c'];
	            if (sampleTemplate[vm.prefix + 'DisplayType__c'] === 'Cart Line Item') {
	                sampleTemplate[vm.prefix + 'ActionType__c'] = '';
	            }
	            sampleTemplate['Name'] = sampleTemplate[vm.prefix + 'DisplayType__c'] + ' ' + (vm.actionLists.length + 1) + ' ' + date.getTime();
	            sampleTemplate.isDefault = true;
	            vm.actionLists.push(sampleTemplate);
	            vm.actionForm.$setDirty();
	        }
	
	        /**
	         * - Method is used for open the popup to create new and action
	         */
	        vm.addNewActionModal = function(selectedType) {
	            var newActionList = {
	                    selectedType: selectedType,
	                    sequence: vm.actionLists.length + 1,
	                    configFlow: selectedActionConfigFlow,
	                    actionName: applicationManagementConstants.actionColumnLabel + (vm.actionLists.length + 1),
	                    displayType: vm.actionListsResponse.SettingGroupList[0].ApplicationSettingDOs[0].ApplicationSettingSO[vm.prefix + 'RecordKey__c'],
	                },
	                date = new Date();
	            newActionList['Name'] = newActionList['displayType'] + ' ' + newActionList['sequence'] + ' ' + date.getTime();
	            $mdDialog.show({
	                controller: __webpack_require__(658),
	                template: __webpack_require__(659),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	                    data: function() {
	                        return newActionList;
	                    }
	                }
	            }).then(function(response) {
	                if (response) {
	                    saveNewActionModal(selectedType, response);
	                    onClickActionPreviewButton();
	                }
	            });
	        };
	
	        /**
	         * - Method is used for append the newly created action
	         */
	        function saveNewActionModal(selectedType, actionItem) {
	            vm.actionLists.push(actionItem);
	            vm.actionForm.$setDirty();
	            if (selectedType === 'Action') {
	                filterActionBasedOnArea(actionItem);
	            } else {
	                filterTaskBasedOnArea(actionItem);
	            }
	        }
	
	        /**
	         * - Method for remove the existing row of and action
	         */
	        function removeActionItem() {
	            vm.actionLists.splice(toBeRemovedIndex, 1);
	            setSequenceForActionList(toBeRemovedIndex, 'remove');
	            vm.actionForm.$setDirty();
	        };
	
	        /**
	         * - This function used for save Action
	         */
	        function saveActionItems() {
	            var defer = $q.defer();
	            if (isNameNotDefined('actionLists').notMaintained) {
	                var indices = isNameNotDefined('actionLists').indices;
	                indices.length > 0 ? updateErrorAttributeOfAction('actionLists', indices) : angular.noop();
	                addAlert(vm.labels.NameMustBeEntered, 'danger');
	                defer.reject(false);
	            } else if (isActionLabelNameNotDefined().notMaintained) {
	                var actionLabelNameIndices = isActionLabelNameNotDefined().indices;
	                (actionLabelNameIndices.length > 0) ? updateErrorAttributeOfAction('actionLists', actionLabelNameIndices): angular.noop();
	                addAlert(vm.labels.ActionLabelMustBeEntered, 'danger');
	                defer.reject(false);
	            } else {
	                if (vm.actionListsResponse && vm.actionListsResponse.SettingGroupList[0].ApplicationSettingDOs.length) {
	                    if (vm.actionForm.$dirty) {
	                        vm.actionListsResponse.SettingGroupList[0] = prepareActionForUpdate();
	                        applicationManagementService.updateApplicationSettingsAndGroups(vm.actionListsResponse).then(function(response) {
	                            vm.actionForm.$setPristine();
	                            if (response.ExceptionMsg) {
	                                var errorDetails = {
	                                    message: response.ExceptionMsg
	                                };
	                                applicationService.showErrorMessage(errorDetails);
	                                defer.reject(false);
	                            } else {
	                                addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                                defer.resolve(response);
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                            defer.reject(reason);
	                        });
	                    } else {
	                        defer.resolve({ isFormDirty: true });
	                    }
	                } else {
	                    defer.resolve(true);
	                }
	            }
	            return defer.promise;
	        }
	
	        /**
	         * - This function used for prepare the settingGroupList for update the Actions
	         */
	        function prepareActionForUpdate() {
	            var settingGroupList = vm.actionListsResponse.SettingGroupList[0];
	            if (settingGroupList.ApplicationSettingDOs.length) {
	                var CustomSettingName = settingGroupList.ApplicationSettingDOs[0].ApplicationSettingSO[vm.prefix + 'CustomSettingName__c'];
	                var RecordKey = settingGroupList.ApplicationSettingDOs[0].ApplicationSettingSO[vm.prefix + 'RecordKey__c'];
	                settingGroupList.ApplicationSettingDOs[0].SettingListJSON = applicationManagementService.prepareSettingListJSONForUpdateAction(CustomSettingName, vm.actionConfigFlow, RecordKey, vm.actionLists);
	                settingGroupList.ApplicationSettingDOs[0].SettingList = null;
	                delete settingGroupList.ApplicationSettingDOs[0]['FieldNames'];
	                delete settingGroupList.ApplicationSettingDOs[0].ApplicationSettingSO[vm.prefix + 'SettingGroupId__r']['Id'];
	            }
	            return settingGroupList;
	        }
	
	        /**
	         * - Call the function while click the preview button
	         */
	        function onClickActionPreviewButton() {
	            vm.actionItems = {
	                'left': [],
	                'center': [],
	                'right': [],
	                'more': []
	            };
	            vm.taskItems = {
	                'left': [],
	                'center': [],
	                'right': [],
	            };
	            if (vm.actionLists.length) {
	                var actionItemsLength = vm.actionLists.length;
	                for (var key = 0; key < actionItemsLength; key++) {
	                    if (vm.actionLists[key][vm.prefix + 'DisplayAs__c'] === 'Action') {
	                        filterActionBasedOnArea(vm.actionLists[key]);
	                    } else {
	                        filterTaskBasedOnArea(vm.actionLists[key]);
	                    }
	                }
	            }
	        }
	
	        /** 
	         * - filter a action based on the action area(left, right, center)
	         * - For display the preview panel
	         */
	        function filterActionBasedOnArea(item) {
	            if (item[vm.prefix + 'ActionArea__c']) {
	                if (item[vm.prefix + 'ActionArea__c'] === 'Left') {
	                    vm.actionItems.left.push(item);
	                } else if (item[vm.prefix + 'ActionArea__c'] === 'Center') {
	                    vm.actionItems.center.push(item);
	                } else if (item[vm.prefix + 'ActionArea__c'] === 'More') {
	                    vm.actionItems.more.push(item);
	                } else {
	                    vm.actionItems.right.push(item);
	                }
	            }
	        }
	
	        /** 
	         * - filter a task based on the action area(left, right, center)
	         * - For display the preview panel
	         */
	        function filterTaskBasedOnArea(item) {
	            if (item[vm.prefix + 'ActionArea__c']) {
	                if (item[vm.prefix + 'ActionArea__c'] === 'Left') {
	                    vm.taskItems.left.push(item);
	                } else if (item[vm.prefix + 'ActionArea__c'] === 'Center') {
	                    vm.taskItems.center.push(item);
	                } else if (item[vm.prefix + 'ActionArea__c'] === 'Right') {
	                    vm.taskItems.right.push(item);
	                }
	            }
	        }
	
	        /**
	         * - Call this method after row moved in and action
	         */
	        vm.onActionListMoved = function(index) {
	            vm.actionLists.splice(index, 1);
	            setSequenceForActionList(0, 'move');
	        }
	
	        /**
	         * - Call this method for set the sequnce number to action record
	         */
	        function setSequenceForActionList(startingRowIndex, action) {
	            for (var key = startingRowIndex; key < vm.actionLists.length; key++) {
	                vm.actionLists[key][vm.prefix + 'Sequence__c'] = key + 1;
	                if (action === 'remove' && vm.actionLists[key]['isDefault']) {
	                    vm.actionLists[key][vm.prefix + 'ActionName__c'] = applicationManagementConstants.actionColumnLabel + vm.actionLists[key][vm.prefix + 'Sequence__c'];
	                }
	            }
	        }
	
	        /** 
	         * validate ActionLabelName field is empty or not 
	         */
	        function isActionLabelNameNotDefined() {
	            var notMaintained = false,
	                indices = [];
	            for (var item in vm.actionLists) {
	                if (!isNaN(parseInt(item, 10))) {
	                    var actionLabelName = vm.actionLists[item][vm.prefix + 'ActionLabelName__c'];
	                    if (actionLabelName === '' || actionLabelName == undefined) {
	                        notMaintained = true;
	                        indices.push(parseInt(item, 10) + 1);
	                    } else {
	                        if (vm.actionLists[item]['hasError']) {
	                            delete vm.actionLists[item]['hasError'];
	                        }
	                    }
	                }
	            }
	            return {
	                notMaintained: notMaintained,
	                indices: indices
	            };
	        }
	
	        /**
	         * - Watch Action preview toggle button
	         */
	        var deRegisterFunc = $scope.$watch('vm.isActionAndTaskPreview', function(newValue, oldValue) {
	            if (newValue) {
	                onClickActionPreviewButton()
	            }
	        });
	
	        /**
	         * This method is used for reset the Action variables
	         */
	        function resetActions() {
	            vm.actionListsResponse = undefined;
	        }
	
	        /** ------------- Action End --------------- **/
	
	        /** ------------- List begin --------------- **/
	
	        /**
	         * - This method is used for save the List 
	         */
	        function saveLists() {
	            var defer = $q.defer();
	            if (listResponse && listResponse.SettingGroupList && listResponse.SettingGroupList.length) {
	                if (listResponse.SettingGroupList[0].ApplicationSettingDOs.length) {
	                    if (vm.listForm && vm.listForm.$dirty) {
	                        listResponse.SettingGroupList[0] = prepareListForUpdate();
	                        applicationManagementService.updateApplicationSettingsAndGroups(listResponse).then(function(response) {
	                            vm.listForm.$setPristine();
	                            if (response.ExceptionMsg) {
	                                var errorDetails = {
	                                    message: response.ExceptionMsg
	                                };
	                                applicationService.showErrorMessage(errorDetails);
	                                defer.reject(false);
	                            } else {
	                                addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                                defer.resolve(response);
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                            defer.reject(reason);
	                        });
	                    } else {
	                        defer.resolve({ isFormDirty: true });
	                    }
	                } else {
	                    defer.resolve(true);
	                }
	            } else {
	                defer.resolve(true);
	            }
	            return defer.promise;
	        }
	
	        /** 
	         * - Prepare list data for update
	         */
	        function prepareListForUpdate() {
	            var settingGroupList = listResponse.SettingGroupList[0];
	            for (var index = 0; index < vm.listItems.length; index++) {
	                settingGroupList.ApplicationSettingDOs[index].SettingListJSON = applicationManagementService.prepareSettingListJSONForUpdateList(vm.listItems[index]);
	                settingGroupList.ApplicationSettingDOs[index].SettingList = null;
	            }
	            return settingGroupList;
	        }
	
	        /**
	         * - This method is used for reset the list variables
	         */
	        function resetLists() {
	            listResponse = undefined;
	        }
	
	        /** -------------- List End ---------------- **/
	
	        /** -------------- Column Begin ------------ **/
	
	        /**
	         * - Call the Method while click the new button and action
	         */
	        vm.addNewColumnsList = function() {
	            var sampleTemplate = angular.copy(applicationManagementService.getSampleColumnsList()),
	                date = new Date();
	            sampleTemplate[vm.prefix + 'Sequence__c'] = vm.columnsLists.length + 1;
	            sampleTemplate[vm.prefix + 'Flow__c'] = selectedColumnsConfigFlow;
	            sampleTemplate[vm.prefix + 'DisplayType__c'] = vm.columnsListsResponse.SettingGroupList[0].ApplicationSettingDOs[0].ApplicationSettingSO[vm.prefix + 'RecordKey__c'];
	            sampleTemplate['Name'] = sampleTemplate[vm.prefix + 'DisplayType__c'] + ' ' + (vm.columnsLists.length + 1) + ' ' + date.getTime();
	            vm.columnsLists.push(sampleTemplate);
	            vm.columnForm.$setDirty();
	        };
	
	        /**
	         * - Method for remove the existing row of and action
	         */
	        function removeColumnsItem() {
	            vm.columnsLists.splice(toBeRemovedIndex, 1);
	            setSequenceForColumnsList(toBeRemovedIndex);
	            if(vm.displayType === vm.applicationManagementConstants.customTemplate) {
	                vm.customForm.$setDirty();
	            } else {
	                vm.columnForm.$setDirty();    
	            }
	        };
	
	        /**
	         * - This function used for save NavigationAndAction
	         */
	        function saveColumnsItems() {
	            var defer = $q.defer();
	            if (isNameNotDefined('columnsLists').notMaintained) {
	                var indices = isNameNotDefined('columnsLists').indices;
	                indices.length > 0 ? updateErrorAttributeOfAction('columnsLists', indices) : angular.noop();
	                addAlert(vm.labels.NameMustBeEntered, 'danger');
	                defer.reject(false);
	            } else if (isFieldNameNotDefined().notMaintained) {
	                var indices = isFieldNameNotDefined().indices;
	                indices.length > 0 ? updateErrorAttributeOfAction('columnsLists', indices) : angular.noop();
	                addAlert(vm.labels.FieldNameMustBeEntered, 'danger');
	                defer.reject(false);
	            } else {
	                if (vm.columnsListsResponse && vm.columnsListsResponse.SettingGroupList[0].ApplicationSettingDOs.length) {
	                    if (vm.columnForm.$dirty) {
	                        vm.columnsListsResponse.SettingGroupList[0] = prepareColumnsForUpdate();
	                        applicationManagementService.updateApplicationSettingsAndGroups(vm.columnsListsResponse).then(function(response) {
	                            vm.columnForm.$setPristine();
	                            if (response.ExceptionMsg) {
	                                var errorDetails = {
	                                    message: response.ExceptionMsg
	                                };
	                                applicationService.showErrorMessage(errorDetails);
	                                defer.reject(false);
	                            } else {
	                                addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                                defer.resolve(response);
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                            defer.reject(reason);
	                        });
	                    } else {
	                        defer.resolve({ isFormDirty: true });
	                    }
	                } else {
	                    defer.resolve(true);
	                }
	            }
	            return defer.promise;
	        }
	
	        /**
	         * - This function used for prepare the settingGroupList for update the Actions
	         */
	        function prepareColumnsForUpdate() {
	            var settingGroupList = vm.columnsListsResponse.SettingGroupList[0];
	            if (settingGroupList.ApplicationSettingDOs.length) {
	                var CustomSettingName = settingGroupList.ApplicationSettingDOs[0].ApplicationSettingSO[vm.prefix + 'CustomSettingName__c'];
	                var RecordKey = settingGroupList.ApplicationSettingDOs[0].ApplicationSettingSO[vm.prefix + 'RecordKey__c'];
	                settingGroupList.ApplicationSettingDOs[0].SettingListJSON = applicationManagementService.prepareSettingListJSONForUpdateColumns(CustomSettingName, vm.columnsConfigFlow, RecordKey, vm.columnsLists);
	                settingGroupList.ApplicationSettingDOs[0].SettingList = null;
	                delete settingGroupList.ApplicationSettingDOs[0]['FieldNames'];
	                delete settingGroupList.ApplicationSettingDOs[0].ApplicationSettingSO[vm.prefix + 'SettingGroupId__r']['Id'];
	            }
	            return settingGroupList;
	        }
	
	        /**
	         * - Call this method after row moved in columns
	         */
	        vm.oncolumnsListMoved = function(index) {
	            vm.columnsLists.splice(index, 1);
	            setSequenceForColumnsList(0);
	            if(vm.displayType === vm.applicationManagementConstants.customTemplate) {
	                vm.customForm.$setDirty();
	            }
	        }
	
	        /**
	         * - Call this method for set the sequnce number to action record
	         */
	        function setSequenceForColumnsList(startingRowIndex) {
	            for (var key = startingRowIndex; key < vm.columnsLists.length; key++) {
	                vm.columnsLists[key][vm.prefix + 'Sequence__c'] = key + 1;
	            }
	        }
	
	        /**
	         * - This method is for make field name picklist
	         */
	        function prepareFieldNamePicklist(fieldNamesDos) {
	            var fieldNames = [],
	                index;
	            if (fieldNamesDos) {
	                var fieldNamesDosLength = fieldNamesDos.length;
	                for (index = 0; index < fieldNamesDosLength; index++) {
	                    var fieldName = {
	                        "active": true,
	                        "defaultValue": true,
	                        "label": fieldNamesDos[index].label,
	                        "value": fieldNamesDos[index].name
	                    };
	                    fieldNames.push(fieldName);
	                }
	            }
	            return fieldNames;
	        }
	
	        /**
	         * - This method is for change the flow of all columns while user change the config flow 
	         */
	        function onChangeConfigFlowPicklist(flowId) {
	            if (vm.displayType === 'Columns' || vm.displayType === 'Actions' || vm.displayType === 'List') {
	                settingGroupId = flowId;
	                showTemplateByDisplayType(vm.displayType);
	            } else {
	
	            }
	        }
	
	        /** 
	         * validate field name is empty or not
	         */
	        function isFieldNameNotDefined() {
	            var notMaintained = false,
	                indices = [];
	            for (var item in vm.columnsLists) {
	                if (!isNaN(parseInt(item, 10))) {
	                    var fieldName = vm.columnsLists[item][vm.prefix + 'FieldName__c'];
	                    if (fieldName === '' || fieldName == undefined) {
	                        notMaintained = true;
	                        indices.push(parseInt(item, 10) + 1);
	                    } else {
	                        if (vm.columnsLists[item]['hasError']) {
	                            delete vm.columnsLists[item]['hasError'];
	                        }
	                    }
	                }
	            }
	            return {
	                notMaintained: notMaintained,
	                indices: indices
	            };
	        }
	
	        /** 
	         * Hide and show some column based on the setting group record key 
	         * (Rules)
	         * Display type is equal to column
	         * Record key equal to summaryWaterfall/lineItemWaterfall
	         */
	        function hideAndShowColumnByRecordKey(recordKey) {
	            if (recordKey === vm.applicationManagementConstants.summaryWaterfall || recordKey === vm.applicationManagementConstants.lineItemWaterfall) {
	                vm.isShowColumn = true;
	            } else {
	                vm.isShowColumn = false;
	            }
	        }
	
	        /**
	         * This method is used for reset the Columns variables
	         */
	        function resetColumns() {
	            vm.columnsListsResponse = undefined;
	        }
	
	        /** -------------- Column End -------------- **/
	
	
	        /** ----------------------------- Flow Management Begin ------------------------ **/
	
	        /**
	         * - This method is used for create new flow management
	         */
	        vm.createFlowManagement = function() {
	            var sampleTemplate = angular.copy(applicationManagementService.getSampleFlowManagement());
	            vm.flowManagementLists.push(sampleTemplate);
	            vm.flowForm.$setDirty();
	        };
	
	        /**
	         * - Method for remove the existing row of flow management
	         */
	        function removeFlowManagement() {
	            var Id = vm.flowManagementLists[toBeRemovedIndex].FlowSO.Id
	            if (Id === undefined) {
	                vm.flowManagementLists.splice(toBeRemovedIndex, 1);
	            } else {
	                applicationManagementService.deleteApplicationFlow(Id).then(function(response) {
	                    if (response) {
	                        vm.flowManagementLists.splice(toBeRemovedIndex, 1);
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            }
	        }
	
	        /**
	         * - Save flow management
	         */
	        function saveFlowManagement() {
	            var defer = $q.defer();
	            if (isFlowManagementNameNotDefined().notMaintained) {
	                var indices = isFlowManagementNameNotDefined().indices;
	                indices.length > 0 ? updateErrorAttributeOfAction('flowManagementLists', indices) : angular.noop();
	                addAlert(vm.labels.NameMustBeEntered, 'danger');
	                defer.reject(false);
	            } else if (isDuplicateFlowName()) {
	                addAlert(vm.labels.NameMustBeUnique, 'danger');
	                defer.reject(false);
	            } else {
	                if (vm.flowForm.$dirty) {
	                    var flowItems = filterFlowsByExistingFlowId();
	                    var newlyAddedFlows = flowItems.newlyAddedFlows;
	                    var existingFlows = flowItems.existingFlows;
	                    if (newlyAddedFlows.length > 0 && existingFlows.length > 0) {
	                        editedState = 'both';
	                    }
	                    if (flowItems.newlyAddedFlows.length) {
	                        vm.flowForm.$setPristine();
	                        editedState = (editedState === 'both' ? 'both' : 'addState');
	                        applicationManagementService.createApplicationFlows(newlyAddedFlows).then(function(response) {
	                            newlyAddedFlows = [];
	                            if (response.ExceptionMsg) {
	                                var errorDetails = {
	                                    message: response.ExceptionMsg
	                                };
	                                addAPIStatus = false;
	                                applicationService.showErrorMessage(errorDetails);
	                                defer.reject(false);
	                            } else {
	                                addAPIStatus = true;
	                                processSuccessState();
	                                defer.resolve(response);
	                            }
	                        }, function(reason) {
	                            addAPIStatus = false;
	                            applicationService.showErrorMessage(reason);
	                            defer.reject(reason);
	                        });
	                    }
	                    if (flowItems.existingFlows.length) {
	                        editedState = (editedState === 'both' ? 'both' : 'updateState');
	                        applicationManagementService.updateApplicationFlows(existingFlows).then(function(response) {
	                            if (response) {
	                                existingFlows = [];
	                                if (response.ExceptionMsg) {
	                                    var errorDetails = {
	                                        message: response.ExceptionMsg
	                                    };
	                                    updateAPIStatus = false;
	                                    applicationService.showErrorMessage(errorDetails);
	                                    defer.reject(false);
	                                } else {
	                                    updateAPIStatus = true;
	                                    processSuccessState();
	                                    defer.resolve(response);
	                                }
	                            }
	                        }, function(reason) {
	                            updateAPIStatus = false;
	                            applicationService.showErrorMessage(reason);
	                            defer.reject(reason);
	                        });
	                    }
	                } else {
	                    defer.resolve({ isFormDirty: true });
	                }
	            }
	            return defer.promise;
	        }
	
	        /**
	         * - Filter the existing flows and newly added flows from flowManagementItems based on ExistingFlowId value
	         * - if ExistingFlowId is null. It is newly added flows
	         * - else it is existing flows.
	         */
	        function filterFlowsByExistingFlowId() {
	            var existingFlows = [],
	                newlyAddedFlows = []
	            for (var item in vm.flowManagementLists) {
	                var flowManagementList = vm.flowManagementLists[item];
	                if (flowManagementList['hasError'] || flowManagementList['hasError'] === undefined || flowManagementList['hasError'] === false) {
	                    delete flowManagementList['hasError'];
	                }
	                if (flowManagementList.ExistingFlowId === null) {
	                    newlyAddedFlows.push(flowManagementList);
	                } else {
	                    existingFlows.push(flowManagementList);
	                }
	            }
	            return {
	                newlyAddedFlows: newlyAddedFlows,
	                existingFlows: existingFlows
	            }
	        }
	
	        /** 
	         * Validate name field is empty or not in flow managemnt
	         */
	        function isFlowManagementNameNotDefined() {
	            var notMaintained = false,
	                indices = [];
	            for (var item in vm.flowManagementLists) {
	                if (!isNaN(parseInt(item, 10))) {
	                    var Name = vm.flowManagementLists[item].FlowSO['Name'];
	                    if (Name === '' || Name == undefined) {
	                        notMaintained = true;
	                        indices.push(parseInt(item, 10) + 1);
	                    } else {
	                        if (vm.flowManagementLists[item]['hasError']) {
	                            delete vm.flowManagementLists[item]['hasError'];
	                        }
	                    }
	                }
	            }
	            return {
	                notMaintained: notMaintained,
	                indices: indices
	            };
	        }
	
	        /** 
	         * Validate duplicate flow name 
	         */
	        function isDuplicateFlowName() {
	            var sorted, item,
	                notMaintained = false;
	            sorted = vm.flowManagementLists.concat().sort(function(a, b) {
	                if (a.FlowSO.Name > b.FlowSO.Name) return 1;
	                if (a.FlowSO.Name < b.FlowSO.Name) return -1;
	                return 0;
	            });
	            for (item in vm.flowManagementLists) {
	                if (!isNaN(parseInt(item, 10))) {
	                    sorted[item].hasError = ((sorted[item - 1] && sorted[item - 1].FlowSO.Name === sorted[item].FlowSO.Name) || (sorted[item + 1] && sorted[item + 1].FlowSO.Name === sorted[item].FlowSO.Name));
	                    if (sorted[item].hasError) {
	                        notMaintained = true;
	                    }
	                }
	            }
	            return notMaintained;
	        }
	
	        /** 
	         * Find the index of duplicate flow name
	         */
	        function findIndexOfDuplicateFlowName() {
	            var indices = [],
	                index;
	            if (vm.flowManagementLists.length) {
	                for (index = 0; index < vm.flowManagementLists.length; index++) {
	                    if (vm.flowManagementLists[index].hasError) {
	                        indices.push(index + 1);
	                    }
	                }
	            }
	            return indices;
	        }
	
	        /** ----------------------------- Flow Management End ------------------------ **/
	
	        function savePage(e, toState, toParams) {
	            var defer = $q.defer();
	
	            if (vm.displayType === 'Actions') {
	                saveActionItems().then(function(response) {
	                    if (response.isFormDirty) {
	                        noUpdateInFormData(e, toState, toParams);
	                    } else {
	                        resetActions();
	                        processUpdateStatus(e, toState, toParams);
	                    }
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            } else if (vm.displayType === 'List') {
	                saveLists().then(function(response) {
	                    if (response.isFormDirty) {
	                        noUpdateInFormData(e, toState, toParams);
	                    } else {
	                        resetLists();
	                        processUpdateStatus(e, toState, toParams);
	                    }
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            } else if (vm.displayType === 'Columns') {
	                saveColumnsItems().then(function(response) {
	                    if (response.isFormDirty) {
	                        noUpdateInFormData(e, toState, toParams);
	                    } else {
	                        resetColumns();
	                        processUpdateStatus(e, toState, toParams);
	                    }
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            } else if (vm.displayType === 'Flow') {
	                saveFlowManagement().then(function(response) {
	                    if (response.isFormDirty) {
	                        noUpdateInFormData(e, toState, toParams);
	                    } else {
	                        processUpdateStatus(e, toState, toParams);
	                    }
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            } else if (vm.displayType === applicationManagementConstants.customTemplate) {
	                if(e && !vm.customForm.$dirty) {
	                    defer.resolve({message: true});
	                    noUpdateInFormData(e, toState, toParams);    
	                } else {
	                    vm.customForm.$setSubmitted();
	                    var viewName = vm.gridViews.viewNamesDefault;
	                    vm.formError = vm.labels.MandatoryFieldsWarning;
	                    if(vm.customForm.$valid && isFormValid()) {
	                        if(viewName === vm.labels.New) {
	                            applicationManagementService.createGridViewSettings({"ViewRecordDO": prepareGridViewObject()}, isCartPage()).then(function(response) {
	                                setFormUpdatedValues(response.ListViewDO, vm.labels.SavedSuccessfully);
	                                defer.resolve({message: true});
	                                if(e) processUpdateStatus(e, toState, toParams); 
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                        } else {
	                            if(vm.customForm.$dirty) {
	                                applicationManagementService.updateGridViewSettings({"ViewRecordDO": prepareGridViewObject()}, isCartPage()).then(function(response) {
	                                    setFormUpdatedValues(response.ListViewDO, vm.labels.ProductSaveSuccess);
	                                    defer.resolve({message: true});
	                                    if(e) processUpdateStatus(e, toState, toParams); 
	                                    if(vm.gridViews.viewAccessLevel) {
	                                        vm.gridViews.getUsers.model = [];               
	                                        vm.gridViews.getUsersProfile.model = [];
	                                        vm.gridViews.getUsersRole.model = [];
	                                    }
	                                }, function(reason) {
	                                    applicationService.showErrorMessage(reason);
	                                });
	                            }
	                        }
	                        vm.customForm.$setPristine();
	                    } else {
	                        addAlert(vm.formError, cpqAdminConstants.DANGER);
	                    }
	                }
	            } else {
	                processUpdateStatus(e, toState, toParams);
	                defer.resolve(true);
	            }
	            return defer.promise;
	        }
	
	        /** 
	         * - This method is call while user click the save button
	         */
	        vm.explicitPageSave = function() {
	            savePage().then(function(response) {}, function(reason) {});
	        }
	
	        $scope.$on('saveApplicationSettingGroup', function(event) {
	            savePage(event).then(function(response) {
	                if (response.ExceptionMsg) {
	                    $scope.$emit("savedSettingGroupResponse", { 'message': false });
	                } else {
	                    isFormSaved = true;
	                    $scope.$emit("savedSettingGroupResponse", { 'message': true });
	                }
	            }, function(reason) {
	                $scope.$emit("savedSettingGroupResponse", { 'message': false });
	            });
	        })
	
	        /**
	         * When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed incase of errors in saving the page.
	         *
	         * If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.applicationManagement.settingGroup' && toParams.id === null) {
	                return true;
	            } else if (isFormSaved) {
	                // Update the 'new' state with updated record id.
	                // TODO : update toParams to new record id created
	                return true;
	            } else {
	                if (toState.name !== 'app.applicationManagement.settingGroup') {
	                    e.preventDefault();
	                    savePage(e, toState, toParams);
	                } else {
	                    return true;
	                }
	            }
	        });
	
	        function processUpdateStatus(event, toState, toParams) {
	            if (event) {
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                }
	            } else {
	                if (vm.displayType === 'Flow') {
	                    processSuccessState();
	                } else {
	                    showTemplateByDisplayType(vm.displayType);
	                }
	            }
	        }
	
	        function processSuccessState() {
	            if (editedState === 'both') {
	                if (addAPIStatus === true && updateAPIStatus === true) {
	                    resetSuccessState();
	                    showTemplateByDisplayType(vm.displayType);
	                    addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                }
	            } else if (editedState === 'addState') {
	                if (addAPIStatus === true) {
	                    resetSuccessState();
	                    showTemplateByDisplayType(vm.displayType);
	                    addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                }
	            } else if (editedState === 'updateState') {
	                if (updateAPIStatus === true) {
	                    resetSuccessState();
	                    showTemplateByDisplayType(vm.displayType);
	                    addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                }
	            }
	        }
	
	        function noUpdateInFormData(event, toState, toParams) {
	            if (event) {
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                }
	            } else {
	                addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	            }
	        }
	
	        /**
	            * - Watch Action for  option deactivation
	        */
	        var deRegisterCoterminationPreference = $scope.$watch('vm.listItems[0].fieldValue', function(newFieldValue, oldFieldValue) {
	            if (angular.isDefined(newFieldValue) && newFieldValue.length == 0) {
	                newFieldValue = oldFieldValue;
	            }
	            coterminationPreference(newFieldValue);
	        });
	    
	        /**
	         * Watches value of multipicklist custom setting Installed Products > CoterminationPreferencesDuringRenewal__c.
	         */
	        var deRegisterCoterminationPreferenceDuringRenewal = $scope.$watch('vm.listItems[8].fieldValue', function(newFieldValue, oldFieldValue) {
	            if (angular.isDefined(newFieldValue) && newFieldValue.length == 0) {
	                newFieldValue = oldFieldValue;
	            }
	            coterminationPreference(newFieldValue);
	        });
	
	        function coterminationPreference(optionFieldValue) {
	            var tempFieldValues = [];
	            var defaultCoterminationOption = 0;
	            var cotermMultipickFieldIndex;
	            var cotermPicklistFieldIndex;
	
	            if (vm.listItems.length > 1) {
	                if (vm.listItems[0].fieldName.indexOf('EndDatePreferencesForCotermination__c') > -1) {
	                    cotermMultipickFieldIndex = 0;
	                    cotermPicklistFieldIndex = 1;
	                } else if (vm.listItems.length >= 9 && vm.listItems[8].fieldName.indexOf('CoterminationPreferencesDuringRenewal__c') > -1) {
	                    cotermMultipickFieldIndex = 8;
	                    cotermPicklistFieldIndex = 9;
	                } else {
	                    return;
	                }
	                
	                if (optionFieldValue.length < 2) {
	                    vm.listItems[cotermMultipickFieldIndex].fieldValue = optionFieldValue; 
	                }
	                
	                // gather selected values from multipicklist field and add them to temp array
	                _.forEach(vm.listItems[cotermMultipickFieldIndex].fieldValue, function(fieldValue) {
	                    _.forEach(listItemsforCotermination[cotermPicklistFieldIndex].picklistValues.PicklistValues, function(picklistValue) {
	                        if (fieldValue == picklistValue.value) {
	                            tempFieldValues.push(picklistValue);
	                        }
	                    });
	                });
	                
	                // assign selected values from multipicklist field into available fields of picklist
	                vm.listItems[cotermPicklistFieldIndex].picklistValues.PicklistValues = tempFieldValues;
	                
	                // check if the selected value in the picklist matches against any of the newly assigned values
	                _.forEach(vm.listItems[cotermPicklistFieldIndex].picklistValues.PicklistValues, function(picklistValue) {
	                    if (picklistValue.label == vm.listItems[cotermPicklistFieldIndex].fieldValue) {
	                        defaultCoterminationOption = 1;
	                    }
	                });
	                
	                // if no match was found, default selected picklist value to zeroth element
	                if (defaultCoterminationOption == 0 ) {
	                    vm.listItems[cotermPicklistFieldIndex].fieldValue = vm.listItems[cotermPicklistFieldIndex].picklistValues.PicklistValues[0].label;
	                }
	            }
	        }
	
	        function resetSuccessState() {
	            editedState = '';
	            addAPIStatus = undefined;
	            updateAPIStatus = undefined;
	        }
	
	        vm.goToApplicationManagementPage = function() {
	            $state.go('app.applicationManagement.settingGroup', { 'id': null });
	        };
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            deRegisterCoterminationPreference();
	            deRegisterCoterminationPreferenceDuringRenewal();
	            vm = null;
	        });
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        vm.isRelateRelateCriteriaPage = function() {
	            let isRelateRelateCriteria = false;
	            if (angular.isDefined(vm.listItems[0])) {
	                isRelateRelateCriteria = vm.listItems[0].fieldName === vm.prefix + 'RelateActionCriteriaFields__c';
	            }
	
	            return isRelateRelateCriteria;
	        }
	
	        vm.showModal = function ($event) {
	            vm.event = $event;
	            vm.displayModal = true;            
	        }
	    };
	
	    applicationManagementSettingGroupController.$inject = ['$scope',
	        '$q',
	        '$state',
	        '$stateParams',
	        '$templateCache',
	        '$location',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'cpqAdminConstants',
	        'applicationService',
	        'applicationManagementConstants',
	        'applicationManagementService',
	        'lodash',
	        '$filter'
	    ];
	
	    module.exports = applicationManagementSettingGroupController;
	
	})();

/***/ }),
/* 651 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"application-management-template-container\">\n    <h4 class=\"md-padding\">{{vm.labels.QuickStart}}</h4>\n    <div class=\"row settingGroup-list\">\n        <div class=\"col-md-6\">\n            <a class=\"text-primary\" data-ui-sref=\"app.smartSearchSettings.searchConnectionSettings\">{{::vm.labels.SmartSearchSettings}}</a>\n        </div>\n        <div class=\"col-md-6\">\n            <a class=\"text-primary\" data-ui-sref=\"app.objectSummarySettings\">{{::vm.labels.ObjectSummarySettings}}</a>\n        </div>\n        <div class=\"col-md-6\">\n            <a class=\"text-primary\" data-ui-sref=\"app.favoritesSettings\">{{::vm.labels.FavoritesSettings}}</a> \n        </div>\n        <div class=\"col-md-6\">\n            <a class=\"text-primary\" data-ui-sref=\"app.lookupFieldSettings\">{{::vm.labels.LookupFieldSettings}}</a> \n        </div>\n        <div class=\"col-md-6\" data-ng-repeat=\"item in vm.applicationFeatures.leftSideList\">\n            <a href=\"{{vm.hostName}}#/app/applicationManagement/{{item.settingGroupId}}/settingGroup\" data-ng-if=\"item.settingGroupId\" data-ng-click=\"vm.changeApplicationFeature($event, $index, item)\">{{item.Name}}</a>\n            <p data-ng-if=\"!item.settingGroupId\" data-ng-click=\"vm.changeApplicationFeature($event, $index, item)\">{{item.Name}}</p>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 652 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"md-padding actions-container\">\n    <div class=\"clearfix\">\n        <div class=\"pull-left\" data-ng-if=\"!vm.isActionAndTaskPreview\">\n            <div layout=\"row\" class=\"config-flow\">\n                <div class=\"pull-left field-label\">\n                    {{::vm.labels.Flow}}\n                </div>\n                <div class=\"pull-left field-input\">\n                    <material-form-field model=\"vm.actionConfigFlow\" field-type=\"picklist\" properties=\"vm.configFlowPicklist\" name=\"actionConfigFlow\" is-editable=\"true\"></material-form-field>\n                </div>\n            </div>\n        </div>\n        <div class=\"pull-right\">\n            <material-form-field model=\"vm.isActionAndTaskPreview\" field-type=\"BOOLEAN\" is-editable=\"true\" field-navigation-and-actions-content=\"vm.labels.DefaultSearchCategory\" element-id=\"isActionPreview\">\n            </material-form-field>\n        </div>\n    </div>\n    <form name=\"vm.actionForm\" novalidate>\n        <div class=\"form-screen\" data-ng-if=\"!vm.isActionAndTaskPreview\">\n            <div class=\"table-content\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th>{{::vm.labels.DisplayType}}</th>\n                            <th>{{::vm.labels.Action}}</th>\n                            <th>{{::vm.labels.ActionLabelName}}</th>\n                            <th>{{::vm.labels.DisplayAs}}</th>\n                            <th>{{::vm.labels.ActionArea}}</th>\n                            <th>{{::vm.labels.ActionStyleClass}}</th>\n                            <th>{{::vm.labels.ActionPage}}</th>\n                            <th>{{::vm.labels.ActionParam}}</th>\n                            <th>{{::vm.labels.Behavior}}</th>\n                            <th>{{::vm.labels.ActionType}}</th>\n                            <th>{{::vm.labels.IsEnabled}}</th>\n                            <th>{{::vm.labels.AlwaysDisplay}}</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody dnd-list=\"vm.actionLists\">\n                        <tr data-ng-repeat=\"item in vm.actionLists\" dnd-draggable=\"item\" dnd-moved=\"vm.onActionListMoved($index)\" dnd-effect-allowed=\"move\" data-ng-class=\"{'errorBcgColor': item.hasError}\">\n                            <td dnd-handle>\n                                <i class=\"material-icons drag-handle\">more_vert</i>\n                            </td>\n                            <td>\n                                {{item[vm.prefix + 'DisplayType__c']}}\n                            </td>\n                            <td>\n                                {{item[vm.prefix + 'ActionName__c']}}\n                            </td>\n                            <td>\n                                <p data-ng-if=\"!item.isDefault && item[vm.prefix + 'ActionName__c'] != vm.labels.Relate \">{{item[vm.prefix + 'ActionLabelName__c']}}</p>\n                                <material-form-field model=\"item[vm.prefix + 'ActionLabelName__c']\" field-type=\"string\" is-editable=\"true\" data-ng-if=\"item.isDefault || item[vm.prefix + 'ActionName__c'] == vm.labels.Relate\"></material-form-field>\n                            </td>\n                            <td class=\"type\">\n                                <material-form-field model=\"item[vm.prefix + 'DisplayAs__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.type\" class=\"input-picklist\"></material-form-field>\n                            </td>\n                            <td class=\"area\">\n                                <material-form-field model=\"item[vm.prefix + 'ActionArea__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.area\" class=\"input-picklist\"></material-form-field>\n                            </td>\n                            <td>\n                                <material-form-field model=\"item[vm.prefix + 'ActionStyleClass__c']\" field-type=\"string\" is-editable=\"true\"></material-form-field>\n                            </td>\n                            <td>\n                                <material-form-field model=\"item[vm.prefix + 'ActionPage__c']\" field-type=\"string\" is-editable=\"true\" data-ng-if=\"item.isDefault\"></material-form-field>\n                            </td>\n                            <td>\n                                <material-form-field model=\"item[vm.prefix + 'ActionParams__c']\" field-type=\"string\" is-editable=\"true\" data-ng-if=\"item.isDefault\"></material-form-field>\n                            </td>\n                            <td>\n                                <material-form-field model=\"item[vm.prefix + 'Behavior__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.behavior\" class=\"input-picklist\" data-ng-if=\"item.isDefault\"></material-form-field>\n                            </td>\n                            <td class=\"type\">\n                                <material-form-field model=\"item[vm.prefix + 'ActionType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.action\" class=\"input-picklist\" data-ng-if=\"(item.isDefault && item[vm.prefix + 'DisplayType__c'] === 'Cart Line Item')\"></material-form-field>\n                            </td>\n                            <td class=\"enabled\">\n                                <material-form-field model=\"item[vm.prefix + 'IsEnabled__c']\" field-type=\"checkbox\" is-editable=\"true\" class=\"table-checkbox\"></material-form-field>\n                            </td>\n                            <td class=\"displayed\">\n                                <material-form-field model=\"item[vm.prefix + 'AlwaysDisplay__c']\" field-type=\"checkbox\" is-editable=\"true\" class=\"table-checkbox\"></material-form-field>\n                            </td>\n                            <td class=\"clear\">\n                                <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeItem($index)\" data-ng-if=\"item.isDefault\"><i class=\"material-icons\">clear</i>\n                                </button>\n                            </td>\n                        </tr>\n                        <tr class=\"dndPlaceholder\">\n                            <td colspan=\"12\">Drop your list here</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"clearfix\">\n                <div class=\"pull-right\" data-ng-if=\"vm.actionListsResponse && vm.actionListsResponse.SettingGroupList[0].ApplicationSettingDOs.length && vm.actionListsResponse.SettingGroupList[0].ApplicationSettingDOs[0].ApplicationSettingSO[vm.prefix + 'RecordKey__c']\">\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addNewActionList()\">\n                        <i class=\"material-icons\">add</i>\n                    </button>\n                </div>\n            </div>\n        </div>\n        <div class=\"preview-screen\" data-ng-if=\"vm.isActionAndTaskPreview\">\n            <div class=\"preview-header\">\n            </div>\n            <div class=\"preview-sub-header\">\n                <div layout=\"row\">\n                    <div flex=\"33\">\n                        <ul class=\"list-inline\">\n                            <li><a href=\"\" data-ng-click=\"vm.addNewActionModal('Task');\" class=\"slds-button slds-button--icon task\" title=\"{{vm.labels.NewTask}}\"><i class=\"material-icons\">add</i></a></li>\n                            <li><a href=\"\" data-ng-repeat=\"item in vm.taskItems.left track by $index\" data-ng-if=\"item[vm.prefix + 'IsEnabled__c']\">{{item[vm.prefix + 'ActionLabelName__c']}}</a></li>\n                        </ul>\n                    </div>\n                    <div flex=\"33\">\n                        <ul class=\"list-inline\">\n                            <li><a href=\"\" data-ng-repeat=\"item in vm.taskItems.center track by $index\" data-ng-if=\"item[vm.prefix + 'IsEnabled__c']\">{{item[vm.prefix + 'ActionLabelName__c']}}</a></li>\n                        </ul>\n                    </div>\n                    <div flex=\"33\">\n                        <ul class=\"list-inline\">\n                            <li><a href=\"\" data-ng-repeat=\"item in vm.taskItems.right track by $index\" data-ng-if=\"item[vm.prefix + 'IsEnabled__c']\">{{item[vm.prefix + 'ActionLabelName__c']}}</a></li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n            <div class=\"preview-body\">\n            </div>\n            <div class=\"preview-footer\">\n                <div layout=\"row\">\n                    <div flex=\"33\">\n                        <button data-ng-click=\"vm.addNewActionModal('Action');\" class=\"slds-button slds-button--icon pull-left\"><i class=\"material-icons\" title=\"{{vm.labels.NewAction}}\">add</i></button>\n                        <div class=\"pull-left\" data-ng-repeat=\"item in vm.actionItems.left track by $index\" data-ng-if=\"item[vm.prefix + 'IsEnabled__c']\" ng-include=\"'application-management-preview-button-group-template'\">\n                        </div>\n                    </div>\n                    <div flex=\"33\">\n                        <div class=\"pull-left\" data-ng-repeat=\"item in vm.actionItems.center track by $index\" data-ng-if=\"item[vm.prefix + 'IsEnabled__c']\" ng-include=\"'application-management-preview-button-group-template'\">\n                        </div>\n                    </div>\n                    <div flex=\"33\">\n                        <div class=\"pull-right\" data-ng-repeat=\"item in vm.actionItems.right track by $index\" data-ng-if=\"item[vm.prefix + 'IsEnabled__c']\" ng-include=\"'application-management-preview-button-group-template'\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </form>\n</div>\n"

/***/ }),
/* 653 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"list-container md-padding\">\n    <form name=\"vm.listForm\" novalidate>\n        <div data-ng-repeat=\"item in vm.listItems track by $index\" data-ng-if=\"$index % 2 == 0\" class=\"row noMargin list-detail-form-item\">\n            <div class=\"col-xs-12 col-lg-4 noPadding\">\n                <div class=\"form-group\">\n                    <material-form-field model=\"item.fieldValue\" field-label=\"item.label\" field-type=\"BOOLEAN\" is-editable=\"true\" title=\"{{item.helpText}}\" element-id=\"{{item.fieldName}}\" data-ng-if=\"item.displayType === 'Boolean Checkbox'\">\n                    </material-form-field>\n                    <material-form-field model=\"item.fieldValue\" field-label=\"item.label\" field-type=\"STRING\" is-editable=\"true\" title=\"{{item.helpText}}\" data-ng-if=\"item.displayType === 'Text'\"></material-form-field>\n                    <material-form-field model=\"item.fieldValue\" field-label=\"item.label\" field-type=\"QUANTITY\" scale=\"0\" precision=\"20\" title=\"{{item.helpText}}\" is-editable=\"true\" data-ng-if=\"item.displayType === 'Number'\"></material-form-field>\n                    <material-form-field model=\"item.fieldValue\" field-label=\"item.label\" field-type=\"PICKLIST\" is-editable=\"true\" title=\"{{item.helpText}}\" properties=\"item.picklistValues\" data-ng-if=\"item.displayType === 'Picklist'\">\n                    </material-form-field>\n                    <material-form-field model=\"item.fieldValue\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" title=\"{{item.helpText}}\" properties=\"item.picklistValues\" field-label=\"item.label\" data-ng-if=\"item.displayType === 'Multi-Select Checkbox'\">\n                </div>\n            </div>\n            <div class=\"col-xs-1 col-lg-1\" data-ng-if=\"vm.listItems.length > ($index + 1)\"></div>\n            <div class=\"col-xs-12 col-lg-4 noPadding\" data-ng-if=\"vm.listItems.length > ($index + 1)\">\n                <div class=\"form-group\">\n                    <material-form-field model=\"vm.listItems[$index+1].fieldValue\" field-label=\"vm.listItems[$index+1].label\" field-type=\"BOOLEAN\" is-editable=\"true\" title=\"{{vm.listItems[$index+1].helpText}}\"element-id=\"{{vm.listItems[$index+1].fieldName}}\" data-ng-if=\"vm.listItems[$index+1].displayType === 'Boolean Checkbox'\">\n                    </material-form-field>\n                    <material-form-field model=\"vm.listItems[$index+1].fieldValue\" title=\"{{vm.listItems[$index+1].helpText}}\" field-label=\"vm.listItems[$index+1].label\" field-type=\"STRING\" is-editable=\"true\" data-ng-if=\"vm.listItems[$index+1].displayType === 'Text'\"></material-form-field>\n                    <material-form-field model=\"vm.listItems[$index+1].fieldValue\" title=\"{{vm.listItems[$index+1].helpText}}\" field-label=\"vm.listItems[$index+1].label\" field-type=\"QUANTITY\" scale=\"0\" precision=\"20\" is-editable=\"true\" data-ng-if=\"vm.listItems[$index+1].displayType === 'Number'\"></material-form-field>\n                    <material-form-field model=\"vm.listItems[$index+1].fieldValue\" field-label=\"vm.listItems[$index+1].label\" field-type=\"PICKLIST\" title=\"{{vm.listItems[$index+1].helpText}}\" is-editable=\"true\" properties=\"vm.listItems[$index+1].picklistValues\" data-ng-if=\"vm.listItems[$index+1].displayType === 'Picklist'\"></material-form-field>\n                    <material-form-field model=\"vm.listItems[$index+1].fieldValue\" field-label=\"vm.listItems[$index+1].helpText\" field-type=\"MULTIPICKLIST\" title=\"{{vm.listItems[$index+1].label}}\" is-editable=\"true\" properties=\"vm.listItems[$index+1].picklistValues\" data-ng-if=\"vm.listItems[$index+1].displayType === 'Multi-Select Checkbox'\"></material-form-field>\n                </div>\n            </div>\n            <div class=\"col-xs-1 col-lg-3\" data-ng-if=\"vm.listItems.length > ($index + 1)\"></div>\n        </div>\n    </form>\n    <div class=\"clearfix\"></div>\n</div>\n"

/***/ }),
/* 654 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"md-padding columns-container\">\n    <div layout=\"row\" class=\"config-flow\">\n        <div class=\"pull-left field-label\">\n            {{::vm.labels.Flow}}\n        </div>\n        <div class=\"pull-left field-input\">\n            <material-form-field model=\"vm.columnsConfigFlow\" field-type=\"picklist\" properties=\"vm.configFlowPicklist\" name=\"columnsConfigFlow\" is-editable=\"true\"></material-form-field>\n        </div>\n    </div>\n    <div class=\"table-content\">\n        <form name=\"vm.columnForm\" novalidate>\n            <table>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th>{{::vm.labels.DisplayType}}</th>\n                        <th>{{::vm.labels.FieldName}}</th>\n                        <th data-ng-if=\"vm.selectedApplicationFeature.title === vm.applicationManagementConstants.installedProducts\">{{::vm.labels.IsSortable}}</th>\n                        <th data-ng-if=\"vm.selectedApplicationFeature.title !== vm.applicationManagementConstants.installedProducts\">{{::vm.labels.IsEditable}}</th>\n                        <th data-ng-if=\"!vm.isShowColumn\">{{::vm.labels.Style}}</th>\n                        <th data-ng-if=\"!vm.isShowColumn\">{{::vm.labels.StyleClass}}</th>\n                        <th data-ng-if=\"!vm.isShowColumn\">{{::vm.labels.HeaderStyle}}</th>\n                        <th data-ng-if=\"vm.isShowColumn\">{{::vm.labels.IsPricePoint}}</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody dnd-list=\"vm.columnsLists\">\n                    <tr data-ng-repeat=\"item in vm.columnsLists\" dnd-draggable=\"item\" dnd-moved=\"vm.oncolumnsListMoved($index)\" dnd-effect-allowed=\"move\" data-ng-class=\"{'errorBcgColor': item.hasError}\">\n                        <td dnd-handle>\n                            <i class=\"material-icons drag-handle\">more_vert</i>\n                        </td>\n                        <td>\n                            <p class=\"text-label\">{{item[vm.prefix + 'DisplayType__c']}}</p>\n                        </td>\n                        <td>\n                            <material-form-field model=\"item[vm.prefix + 'FieldName__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.fieldNamePicklist\" class=\"input-picklist\"></material-form-field>\n                        </td>\n                        <td class=\"is-checkbox\">\n                            <material-form-field model=\"item[vm.prefix + 'IsSortable__c']\" field-type=\"checkbox\" is-editable=\"true\" class=\"table-checkbox\" data-ng-if=\"vm.selectedApplicationFeature.title === vm.applicationManagementConstants.installedProducts\"></material-form-field>\n                            <material-form-field model=\"item[vm.prefix + 'IsEditable__c']\" field-type=\"checkbox\" is-editable=\"true\" class=\"table-checkbox\" data-ng-if=\"vm.selectedApplicationFeature.title !== vm.applicationManagementConstants.installedProducts\"></material-form-field>\n                        </td>\n                        <td data-ng-if=\"!vm.isShowColumn\">\n                            <material-form-field model=\"item[vm.prefix + 'Style__c']\" field-type=\"string\" is-editable=\"true\"></material-form-field>\n                        </td>\n                        <td data-ng-if=\"!vm.isShowColumn\">\n                            <material-form-field model=\"item[vm.prefix + 'StyleClass__c']\" field-type=\"string\" is-editable=\"true\"></material-form-field>\n                        </td>\n                        <td data-ng-if=\"!vm.isShowColumn\">\n                            <material-form-field model=\"item[vm.prefix + 'HeaderStyle__c']\" field-type=\"string\" is-editable=\"true\"></material-form-field>\n                        </td>\n                        <td data-ng-if=\"vm.isShowColumn\">\n                            <material-form-field model=\"item[vm.prefix + 'IsPricePoint__c']\" field-type=\"checkbox\" is-editable=\"true\" class=\"table-checkbox\"></material-form-field>\n                        </td>\n                        <td class=\"clear\">\n                            <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeItem($index)\" data-ng-if=\"$index !== 0\"><i class=\"material-icons\">clear</i>\n                            </button>\n                        </td>\n                    </tr>\n                    <tr class=\"dndPlaceholder\">\n                        <td colspan=\"12\">Drop your list here</td>\n                    </tr>\n                </tbody>\n            </table>\n        </form>\n    </div>\n    <div class=\"clearfix\">\n        <div class=\"pull-right\" data-ng-if=\"vm.columnsListsResponse && vm.columnsListsResponse.SettingGroupList[0].ApplicationSettingDOs.length && vm.columnsListsResponse.SettingGroupList[0].ApplicationSettingDOs[0].ApplicationSettingSO[vm.prefix + 'RecordKey__c']\">\n            <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addNewColumnsList()\">\n                <i class=\"material-icons\">add</i>\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 655 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"flow-management-container\">\n    <div layout=\"row\" class=\"table-header\">\n        <div flex=\"15\">{{vm.labels.FlowName}}</div>\n        <div flex=\"15\">{{vm.labels.AssetsPage}}</div>\n        <div flex=\"15\">{{vm.labels.CartPage}}</div>\n        <div flex=\"15\">{{vm.labels.CatalogPage}}</div>\n        <div flex=\"15\">{{vm.labels.OptionsPage}}</div>\n        <div flex=\"15\">{{vm.labels.ProductAttributeDetailPage}}</div>\n        <div flex=\"10\"></div>\n    </div>\n    <form name=\"vm.flowForm\" novalidate>\n        <div class=\"table-body\">\n            <div layout=\"row\" class=\"table-row\" data-ng-repeat=\"item in vm.flowManagementLists track by $index\" data-ng-class=\"{'errorBcgColor': item.hasError}\">\n                <div flex=\"15\">\n                    <material-form-field field-type=\"STRING\" model=\"item.FlowSO.Name\" is-editable=\"true\" field-label=\"'' \" required></material-form-field>\n                </div>\n                <div flex=\"15\">\n                    <material-form-field field-type=\"STRING\" model=\"item.FlowSO[vm.prefix + 'AssetsPage__c']\" is-editable=\"true\" field-label=\"'' \"></material-form-field>\n                </div>\n                <div flex=\"15\">\n                    <material-form-field field-type=\"STRING\" model=\"item.FlowSO[vm.prefix + 'CartPage__c']\" is-editable=\"true\" field-label=\"'' \"></material-form-field>\n                </div>\n                <div flex=\"15\">\n                    <material-form-field field-type=\"STRING\" model=\"item.FlowSO[vm.prefix + 'CatalogPage__c']\" is-editable=\"true\" field-label=\"'' \"></material-form-field>\n                </div>\n                <div flex=\"15\">\n                    <material-form-field field-type=\"STRING\" model=\"item.FlowSO[vm.prefix + 'OptionsPage__c']\" is-editable=\"true\" field-label=\"'' \"></material-form-field>\n                </div>\n                <div flex=\"15\">\n                    <material-form-field field-type=\"STRING\" model=\"item.FlowSO[vm.prefix + 'ProductAttributeDetailPage__c']\" is-editable=\"true\" field-label=\"'' \"></material-form-field>\n                </div>\n                <div flex=\"10\">\n                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeItem($index)\">\n                        <i class=\"material-icons\">clear</i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </form>\n    <div class=\"clearfix\">\n        <div class=\"pull-right\">\n            <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.createFlowManagement()\">\n                <i class=\"material-icons\">add</i>\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 656 */
/***/ (function(module, exports) {

	module.exports = "<button data-ng-if=\"item[vm.prefix + 'ActionName__c'] !== 'More'\">{{item[vm.prefix + 'ActionLabelName__c']}}</button>\n<div class=\"dropup\" data-ng-if=\"item[vm.prefix + 'ActionName__c'] === 'More'\">\n    <button class=\"slds-button slds-button_neutral dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n        {{item[vm.prefix + 'ActionLabelName__c']}}\n    </button>\n    <ul class=\"dropdown-menu\" data-ng-class=\"{ 'dropdown-menu-right': item[vm.prefix + 'ActionArea__c'] === 'Right' }\">\n        <li data-ng-repeat=\"list in vm.actionItems.more track by $index\"><a href=\"#\">{{list[vm.prefix + 'ActionLabelName__c']}}</a></li>\n    </ul>\n</div>\n"

/***/ }),
/* 657 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"md-padding columns-container\">\n    <form name=\"vm.customForm\" novalidate>\n        <div class=\"grid-view\">\n            <div layout=\"row\" class=\"grid-view-row\">\n                <div class=\"flex\" flex=\"30\">\n                    <material-form-field model=\"vm.gridViews.gridViewConfigFlow\" field-type=\"picklist\" properties=\"vm.gridViews.configFlowPicklist\" name=\"columnsConfigFlow\" is-editable=\"true\" is-required=\"true\" field-label=\"::vm.labels.Flow\"></material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\" class=\"grid-view-row\">\n                <div div class=\"flex\" flex=\"30\">\n                    <material-form-field is-disabled=\"{{!vm.gridViews.gridViewConfigFlow}}\" model=\"vm.gridViews.viewNamesDefault\" field-type=\"picklist\" properties=\"vm.gridViews.viewNames\" name=\"columnsConfigFlow\" is-editable=\"true\" is-required=\"true\" field-label=\"::vm.labels.View\"></material-form-field>\n                </div>\n                <div div class=\"flex\" flex=\"30\" flex-offset=\"10\">\n                    <material-form-field model=\"vm.gridViews.newViewName\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.Name\" name=\"label\" max-length=\"36\" is-required=\"true\" is-disabled=\"{{vm.gridViews.viewNamesDefault !== vm.labels.New}}\"></material-form-field>\n                    <div ng-messages=\"vm.customForm.label.$error\" ng-if=\"vm.customForm.label.$touched || vm.customForm.$submitted\">\n                        <p ng-message=\"required\" class=\"formError\">\n                            {{vm.labels.MandatoryField}}\n                        </p>\n                    </div>\n                    \n                </div>\n                <div class=\"flex\" flex-offset=\"5\" flex=\"10\" data-ng-if=\"vm.gridViews.viewNamesDefault && vm.gridViews.viewNamesDefault !== vm.labels.New\">\n                    <a class=\"slds-button slds-button_neutral\" data-ng-click=\"vm.gridViews.deleteView()\">{{::vm.labels.DeleteView}}</a>\n                </div>\n            </div>\n            <div layout=\"row\" ng-if=\"vm.isCartPage()\" class=\"grid-view-row\">\n                <div class=\"flex\" flex=\"30\">\n                    <material-form-field model=\"vm.gridViews.groupByFieldsDefault\" field-type=\"picklist\" properties=\"vm.gridViews.groupByFields\" name=\"columnsConfigFlow\" is-editable=\"true\" is-required=\"true\" field-label=\"::vm.labels.GroupBy\"></material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\" class=\"grid-view-row\">\n                <div class=\"flex\" flex=\"30\">\n                    <material-form-field model=\"vm.gridViews.isDefaultView\" field-type=\"BOOLEAN\" is-editable=\"true\" element-id=\"DefaultView\" field-label=\"::vm.labels.DefaultView\"></material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\" class=\"grid-view-row\">\n                <div class=\"flex\" flex=\"30\">\n                    <material-form-field model=\"vm.gridViews.viewAccessLevel\" field-type=\"BOOLEAN\" is-editable=\"true\" element-id=\"MakePublic\" field-label=\"::vm.labels.MakePublic\"></material-form-field>\n                </div>\n            </div>\n            <div layout=\"row\" data-ng-class=\"{ 'disable': vm.gridViews.viewAccessLevel }\">\n                {{::vm.labels.UserTypes}}\n            </div>\n            <div layout=\"row\" class=\"grid-view-row\" data-ng-class=\"{ 'disable': vm.gridViews.viewAccessLevel }\">\n                <md-radio-group ng-model=\"vm.gridViews.userTypesSelected\">\n                    <md-radio-button ng-repeat=\"it in vm.gridViews.userTypes\" ng-value=\"it.value\" aria-label=\"{{it.value}}\" class=\"flex\" flex=\"30\"> {{ it.label }}\n                    </md-radio-button>\n                </md-radio-group>\n            </div>\n            <!--Users-->\n            <div layout=\"row\" class=\"grid-view-row\" ng-if=\"vm.gridViews.userTypesSelected == vm.labels.Users\" data-ng-class=\"{ 'disable': vm.gridViews.viewAccessLevel }\">\n                <multi-select option-values-all=\"vm.gridViews.getUsers\" option-values-selected=\"vm.gridViews.getUsers.model\" label-for-all=\"::vm.labels.AvailableUsers\" label-for-selected=\"::vm.labels.SelectedUsers\"></multi-select>\n            </div>\n            <!--User Profiles-->\n            <div layout=\"row\" class=\"grid-view-row\" ng-if=\"vm.gridViews.userTypesSelected == vm.labels.UserProfiles\" data-ng-class=\"{ 'disable': vm.gridViews.viewAccessLevel }\">\n                <multi-select option-values-all=\"vm.gridViews.getUsersProfile\" option-values-selected=\"vm.gridViews.getUsersProfile.model\" label-for-all=\"::vm.labels.AvailableUserProfiles\" label-for-selected=\"::vm.labels.SelectedUserProfiles\"></multi-select>\n            </div>\n            <!--User Roles-->\n            <div layout=\"row\" class=\"grid-view-row\" ng-if=\"vm.gridViews.userTypesSelected == vm.labels.UserRoles\" data-ng-class=\"{ 'disable': vm.gridViews.viewAccessLevel }\">\n                <multi-select option-values-all=\"vm.gridViews.getUsersRole\" option-values-selected=\"vm.gridViews.getUsersRole.model\" label-for-all=\"::vm.labels.AvailableUserRoles\" label-for-selected=\"::vm.labels.SelectedUserRoles\"></multi-select>\n            </div>\n        </div>\n        <div class=\"table-content\">\n            <table>\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th ng-if=\"vm.isCartPage()\">{{::vm.labels.DisplayType}}</th>\n                        <th>{{::vm.labels.FieldName}}</th>\n                        <th ng-if=\"vm.isCartPage()\">{{::vm.labels.CartColumn}}</th>\n                        <th></th>\n                    </tr>\n                </thead>\n                <tbody dnd-list=\"vm.columnsLists\">\n                    <tr data-ng-repeat=\"item in vm.columnsLists\" dnd-draggable=\"item\" dnd-moved=\"vm.oncolumnsListMoved($index)\" dnd-effect-allowed=\"move\" data-ng-class=\"{'errorBcgColor': item.hasError}\">\n                        <td dnd-handle>\n                            <i class=\"material-icons drag-handle\">more_vert</i>\n                        </td>\n                        <td ng-if=\"vm.isCartPage()\">\n                            <p class=\"text-label\">{{item[vm.prefix + 'DisplayType__c']}}</p>\n                        </td>\n                        <td>\n                            <material-form-field model=\"item[vm.prefix + 'FieldName__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.gridViews.fieldNamePicklist\" is-required=\"true\" class=\"input-picklist\"></material-form-field>\n                        </td>\n                        <td ng-if=\"vm.isCartPage()\">\n                            <material-form-field model=\"item[vm.prefix + 'Pinned__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"item.fieldSectionPicklist\" class=\"input-picklist\" data-ng-click=\"vm.trackSelectedRowIndex($index)\"></material-form-field>\n                        </td>\n                        <td class=\"clear\">\n                            <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeItem($index)\" data-ng-if=\"$index !== 0\"><i class=\"material-icons\">clear</i>\n                            </button>\n                        </td>\n                    </tr>\n                    <tr class=\"dndPlaceholder\">\n                        <td colspan=\"12\">Drop your list here</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        <div class=\"clearfix\">\n            <div class=\"pull-right\">\n                <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addNewCustomList()\">\n                    <i class=\"material-icons\">add</i>\n                </button>\n            </div>\n        </div>\n    </form>\n</div>"

/***/ }),
/* 658 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var createActionController = function($scope, $mdDialog, i18nService, systemConstants, applicationManagementService, data) {
	
	        var vm = this;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	
	        vm.type = applicationManagementService.getPicklistForAction().type;
	        vm.area = applicationManagementService.getPicklistForAction().area;
	        vm.action = applicationManagementService.getPicklistForAction().action;
	        vm.behavior = applicationManagementService.getPicklistForAction().behavior;
	        vm.actionItem = angular.copy(applicationManagementService.getSampleActionList());
	        vm.actionItem[vm.prefix + 'Sequence__c'] = data.sequence;
	        vm.actionItem[vm.prefix + 'DisplayAs__c'] = data.selectedType;
	        vm.actionItem[vm.prefix + 'DisplayType__c'] = data.displayType;
	        vm.actionItem['Name'] = data.Name;
	        vm.actionItem[vm.prefix + 'Flow__c'] = data.configFlow;
	        vm.actionItem[vm.prefix + 'ActionName__c'] = data.actionName;
	        vm.actionItem['isDefault'] = true;
	        if (vm.actionItem[vm.prefix + 'DisplayType__c'] === 'Cart Line Item') {
	            vm.actionItem[vm.prefix + 'ActionType__c'] = '';
	        }
	
	        /** 
	         * Save the Action Item
	         */
	        vm.save = function() {
	            if (vm.frmCreateActionORTask.$valid) {
	                $mdDialog.hide(vm.actionItem);
	            } else {
	                vm.frmCreateActionORTask.$setSubmitted();
	            }
	        };
	
	        vm.cancel = function() {
	            $mdDialog.hide();
	        };
	
	    };
	    createActionController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'applicationManagementService',
	        'data'
	    ];
	    module.exports = createActionController;
	})();


/***/ }),
/* 659 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"create-action-dialog\" ng-cloak>\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n        </i>\n    </button>\n    <md-dialog-content class=\"dialog-content\">\n        <md-tabs md-dynamic-height md-border-bottom>\n            <md-tab label=\"{{vm.labels.Navigation}}\">\n                <md-content>\n                    <form name=\"vm.frmCreateActionORTask\" novalidate>\n                        <div class=\"md-padding tab-container\">\n                            <div layout=\"row\" class=\"md-padding\">\n                                <div flex=\"20\">\n                                    {{vm.labels.Type}}\n                                </div>\n                                <div flex=\"40\">\n                                    <material-form-field model=\"vm.actionItem[vm.prefix + 'DisplayAs__c']\" field-type=\"picklist\" properties=\"vm.type\" name=\"displayAs\" is-disabled=\"true\"></material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\" class=\"md-padding\">\n                                <div flex=\"20\">\n                                    {{vm.labels.DisplayType}}\n                                </div>\n                                <div flex=\"40\">\n                                    {{vm.actionItem[vm.prefix + 'DisplayType__c']}}\n                                </div>\n                            </div>\n                            <div layout=\"row\" class=\"md-padding\">\n                                <div flex=\"20\">\n                                    {{vm.labels.Action}}\n                                </div>\n                                <div flex=\"40\">\n                                    {{vm.actionItem[vm.prefix + 'ActionName__c']}}\n                                </div>\n                            </div>\n                            <div layout=\"row\" class=\"md-padding\">\n                                <div flex=\"20\">\n                                    {{vm.labels.ActionLabelName}}\n                                </div>\n                                <div flex=\"40\" class=\"remove-asterisk\">\n                                    <material-form-field model=\"vm.actionItem[vm.prefix + 'ActionLabelName__c']\" field-type=\"string\" is-editable=\"true\" name=\"actionLabelName\" is-required=\"true\">\n                                    </material-form-field>\n                                    <div ng-messages=\"vm.frmCreateActionORTask.actionLabelName.$error\" ng-if=\"vm.frmCreateActionORTask.actionLabelName.$touched || vm.frmCreateActionORTask.$submitted \">\n                                        <p ng-message=\"required\" class=\"formError\">\n                                            {{vm.labels.ActionLabelMustBeEntered}}\n                                        </p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div layout=\"row\" class=\"md-padding\">\n                                <div flex=\"20\">\n                                    {{vm.labels.ActionArea}}\n                                </div>\n                                <div flex=\"40\">\n                                    <material-form-field model=\"vm.actionItem[vm.prefix + 'ActionArea__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.area\" name=\"area\"></material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\" class=\"md-padding\">\n                                <div flex=\"20\">\n                                    {{vm.labels.ActionStyleClass}}\n                                </div>\n                                <div flex=\"40\">\n                                    <material-form-field model=\"vm.actionItem[vm.prefix + 'ActionStyleClass__c']\" field-type=\"string\" is-editable=\"true\" name=\"styleClass\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\" class=\"md-padding\">\n                                <div flex=\"20\">\n                                    {{vm.labels.ActionPage}}\n                                </div>\n                                <div flex=\"40\">\n                                    <material-form-field model=\"vm.actionItem[vm.prefix + 'ActionPage__c']\" field-type=\"string\" is-editable=\"true\" name=\"actionPage\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\" class=\"md-padding\">\n                                <div flex=\"20\">\n                                    {{vm.labels.ActionParam}}\n                                </div>\n                                <div flex=\"40\">\n                                    <material-form-field model=\"vm.actionItem[vm.prefix + 'ActionParams__c']\" field-type=\"string\" is-editable=\"true\" name=\"actionParam\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\" class=\"md-padding\">\n                                <div flex=\"20\">\n                                    {{vm.labels.Behavior}}\n                                </div>\n                                <div flex=\"40\">\n                                    <material-form-field model=\"vm.actionItem[vm.prefix + 'Behavior__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.behavior\" name=\"behavior\"></material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\" class=\"md-padding\" data-ng-if=\"vm.actionItem.isDefault && vm.actionItem[vm.prefix + 'DisplayType__c'] === 'Cart Line Item'\">\n                                <div flex=\"20\">\n                                    {{vm.labels.ActionType}}\n                                </div>\n                                <div flex=\"40\">\n                                    <material-form-field model=\"vm.actionItem[vm.prefix + 'ActionType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.action\" name=\"actionType\"></material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\" class=\"md-padding\">\n                                <div flex=\"20\">\n                                    {{vm.labels.IsEnabled}}\n                                </div>\n                                <div flex=\"40\">\n                                    <material-form-field model=\"vm.actionItem[vm.prefix + 'IsEnabled__c']\" field-type=\"BOOLEAN\" is-editable=\"true\" element-id=\"enabled\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\" class=\"md-padding\">\n                                <div flex=\"20\">\n                                    {{vm.labels.AlwaysDisplay}}\n                                </div>\n                                <div flex=\"40\">\n                                    <material-form-field model=\"vm.actionItem[vm.prefix + 'AlwaysDisplay__c']\" field-type=\"BOOLEAN\" is-editable=\"true\" element-id=\"disabled\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                        </div>\n                    </form>\n                </md-content>\n            </md-tab>\n        </md-tabs>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancel()\">{{vm.labels.DialogCancelButton}}</button>\n        <button class=\"slds-button slds-button_brand\" ng-click=\"vm.save()\">{{vm.labels.DialogSaveButton}}</button>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 660 */
/***/ (function(module, exports) {

	module.exports = "<uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center application-management-unauthorized\">{{alert.msg}}</uib-alert>"

/***/ }),
/* 661 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var applicationManagementUnauthorizedController = function($scope, applicationManagementConstants) {
	        var vm = this;
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	        addAlert(applicationManagementConstants.accessCtrlErrorMsg, 'danger');
	
	    }
	
	    applicationManagementUnauthorizedController.$inject = [
	        '$scope',
	        'applicationManagementConstants'
	    ];
	
	    module.exports = applicationManagementUnauthorizedController;
	
	})();


/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    __webpack_require__(663);
	    __webpack_require__(666);
	    __webpack_require__(670);
	
	    module.exports = angular.module('cpqAdmin.smartSearchSettings', [
	            'cpqAdmin.smartSearchSettings.common.directives',
	            'cpqAdmin.smartSearchSettings.searchConnectionSettings',
	            'cpqAdmin.smartSearchSettings.productFieldWeightage'
	        ])
	        .constant('smartSearchSettingsConstant', __webpack_require__(674))
	        .controller('smartSearchSettingsController', __webpack_require__(675))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.smartSearchSettings', {
	                url: '/applicationManagement/smartSearchSettings',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(676),
	                        controller: 'smartSearchSettingsController',
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    applicationFeatures: ['applicationManagementService', function(applicationManagementService) {
	                        return applicationManagementService.getApplicationSettings();
	                    }]
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.smartSearchSettings.common.directives', [])
			.directive('smartSearchSettingsSubMenu', __webpack_require__(664));
	})();


/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var smartSearchSettingsSubMenuController = function($scope, i18nService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	    };
	
	    smartSearchSettingsSubMenuController.$inject = [
	        '$scope',
	        'i18nService',
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: smartSearchSettingsSubMenuController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(665),
	    };
	};


/***/ }),
/* 665 */
/***/ (function(module, exports) {

	module.exports = "<!-- Header Menu Starting -->\n<ul class=\"nav navbar-nav list-group\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.smartSearchSettings.searchConnectionSettings()\">{{::vm.labels.SearchConnectionSettings}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.smartSearchSettings.productFieldWeightage()\">{{::vm.labels.ProductFieldWeightage}}</a>\n    </li>\n</ul>\n<!--/.nav-collapse -->\n<!-- Header Menu Closed -->\n"

/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.smartSearchSettings.searchConnectionSettings', [])
	        .service('searchConnectionSettingsService', __webpack_require__(667))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.smartSearchSettings.searchConnectionSettings', {
	                parent: 'app.smartSearchSettings',
	                url: '/searchConnectionSettings',
	                views: {
	                    'smartSearchSettingsContainer': {
	                        template: __webpack_require__(668),
	                        controller: __webpack_require__(669),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    getConfigSmartSearchSettings: ['searchConnectionSettingsService', function(searchConnectionSettingsService) {
	                        return searchConnectionSettingsService.getAllDetailsForConfigSmartSearchSettings();
	                    }],
	                    getLatestActivity: ['searchConnectionSettingsService', function(searchConnectionSettingsService) {
	                        return searchConnectionSettingsService.getLatestActivityStatus();
	                    }]
	                }
	            });
	        }]);
	})();


/***/ }),
/* 667 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var searchConnectionSettingsService = function($q, remoteService, systemConstants) {
	        var prefix = systemConstants.nsPrefix || '';
	
	        function activateSmartSearch() {
	            var requestOb = {};
	            return remoteService.activateSmartSearch(requestOb);
	        }
	
	        function deactivateSmartSearch() {
	            var requestOb = {};
	            return remoteService.deactivateSmartSearch(requestOb);
	        }
	
	        function resyncSmartSearch() {
	            var requestOb = {};
	            return remoteService.resyncSmartSearch(requestOb);
	        }
	
	        function getAllDetailsForConfigSmartSearchSettings() {
	            var requestOb = {
	                "Flow": "Default"
	            };
	            return remoteService.getAllDetailsForConfigSmartSearchSettings(requestOb);
	        }
	
	        function saveSearchConnectionSettings(configSmartSearchSettings) {
	            return remoteService.saveSearchConnectionSettings(configSmartSearchSettings);
	        }
	
	        function getLatestActivityStatus() {
	            var requestOb = {};
	            return remoteService.getLatestActivityStatus(requestOb);
	        }
	
	        var searchConnectionSettingsService = {
	            activateSmartSearch: activateSmartSearch,
	            deactivateSmartSearch: deactivateSmartSearch,
	            resyncSmartSearch: resyncSmartSearch,
	            getAllDetailsForConfigSmartSearchSettings: getAllDetailsForConfigSmartSearchSettings,
	            saveSearchConnectionSettings: saveSearchConnectionSettings,
	            getLatestActivityStatus: getLatestActivityStatus
	        };
	        return searchConnectionSettingsService;
	    };
	
	    searchConnectionSettingsService.$inject = ['$q', 'remoteService', 'systemConstants'];
	
	    module.exports = searchConnectionSettingsService;
	
	})();


/***/ }),
/* 668 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"search-connection-settings\">\n<uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n<form name=\"vm.configSmartSearchSettingsForm\" novalidate>\n    <div layout=\"row\" class=\"form-text-group\">\n        <div class=\"col-xs-12 col-lg-4\">\n            <div class=\"form-group\">\n                <material-form-field title=\"{{vm.configSmartSearchSettings.UrlFieldHelpText}}\" model=\"vm.configSmartSearchSettings.EnhancedSearchUrl\" field-label=\"vm.labels.EnhancedSearchURL\" field-type=\"STRING\" is-editable=\"true\"></material-form-field>\n            </div>\n        </div>\n        <div class=\"col-xs-12 col-lg-4\">\n            <div class=\"form-group\">\n                <material-form-field model=\"vm.configSmartSearchSettings.ApiUserKey\" field-label=\"vm.labels.ApiUserKey\" field-type=\"STRING\" is-editable=\"true\"></material-form-field>\n            </div>\n        </div>\n    </div>\n</form>\n<div layout=\"row\">\n    <div class=\"col-xs-12 col-lg-4\">\n        <div class=\"form-group\">\n            <material-form-field model=\"vm.searchConnectionSettings.activated\" field-label=\"::vm.labels.Activate\" field-type=\"BOOLEAN\" is-editable=\"true\" element-id=\"activated\"></material-form-field>\n        </div>\n    </div>\n    <div class=\"col-xs-12 col-lg-4\">\n        <div class=\"form-group\">\n            <span class=\"refresh-label\">{{::vm.labels.RefreshMetadata}}</span>\n            <button class=\"slds-button slds-button_brand\" data-ng-click=\"vm.resyncSmartSearch()\">{{::vm.labels.Refresh}}</button>\n        </div>\n    </div>\n</div>\n<div layout=\"row\">\n        <fieldset class=\"search-data-sync\">\n            <legend class=\"text-primary\">{{::vm.labels.SearchDataSync}}</legend>\n            <div layout=\"row\">\n                <div class=\"col-xs-12 col-lg-4\">\n                    <label>{{::vm.labels.Action}}</label>\n                </div>\n                <div class=\"col-xs-12 col-lg-4\">\n                    <label>{{vm.getLatestActivity.Action}}</label>\n                </div>\n            </div>\n            <hr/>\n            <div layout=\"row\">\n                <div class=\"col-xs-12 col-lg-4\">\n                    <label>{{::vm.labels.Message}}</label>\n                </div>\n                <div class=\"col-xs-12 col-lg-4\">\n                    <label>{{vm.getLatestActivity.Message}}</label>\n                </div>\n            </div>\n            <hr/>\n            <div layout=\"row\">\n                <div class=\"col-xs-12 col-lg-4\">\n                    <label>{{::vm.labels.StatusCode}}</label>\n                </div>\n                <div class=\"col-xs-12 col-lg-4\">\n                    <label>{{vm.getLatestActivity.StatusCode}}</label>\n                </div>\n            </div>\n            <hr/>\n            <div layout=\"row\">\n                <div class=\"col-xs-12 col-lg-4\">\n                    <label>{{::vm.labels.LastAttemptedSync}}</label>\n                </div>\n                <div class=\"col-xs-12 col-lg-4\">\n                    <label>{{vm.getLatestActivity.LastAttemptedSync}}</label>\n                </div>\n            </div>\n            <hr/>\n            <div layout=\"row\">\n                <div class=\"col-xs-12 col-lg-4\">\n                    <label>{{::vm.labels.LastSuccessfulSync}}</label>\n                </div>\n                <div class=\"col-xs-12 col-lg-4\">\n                    <label>{{vm.getLatestActivity.LastSuccessfulSync}}</label>\n                </div>\n            </div>\n        </fieldset>\n</div>\n<div class=\"search-connection-settings-footer\">\n    <div class=\"container-fluid\">\n        <span><span class=\"help-text-align\" ng-click=\"vm.showModal($event)\">{{vm.labels.ClickHere}}</span class=\"help-text-align\"> {{vm.labels.CustomSettingsMaintenanceJob}}</span>\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToApplicationManagement()\">{{vm.labels.DialogCancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\" data-ng-disabled=\"vm.isDisabledSaveButton\">{{vm.labels.DialogSaveButton}}</a>\n    </div>\n</div>\n</div>\n<custom-settings-maintenance ng-if=\"vm.displayModal\" event=\"vm.event maintenance\" maintenance=\"customSettingsMaintenance\"></custom-settings-maintenance>\n"

/***/ }),
/* 669 */
/***/ (function(module, exports) {

	(function() {
	    var smartSearchSettingsSearchConnectionSettingsController = function($scope, $state, $timeout, i18nService, cpqAdminConstants, applicationService, smartSearchSettingsConstant, searchConnectionSettingsService, getConfigSmartSearchSettings, getLatestActivity) {
	        var vm = this,
	            initializing = true;
	        vm.labels = i18nService.CustomLabel;
	        vm.getLatestActivity = getLatestActivity;
	        vm.isDisabledSaveButton = false; // flag to disable the save button while do the Activation/Deactivation/Refresh
	        vm.displayModal = false;
	
	        /**
	         * - Assign inital value for apiUserKey and enhancedSearchUrl
	         */
	        vm.configSmartSearchSettings = {
	            "ApiUserKey": getConfigSmartSearchSettings.ApiUserKey || '',
	            "EnhancedSearchUrl": getConfigSmartSearchSettings.EnhancedSearchUrl || '',
	            "UrlFieldHelpText" : getConfigSmartSearchSettings.UrlFieldHelpText || ''
	        }
	
	        vm.searchConnectionSettings = {
	            "activated": false
	        };
	
	        /**
	         * - Method for create the activate the smart search 
	         */
	        function activateSmartSearch() {
	            vm.isDisabledSaveButton = true;
	            searchConnectionSettingsService.activateSmartSearch().then(function(response) {
	                if (response && response.SyncStatus) {
	                    vm.getLatestActivity = response.SyncStatus;
	                    if (response.SyncStatus.Action === 'ACTIVATE')
	                        addAlert(vm.labels.SmartSearchActivateMessage, cpqAdminConstants.SUCCESS);
	                }
	                vm.isDisabledSaveButton = false;
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        /**
	         * - Method for deactivate the smart search 
	         */
	        function deactivateSmartSearch() {
	            vm.isDisabledSaveButton = true;
	            searchConnectionSettingsService.deactivateSmartSearch().then(function(response) {
	                if (response && response.SyncStatus) {
	                    vm.getLatestActivity = response.SyncStatus;
	                    if (response.SyncStatus.Action === 'DEACTIVATE')
	                        addAlert(vm.labels.SmartSearchDeactivateMessage, cpqAdminConstants.SUCCESS);
	                }
	                vm.isDisabledSaveButton = false;
	            }, function() {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        /**
	         * - Method for finding the current status of smart search (activated or not)
	         */
	        function isActivatedSmartSearch() {
	            if (getLatestActivity && getLatestActivity.IsActivateDisabled && !getLatestActivity.IsResyncDisabled && !getLatestActivity.IsDeactivateDisabled)
	                vm.searchConnectionSettings.activated = true;
	            else
	                vm.searchConnectionSettings.activated = false;
	        }
	        isActivatedSmartSearch();
	
	        /**
	         * - Method for resync the smart search 
	         */
	        vm.resyncSmartSearch = function() {
	            vm.isDisabledSaveButton = true;
	            searchConnectionSettingsService.resyncSmartSearch().then(function(response) {
	                if (response && response.SyncStatus) {
	                    vm.getLatestActivity = response.SyncStatus;
	                    if (response.SyncStatus.Action === 'RESYNC')
	                        addAlert(vm.labels.SmartSearchRefreshMessage, cpqAdminConstants.SUCCESS);
	                }
	                vm.isDisabledSaveButton = false;
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        };
	
	        /**
	         * - Watch Activate toggle button
	         */
	        var deRegisterFunc = $scope.$watch('vm.searchConnectionSettings.activated', function(newValue, oldValue) {
	            // flag for stop method call on page load
	            if (initializing) {
	                $timeout(function() { initializing = false; });
	            } else {
	                if (newValue) {
	                    activateSmartSearch();
	                } else {
	                    deactivateSmartSearch();
	                }
	            }
	        });
	
	        function savePage(e, toState, toParams) {
	            if (!vm.isDisabledSaveButton) {
	                if (vm.configSmartSearchSettingsForm.$dirty) {
	                    searchConnectionSettingsService.saveSearchConnectionSettings(vm.configSmartSearchSettings)
	                        .then(function(response) {
	                            vm.configSmartSearchSettings = {
	                                "ApiUserKey": response.ApiUserKey,
	                                "EnhancedSearchUrl": response.EnhancedSearchUrl
	                            };
	                            vm.configSmartSearchSettingsForm.$setPristine();
	                            processUpdateStatus(e, toState, toParams);
	                            addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                } else {
	                    processUpdateStatus(e, toState, toParams);
	                    addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	                }
	            }
	        }
	
	        function processUpdateStatus(event, toState, toParams) {
	            if (event) {
	                if (toState) {
	                    vm.alert = [];
	                    $state.go(toState, toParams);
	                }
	            }
	        }
	
	        /** 
	         * - This method is call while user click the save button
	         */
	        vm.explicitPageSave = function() {
	            savePage();
	        }
	
	        /**
	         * When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed incase of errors in saving the page.
	         *
	         * If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.applicationManagement.settingGroup' || !vm.configSmartSearchSettingsForm.$dirty) {
	                return true;
	            } else {
	                e.preventDefault();
	                savePage(e, toState, toParams);
	            }
	        });
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            vm = null;
	        });
	
	        /**
	         * - goto the application management while click the cancel button
	         */
	        vm.goToApplicationManagement = function() {
	            $state.go('app.applicationManagement.settingGroup', { 'id': null });
	        }
	
	        vm.showModal = function ($event) {
	            vm.event = $event;
	            vm.displayModal = true;            
	        }
	
	    };
	
	    smartSearchSettingsSearchConnectionSettingsController.$inject = [
	        '$scope',
	        '$state',
	        '$timeout',
	        'i18nService',
	        'cpqAdminConstants',
	        'applicationService',
	        'smartSearchSettingsConstant',
	        'searchConnectionSettingsService',
	        'getConfigSmartSearchSettings',
	        'getLatestActivity'
	    ];
	
	    module.exports = smartSearchSettingsSearchConnectionSettingsController;
	})();


/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.smartSearchSettings.productFieldWeightage', [])
	        .service('productFieldWeightageService', __webpack_require__(671))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.smartSearchSettings.productFieldWeightage', {
	                parent: 'app.smartSearchSettings',
	                url: '/productFieldWeightage',
	                views: {
	                    'smartSearchSettingsContainer': {
	                        template: __webpack_require__(672),
	                        controller: __webpack_require__(673),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    getProductFieldsPicklist: ['productFieldWeightageService', function(productFieldWeightageService) {
	                        return productFieldWeightageService.getProductFieldsPicklist();
	                    }],
	                    getWeightagePicklist: ['productFieldWeightageService', function(productFieldWeightageService) {
	                        return productFieldWeightageService.getWeightagePicklist();
	                    }],
	                    getFlowPicklist: ['productFieldWeightageService', function(productFieldWeightageService) {
	                        return productFieldWeightageService.getFlowPicklist();
	                    }]
	                }
	            });
	        }]);
	})();


/***/ }),
/* 671 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var productFieldWeightageService = function($q, remoteService, systemConstants) {
	        var prefix = systemConstants.nsPrefix || '';
	
	        function getProductFieldsPicklist() {
	            var deferQ = $q.defer();
	            remoteService.getProductDetails('', prefix + 'ProductDetailFields')
	                .then(function(response) {
	                    deferQ.resolve(prepareProductFieldsPicklist(response.ProductFields));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function prepareProductFieldsPicklist(productFields) {
	            var response = [];
	            for (var index = 0; index < productFields.length; index++) {
	                var temp = {
	                    label: "",
	                    value: undefined
	                };
	                temp.label = productFields[index].FieldLabel;
	                temp.value = productFields[index].FieldName;
	                response.push(temp);
	            }
	            return response;
	        }
	
	        function getWeightagePicklist() {
	            var picklistValues = [];
	            for (var index = 0; index <= 100; index += 5) {
	                var label = index + "%",
	                    picklistValue = {
	                        "label": label,
	                        "value": index
	                    };
	                picklistValues.push(picklistValue);
	            }
	            return picklistValues;
	        }
	
	        function sampleDisplayColumn() {
	            var DisplayColumns = {};
	            DisplayColumns[prefix + "Typeahead__c"] = false;
	            DisplayColumns[prefix + "FieldName__c"] = "Name";
	            DisplayColumns[prefix + "Weightage__c"] = "100";
	            return DisplayColumns;
	        }
	
	        function getFlowPicklist() {
	            var deferQ = $q.defer();
	            remoteService.getApplicationFlows()
	                .then(function(response) {
	                    deferQ.resolve(prepareFlowPicklist(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function prepareFlowPicklist(flows) {
	            var picklistValues = [];
	            for (var index = 0; index < flows.length; index++) {
	                var flowsName = flows[index].FlowSO.Name,
	                    picklistValue = {
	                        'label': flowsName,
	                        'value': flowsName
	                    };
	                picklistValues.push(picklistValue);
	            }
	            return picklistValues;
	        }
	
	        function getDisplayColumnsForType(flowName) {
	            var requestOb = {
	                "Flow": flowName
	            };
	            return remoteService.getDisplayColumnsForType(requestOb);
	        }
	
	        function saveDisplayColumns(displayColumnsList) {
	            return remoteService.saveDisplayColumns(displayColumnsList);
	        }
	
	        var productFieldWeightageService = {
	            getProductFieldsPicklist: getProductFieldsPicklist,
	            getWeightagePicklist: getWeightagePicklist,
	            getFlowPicklist: getFlowPicklist,
	            sampleDisplayColumn: sampleDisplayColumn,
	            getDisplayColumnsForType: getDisplayColumnsForType,
	            saveDisplayColumns: saveDisplayColumns
	        };
	        return productFieldWeightageService;
	    };
	
	    productFieldWeightageService.$inject = ['$q', 'remoteService', 'systemConstants'];
	
	    module.exports = productFieldWeightageService;
	
	})();


/***/ }),
/* 672 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"product-field-weightage\">\n    <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n    <div layout=\"row\" class=\"product-field-weightage-flow\">\n        <div class=\"pull-left field-label\">\n            {{::vm.labels.Flow}}\n        </div>\n        <div class=\"pull-left field-input\">\n            <material-form-field model=\"vm.productFieldWeightageFlow\" field-type=\"picklist\" properties=\"vm.flowPicklist\" name=\"productFieldWeightageFlow\" is-editable=\"true\"></material-form-field>\n        </div>\n    </div>\n    <div class=\"table-content\">\n        <form name=\"vm.displayColumnsForm\" novalidate>\n            <table>\n                <thead>\n                    <tr>\n                        <th class=\"sequence\">{{::vm.labels.Sequence}}</th>\n                        <th>{{::vm.labels.FieldName}}</th>\n                        <th class=\"typeahead\">{{::vm.labels.Typeahead}}</th>\n                        <th>{{::vm.labels.Weightage}}</th>\n                        <th class=\"action\">{{::vm.labels.Action}}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr data-ng-repeat=\"item in vm.displayColumnsList track by $index\" data-ng-class=\"{'errorBcgColor': item.hasError}\">\n                        <td class=\"sequence\">{{item[vm.prefix + 'Sequence__c']}}</td>\n                        <td>\n                            <material-form-field model=\"item[vm.prefix + 'FieldName__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.fieldNamePicklist\" class=\"input-picklist\"></material-form-field>\n                        </td>\n                        <td class=\"typeahead\">\n                            <material-form-field model=\"item[vm.prefix + 'Typeahead__c']\" field-type=\"checkbox\" is-editable=\"true\" on-click=\"vm.onTypeaheadCheckboxFieldClick($index, item[vm.prefix + 'Typeahead__c'])\"></material-form-field>\n                        </td>\n                        <td>\n                            <material-form-field model=\"item[vm.prefix + 'Weightage__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.weightagePicklist\" class=\"input-picklist\"></material-form-field>\n                        </td>\n                        <td class=\"action\">\n                            <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeDisplayColumns($index)\"><i class=\"material-icons\" >clear</i>\n                            </button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </form>\n    </div>\n    <div class=\"clearfix\">\n        <div class=\"pull-right\">\n            <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addNewDisplayColumns()\">\n                <i class=\"material-icons\">add</i>\n            </button>\n        </div>\n    </div>\n    <div class=\"product-field-weightage-footer\">\n        <div class=\"container-fluid\">\n            <span><span class=\"help-text-align\" ng-click=\"vm.showModal($event)\">{{vm.labels.ClickHere}}</span> {{vm.labels.CustomSettingsMaintenanceJob}}</span>\n            <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToApplicationManagement()\">{{vm.labels.DialogCancelButton}}</a>\n            <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.explicitPageSave()\">{{vm.labels.DialogSaveButton}}</a>\n        </div>\n    </div>\n</div>\n<custom-settings-maintenance ng-if=\"vm.displayModal\" event=\"vm.event maintenance\" maintenance=\"customSettingsMaintenance\"></custom-settings-maintenance>\n"

/***/ }),
/* 673 */
/***/ (function(module, exports) {

	(function() {
	    var smartSearchSettingsProductFieldWeightageController = function($scope, $state, i18nService, systemConstants, cpqAdminConstants, smartSearchSettingsConstant, applicationService, productFieldWeightageService, getProductFieldsPicklist, getWeightagePicklist, getFlowPicklist) {
	        var vm = this;
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.displayModal = false;
	        vm.fieldNamePicklist = { 'PicklistValues': getProductFieldsPicklist };
	        vm.weightagePicklist = { 'PicklistValues': getWeightagePicklist };
	        vm.flowPicklist = { 'PicklistValues': getFlowPicklist, 'methodToCallInController': onChangeFlowPicklist };
	
	        // Get displayColumns data on inital page load
	        function loadDisplayColumns() {
	            if (getFlowPicklist && getFlowPicklist.length) {
	                var activeIndex = isFlowPicklistContainsNGDefault();
	                if (activeIndex) {
	                    vm.productFieldWeightageFlow = getFlowPicklist[activeIndex].value;
	                    onChangeFlowPicklist(getFlowPicklist[activeIndex].value);
	                } else {
	                    vm.productFieldWeightageFlow = getFlowPicklist[0].value;
	                    onChangeFlowPicklist(getFlowPicklist[0].value);
	                }
	            }
	        }
	        loadDisplayColumns();
	
	        /**
	         * - Find flow picklist contains NGDefault. 
	         * - If NGDefault is available. We should activate select picklist as NGDefault on page load
	         * - else activate first picklist as picklist value.
	         */
	        function isFlowPicklistContainsNGDefault() {
	            var activeIndex = undefined,
	                index, getFlowPicklistLength = getFlowPicklist.length;
	            for (index = 0; index < getFlowPicklistLength; index++) {
	                var flowName = ((getFlowPicklist[index].value).replace(/\s/g, '')).toLowerCase();
	                if (flowName === smartSearchSettingsConstant.NGDefault) {
	                    activeIndex = index;
	                }
	            }
	            return activeIndex;
	        }
	
	        /**
	         * - This method for get the display column data based on the flow name
	         */
	        function getDisplayColumnsForType(flowName) {
	            productFieldWeightageService.getDisplayColumnsForType(flowName).then(function(response) {
	                // validate if display columns is empty or not
	                // If display columns is empty, we should create new display column list with default value
	                if (response && response.DisplayColumns && response.DisplayColumns.length) {
	                    vm.displayColumnsList = response.DisplayColumns;
	                } else {
	                    vm.displayColumnsList = [];
	                    vm.addNewDisplayColumns();
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        /**
	         * - This method is call while user change the flow name from the picklist
	         */
	        function onChangeFlowPicklist(flowName) {
	            getDisplayColumnsForType(flowName);
	        }
	
	        /**
	         * - This method is call while add button for add new display column
	         */
	        vm.addNewDisplayColumns = function() {
	            var displayColumns = productFieldWeightageService.sampleDisplayColumn();
	            displayColumns[vm.prefix + 'Sequence__c'] = vm.displayColumnsList.length + 1;
	            displayColumns[vm.prefix + 'Flow__c'] = vm.productFieldWeightageFlow;
	            vm.displayColumnsList.push(displayColumns);
	            vm.displayColumnsForm.$setDirty();
	        };
	
	        /**
	         * - This method is call while cremove button for remove the display column
	         */
	        vm.removeDisplayColumns = function(index) {
	            if (vm.displayColumnsList && vm.displayColumnsList.length === 1) {
	                vm.displayColumnsList[0][vm.prefix + "Typeahead__c"] = true;
	                vm.displayColumnsList[0][vm.prefix + "FieldName__c"] = "Name";
	                vm.displayColumnsList[0][vm.prefix + "Weightage__c"] = "100";
	            } else {
	                vm.displayColumnsList.splice(index, 1);
	                setSequenceForDisplayColumnsList(index);
	            }
	            vm.displayColumnsForm.$setDirty();
	        };
	
	        /**
	         * - Call this method for set the sequnce number to display columns record
	         */
	        function setSequenceForDisplayColumnsList(startingRowIndex) {
	            for (var key = startingRowIndex; key < vm.displayColumnsList.length; key++) {
	                vm.displayColumnsList[key][vm.prefix + 'Sequence__c'] = key + 1;
	            }
	        }
	
	        /**
	         * - This method is call for identify the duplicate field name
	         */
	        function isDuplicateFieldName() {
	            var sorted, item,
	                notMaintained = false,
	                fieldName = [vm.prefix + 'FieldName__c'];
	            sorted = vm.displayColumnsList.concat().sort(function(a, b) {
	                if (a[fieldName] > b[fieldName]) return 1;
	                if (a[fieldName] < b[fieldName]) return -1;
	                return 0;
	            });
	            for (item in vm.displayColumnsList) {
	                if (!isNaN(parseInt(item, 10))) {
	                    sorted[item].hasError = ((sorted[item - 1] && sorted[item - 1][fieldName] === sorted[item][fieldName]) || (sorted[item + 1] && sorted[item + 1][fieldName] === sorted[item][fieldName]));
	                    if (sorted[item].hasError) {
	                        notMaintained = true;
	                    }
	                }
	            }
	            return notMaintained;
	        }
	
	        /**
	         * - This method is call for identify total weightage percentage 
	         */
	        function isWeightageNotEqualToHundred() {
	            var totalWeightage = 0,
	                weightage = [vm.prefix + 'Weightage__c'],
	                index;
	            for (index = 0; index < vm.displayColumnsList.length; index++) {
	                totalWeightage += parseInt(vm.displayColumnsList[index][weightage]);
	            }
	            if (totalWeightage === 100) {
	                return false;
	            } else {
	                return true;
	            }
	        }
	
	        /**
	         * - This method is call on click the typeahead checkbox
	         */
	        vm.onTypeaheadCheckboxFieldClick = function(index, typeaheadValue) {
	            if (typeaheadValue) {
	                var key, displayColumnsListLength = vm.displayColumnsList.length;
	                for (key = 0; key < displayColumnsListLength; key++) {
	                    if (key !== index) {
	                        var typeahead = vm.displayColumnsList[key][vm.prefix + 'Typeahead__c'];
	                        if (typeahead) {
	                            vm.displayColumnsList[key][vm.prefix + 'Typeahead__c'] = false;
	                        }
	                    }
	                }
	            }
	        };
	
	        /**
	         * - This method is call for finding typeahead is selected is a row or not
	         */
	        function isaRowTypeaheadEnabled() {
	            var index, isTypeaheadSelected = undefined;
	            for (index = 0; index < vm.displayColumnsList.length; index++) {
	                if (vm.displayColumnsList[index][vm.prefix + 'Typeahead__c']) {
	                    isTypeaheadSelected = true;
	                    break;
	                }
	            }
	            return isTypeaheadSelected;
	        }
	
	        /**
	         * - This method is used for save the display column data
	         */
	        function savePage(e, toState, toParams) {
	            if (vm.displayColumnsForm.$dirty) {
	                if (vm.displayColumnsList.length) {
	                    if (isDuplicateFieldName()) {
	                        addAlert(vm.labels.FieldNameMustBeUnique, cpqAdminConstants.DANGER);
	                    } else if (isWeightageNotEqualToHundred()) {
	                        addAlert(vm.labels.WeightageMustBeHundred, cpqAdminConstants.DANGER);
	                    } else if (!isaRowTypeaheadEnabled()) {
	                        addAlert(vm.labels.TypeaheadMustBeChecked, cpqAdminConstants.DANGER);
	                    } else {
	                        productFieldWeightageService.saveDisplayColumns(prepareDisplayColumns())
	                            .then(function(response) {
	                                vm.displayColumnsList = response.DisplayColumns || [];
	                                vm.displayColumnsForm.$setPristine();
	                                processUpdateStatus(e, toState, toParams);
	                                addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                    }
	                } else {
	                    vm.displayColumnsForm.$setPristine();
	                    processUpdateStatus(e, toState, toParams);
	                }
	            } else {
	                processUpdateStatus(e, toState, toParams);
	                addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	            }
	        }
	
	        function prepareDisplayColumns() {
	            var displayColumnsList = {
	                    "Flow": vm.productFieldWeightageFlow
	                },
	                index, displayColumnsListLength = vm.displayColumnsList.length;
	            for (index = 0; index < displayColumnsListLength; index++) {
	                if (vm.displayColumnsList[index].hasError) {
	                    delete vm.displayColumnsList[index].hasError;
	                }
	            }
	            displayColumnsList["DisplayColumns"] = vm.displayColumnsList;
	            return displayColumnsList;
	        }
	
	        function processUpdateStatus(event, toState, toParams) {
	            if (event) {
	                if (toState) {
	                    vm.alert = [];
	                    $state.go(toState, toParams);
	                }
	            }
	        }
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        /** 
	         * - This method is call while user click the save button
	         */
	        vm.explicitPageSave = function() {
	            savePage();
	        }
	
	        /**
	         * When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed incase of errors in saving the page.
	         *
	         * If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if ((toState.name === 'app.applicationManagement.settingGroup' && toParams.id === null) || !vm.displayColumnsForm.$dirty) {
	                return true;
	            } else {
	                e.preventDefault();
	                savePage(e, toState, toParams);
	            }
	        });
	
	        /**
	         * - This method is used for goto the application management page while user click the cancel button
	         */
	        vm.goToApplicationManagement = function() {
	            $state.go('app.applicationManagement.settingGroup', { 'id': null });
	        }
	
	        vm.showModal = function ($event) {
	            vm.event = $event;
	            vm.displayModal = true;            
	        }
	
	    };
	
	    smartSearchSettingsProductFieldWeightageController.$inject = [
	        '$scope',
	        '$state',
	        'i18nService',
	        'systemConstants',
	        'cpqAdminConstants',
	        'smartSearchSettingsConstant',
	        'applicationService',
	        'productFieldWeightageService',
	        'getProductFieldsPicklist',
	        'getWeightagePicklist',
	        'getFlowPicklist'
	    ];
	
	    module.exports = smartSearchSettingsProductFieldWeightageController;
	})();


/***/ }),
/* 674 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var constants = {
	        NGDefault: 'ngdefault',
	        activate: 'ACTIVATE'
	    };
	
	    module.exports = constants;
	
	})();


/***/ }),
/* 675 */
/***/ (function(module, exports) {

	(function() {
	    var smartSearchSettingsController = function($scope, $state, i18nService, applicationService, applicationManagementService, applicationFeatures) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	
	        applicationManagementService.setApplicationFeatures(applicationFeatures.ApplicationFeatureDOs); // Set the application features Details in application service
	        vm.applicationFeatures = applicationManagementService.getApplicationFeatures(); // Contains all application features Destails
	
	        /**
	         * This method call while user click the application feature from the left panel
	         */
	        vm.goToApplicationManagament = function(settingGroupId) {
	            //  For identify this application feature contains setting group or not
	            if (settingGroupId) {
	                $state.go('app.applicationManagement.settingGroup', { 'id': settingGroupId });
	            } else {
	                var errorDetails = {
	                    message: vm.labels.NoRecordsToDisplay
	                };
	                applicationService.showErrorMessage(errorDetails);
	            }
	        };
	    };
	
	    smartSearchSettingsController.$inject = [
	        '$scope',
	        '$state',
	        'i18nService',
	        'applicationService',
	        'applicationManagementService',
	        'applicationFeatures'
	    ];
	
	    module.exports = smartSearchSettingsController;
	})();


/***/ }),
/* 676 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"smart-search-settings-main-Container\">\n    <div class=\"smart-search-settings-header title-bar\">\n        <div class=\"smart-search-settings-title-container\">\n            <div href=\"#\" title=\"{{vm.selectedFeaturesTitle}}\">\n                <i class=\"fa fa-image\"></i>\n                <span class=\"title\">{{::vm.labels.SmartSearchSettings}}</span>\n            </div>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse noPadding\">\n            <smart-search-settings-sub-menu></smart-search-settings-sub-menu>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n    <div class=\"smart-search-settings-center-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <application-feature-side-menu application-features-list=\"vm.applicationFeatures.leftSideList\" selected-application-feature-name=\"vm.labels.SmartSearchSettings\"></application-feature-side-menu>\n        </div>\n        <!-- Content layout starts -->\n        <div ui-view=\"smartSearchSettingsContainer\" class=\"smart-search-settings-container\"></div>\n        <!-- Content layout ends -->\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>"

/***/ }),
/* 677 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    __webpack_require__(678);
	
	    module.exports = angular.module('cpqAdmin.objectSummarySettings', [
	            'cpqAdmin.objectSummarySettings.common.directives',
	        ])
	        .service('objectSummarySettingsService', __webpack_require__(681))
	        .controller('objectSummarySettingsController', __webpack_require__(682))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.objectSummarySettings', {
	                url: '/applicationManagement/objectSummarySettings',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(683),
	                        controller: 'objectSummarySettingsController',
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    applicationFeatures: ['applicationManagementService', function(applicationManagementService) {
	                        return applicationManagementService.getApplicationSettings();
	                    }],
	                    objectSummarySettingsList: ['objectSummarySettingsService', function(objectSummarySettingsService) {
	                        return objectSummarySettingsService.getAllObjectSummarySettings();
	                    }],
	                    getProposalPicklistValues: ['objectSummarySettingsService', function(objectSummarySettingsService) {
	                        return objectSummarySettingsService.getFieldDescribe('Apttus_Proposal__Proposal__c');
	                    }],
	                    getProductPicklistValues: ['objectSummarySettingsService', function(objectSummarySettingsService) {
	                        return objectSummarySettingsService.getFieldDescribe('Product2');
	                    }],
	                    getFavoriteConfigPicklistValues: ['systemConstants', 'objectSummarySettingsService', function(systemConstants, objectSummarySettingsService) {
	                        var prefix = systemConstants.nsPrefix || '';
	                        return objectSummarySettingsService.getFieldDescribe(prefix + 'FavoriteConfiguration__c');
	                    }]
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.objectSummarySettings.common.directives', [])
			.directive('objectSummarySettingsSubMenu', __webpack_require__(679));
	})();


/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var objectSummarySettingsSubMenuController = function($scope, i18nService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	    };
	
	    objectSummarySettingsSubMenuController.$inject = [
	        '$scope',
	        'i18nService',
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: objectSummarySettingsSubMenuController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(680),
	    };
	};


/***/ }),
/* 680 */
/***/ (function(module, exports) {

	module.exports = "<!-- Header Menu Starting -->\n<ul class=\"nav navbar-nav list-group\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.objectSummarySettings\">{{::vm.labels.ObjectSummarySettings}}</a>\n    </li>\n</ul>\n<!--/.nav-collapse -->\n<!-- Header Menu Closed -->\n"

/***/ }),
/* 681 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var objectSummarySettingsService = function($q, remoteService, systemConstants) {
	
	        var prefix = systemConstants.nsPrefix || '';
	
	        function sampleObjcetSummarySetting() {
	            var objectSummarySetting = {
	                "Name": ""
	            };
	            objectSummarySetting[prefix + "DisplayFields__c"] = "";
	            objectSummarySetting[prefix + "ObjectName__c"] =  "";
	            return objectSummarySetting;
	        }
	
	        function getAllObjectSummarySettings() {
	            var reqObj = {
	                "SearchString": ""
	            };
	            return remoteService.getAllObjectSummarySettings(reqObj);
	        }
	
	        function deleteObjectSummarySettings(Ids) {
	            var reqObj = { ObjectSummarySettingsIds: Ids }
	            return remoteService.deleteObjectSummarySettings(reqObj);
	        }
	
	        function saveObjectSummarySettings(objectSummarySettingsList) {
	            var reqObj = { "ObjectSummarySettingsSOs": objectSummarySettingsList };
	            return remoteService.saveObjectSummarySettings(reqObj);
	        }
	
	        function getFieldDescribe(refSObjectName) {
	            var reqObj = {
	                    "refSObjectName": refSObjectName,
	                    "isRef": false
	                },
	                deferQ = $q.defer();
	            remoteService.getFieldDescribe(reqObj).then(function(response) {
	                deferQ.resolve(prepareGetFieldDescribe(response));
	            }, function(reason) {
	                deferQ.reject(response);
	            });
	            return deferQ.promise;
	        }
	
	        function prepareGetFieldDescribe(data) {
	            var picklistValues = [],
	                data = JSON.parse(data);
	            if (data && data.fields && data.fields.length) {
	                var fields = data.fields,
	                    index, fieldsLength = fields.length;
	                for (index = 0; index < fieldsLength; index++) {
	                    var picklist = {
	                        label: fields[index].label,
	                        value: fields[index].apiDisplayName
	                    }
	                    picklistValues.push(picklist);
	                }
	            }
	            return {
	                'PicklistValues': picklistValues
	            };
	        }
	
	        var objectSummarySettingsService = {
	            sampleObjcetSummarySetting: sampleObjcetSummarySetting,
	            getAllObjectSummarySettings: getAllObjectSummarySettings,
	            deleteObjectSummarySettings: deleteObjectSummarySettings,
	            saveObjectSummarySettings: saveObjectSummarySettings,
	            getFieldDescribe: getFieldDescribe
	        };
	        return objectSummarySettingsService;
	    };
	
	    objectSummarySettingsService.$inject = ['$q', 'remoteService', 'systemConstants'];
	
	    module.exports = objectSummarySettingsService;
	
	})();


/***/ }),
/* 682 */
/***/ (function(module, exports) {

	(function() {
	    var objectSummarySettingsController = function($scope, $state, $q, i18nService, applicationService, cpqAdminConstants, systemConstants, applicationManagementService, applicationFeatures, objectSummarySettingsService, objectSummarySettingsList, getProposalPicklistValues, getProductPicklistValues, getFavoriteConfigPicklistValues) {
	        var vm = this,
	            isFormSave = false;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.displayModal = false;
	
	        applicationManagementService.setApplicationFeatures(applicationFeatures.ApplicationFeatureDOs); // Set the application features Details in application service
	        vm.applicationFeatures = applicationManagementService.getApplicationFeatures(); // Contains all application features Destails
	
	        vm.objectNamePicklistValues = {
	            'PicklistValues': [{
	                'label': vm.labels.FavoriteConfiguration,
	                'value': vm.prefix + 'FavoriteConfiguration__c'
	            }, {
	                'label': vm.labels.Proposal,
	                'value': 'Apttus_Proposal__Proposal__c'
	            }, {
	                'label': vm.labels.Product2,
	                'value': 'Product2'
	            }],
	            'methodToCallInController': onChangeConfigFlowPicklist
	        };
	        vm.proposalPicklistValue = getProposalPicklistValues; // Contains the Proposal picklist values
	        vm.productPicklistValues = getProductPicklistValues; // Contains the Products2  picklist values
	        vm.favoriteConfigPicklistValue = getFavoriteConfigPicklistValues; // Contains the Favorite Config picklist values
	        vm.configPicklistValue = { 'PicklistValues': [] };
	        vm.objectSummarySettingsList = prepareObjectSummarySettingForDisplay(objectSummarySettingsList.ObjectSummarySettingsSOs);
	
	        /**
	         * - This method call while change the object name piclist value
	         */
	        function onChangeConfigFlowPicklist() {
	            vm.objectSummarySettingsList[vm.trackSelectedRowIndex][vm.prefix + 'DisplayFields__c'] = '';
	            isFormSave = true;
	            vm.objectSummarySettingsForm.$setDirty();
	        }
	
	        /**
	         * - This method call for render the object summary setting display
	         */
	        function prepareObjectSummarySettingForDisplay(objectSummarySettings) {
	            if (objectSummarySettings && objectSummarySettings.length) {
	                objectSummarySettings.filter(function(objectSummarySetting) {
	                    var displayField = objectSummarySetting[vm.prefix + 'DisplayFields__c'];
	                    if (displayField) {
	                        objectSummarySetting[vm.prefix + 'DisplayFields__c'] = displayField.split(",");
	                    }
	                });
	            }
	            return objectSummarySettings;
	        }
	
	        vm.addNewObjectsummarySetting = function() {
	            var sampleObjectSetting = objectSummarySettingsService.sampleObjcetSummarySetting();
	            vm.objectSummarySettingsList.push(sampleObjectSetting);
	            vm.objectSummarySettingsForm.$setDirty();
	        };
	
	        vm.removeObjectSummarySetting = function(index, Id) {
	            if (Id) {
	                objectSummarySettingsService.deleteObjectSummarySettings([Id]).then(function(response) {
	                    vm.objectSummarySettingsList.splice(index, 1);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else {
	                vm.objectSummarySettingsList.splice(index, 1);
	            }
	        };
	
	        /**
	         * - This method is used for save the object summary setting data
	         */
	        function savePage(e, toState, toParams) {
	            if (vm.objectSummarySettingsForm.$dirty || isFormSave) {
	                if (vm.objectSummarySettingsList.length) {
	                    if (isFieldNotDefined('Name').notMaintained) {
	                        var indices = isFieldNotDefined('Name').indices;
	                        indices.length > 0 ? updateErrorAttributeOfAction(indices) : angular.noop();
	                        addAlert(vm.labels.NameMustBeEntered, 'danger');
	                    } else if (isFieldNotDefined(vm.prefix + 'ObjectName__c').notMaintained) {
	                        var indices = isFieldNotDefined(vm.prefix + 'ObjectName__c').indices;
	                        indices.length > 0 ? updateErrorAttributeOfAction(indices) : angular.noop();
	                        addAlert(vm.labels.ObjectNameMustBeEntered, 'danger');
	                    } else if (isDuplicateFieldName('Name')) {
	                        addAlert(vm.labels.NameMustBeUnique, 'danger');
	                    } else if (isDuplicateFieldName(vm.prefix + 'ObjectName__c')) {
	                        addAlert(vm.labels.ObjectNameMustBeUnique, 'danger');
	                    } else {
	                        var payload = prepareObjectSummarySettingsForSave(vm.objectSummarySettingsList);
	                        objectSummarySettingsService.saveObjectSummarySettings(payload)
	                            .then(function(response) {
	                                vm.objectSummarySettingsList = prepareObjectSummarySettingForDisplay(response.ObjectSummarySettingsSOs);
	                                vm.objectSummarySettingsForm.$setPristine();
	                                isFormSave = false;
	                                processUpdateStatus(e, toState, toParams);
	                                addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                    }
	                } else {
	                    vm.objectSummarySettingsForm.$setPristine();
	                    processUpdateStatus(e, toState, toParams);
	                }
	            } else {
	                processUpdateStatus(e, toState, toParams);
	                addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	            }
	        }
	
	        function prepareObjectSummarySettingsForSave(objectSummarySettings) {
	            if (objectSummarySettings && objectSummarySettings.length) {
	                objectSummarySettings.filter(function(objectSummarySetting) {
	                    (objectSummarySetting.hasError || objectSummarySetting.hasError === undefined) ? delete objectSummarySetting.hasError: '';
	                    var displayField = objectSummarySetting[vm.prefix + 'DisplayFields__c'];
	                    if (displayField) {
	                        objectSummarySetting[vm.prefix + 'DisplayFields__c'] = displayField.toString();
	                    }
	                });
	            }
	            return objectSummarySettings;
	        }
	
	        function isFieldNotDefined(field) {
	            var notMaintained = false,
	                indices = [];
	            for (var item in vm.objectSummarySettingsList) {
	                if (!isNaN(parseInt(item, 10))) {
	                    var fieldName = vm.objectSummarySettingsList[item][field];
	                    if (fieldName === '' || fieldName == undefined) {
	                        notMaintained = true;
	                        indices.push(parseInt(item, 10) + 1);
	                    } else {
	                        if (vm.objectSummarySettingsList[item]['hasError']) {
	                            delete vm.objectSummarySettingsList[item]['hasError'];
	                        }
	                    }
	                }
	            }
	            return {
	                notMaintained: notMaintained,
	                indices: indices
	            };
	        }
	
	        function isDuplicateFieldName(fieldName) {
	            var sorted, item,
	                notMaintained = false,
	                fieldName = fieldName;
	            sorted = vm.objectSummarySettingsList.concat().sort(function(a, b) {
	                if (a.fieldName > b.fieldName) return 1;
	                if (a.fieldName < b.fieldName) return -1;
	                return 0;
	            });
	            for (item in vm.objectSummarySettingsList) {
	                if (!isNaN(parseInt(item, 10))) {
	                    sorted[item].hasError = ((sorted[item - 1] && sorted[item - 1][fieldName] === sorted[item][fieldName]) || (sorted[item + 1] && sorted[item + 1][fieldName] === sorted[item][fieldName]));
	                    if (sorted[item].hasError) {
	                        notMaintained = true;
	                    }
	                }
	            }
	            return notMaintained;
	        }
	
	        /**
	         * set hasError class to invalid field
	         */
	        function updateErrorAttributeOfAction(indexArr) {
	            if (indexArr) {
	                for (var i = 0; i < indexArr.length; i++) {
	                    var index = indexArr[i];
	                    vm.objectSummarySettingsList[index - 1].hasError = true;
	                }
	            }
	        }
	
	        function processUpdateStatus(event, toState, toParams) {
	            if (event) {
	                if (toState) {
	                    vm.alert = [];
	                    $state.go(toState, toParams);
	                }
	            }
	        }
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        /** 
	         * - This method is call while user click the save button
	         */
	        vm.explicitPageSave = function() {
	            savePage();
	        }
	
	        /**
	         * When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed incase of errors in saving the page.
	         *
	         * If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if ((toState.name === 'app.applicationManagement.settingGroup' && toParams.id === null) || (!vm.objectSummarySettingsForm.$dirty && !isFormSave)) {
	                return true;
	            } else {
	                e.preventDefault();
	                savePage(e, toState, toParams);
	            }
	        });
	
	        /**
	         * - This method is used for goto the application management page while user click the cancel button
	         */
	        vm.goToApplicationManagement = function() {
	            $state.go('app.applicationManagement.settingGroup', { 'id': null });
	        }
	
	        vm.showModal = function ($event) {
	            vm.event = $event;
	            vm.displayModal = true;            
	        }
	    };
	
	    objectSummarySettingsController.$inject = [
	        '$scope',
	        '$state',
	        '$q',
	        'i18nService',
	        'applicationService',
	        'cpqAdminConstants',
	        'systemConstants',
	        'applicationManagementService',
	        'applicationFeatures',
	        'objectSummarySettingsService',
	        'objectSummarySettingsList',
	        'getProposalPicklistValues',
	        'getProductPicklistValues',
	        'getFavoriteConfigPicklistValues'
	    ];
	
	    module.exports = objectSummarySettingsController;
	})();


/***/ }),
/* 683 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"object-summary-settings-main-Container\">\n    <div class=\"object-summary-settings-header title-bar\">\n        <div class=\"object-summary-settings-title-container\">\n            <div href=\"#\" title=\"vm.labels.ObjectSummarySettings\">\n                <i class=\"fa fa-image\"></i>\n                <span class=\"title\">{{::vm.labels.ObjectSummarySettings}}</span>\n            </div>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse noPadding\">\n            <object-summary-settings-sub-menu></object-summary-settings-sub-menu>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n    <div class=\"object-summary-settings-center-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <application-feature-side-menu application-features-list=\"vm.applicationFeatures.leftSideList\" selected-application-feature-name=\"vm.labels.ObjectSummarySettings\"></application-feature-side-menu>\n        </div>\n        <!-- Content layout starts -->\n        <div class=\"object-summary-settings-container\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n            <form name=\"vm.objectSummarySettingsForm\" novalidate>\n                <table>\n                    <thead>\n                        <tr>\n                            <th class=\"action \">{{::vm.labels.Action}}</th>\n                            <th>{{::vm.labels.Name}}</th>\n                            <th>{{::vm.labels.ObjectName}}</th>\n                            <th class=\"display-fields \">{{::vm.labels.DisplayFields}}</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr data-ng-repeat=\"item in vm.objectSummarySettingsList track by $index\" data-ng-class=\"{ 'errorBcgColor': item.hasError}\">\n                            <td class=\"action\"> <i class=\"clear-icon material-icons\" data-ng-click=\"vm.removeObjectSummarySetting($index, item.Id)\">clear</i></td>\n                            <td class=\"name\">\n                                <material-form-field model=\"item.Name\" field-type=\"string\" is-editable=\"true\"></material-form-field>\n                            </td>\n                            <td>\n                                <material-form-field model=\"item[vm.prefix + 'ObjectName__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.objectNamePicklistValues\" data-ng-click=\"vm.trackSelectedRowIndex = $index\"></material-form-field>\n                            </td>\n                            <td>\n                                <material-form-field model=\"item[vm.prefix + 'DisplayFields__c']\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" properties=\"vm.configPicklistValue\" data-ng-if=\"item[vm.prefix + 'ObjectName__c'] === '' \"></material-form-field>\n                                <material-form-field model=\"item[vm.prefix + 'DisplayFields__c'] \" field-type=\"MULTIPICKLIST \" is-editable=\"true \" properties=\"vm.favoriteConfigPicklistValue \" data-ng-if=\"item[vm.prefix + 'ObjectName__c'] === vm.prefix + 'FavoriteConfiguration__c'\"></material-form-field>\n                                <material-form-field model=\"item[vm.prefix + 'DisplayFields__c']\" field-type=\"MULTIPICKLIST\" is-editable=\"true \" properties=\"vm.proposalPicklistValue\" data-ng-if=\"item[vm.prefix + 'ObjectName__c'] === 'Apttus_Proposal__Proposal__c'\"></material-form-field>\n                                <material-form-field model=\"item[vm.prefix + 'DisplayFields__c'] \" field-type=\"MULTIPICKLIST\" is-editable=\"true \" properties=\"vm.productPicklistValues \" data-ng-if=\"item[vm.prefix + 'ObjectName__c'] === 'Product2'\"></material-form-field>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <div class=\"clearfix \">\n                    <div class=\"pull-right \">\n                        <button type=\"button \" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addNewObjectsummarySetting() \">\n                            <i class=\"material-icons \">add</i>\n                        </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n        <!-- Content layout ends -->\n    </div>\n    <div class=\"object-summary-settings-footer \">\n        <div class=\"container-fluid \">\n            <span><span class=\"help-text-align\" ng-click=\"vm.showModal($event)\">{{vm.labels.ClickHere}}</span class=\"help-text-align\"> {{vm.labels.CustomSettingsMaintenanceJob}}</span>\n            <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToApplicationManagement() \">{{vm.labels.DialogCancelButton}}</a>\n            <a class=\"slds-button slds-button_brand \" data-ng-click=\"vm.explicitPageSave() \">{{vm.labels.DialogSaveButton}}</a>\n        </div>\n    </div>\n</div>\n<custom-settings-maintenance ng-if=\"vm.displayModal\" event=\"vm.event maintenance\" maintenance=\"customSettingsMaintenance\"></custom-settings-maintenance>\n<modal-dialog data-ng-if=\"showModalPop \" config=\"showIdleError \"></modal-dialog>"

/***/ }),
/* 684 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
		module.exports =  angular.module('cpqAdmin.favoritesSettings',[])
			.service('favoritesSettingsService',__webpack_require__(685))
			.controller('favoritesSettingsController',__webpack_require__(686))
			.config(['$stateProvider',function($stateProvider) {
				$stateProvider.state('app.favoritesSettings',{
					url: '/applicationManagement/favoritesSettings',
					views: {
						'pageContent@': {
							template: __webpack_require__(689),
							controller: 'favoritesSettingsController',
							controllerAs: 'vm'
						}
					},
					resolve: {
						applicationFeatures: ['applicationManagementService',function(applicationManagementService) {
							return applicationManagementService.getApplicationSettings();
						}],
						favConfigPickList: ['favoritesSettingsService',function(favoritesSettingsService) {
							return favoritesSettingsService.getFieldDescribe();
						}],
						getFavSettingsData: ['favoritesSettingsService',function(favoritesSettingsService) {
							return favoritesSettingsService.getFavoriteConfigurationSettings();
						}]
					}
				});
			}]);
	
	
	})();

/***/ }),
/* 685 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
		var favoritesSettingsService = function($q,systemConstants,remoteService) {
			var prefix = systemConstants.nsPrefix || '';
	
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
			function getFieldDescribe() {
		    	var requestOb = {
	  				"refSObjectName": getPrefixedAttribute("FavoriteConfiguration__c"),
	  				"isRef": false
				};
	            return remoteService.getFieldDescribe(requestOb);
		    }	
		    function getFavoriteConfigurationSettings() {
		    	var requestOb = {};
	            return remoteService.getFavoriteConfigurationSettings(requestOb);
	        }
	        function uploadAttachments(request) {
	            return remoteService.uploadAttachments(request);
	        }
	        function saveFavoriteConfigurationSettings(requestOb) {
	        	return remoteService.saveFavoriteConfigurationSettings(requestOb);
	        }
	        var favService = {
		    	getPrefixedAttribute: getPrefixedAttribute,
		    	getFieldDescribe: getFieldDescribe,
		    	getFavoriteConfigurationSettings: getFavoriteConfigurationSettings,
		    	uploadAttachments: uploadAttachments,
		    	saveFavoriteConfigurationSettings: saveFavoriteConfigurationSettings
		    }
		    return favService;
		};		
		favoritesSettingsService.$inject = [
			'$q',
			'systemConstants',
			'remoteService'
		];
		module.exports = favoritesSettingsService; 
	})();

/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	    var favoritesSettingsController = function (
	                                        $scope,
	                                        $q,
	                                        $mdDialog,
	                                        $state,
	                                        _,
	                                        getFavSettingsData,                                       
	                                        favoritesSettingsService,
	                                        applicationManagementService,
	                                        applicationFeatures,
	                                        i18nService,
	                                        cpqAdminConstants,
	                                        favConfigPickList,
	                                        systemConstants,                                        
	                                        multimediaService,                                        
	                                        applicationService) {
			var vm = this;
			var prefix = systemConstants.nsPrefix || '';
			vm.prefix = prefix;
			vm.selectedFS = {};
	        vm.labels = i18nService.CustomLabel;
	        vm.displayModal = false;
			applicationManagementService.setApplicationFeatures(applicationFeatures.ApplicationFeatureDOs); // Set the application features Details in application service
			vm.applicationFeatures = applicationManagementService.getApplicationFeatures(); // Contains all application features Destails
			var pickList = JSON.parse(favConfigPickList).fields;
			// Adding value field to md-options as it is mandatory 
			var resultPickList = pickList.map(function(el) {
			  	var o = Object.assign({}, el);
			  	o.value = o.apiName;
			  	return o;
			});
	        vm.favDialogColumns = { PicklistValues: resultPickList };
	        vm.favFilterColumn = {PicklistValues:[]};
	        _.forEach(resultPickList, function (pickListObject) {
	            if (angular.isDefined(pickListObject['apiName']) && pickListObject['apiName'] !== `${vm.prefix}Scope__c`) {
	                _.forEach(pickListObject, function (value, key) {               
	                    if (key === 'fieldType'  && (value === cpqAdminConstants.picklist || value === cpqAdminConstants.multipicklist)) {
	                        vm.favFilterColumn.PicklistValues.push(pickListObject);
	                    }
	                })
	            }            
	        })
	        
	        var isFormNew;
	        var noneField = { 
	                    label: vm.labels.NoneAsPickListValue,
	                    value: ''
	            }
	        var pickListWithNone = angular.copy(resultPickList);
	        pickListWithNone.unshift(noneField);
			vm.favConfigCol1 = {PicklistValues: pickListWithNone};
			vm.favConfigCol2 = {PicklistValues: pickListWithNone};
			function prepareFavSettingsData(data) {
	            isFormNew = false;
	            vm.selectedMultimediaItem = {};
				vm.selectedFS = angular.copy(data); 
	            //For Disable Favorites
				if(typeof vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'DisableFavorites__c'] === 'undefined') { 
					vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'DisableFavorites__c'] = false;
				}
				
	            // Default selecting --None-- value for Listed Favorite Configuration Column1
	            if(typeof vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'ListedFavoriteConfigurationsColumn1__c'] === 'undefined') {
	                vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'ListedFavoriteConfigurationsColumn1__c'] = '';
	            }
	            // Default selecting --None-- value for Listed Favorite Configuration Column2
	            if(typeof vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'ListedFavoriteConfigurationsColumn2__c'] === 'undefined') {
	                vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'ListedFavoriteConfigurationsColumn2__c'] = '';
	            }
				//For Save as Favorite Dialog Columns
				if(typeof vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'SaveAsFavoriteDialogColumns__c'] === 'undefined') {
					vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'SaveAsFavoriteDialogColumns__c'] = ["Name"];
				} else { 
					vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'SaveAsFavoriteDialogColumns__c'] = vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'SaveAsFavoriteDialogColumns__c'].split(",");                
				}
				//For Favorite Filter Column
				if (angular.isDefined(vm.selectedFS.ConfigSystemPropertiesSO[`${vm.prefix}FavoriteFilters__c`])) {
					vm.selectedFS.ConfigSystemPropertiesSO[`${vm.prefix}FavoriteFilters__c`] = vm.selectedFS.ConfigSystemPropertiesSO[`${vm.prefix}FavoriteFilters__c`].split(",");
				}
				//For checking the fav icon exists or not
				if(typeof vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'FavoritesIconAttachmentId__c'] === 'string') {
					vm.selectedMultimediaItem.imgUrl = systemConstants.salesforceUrl + '/servlet/servlet.FileDownload?file=' + vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'FavoritesIconAttachmentId__c'];
					vm.selectedMultimediaItem[vm.prefix + 'InformationType__c'] = "Attached File";
					vm.selectedMultimediaItem.type = 'image';
				}
			}
			prepareFavSettingsData(getFavSettingsData);
			vm.browseClicked = function() { 
					$mdDialog.show({
	                    controller: __webpack_require__(687),
	                    controllerAs: 'vm',
	                    template: __webpack_require__(688),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    resolve: {
	                        selectedMultimediaItem: function() { 
	                            return angular.copy(vm.selectedMultimediaItem);
	                        }
	                    }
	                })
	                  .then(function(response) {
	                	vm.selectedMultimediaItem = response;
	                	vm.favoritesSettingsForm.$dirty = true;
	                });
			};
			vm.deleteImage = function() {
	        	vm.selectedMultimediaItem = {};
	        	vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'FavoritesIconAttachmentId__c'] = null;
	        	vm.favoritesSettingsForm.$dirty = true;
	        }
	        function createNewMultimedia() {
	        	if(vm.selectedMultimediaItem.fileInfo) {
	        		var defer = $q.defer(),
	                payload = prepareCreatNewPayload(angular.copy(vm.selectedMultimediaItem)),
	                isPrimary = vm.selectedMultimediaItem.isPrimary;
	                (payload.fileName) ? delete payload['fileName']: true;
	                multimediaService.createMultimedia(payload)
	                    .then(function(response) {
	                        if (response && response.length > 0) {
	                            vm.selectedMultimediaItem.Id = response[0].Id;
	                            if (vm.selectedMultimediaItem.fileInfo && vm.selectedMultimediaItem.fileInfo.source) {
	                                uploadAttachment(vm.selectedMultimediaItem.Id, payload)
	                                    .then(function(response) {
	                                            vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'FavoritesIconAttachmentId__c'] = response[0];
	                                            saveFavConfig();
	                                        },
	                                        function(reason) {
	                                            defer.reject(reason);
	                                        });
	                            } 
	                        }
	                    },
	                    function(reason) {
	                        defer.reject(reason);
	                    });
	                return defer.promise;
	        	} else { 
	        		saveFavConfig();
	        	}	 
	        }
	        function prepareCreatNewPayload(item) {
	            var temp = {};
	            if (item) {
	                var name = item.Name,
	                    fileName = item.fileName;
	                    temp.Name = name;
	                    temp.fileName = fileName;
	                }
	                if (item.Id) {
	                    temp.Id = item.Id;
	                }
	            
				return temp;
	        }
	        function uploadAttachment(parentId, payload) {
	            var defer = $q.defer(),
	                attachmentRequestDOs = [],
	                blob = vm.selectedMultimediaItem.fileInfo.source.toString().replace(/^data:image\/(png|jpg|jpeg);base64,/, "").replace(/^data:application\/(pdf|msword);base64,/, "");
	            attachmentRequestDOs.push({
	                parentId: parentId,
	                AttachmentName: vm.selectedMultimediaItem.fileInfo.name,
	                attachmentBody: blob
	            });
	
	            if (attachmentRequestDOs.length > 0) {
	                favoritesSettingsService.uploadAttachments(attachmentRequestDOs)
	                    .then(function(response) {
	                        if (response.length > 0) {
	                           vm.selectedMultimediaItem[vm.prefix + 'FavoritesIconAttachmentId__c'] = response[0];
	                            payload.Id = parentId;
	                        }
	                        defer.resolve(response);
	                    }, function(reason) {
	                        defer.reject(reason);
	                    });
	            }
	            return defer.promise;
	        }
	        // Saving the form
	        vm.pageSave = function() {
	            if(vm.favoritesSettingsForm.$dirty || isFormNew) {
	                createNewMultimedia();    
	            } else {
	                addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	            }
	        }
	        // Cancel
	        vm.goToQuickStartPage = function() {
	        	$state.go('app.applicationManagement.settingGroup', { 'id': undefined });
	        }
	        function saveFavConfig() {
	        	var reqObj = {};
	            reqObj.ConfigProductsSettingsSO = angular.copy(vm.selectedFS.ConfigProductsSettingsSO);
	            reqObj.ConfigSystemPropertiesSO = angular.copy(vm.selectedFS.ConfigSystemPropertiesSO);
	            reqObj.ConfigProductsSettingsSO[`${vm.prefix}SaveAsFavoriteDialogColumns__c`] = reqObj.ConfigProductsSettingsSO[`${vm.prefix}SaveAsFavoriteDialogColumns__c`].toString();
	            reqObj.ConfigSystemPropertiesSO[`${vm.prefix}FavoriteFilters__c`] = reqObj.ConfigSystemPropertiesSO[`${vm.prefix}FavoriteFilters__c`].toString();            
	            if (reqObj.ConfigSystemPropertiesSO[`${vm.prefix}FavoriteFilters__c`].length < 255 && reqObj.ConfigProductsSettingsSO[`${vm.prefix}SaveAsFavoriteDialogColumns__c`].length < 255) {
	                favoritesSettingsService.saveFavoriteConfigurationSettings(reqObj)
	            	.then(function(response){
	                    vm.favoritesSettingsForm.$setPristine();
	                    isFormNew = false;
	                    addAlert(vm.labels.FavSettingsSaveSuccess, cpqAdminConstants.SUCCESS);
	                    favoritesSettingsService.getFavoriteConfigurationSettings()
	                        .then(function(response) {
	                            prepareFavSettingsData(response);
	                        },function(reason) {
	                            applicationService.showErrorMessage(reason);    
	                        })
	            	},function(reason) {
	            		applicationService.showErrorMessage(reason);
	            	})
	            } else {
	                let validationMessage;
	                if (reqObj.ConfigSystemPropertiesSO[`${vm.prefix}FavoriteFilters__c`].length > 255 && reqObj.ConfigProductsSettingsSO[`${vm.prefix}SaveAsFavoriteDialogColumns__c`].length > 255) {
	                    validationMessage = vm.labels.FavSettingsDialogColumns + ', ' + vm.labels.FavoriteFilterFields + ' ' + vm.labels.FieldLengthErrorMessage;
	                } else if (reqObj.ConfigProductsSettingsSO[`${vm.prefix}SaveAsFavoriteDialogColumns__c`].length > 255) {
	                    validationMessage = vm.labels.FavSettingsDialogColumns + ' ' + vm.labels.FieldLengthErrorMessage;
	                } else {
	                    validationMessage = vm.labels.FavoriteFilterFields + ' ' + vm.labels.FieldLengthErrorMessage;
	                }
	                addAlert(validationMessage, cpqAdminConstants.DANGER);
	            }
	            
	        }
	         /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        vm.showModal = function ($event) {
	            vm.event = $event;
	            vm.displayModal = true;            
	        }
	    }
	    favoritesSettingsController.$inject = [
	        '$scope',
	        '$q',
	        '$mdDialog',
	        '$state',
	        'lodash',
	        'getFavSettingsData',
			'favoritesSettingsService',
			'applicationManagementService',
			'applicationFeatures',
			'i18nService',
			'cpqAdminConstants',
			'favConfigPickList',				
			'systemConstants',		
			'multimediaService',		
			'applicationService'		
			];
		module.exports = favoritesSettingsController;
	})();

/***/ }),
/* 687 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
		var favCategoryImageController = function($scope,$mdDialog,i18nService,systemConstants,$sce,multimediaService,selectedMultimediaItem,applicationService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.selectedMultimediaItem = {};
	        $scope.$parent.selectedMultimediaItem = {};
	         $scope.uploadImage = function(event) {
	            var files = event.target.files || event.originalEvent.dataTransfer.files;
	            /* User should not be allowed to select more than 1 item and of certain fixed type of docs */
	            /* Show message to the user incase user selects more than 1 image */
	            if (files.length > 1) {
	                applicationService.showErrorMessage('Please select one item at once');
	            } else {
	                for (var i = 0; i < files.length; i++) {
	                    var file = files[i];
	                    if (file.size <= 3145728) {
	                        var reader = new FileReader();
	                        var fileObj = files[i];
	                        reader.onload = (function(fileObj) {
	                            return function(eventObj) {
	                                showImageThumbnail(eventObj, fileObj);
	                            };
	                        })(fileObj);
	                        reader.readAsDataURL(file);
	                    } else {
	                        applicationService.showErrorMessage(file.name + ' : Size limit exceeded');
	                    }
	                }
	            }
	
	            event.target.value = '';
	
	        };
	         /**
	         * Once images are loaded , add them to imgThumbnailList
	         */
	        function showImageThumbnail(eventObj, fileObj) {
	            var fileName = fileObj.name,
	                fileType = fileName.substr(fileName.lastIndexOf('.') + 1),
	                fileSize = (fileObj.size / 1024).toFixed(2);
	            vm.fileDetails = {
	                name: fileName,
	                source: $sce.trustAsResourceUrl(eventObj.target.result),
	                type: fileType,
	                size: fileSize
	
	            };
	            vm.selectedMultimediaItem.fileInfo = vm.fileDetails;
	            vm.showFileErrMsg = false;
	            vm.showUploadList = true;
	            //$scope.$apply();
	            //vm.selectedMultimediaItem.Name = vm.fileDetails.name;
	            changefileInfo();
	            //$mdDialog.hide(vm.selectedMultimediaItem);
	        }
	        function changefileInfo() {
	            if (vm.selectedMultimediaItem.fileInfo) {
	                vm.selectedMultimediaItem[vm.prefix + 'InformationType__c'] = "Attached File";
	                vm.selectedMultimediaItem.Name = vm.selectedMultimediaItem.fileInfo.name;
	                vm.selectedMultimediaItem.fileName = vm.selectedMultimediaItem.Name.substr(0, vm.selectedMultimediaItem.Name.lastIndexOf('.'));
	                vm.selectedMultimediaItem.imgUrl = vm.selectedMultimediaItem.fileInfo.source;
	                vm.selectedMultimediaItem.type = multimediaService.getContentType(vm.selectedMultimediaItem);
	                vm.showFileErrMsg = false;
	                $mdDialog.hide(vm.selectedMultimediaItem);
	            } else {
	                vm.showFileErrMsg = true;
	            }
	        }
			vm.closeDialog = function() {
	            $mdDialog.cancel();
	        }
		}
		favCategoryImageController.$inject = [
			'$scope',
			'$mdDialog',
	        'i18nService',
	        'systemConstants',
	        '$sce',
	        'multimediaService',
	        'selectedMultimediaItem',
	        'applicationService'
	        ];
		module.exports = favCategoryImageController;
	})();

/***/ }),
/* 688 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog ng-cloak class=\"create-multimedia-dialog\">\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.closeDialog()\"><i class=\"material-icons\">clear</i>\n        </i>\n    </button>\n    <md-dialog-content class=\"multimedia-dialog-content\">\n        <md-tabs md-selected=\"vm.selectedTab\" md-dynamic-height md-border-bottom>\n            <md-tab label=\"{{vm.labels.MultimediaUploadFile}}\" ng-disabled=\"vm.isDisable(0)\">\n                <md-content class=\"dialog-left md-padding\">\n                    <p class=\"text-muted\"> {{ vm.labels.MultimediaUploadFileMsg }} <b>{{ vm.labels.MultimediaUploadFileMaxSize }}</b></p>\n                    <div data-ng-if=\"vm.selectedMultimediaItem.fileInfo && vm.selectedMultimediaItem.fileInfo.name\" class=\"m-t-10 alert alert-warning in p-t-b-8\" role=\"alert\">\n                        <p>{{ vm.labels.MultimediaHelpText }}</p>\n                    </div>\n                    <p class=\"custom-danger\" role=\"alert\" data-ng-if=\"vm.showFileErrMsg === true\">{{ vm.labels.MultimediaNoUploadFile }}</p>\n                    <div class=\"m-t-10 drag-file upload-img-bg\" file-drop-zone upload-image=\"uploadImage\" data-ng-show=\"!vm.showUploadList\">\n                        <div class=\"drag-text-container\"> {{ vm.labels.MultimediaDragFile }} </div>\n                    </div>\n                    <div data-ng-show=\"vm.showUploadList\" class=\"uploaded-file\">\n                        <div class=\"inner-uploaded-file\">\n                            <a ng-click=\"vm.removeUploadedFile()\" href=\"\" class=\"m-t-15 disaplay-inline-b remove-uploaded-file\">\n                                <span class=\"fa fa-times-circle\"></span>\n                            </a>\n                            <i class=\"fa fa-file-text\" aria-hidden=\"true\"></i>\n                            <p> {{vm.selectedMultimediaItem.fileInfo.name}}</p>\n                            <p data-ng-if=\"vm.selectedMultimediaItem.fileInfo.size\"> {{vm.selectedMultimediaItem.fileInfo.size + ' MB'}}</p>\n                        </div>\n                    </div>\n                    <p class=\"text-muted text-center m-t-10\">or</p>\n                    <div class=\"text-center m-t-10\">\n                        <label class=\"slds-button slds-button_neutral\" for=\"file-input\">{{ vm.labels.MultimediaSelectFileButton }}</label>\n                        <input id=\"file-input\" type=\"file\" onchange=\"angular.element(this).scope().uploadImage(event)\">\n                    </div>\n                </md-content>\n            </md-tab>\n    </md-dialog-content>\n</md-dialog>\n"

/***/ }),
/* 689 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"favorites-settings-main-Container\">\n    <div class=\"favorites-settings-header title-bar\">\n        <div class=\"favorites-settings-title-container\">\n            <div href=\"#\" title=\"{{vm.selectedFeaturesTitle}}\">\n                <i class=\"fa fa-image\"></i>\n                <span class=\"title\">{{::vm.labels.FavoritesSettings}}</span>\n            </div>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse noPadding\">\n            <ul class=\"nav navbar-nav list-group\">\n                <li data-ui-sref-active=\"active\" class=\"menu-item active\">\n                    <a data-ui-sref=\"app.favoritesSettings()\" data-ng-click=\"$event.stopPropagation();\">{{::vm.labels.FavoritesSettings}}</a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n    <div class=\"favorites-settings-center-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <application-feature-side-menu application-features-list=\"vm.applicationFeatures.leftSideList\" selected-application-feature-name=\"vm.labels.FavoritesSettings\"></application-feature-side-menu>\n        </div> \n        <!-- Content layout starts -->\n        <div class=\"favorites-settings\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n        \t<form class=\"favorites-settings-form\" name=\"vm.favoritesSettingsForm\" novalidate>\n        \t\t<div layout=\"row\">\n        \t\t\t<div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'DisableFavorites__c']\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.IsFavSettingsActive\" element-id=\"isActive\"></material-form-field>\n                    </div>\n        \t\t</div>\n        \t\t<div layout=\"row\">\n        \t\t\t<div class=\"flex\" flex=\"45\">\n        \t\t\t\t<material-form-field model=\"vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'ListedFavoriteConfigurationsColumn1__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.favConfigCol1\" field-label=\"::vm.labels.FavSettingsConnfigCol1\">\n                        </material-form-field>\n        \t\t\t</div>\n        \t\t\t<div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n        \t\t\t\t<material-form-field model=\"vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'ListedFavoriteConfigurationsColumn2__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.favConfigCol2\" field-label=\"::vm.labels.FavSettingsConnfigCol2\">\n                        </material-form-field>\n        \t\t\t</div>\n        \t\t</div>\n        \t\t<div layout=\"row\">\n        \t\t\t<div class=\"flex\">\n        \t\t\t\t<material-form-field model=\"vm.selectedFS.ConfigProductsSettingsSO[vm.prefix + 'SaveAsFavoriteDialogColumns__c']\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" properties=\"vm.favDialogColumns\" field-label=\"vm.labels.FavSettingsDialogColumns\">\n        \t\t\t</div>\n                </div>\n                <div layout=\"row\">\n        \t\t\t<div class=\"flex\">\n        \t\t\t\t<material-form-field model=\"vm.selectedFS.ConfigSystemPropertiesSO[vm.prefix + 'FavoriteFilters__c']\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" properties=\"vm.favFilterColumn\" field-label=\"vm.labels.FavoriteFilterFields\">\n        \t\t\t</div>\n        \t\t</div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n        \t\t\t\t<div class=\"upload-image-label\">{{::vm.labels.FavSettingsCategoryImage}}</div>\n        \t\t\t</div>\n        \t\t</div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <!-- show attachment -->\n                        <multimedia-tag src-url=\"vm.selectedMultimediaItem.imgUrl\" item-type=\"vm.selectedMultimediaItem.type\" data-ng-if=\"vm.selectedMultimediaItem[vm.prefix + 'InformationType__c'] === 'Attached File' && (vm.selectedMultimediaItem.type !== 'unknown' && vm.selectedMultimediaItem.type !== 'doc')\"></multimedia-tag>    \n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\" flex=\"45\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left ng-binding ng-scope\" data-ng-click=\"vm.browseClicked()\">{{::vm.labels.Browse}}</button>\n                        <a id=\"delete_img\" class=\"slds-button slds-button_neutral\" data-ng-click=\"vm.deleteImage()\" data-ng-if=\"vm.selectedMultimediaItem[vm.prefix + 'InformationType__c'] === 'Attached File' && (vm.selectedMultimediaItem.type !== 'unknown' && vm.selectedMultimediaItem.type !== 'doc')\">{{::vm.labels.DeleteImage}}</a>\n                    </div>\n                </div>\n            </form>\n        \t<div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <span><span class=\"help-text-align\" ng-click=\"vm.showModal($event)\">{{vm.labels.ClickHere}}</span> {{vm.labels.CustomSettingsMaintenanceJob}}</span>\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToQuickStartPage()\">{{::vm.labels.Cancel}}</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.pageSave()\">{{::vm.labels.SaveButton}}</a>\n                </div>\n            </div>\n        </div>\n        <!-- Content layout ends -->\n    </div>\n</div>\n<custom-settings-maintenance ng-if=\"vm.displayModal\" event=\"vm.event maintenance\" maintenance=\"customSettingsMaintenance\"></custom-settings-maintenance>\n\n"

/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    __webpack_require__(691);
	
	    module.exports = angular.module('cpqAdmin.lookupFieldSettings', [
	            'cpqAdmin.lookupFieldSettings.common.directives',
	        ])
	        .constant('lookupFieldSettingsConstant', __webpack_require__(694))
	        .service('lookupFieldSettingsService', __webpack_require__(695))
	        .controller('lookupFieldSettingsController', __webpack_require__(696))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.lookupFieldSettings', {
	                url: '/applicationManagement/lookupFieldSettings',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(701),
	                        controller: 'lookupFieldSettingsController',
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    applicationFeatures: ['applicationManagementService', function(applicationManagementService) {
	                        return applicationManagementService.getApplicationSettings();
	                    }],
	                    lineItemPicklistValues: ['lookupFieldSettingsService', function(lookupFieldSettingsService) {
	                        return lookupFieldSettingsService.getFieldsForSObjectName('LineItem__c');
	                    }],
	                    productAttributeValuePicklistValues: ['lookupFieldSettingsService', function(lookupFieldSettingsService) {
	                        return lookupFieldSettingsService.getFieldsForSObjectName('ProductAttributeValue__c');
	                    }],
	                    getAllLookupFieldSettings: ['lookupFieldSettingsService', function(lookupFieldSettingsService) {
	                        var reqObj = {
	                            SearchString: ""
	                        };
	                        return lookupFieldSettingsService.getAllLookupFieldSettings(reqObj);
	                    }]
	                }
	            });
	        }]);
	
	})();

/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
		'use strict';
	
		module.exports = angular.module('cpqAdmin.lookupFieldSettings.common.directives', [])
			.directive('lookupFieldSettingsSubMenu', __webpack_require__(692));
	})();


/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var lookupFieldSettingsSubMenuController = function($scope, i18nService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	    };
	
	    lookupFieldSettingsSubMenuController.$inject = [
	        '$scope',
	        'i18nService',
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: lookupFieldSettingsSubMenuController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(693),
	    };
	};


/***/ }),
/* 693 */
/***/ (function(module, exports) {

	module.exports = "<!-- Header Menu Starting -->\n<ul class=\"nav navbar-nav list-group\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.lookupFieldSettings\">{{vm.labels.LookupFieldSettings}}</a>\n    </li>\n</ul>\n<!--/.nav-collapse -->\n<!-- Header Menu Closed -->\n"

/***/ }),
/* 694 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var constants = {
	        reference: 'REFERENCE',
	        ownerid_user: 'OwnerId.User',
	        ownerid_queue: 'OwnerId.Queue'
	    };
	
	    module.exports = constants;
	
	})();

/***/ }),
/* 695 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var lookupFieldSettingsService = function($q, remoteService, systemConstants, lookupFieldSettingsConstant) {
	        var prefix = systemConstants.nsPrefix || '';
	
	        function getPrefixedAttribute(attribute) {
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function getFieldsForSObjectName(SObjectName) {
	            var payload = {
	                    "SObjectName": getPrefixedAttribute(SObjectName),
	                    "IncludeTextAreaFields": false,
	                    "GetExtraReferenceDotNameFields": false
	                },
	                deferQ = $q.defer();
	            remoteService.getFieldsForSObjectName(payload).then(function(response) {
	                deferQ.resolve(prepareGetFieldsForSObjectName(response));
	            }, function(reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        function prepareGetFieldsForSObjectName(data) {
	            var picklistValues = [];
	            if (data && data.FieldItems && data.FieldItems.length) {
	                var fieldItems = data.FieldItems,
	                    index, fieldItemsLength = fieldItems.length;
	                for (index = 0; index < fieldItemsLength; index++) {
	                    if (fieldItems[index].fieldType === lookupFieldSettingsConstant.reference) {
	                        var picklist = {
	                            label: fieldItems[index].label,
	                            value: fieldItems[index].value,
	                            sObjectName: fieldItems[index].sObjectName
	                        };
	                        picklistValues.push(picklist);
	                    }
	                }
	            }
	            return picklistValues;
	        }
	
	        function getFieldsForLookupObject(LookupFieldName) {
	            var payload = {
	                    "SObjectName": LookupFieldName,
	                    "IncludeTextAreaFields": false,
	                    "GetExtraReferenceDotNameFields": false
	                },
	                deferQ = $q.defer();
	            remoteService.getFieldsForSObjectName(payload).then(function(response) {
	                deferQ.resolve(prepareLookupObject(response));
	            }, function(reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        function prepareLookupObject(data) {
	            var picklistValues = [];
	            if (data && data.FieldItems && data.FieldItems.length) {
	                var fieldItems = data.FieldItems,
	                    index, fieldItemsLength = fieldItems.length;
	                for (index = 0; index < fieldItemsLength; index++) {
	                    var picklist = {
	                        label: fieldItems[index].label,
	                        value: fieldItems[index].value
	                    };
	                    picklistValues.push(picklist);
	                }
	            }
	            return picklistValues;
	        }
	
	        function sampleLookupFieldSettings() {
	            var lookupFieldSetting = {
	                'Name': '',
	            };
	            lookupFieldSetting[prefix + 'ObjectName__c'] = '';
	            lookupFieldSetting[prefix + 'LookupFieldName__c'] = '';
	            lookupFieldSetting[prefix + '.DisplayColumns__c'] = '';
	            lookupFieldSetting[prefix + '.FilterCriteria__c'] = '';
	            lookupFieldSetting[prefix + '.LookupRecordLimit__c'] = '';
	            lookupFieldSetting[prefix + '.DefaultFlagField__c'] = '';
	            lookupFieldSetting[prefix + '.SourceObject__c'] = '';
	            lookupFieldSetting[prefix + '.SourceField__c'] = '';
	            return lookupFieldSetting;
	        }
	
	        function getAllLookupFieldSettings(reqObj) {
	            return remoteService.getAllLookupFieldSettings(reqObj);
	        }
	
	        function saveLookupFieldSettings(lookupFieldSettingSOs) {
	            return remoteService.saveLookupFieldSettings(lookupFieldSettingSOs);
	        }
	
	        function deleteLookupFieldSettings(lookupFieldSettingIds) {
	            return remoteService.deleteLookupFieldSettings(lookupFieldSettingIds);
	        }
	
	        function getLookupFieldsForCollabReq(){
	            return [{
	                fieldName: lookupFieldSettingsConstant.ownerid_user,
	                label: lookupFieldSettingsConstant.ownerid_user,
	                value: lookupFieldSettingsConstant.ownerid_user
	            }, {
	                fieldName: lookupFieldSettingsConstant.ownerid_queue,
	                label: lookupFieldSettingsConstant.ownerid_queue,
	                value: lookupFieldSettingsConstant.ownerid_queue
	            }];
	        }
	
	        var lookupFieldSettingsService = {
	            getFieldsForSObjectName: getFieldsForSObjectName,
	            getFieldsForLookupObject: getFieldsForLookupObject,
	            sampleLookupFieldSettings: sampleLookupFieldSettings,
	            getAllLookupFieldSettings: getAllLookupFieldSettings,
	            saveLookupFieldSettings: saveLookupFieldSettings,
	            deleteLookupFieldSettings: deleteLookupFieldSettings,
	            getLookupFieldsForCollabReq: getLookupFieldsForCollabReq
	        };
	        return lookupFieldSettingsService;
	    };
	
	    lookupFieldSettingsService.$inject = ['$q', 'remoteService', 'systemConstants', 'lookupFieldSettingsConstant'];
	
	    module.exports = lookupFieldSettingsService;
	
	})();

/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    var lookupFieldSettingsController = function($scope, $state, $mdDialog, i18nService, systemConstants, cpqAdminConstants,
	        applicationService, applicationManagementService, lookupFieldSettingsService, applicationFeatures,
	        lineItemPicklistValues, productAttributeValuePicklistValues, getAllLookupFieldSettings) {
	        var vm = this,
	            selectedRowIndex, // For identify the selected row on click of the picklist
	            lineItemPicklistValues = {
	                PicklistValues: lineItemPicklistValues,
	                methodToCallInController: onChangeLookupFieldNamePicklist
	            },
	            productAttributeValuePicklistValues = {
	                PicklistValues: productAttributeValuePicklistValues,
	                methodToCallInController: onChangeLookupFieldNamePicklist
	            };
	
	        var collaborationReqPicklistValues = {
	            PicklistValues: lookupFieldSettingsService.getLookupFieldsForCollabReq(),
	            methodToCallInController: onChangeLookupFieldNamePicklist
	        };
	
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.displayModal = false;
	
	        applicationManagementService.setApplicationFeatures(applicationFeatures.ApplicationFeatureDOs); // Set the application features Details in application service
	        vm.applicationFeatures = applicationManagementService.getApplicationFeatures(); // Contains all application features Destails
	
	        /**
	         * Static value for object name
	         */
	        vm.objectNamePicklistValues = {
	            'PicklistValues': [{
	                'label': vm.labels.ProductAttribute,
	                'value': vm.prefix + 'ProductAttributeValue__c'
	            }, {
	                'label': vm.labels.LineItem,
	                'value': vm.prefix + 'LineItem__c'
	            }, {
	                'label': vm.labels.CollaborationRequest,
	                'value': vm.prefix + 'CollaborationRequest__c'
	            }],
	            'methodToCallInController': onChangeObjectNamePicklist
	        };
	
	        /**
	         *Get the existing look up field values
	         */
	        vm.lookupFieldSettingsList = prepareLookupFieldSettings(getAllLookupFieldSettings.LookupFieldSettingSOs);
	
	        /**
	         * Prepare the lookup field settings for display
	         */
	        function prepareLookupFieldSettings(lookupFieldSettings) {
	            var index, lookupFieldSettingsLength = lookupFieldSettings.length;
	            if (lookupFieldSettingsLength) {
	                for (index = 0; index < lookupFieldSettingsLength; index++) {
	                    if (lookupFieldSettings[index][vm.prefix + 'ObjectName__c'])
	                        lookupFieldSettings[index].lookupFieldNamePicklistValues = getLookupFieldNamePicklistValues(lookupFieldSettings[index][vm.prefix + 'ObjectName__c']);
	                    if (lookupFieldSettings[index][vm.prefix + 'LookupFieldName__c'] && lookupFieldSettings[index].lookupFieldNamePicklistValues) {
	                        var sObjectName = findsObjectNameByLookupFieldValue(lookupFieldSettings[index][vm.prefix + 'LookupFieldName__c'], lookupFieldSettings[index].lookupFieldNamePicklistValues.PicklistValues);
	                        if (sObjectName)
	                            getDisplayColumnPicklistValues(index, sObjectName);
	                        else {
	                            lookupFieldSettings[index].displayColumnPicklistValues = {
	                                PicklistValues: [{
	                                    label: 'Name',
	                                    value: 'Name'
	                                }]
	                            };
	                        }
	                    }
	                    if (lookupFieldSettings[index][vm.prefix + 'DisplayColumns__c'])
	                        lookupFieldSettings[index][vm.prefix + 'DisplayColumns__c'] = lookupFieldSettings[index][vm.prefix + 'DisplayColumns__c'].split(",");
	                    
	                    lookupFieldSettings[index][vm.prefix + 'EnableQuickView__c'] = !!lookupFieldSettings[index][vm.prefix + 'EnableQuickView__c'];
	                }
	            }
	            return lookupFieldSettings;
	        }
	
	        /**
	         * This method is used for change the lookup field picklist value based on the selection
	         */
	        function onChangeObjectNamePicklist(objectName) {
	            vm.lookupFieldSettingsList[selectedRowIndex].lookupFieldNamePicklistValues = getLookupFieldNamePicklistValues(objectName);
	            vm.lookupFieldSettingsList[selectedRowIndex][vm.prefix + 'DisplayColumns__c'] = '';
	        }
	
	        function onChangeLookupFieldNamePicklist(lookupFieldValue) {
	            var sObjectName = findsObjectNameByLookupFieldValue(lookupFieldValue, vm.lookupFieldSettingsList[selectedRowIndex].lookupFieldNamePicklistValues.PicklistValues);
	            getDisplayColumnPicklistValues(selectedRowIndex, sObjectName);
	            vm.lookupFieldSettingsList[selectedRowIndex][vm.prefix + 'DisplayColumns__c'] = '';
	        }
	
	        function findsObjectNameByLookupFieldValue(lookupFieldValue, picklistValues) {
	            var sObjectName = undefined;
	            if (lookupFieldValue && picklistValues && picklistValues.length) {
	                var index, picklistValuesLength = picklistValues.length;
	                for (index = 0; index < picklistValuesLength; index++) {
	                    if (lookupFieldValue === picklistValues[index].value) {
	                        sObjectName = picklistValues[index].sObjectName;
	                    }
	                }
	            }
	            return sObjectName;
	        }
	
	        function getDisplayColumnPicklistValues(index, sObjectName) {
	            if (sObjectName) {
	                lookupFieldSettingsService.getFieldsForLookupObject(sObjectName).then(function(response) {
	                    vm.lookupFieldSettingsList[index].displayColumnPicklistValues = {
	                        PicklistValues: response
	                    };
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else {
	                vm.lookupFieldSettingsList[index].displayColumnPicklistValues = {
	                    PicklistValues: [{
	                        label: 'Name',
	                        value: 'Name'
	                    }]
	                };
	            }
	        }
	
	        /**
	         * This method used for return the picklist value for lookup field based on the object name
	         */
	        function getLookupFieldNamePicklistValues(objectName) {
	            if (objectName === vm.prefix + 'ProductAttributeValue__c') {
	                return productAttributeValuePicklistValues;
	            } else if (objectName === vm.prefix + 'LineItem__c') {
	                return lineItemPicklistValues;
	            } else if (objectName === vm.prefix + 'CollaborationRequest__c') {
	                return collaborationReqPicklistValues;
	            }
	        }
	
	        /**
	         * This method for identify the selected row
	         */
	        vm.trackSelectedRowIndex = function(index) {
	            selectedRowIndex = index;
	        };
	
	        /**
	         * This method used for add new lookup field 
	         */
	        vm.addNewLookupFieldSetting = function() {
	            var sampleLookupFieldSettings = lookupFieldSettingsService.sampleLookupFieldSettings();
	            vm.lookupFieldSettingsList.push(sampleLookupFieldSettings);
	            vm.lookupFieldSettingsForm.$setDirty();
	        };
	
	        /**
	         * This method for deleted the lookup field 
	         */
	        vm.removeLookupFieldSetting = function(index, lookupFieldSettingId) {
	            if (lookupFieldSettingId) {
	                var lookupFieldSetting = {
	                    "LookupFieldSettingIds": [lookupFieldSettingId]
	                };
	                lookupFieldSettingsService.deleteLookupFieldSettings(lookupFieldSetting).then(function(response) {
	                    vm.lookupFieldSettingsList.splice(index, 1);
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else {
	                vm.lookupFieldSettingsList.splice(index, 1);
	            }
	            vm.lookupFieldSettingsForm.$setDirty();
	        };
	
	        vm.openFilterCriteriaPopup = function(index) {
	            var selectedFilterCriteria = vm.lookupFieldSettingsList[index][vm.prefix + 'FilterCriteria__c'];
	            $mdDialog.show({
	                controller: __webpack_require__(697),
	                template: __webpack_require__(698),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	                    selected: function() {
	                        return { filterCriteria: selectedFilterCriteria }
	                    }
	                }
	            }).then(function(response) {
	                vm.lookupFieldSettingsList[index][vm.prefix + 'FilterCriteria__c'] = response.filterCriteria;
	                vm.lookupFieldSettingsForm.$setDirty();
	            }, function(reason) {});
	        };
	
	        vm.openAdvancedLookupFieldSettings = function(index, selectedLookupFieldSettings) {
	            $mdDialog.show({
	                controller: __webpack_require__(699),
	                template: __webpack_require__(700),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	                    selected: function() {
	                        return { LookupFieldSettings: angular.copy(selectedLookupFieldSettings) }
	                    }
	                }
	            }).then(function(response) {
	                vm.lookupFieldSettingsList[index] = response.selectedLookupFieldSettings;
	                vm.lookupFieldSettingsForm.$setDirty();
	            }, function(reason) {});
	        }
	
	        /**
	         * - This method is used for save the display column data
	         */
	        function savePage(e, toState, toParams) {
	            if (vm.lookupFieldSettingsForm.$dirty) {
	                if (vm.lookupFieldSettingsList.length) {
	                    if (isFieldNotDefined().notMaintained) {
	                        var indices = isFieldNotDefined().indices;
	                        indices.length > 0 ? updateErrorAttributeOfAction(indices) : angular.noop();
	                        addAlert(vm.labels.NameMustBeEntered, 'danger');
	                    } else if (isDuplicateFieldName('Name')) {
	                        addAlert(vm.labels.NameMustBeUnique, 'danger');
	                    } else {
	                        lookupFieldSettingsService.saveLookupFieldSettings(prepareLookupFieldSettingsForSave())
	                            .then(function(response) {
	                                vm.lookupFieldSettingsList = prepareLookupFieldSettings(response.LookupFieldSettingSOs);
	                                vm.lookupFieldSettingsForm.$setPristine();
	                                processUpdateStatus(e, toState, toParams);
	                                addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                            }, function(reason) {
	                                applicationService.showErrorMessage(reason);
	                            });
	                    }
	                } else {
	                    vm.lookupFieldSettingsForm.$setPristine();
	                    processUpdateStatus(e, toState, toParams);
	                }
	            } else {
	                processUpdateStatus(e, toState, toParams);
	                addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	            }
	        }
	
	        /**
	         * This method is used for prepare the lookup field for save the lookup field
	         */
	        function prepareLookupFieldSettingsForSave() {
	            var index, lookupFieldSettingsListLength = vm.lookupFieldSettingsList.length,
	                lookupFieldSettings = {
	                    "LookupFieldSettingSOs": []
	                };
	
	            for (index = 0; index < lookupFieldSettingsListLength; index++) {
	                var temp = vm.lookupFieldSettingsList[index];
	                var lookupFieldSetting = {
	                    Id: temp.Id,
	                    Name: temp.Name,
	                    IsDeleted: temp.IsDeleted,
	                };
	                lookupFieldSetting[vm.prefix + 'ObjectName__c'] = temp[vm.prefix + 'ObjectName__c'];
	                lookupFieldSetting[vm.prefix + 'LookupFieldName__c'] = temp[vm.prefix + 'LookupFieldName__c'];
	                lookupFieldSetting[vm.prefix + 'FilterCriteria__c'] = temp[vm.prefix + 'FilterCriteria__c'];
	                lookupFieldSetting[vm.prefix + 'LookupRecordLimit__c'] = temp[vm.prefix + 'LookupRecordLimit__c'];
	                lookupFieldSetting[vm.prefix + 'DefaultFlagField__c'] = temp[vm.prefix + 'DefaultFlagField__c'];
	                lookupFieldSetting[vm.prefix + 'SourceObject__c'] = temp[vm.prefix + 'SourceObject__c'];
	                lookupFieldSetting[vm.prefix + 'SourceField__c'] = temp[vm.prefix + 'SourceField__c'];
	                lookupFieldSetting[vm.prefix + 'EnableQuickView__c'] = temp[vm.prefix + 'EnableQuickView__c'];
	                if (temp[vm.prefix + 'DisplayColumns__c'])
	                    lookupFieldSetting[vm.prefix + 'DisplayColumns__c'] = (temp[vm.prefix + 'DisplayColumns__c']).toString();
	                lookupFieldSettings.LookupFieldSettingSOs.push(lookupFieldSetting);
	            }
	            return lookupFieldSettings;
	        }
	
	        function isFieldNotDefined() {
	            var notMaintained = false,
	                indices = [];
	            for (var item in vm.lookupFieldSettingsList) {
	                if (!isNaN(parseInt(item, 10))) {
	                    var fieldName = vm.lookupFieldSettingsList[item]['Name'];
	                    if (fieldName === '' || fieldName == undefined) {
	                        notMaintained = true;
	                        indices.push(parseInt(item, 10) + 1);
	                    } else {
	                        if (vm.lookupFieldSettingsList[item]['hasError']) {
	                            delete vm.lookupFieldSettingsList[item]['hasError'];
	                        }
	                    }
	                }
	            }
	            return {
	                notMaintained: notMaintained,
	                indices: indices
	            };
	        }
	
	        function isDuplicateFieldName(fieldName) {
	            var sorted, item,
	                notMaintained = false,
	                fieldName = fieldName;
	            sorted = vm.lookupFieldSettingsList.concat().sort(function(a, b) {
	                if (a.fieldName > b.fieldName) return 1;
	                if (a.fieldName < b.fieldName) return -1;
	                return 0;
	            });
	            for (item in vm.lookupFieldSettingsList) {
	                if (!isNaN(parseInt(item, 10))) {
	                    sorted[item].hasError = ((sorted[item - 1] && sorted[item - 1][fieldName] === sorted[item][fieldName]) || (sorted[item + 1] && sorted[item + 1][fieldName] === sorted[item][fieldName]));
	                    if (sorted[item].hasError) {
	                        notMaintained = true;
	                    }
	                }
	            }
	            return notMaintained;
	        }
	
	        /**
	         * set hasError class to invalid field
	         */
	        function updateErrorAttributeOfAction(indexArr) {
	            if (indexArr) {
	                for (var i = 0; i < indexArr.length; i++) {
	                    var index = indexArr[i];
	                    vm.lookupFieldSettingsList[index - 1].hasError = true;
	                }
	            }
	        }
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        function processUpdateStatus(event, toState, toParams) {
	            if (event) {
	                if (toState) {
	                    vm.alert = [];
	                    $state.go(toState, toParams);
	                }
	            }
	        }
	
	        /** 
	         * - This method is call while user click the save button
	         */
	        vm.explicitPageSave = function() {
	            savePage();
	        }
	
	        /**
	         * When user selects another menu from the parent menu bar, implicit save should happen for this page
	         * before state change happens. State change is not allowed incase of errors in saving the page.
	         *
	         * If user click on "Cancel" button or uses the "Back-Arrow" image from the menu panel, state changes to 'list' state.
	         * In that case, page save is not needed.
	         */
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if ((toState.name === 'app.applicationManagement.settingGroup' && toParams.id === null) || !vm.lookupFieldSettingsForm.$dirty) {
	                return true;
	            } else {
	                e.preventDefault();
	                savePage(e, toState, toParams);
	            }
	        });
	
	        /**
	         * - This method is used for goto the application management page while user click the cancel button
	         */
	        vm.goToApplicationManagement = function() {
	            $state.go('app.applicationManagement.settingGroup', { 'id': null });
	        }
	
	        vm.showModal = function ($event) {
	            vm.event = $event;
	            vm.displayModal = true;            
	        }
	    };
	
	    lookupFieldSettingsController.$inject = [
	        '$scope',
	        '$state',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'cpqAdminConstants',
	        'applicationService',
	        'applicationManagementService',
	        'lookupFieldSettingsService',
	        'applicationFeatures',
	        'lineItemPicklistValues',
	        'productAttributeValuePicklistValues',
	        'getAllLookupFieldSettings'
	    ];
	
	    module.exports = lookupFieldSettingsController;
	})();

/***/ }),
/* 697 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var filterCriteriaController = function($scope, $mdDialog, i18nService, selected) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	        vm.filterCriteria = selected.filterCriteria;
	
	        vm.save = function() {
	            $mdDialog.hide({
	                filterCriteria: vm.filterCriteria
	            });
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        vm.alert = [];
	
	        function addAlert(obj) {
	            vm.alert = [];
	            vm.alert.push(obj);
	        }
	        vm.closeAlert = function(index) {
	            vm.alert.splice(index, 1);
	        };
	    };
	
	    filterCriteriaController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'i18nService',
	        'selected'
	    ];
	
	    module.exports = filterCriteriaController;
	})();

/***/ }),
/* 698 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"filter-criteria-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>{{::vm.labels.FilterCriteria}}</h2>\n            <span flex></span>\n            <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n                </i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"filter-criteria-dialog-content\">\n        <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alert\" dismiss-on-timeout=\"5000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n        <div flex=\"100\">\n            <material-form-field model=\"vm.filterCriteria\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"::vm.labels.FilterCriteria\">\n            </material-form-field>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>"

/***/ }),
/* 699 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var advancedLookupFieldSettingsController = function($scope, $mdDialog, i18nService, systemConstants, selected) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.LookupFieldSettings = selected.LookupFieldSettings;
	
	        vm.save = function() {
	            $mdDialog.hide({
	                selectedLookupFieldSettings: angular.copy(vm.LookupFieldSettings)
	            });
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	    };
	
	    advancedLookupFieldSettingsController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'selected'
	    ];
	
	    module.exports = advancedLookupFieldSettingsController;
	})();

/***/ }),
/* 700 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"advanced-lookup-field-settings-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>{{::vm.LookupFieldSettings.Name}}</h2>\n            <span flex></span>\n            <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n                </i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"advanced-lookup-field-settings-dialog-content\">\n        <div layout=\"row\">\n            <div flex>\n                <material-form-field model=\"vm.LookupFieldSettings[vm.prefix + 'LookupRecordLimit__c']\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"::vm.labels.LookupRecordLimit\" scale=\"0\" precision=\"20\"></material-form-field>\n            </div>\n            <div flex>\n                <material-form-field model=\"vm.LookupFieldSettings[vm.prefix + 'DefaultFlagField__c']\" field-type=\"string\" is-editable=\"true\" field-label=\"::vm.labels.JunctionDefaultFlag\"></material-form-field>\n            </div>\n        </div>\n        <div layout=\"row\">\n            <div flex>\n                <material-form-field model=\"vm.LookupFieldSettings[vm.prefix + 'SourceObject__c']\" field-type=\"string\" is-editable=\"true\" field-label=\"::vm.labels.JunctionObjectName\"></material-form-field>\n            </div>\n            <div flex>\n                <material-form-field model=\"vm.LookupFieldSettings[vm.prefix + 'SourceField__c']\" field-type=\"string\" is-editable=\"true\" field-label=\"::vm.labels.JunctionFieldName\"></material-form-field>\n            </div>\n        </div>\n        <div layout=\"row\">\n            <div flex>\n                <material-form-field model=\"vm.LookupFieldSettings[vm.prefix + 'EnableQuickView__c']\" field-type=\"checkbox\" is-editable=\"true\" class=\"table-checkbox\" field-label=\"::vm.labels.EnableQuickView\"></material-form-field>\n            </div>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>"

/***/ }),
/* 701 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"lookup-field-settings-main-Container\">\n    <div class=\"lookup-field-settings-header title-bar\">\n        <div class=\"lookup-field-settings-title-container\">\n            <div href=\"#\" title=\"{{vm.labels.LookupFieldSettings}}\">\n                <i class=\"fa fa-image\"></i>\n                <span class=\"title\">{{::vm.labels.LookupFieldSettings}}</span>\n            </div>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse noPadding\">\n            <lookup-field-settings-sub-menu></lookup-field-settings-sub-menu>\n        </div>\n        <div class=\"clearfix\"></div>\n    </div>\n    <div class=\"lookup-field-settings-center-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <application-feature-side-menu application-features-list=\"vm.applicationFeatures.leftSideList\" selected-application-feature-name=\"vm.labels.LookupFieldSettings\"></application-feature-side-menu>\n        </div>\n        <!-- Content layout starts -->\n        <div class=\"lookup-field-settings-container\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"5000\">{{alert.msg}}</uib-alert>\n            <form name=\"vm.lookupFieldSettingsForm\" novalidate>\n                <div class=\"lookup-field-group\" data-ng-repeat=\"item in vm.lookupFieldSettingsList track by $index\" data-ng-class=\"{ 'error': item.hasError}\">\n                    <div class=\"lookup-fields\">\n                        <div class=\"action\">\n                            <i class=\"clear-icon material-icons\" data-ng-click=\"vm.removeLookupFieldSetting($index, item.Id)\">clear</i>\n                        </div>\n                        <div class=\"action\">\n                            <i class=\"material-icons\" data-ng-click=\"vm.openAdvancedLookupFieldSettings($index, item)\">settings</i>\n                        </div>\n                        <div class=\"item\">\n                            <material-form-field model=\"item.Name\" field-type=\"string\" is-editable=\"true\" field-label=\"::vm.labels.Name\" is-required=\"true\"></material-form-field>\n                        </div>\n                        <div class=\"item\">\n                            <material-form-field model=\"item[vm.prefix + 'ObjectName__c']\" field-type=\"picklist\" is-editable=\"true\" field-label=\"::vm.labels.ObjectName\" properties=\"vm.objectNamePicklistValues\" data-ng-click=\"vm.trackSelectedRowIndex($index)\"></material-form-field>\n                        </div>\n                        <div class=\"item\">\n                            <material-form-field model=\"item[vm.prefix + 'LookupFieldName__c']\" field-type=\"picklist\" is-editable=\"true\" field-label=\"::vm.labels.LookupFieldName\" properties=\"item.lookupFieldNamePicklistValues\" data-ng-click=\"vm.trackSelectedRowIndex($index)\"></material-form-field>\n                        </div>\n                        <div class=\"item filter-criteria\">\n                            <div class=\"expression-field\">\n                                <material-form-field model=\"item[vm.prefix + 'FilterCriteria__c']\" field-type=\"string\" is-editable=\"false\" field-label=\"::vm.labels.FilterCriteria\"></material-form-field>\n                                <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.openFilterCriteriaPopup($index)\">\n                                    <i class=\"fa fa-external-link\"></i>\n                                </button>\n                            </div>\n                        </div>\n                        <div class=\"item\">\n                            <material-form-field model=\"item[vm.prefix + 'DisplayColumns__c']\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" field-label=\"::vm.labels.LookupDisplayColumns\" properties=\"item.displayColumnPicklistValues\" field-label=\"::vm.labels.LookupDisplayColumns\"></material-form-field>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"clearfix new-lookup-field\">\n                    <div class=\"pull-right\">\n                        <button class=\"slds-button slds-button_brand\" ng-click=\"vm.addNewLookupFieldSetting()\">{{::vm.labels.NewLookupField}}</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n        <!-- Content layout ends -->\n    </div>\n    <div class=\"lookup-field-settings-footer \">\n        <div class=\"container-fluid \">\n            <span><span class=\"help-text-align\" ng-click=\"vm.showModal($event)\">{{vm.labels.ClickHere}}</span> {{vm.labels.CustomSettingsMaintenanceJob}}</span>\n            <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToApplicationManagement() \">{{vm.labels.DialogCancelButton}}</a>\n            <a class=\"slds-button slds-button_brand \" data-ng-click=\"vm.explicitPageSave() \">{{vm.labels.DialogSaveButton}}</a>\n        </div>\n    </div>\n</div>\n<custom-settings-maintenance ng-if=\"vm.displayModal\" event=\"vm.event maintenance\" maintenance=\"customSettingsMaintenance\"></custom-settings-maintenance>\n<modal-dialog data-ng-if=\"showModalPop \" config=\"showIdleError \"></modal-dialog>"

/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    __webpack_require__(703);
	    __webpack_require__(708);
	    __webpack_require__(710);
	    __webpack_require__(712);
	    __webpack_require__(716);
	    __webpack_require__(720);
	
	    module.exports = angular.module('cpqAdmin.priceRuleset', [
	
	            'cpqAdmin.priceRuleset.common.services',
	            'cpqAdmin.priceRuleset.common.directives',
	            'cpqAdmin.priceRuleset.common.filters',
	            'cpqAdmin.priceRuleset.list',
	            'cpqAdmin.priceRuleset.details',
	            'cpqAdmin.priceRuleset.priceRules'
	        ])
	        .controller('priceRulesetController', __webpack_require__(731))
	        .constant('priceRulesetConstants', __webpack_require__(732))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceRuleset', {
	                url: '/priceRuleset',
	                //abstract: true,
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(733),
	                        controller: 'priceRulesetController',
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 703 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceRuleset.common.directives', ['cpqAdmin.priceRuleset.common.services'])
	        .directive('priceRulesetSubMenu', __webpack_require__(704))
	        .directive('priceRulesetsListing', __webpack_require__(706));
	})();


/***/ }),
/* 704 */
[901, 705],
/* 705 */
/***/ (function(module, exports) {

	module.exports = "<ul class=\"nav navbar-nav price-rule-set-menu\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceRuleset.details({id:vm.$stateParams.id})\">{{vm.labels.Details}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceRuleset.priceRules({id:vm.$stateParams.id})\">{{vm.labels.PriceRules}}</a>\n    </li>\n</ul>\n"

/***/ }),
/* 706 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    module.exports = [
	        function() {
	            var priceRulesetsListingController = function($scope, applicationService, systemConstants, $state, $stateParams,
	                i18nService, remoteService, priceRulesetCommonService, priceRulesetConstants) {
	
	                var vm = this,
	                    prefix = systemConstants.nsPrefix || '',
	                    filter = {
	                        SearchString: '',
	                        ChunkNumber: 1,
	                        NumberOfRecordsPerChunk: priceRulesetConstants.numberOfProductsPerChunk || 50
	                    },
	                    pageNumber = 1;
	
	                vm.labels = i18nService.CustomLabel;
	                vm.disableLeftBtn = true;
	                vm.searchedStr = '';
	                vm.isMaxSQLSizeExceed = false;
	                vm.numberOfProductsPerChunk = priceRulesetConstants.numberOfProductsPerChunk || 50;
	
	                vm.searchPriceRulesets = function() {
	                    filter.SearchString = vm.searchText || '';
	                    filter.ChunkNumber = 1;
	                    filter.NumberOfRecordsPerChunk = vm.numberOfProductsPerChunk;
	                    loadPriceRulesets();
	                };
	
	                vm.prepareFiltersAndPriceRulesets = function() {
	                    filter = priceRulesetCommonService.getFilter();
	                    if (Object.keys(filter).length) {
	                        vm.searchText = filter.SearchString;
	                    } else {
	                        filter = {
	                            ChunkNumber: pageNumber || 1,
	                            NumberOfRecordsPerChunk: vm.numberOfProductsPerChunk,
	                            SearchString: vm.searchString || ''
	                        };
	                    }
	                };
	
	                /* On Page load while there are no filters applied */
	                vm.prepareFiltersAndPriceRulesets();
	
	                vm.getPriceRulesets = function(type) {
	                    if (type === 'next') {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber + 1);
	                        if (filter.ChunkNumber !== 1) {
	                            vm.disableLeftBtn = false;
	                        }
	                        loadPriceRulesets();
	                    } else {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber - 1);
	                        if (filter.ChunkNumber === 1) {
	                            vm.disableLeftBtn = true;
	                        }
	                        loadPriceRulesets();
	                    }
	                };
	
	                var pLDeRegisterFunc = $scope.$watch(function() {
	                    return priceRulesetCommonService.getPriceRulesets();
	                }, function(newValue, oldValue) {
	                    if (newValue && oldValue) {
	                        processData(newValue);
	                    }
	                }, true);
	
	                function processData(priceRulesets) {
	                    /* Used to bind to table body */
	                    vm.priceRulesets = priceRulesets;
	                    vm.isMaxSQLSizeExceed = false;
	
	                    if (priceRulesets.length === 0) {
	                        vm.searchedStr = vm.searchString;
	                    }
	                    /**
	                     * - Check if the response size is less than the current chunk size.
	                     * - If less, disable the next button
	                     * - else keep it enabled
	                     */
	
	                    if (priceRulesets.length < filter.NumberOfRecordsPerChunk) {
	                        vm.disableRightBtn = true;
	                        updateCenterBtnText(filter, priceRulesets.length);
	                    } else {
	                        vm.disableRightBtn = false;
	                        updateCenterBtnText(filter, priceRulesets.length);
	                    }
	
	                    /* Hide the loader on success of service call */
	                    vm.showLoader = false;
	                    document.querySelector('.list-table').scrollTop = 0;
	                }
	
	                function loadPriceRulesets() {
	
	                    vm.showLoader = true;
	                    priceRulesetCommonService.loadAllPriceRulesets(filter)
	                        .then(function(response) {}, function(reason) {});
	
	                }
	
	                function updateCenterBtnText(filterObj, endCount) {
	                    /* 
	                     * - Search result might return lesser number of records than current pagination count.
	                     * e.g. current pagination is : 1-150, but search returned only 20 records.
	                     * - Then pagination should be updated to 1-20 instead of 1-150.
	                     * - endCount variable contains the exact number of records and will only be defined, if
	                     * search count is lesser than current pagination sequence.
	                     */
	                    if (filterObj.ChunkNumber === 1) {
	                        vm.disableLeftBtn = true;
	                    }
	                    if (endCount) {
	                        vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfProductsPerChunk + 1) + '-' + ((filterObj.ChunkNumber - 1) * vm.numberOfProductsPerChunk + endCount) + ')';
	                        if (endCount < vm.numberOfProductsPerChunk) {
	                            vm.disableRightBtn = true;
	                        }
	                    } else {
	                        vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfProductsPerChunk + 1) + '-' + (filterObj.ChunkNumber * vm.numberOfProductsPerChunk) + ')';
	                    }
	                }
	
	                vm.getActiveClass = function(id) {
	                    if ($stateParams.id === id) {
	                        return true;
	                    } else {
	                        return false;
	                    }
	                };
	
	                $scope.$on('destroy', function() {
	                    deRegisterFunc();
	                    pLDeRegisterFunc();
	                    vm = null;
	                });
	
	                vm.loadPriceRulesetDetails = function(toBeLoadedPrs) {
	                    $state.go('app.priceRuleset.details', {
	                        id: toBeLoadedPrs.id
	                    });
	                };
	            };
	
	            priceRulesetsListingController.$inject = [
	                '$scope',
	                'applicationService',
	                'systemConstants',
	                '$state',
	                '$stateParams',
	                'i18nService',
	                'remoteService',
	                'priceRulesetCommonService',
	                'priceRulesetConstants'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {},
	                controller: priceRulesetsListingController,
	                controllerAs: 'vm',
	                bindToController: {
	                    searchText: '='
	                },
	                template: __webpack_require__(707),
	            };
	        }
	    ];
	})();


/***/ }),
/* 707 */
/***/ (function(module, exports) {

	module.exports = "<header>\n    <h4>{{::vm.labels.AllPriceRuleSets}}</h4>\n    <div class=\"search\">\n        <form ng-submit=\"vm.searchPriceRulesets()\" novalidate>\n            <div class=\"search-input-container\">\n                <div class=\"input-group\">\n                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                    <label class=\"ng-binding\">Search</label>\n                </div>\n            </div>\n        </form>\n    </div>\n</header>\n<div data-ng-if=\"vm.priceRulesets.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n    {{::vm.labels.NoMatchingPriceRuleSets}} <span><b>{{vm.searchedStr}}</b></span>\n</div>\n<div data-ng-if=\"vm.priceRulesets.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n    {{::vm.labels.MaxSQLSizeExceedMessage}}\n</div>\n<div class=\"list-table\">\n    <table>\n        <tbody>\n            <tr ng-repeat=\"item in vm.priceRulesets track by item.id\" ng-click=\"vm.loadPriceRulesetDetails(item)\" ng-class=\"{active: vm.getActiveClass(item.id) === true}\">\n                <td title=\"{{item.name}}\">\n                    {{::item.name }}\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<div class=\"pagination price-rule-sets-list-pagination\">\n    <div class=\"place price-rule-sets-list-place\">\n        {{vm.paginationCenterText}}\n    </div>\n    <div class=\"next-prev\">\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getPriceRulesets('previous')\">\n            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n        </button>\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getPriceRulesets('next')\">\n            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n        </button>\n    </div>\n</div>\n"

/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceRuleset.common.services', [])
	        .service('priceRulesetCommonService', __webpack_require__(709));
	        
	})();


/***/ }),
/* 709 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var priceRulesetCommonServices = function(systemConstants, moment, remoteService, $q) {
	
	        var filter = {},
	            selectedPRS = {},
	            completePrs = {},
	            priceRuleset = [],
	            dateFormat = 'MM/DD/YYYY',
	            metadata = [];
	
	        /* 
	         * Converts a date in string format or in milliseconds to date to format to be used
	         * in datepicker component
	         */
	        function formatDate(date) {
	            if (angular.isDefined(date)) {
	                if (date === null || date === '') {
	                    date = null;
	                } else if (angular.isString(date)) {
	                    date = new Date(date);
	                } else {
	                    date = new Date(date);
	                }
	            }
	            return date ? moment(date).format(dateFormat) : '';
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function setSelectedPRS(obj) {
	            selectedPRS = obj;
	        }
	
	        function getSelectedPRS() {
	            return selectedPRS;
	        }
	
	        function processAllPriceRulesetResponse(prsItems) {
	            var response = [];
	            if (prsItems && prsItems.length > 0) {
	                for (var i = 0; i < prsItems.length; i++) {
	                    var tempItem = prsItems[i].PriceRulesetSO,
	                        obj = {};
	                    obj['name'] = tempItem.Name;
	                    obj['id'] = tempItem.Id;
	                    obj['sequence'] = tempItem[getPrefixedAttribute('Sequence__c')];
	                    obj['isActive'] = tempItem[getPrefixedAttribute('Active__c')];
	                    obj['applicationLevel'] = tempItem[getPrefixedAttribute('UseType__c')];
	                    obj['applicationMethod'] = tempItem[getPrefixedAttribute('ApplicationMethod__c')];
	
	                    response.push(obj);
	                }
	            }
	            return response;
	        }
	
	        function loadAllPriceRulesets(requestObj) {
	            var defer = $q.defer();
	            remoteService.getAllPriceRulesets(requestObj)
	                .then(function(response) {
	                    var processedData = processAllPriceRulesetResponse(response.PriceRulesetDOs);
	                    setPriceRulesets(processedData);
	                    defer.resolve(true);
	                }, function(reason) {
	                    defer.reject(true);
	                });
	            return defer.promise;
	        }
	
	        function setPriceRulesets(arr) {
	            priceRuleset = [];
	            priceRuleset = angular.copy(arr);
	        }
	
	        function getPriceRulesets() {
	            return priceRuleset;
	        }
	
	        function processAllPriceListResponse(items) {
	            var response = [];
	            for (var i = 0; i < items.length; i++) {
	                response.push({
	                    Name: items[i].PriceListSO.Name,
	                    Id: items[i].PriceListSO.Id
	                });
	            }
	            return response;
	        }
	
	        function searchPriceList(searchText) {
	            var defer = $q.defer(),
	                requestObj = {
	                    ChunkNumber: 1,
	                    NumberOfRecordsPerChunk: 50,
	                    SearchString: searchText
	                };
	            remoteService.getAllPriceLists(requestObj)
	                .then(function(response) {
	                    var processedData = processAllPriceListResponse(response.PriceListDOs);
	                    defer.resolve(processedData);
	                }, function(reason) {
	                    defer.reject(true);
	                });
	            return defer.promise;
	        }
	
	        function getSampleNewPriceRuleset() {
	            var newPriceRuleset = {
	                name: '',
	                sequence: '',
	                isActive: true,
	                stopProcessingMoreRules: false,
	                effectiveDate: undefined,
	                expirationDate: undefined,
	                description: '',
	                category: '',
	                chargeType: '',
	                applicationLevel: '',
	                applicationMethod: '',
	                productCategory: {
	                    autocomplete: {
	                        querySearch: searchProductCategory,
	                        displayName: 'Name',
	                        displayLabel: 'Label'
	                    }
	                },
	                productGroup: {
	                    autocomplete: {
	                        querySearch: searchProductGroup,
	                        displayName: 'Name'
	                    }
	                },
	                priceList: {
	                    autocomplete: {
	                        querySearch: searchPriceList,
	                        displayName: 'Name'
	                    }
	                },
	                productFamily: '',
	                enableCurrency: false,
	                enableDateRange: false,
	                currency: ''
	            };
	            return newPriceRuleset;
	        }
	
	        function setFilter(obj) {
	            filter = obj;
	        }
	
	        function getFilter() {
	            return filter;
	        }
	
	        function getSObjectPicklistFields(sObjectName, fields) {
	            var defer = $q.defer(),
	                picklistFieldNames;
	            sObjectName = getPrefixedAttribute(sObjectName);
	            if (fields && fields.length) {
	                for (var i = 0; i < fields.length; i++) {
	                    fields[i] = getPrefixedAttribute(fields[i]);
	                }
	                picklistFieldNames = fields;
	            } else {
	                picklistFieldNames = null;
	            }
	            remoteService.getSObjectPicklistFields(sObjectName, picklistFieldNames)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function extractExpression(chargeTypeCriteria) {
	            var chargeTypeCriteriaObj = ((chargeTypeCriteria !== undefined && chargeTypeCriteria !== '') ? JSON.parse(chargeTypeCriteria) : '');
	            var chargeTypeExpression = '';
	            if (chargeTypeCriteriaObj) {
	                chargeTypeExpression = chargeTypeCriteriaObj.exprStr;
	            } else {
	                chargeTypeExpression = '';
	            }
	            return chargeTypeExpression;
	        }
	
	        function preparePriceRuleSetDetails(response) {
	            var tempItem = response.PriceRulesetSO,
	                obj = {};
	            obj['name'] = tempItem.Name;
	            obj['id'] = tempItem.Id;
	            obj['sequence'] = tempItem[getPrefixedAttribute('Sequence__c')];
	            obj['isActive'] = tempItem[getPrefixedAttribute('Active__c')];
	            obj['description'] = tempItem[getPrefixedAttribute('Description__c')] || '';
	            obj['stopProcessingMoreRules'] = tempItem[getPrefixedAttribute('StopProcessingMoreRules__c')];
	            obj['effectiveDate'] = tempItem[getPrefixedAttribute('EffectiveDate__c')];
	            obj['expirationDate'] = tempItem[getPrefixedAttribute('ExpirationDate__c')];
	            obj['category'] = tempItem[getPrefixedAttribute('Category__c')] || '';
	            obj['chargeType'] = tempItem[getPrefixedAttribute('ChargeType__c')] || '';
	            obj['applicationLevel'] = tempItem[getPrefixedAttribute('UseType__c')] || '';
	            obj['applicationMethod'] = tempItem[getPrefixedAttribute('ApplicationMethod__c')] || '';
	            obj['rulesetCriteria'] = tempItem[getPrefixedAttribute('Criteria__c')] || '';
	            var productCategory = tempItem[getPrefixedAttribute('ProductCategory__c')] || '';
	            obj['productCategory'] = {
	                'autocomplete': {
	                    querySearch: searchProductCategory,
	                    displayName: 'Name',
	                    displayLabel: 'Label'
	                }
	            };
	            if (productCategory) {
	                obj['productCategory'].autocomplete.selectedItem = {
	                    Id: productCategory,
	                    Name: productCategory
	                }
	            }
	            var productGroup = tempItem[getPrefixedAttribute('ProductGroupId__r')] || '';
	            if (productGroup) {
	                obj['productGroup'] = {
	                    'autocomplete': {
	                        querySearch: searchProductGroup,
	                        displayName: 'Name',
	                        selectedItem: {
	                            Id: productGroup.Id,
	                            Name: productGroup.Name
	                        }
	                    }
	                };
	            } else {
	                obj['productGroup'] = {
	                    'autocomplete': {
	                        querySearch: searchProductGroup,
	                        displayName: 'Name'
	                    }
	                };
	            }
	
	            var priceList = tempItem[getPrefixedAttribute('PriceListId__r')] || '';
	            if (priceList) {
	                obj['priceList'] = {
	                    'autocomplete': {
	                        querySearch: searchPriceList,
	                        displayName: 'Name',
	                        selectedItem: {
	                            Id: priceList.Id,
	                            Name: priceList.Name
	                        }
	                    }
	                };
	            } else {
	                obj['priceList'] = {
	                    'autocomplete': {
	                        querySearch: searchPriceList,
	                        displayName: 'Name'
	                    }
	                };
	            }
	
	            obj['productFamily'] = tempItem[getPrefixedAttribute('ProductFamily__c')] || '';
	            obj['enableCurrency'] = tempItem[getPrefixedAttribute('EnableCurrency__c')];
	            obj['enableDateRange'] = tempItem[getPrefixedAttribute('EnableDateRange__c')];
	            if (obj.enableCurrency) {
	                obj.currency = tempItem.CurrencyIsoCode;
	            }
	            return obj;
	        }
	
	        function searchProductGroup(searchText) {
	            var defer = $q.defer();
	            remoteService.searchProductGroups(searchText || '')
	                .then(function(response) {
	                    defer.resolve(JSON.parse(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function prepareProductCategoryList(items) {
	            var response = [];
	
	            for (var i = 0; i < items.length; i++) {
	                var hierarchy = items[i][getPrefixedAttribute('HierarchyId__r')];
	                var ancestor = items[i][getPrefixedAttribute('AncestorId__r')];
	                var productCategory = {
	                    Name: items[i].Name,
	                    Id: items[i].Id
	                };
	                if (hierarchy && hierarchy.Name) {
	                    productCategory.Label = hierarchy.Name;
	                }
	                if (ancestor && ancestor.Name) {
	                    if (productCategory.Label !== ancestor.Name)
	                        productCategory.Label = productCategory.Label + " <i class='fa fa-angle-double-right'></i> " + ancestor.Name;
	                }
	                response.push(productCategory);
	            }
	            return response;
	        }
	
	        function searchProductCategory(searchText) {
	            var request = {
	                ChunkNumber: 1,
	                NumberOfCategoriesPerChunk: 50,
	                PriceListId: null,
	                SearchString: searchText || '',
	                SortDirection: "ASC",
	                SortField: "Name"
	            };
	            var defer = $q.defer();
	            remoteService.getAllCategoriesForPriceList(request).then(function(response) {
	                defer.resolve(prepareProductCategoryList(response.CategoryHierarchySOs));
	            }, function(reason) {
	                deferQ.reject(reason);
	            });
	            return defer.promise;
	        }
	
	        function getSelectedPriceRulesetDetails(prsId, returnEntireObj) {
	            var defer = $q.defer(),
	                requestObj = {
	                    "PriceRulesetIds": [prsId],
	                    "IncludeMetadataForPriceRuleset": true,
	                    "IncludeMetadataForPriceRuleEntry": true,
	                    "IncludeMetadataForPriceRule": true
	                },
	                response = {};
	            remoteService.getPriceRulesetDetails(requestObj)
	                .then(function(response) {
	                    setMetadata(response.PriceRulesetMetadata);
	                    if (prsId !== 'new') {
	                        var extractedDetails = preparePriceRuleSetDetails(response.PriceRulesetDOs[0]);
	                        setSelectedPRS(extractedDetails);
	                        setSelectedCompletePRS(response.PriceRulesetDOs[0]);
	                        if (returnEntireObj) {
	                            defer.resolve(response.PriceRulesetDOs[0]);
	                        } else {
	                            defer.resolve(extractedDetails);
	                        }
	                    } else {
	                        defer.resolve(getSampleNewPriceRuleset());
	                    }
	
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	
	            return defer.promise;
	        }
	
	        function setMetadata(items) {
	            metadata = items;
	        }
	
	        function getMetadata() {
	            return metadata;
	        }
	
	        function preparePrsRequestObj(obj, hasOriginalObj) {
	            /* Prepare request obj for PriceRulesetSO */
	            var priceRuleSet = {},
	                reqObj = {
	                    PriceRulesetDOs: [{
	                        "PriceRulesetSO": {},
	                        "PriceRuleDOs": []
	                    }]
	                };
	            if (hasOriginalObj) {
	                priceRuleSet = obj.PriceRulesetSO;
	                delete priceRuleSet.CreatedBy;
	                delete priceRuleSet.CreatedById;
	                delete priceRuleSet.CreatedDate;
	                delete priceRuleSet.LastModifiedBy;
	                delete priceRuleSet.LastModifiedById;
	                delete priceRuleSet.LastModifiedDate;
	                delete priceRuleSet.LastReferencedDate;
	                delete priceRuleSet.LastViewedDate;
	                delete priceRuleSet.Owner;
	                delete priceRuleSet.OwnerId;
	                delete priceRuleSet.SystemModstamp;
	                delete priceRuleSet[getPrefixedAttribute('PriceListId__r')];
	                delete priceRuleSet[getPrefixedAttribute('ProductGroupId__r')];
	                delete priceRuleSet[getPrefixedAttribute('ProductCategoryId__r')];
	
	                reqObj.PriceRulesetDOs[0].PriceRulesetSO = priceRuleSet;
	            } else {
	                priceRuleSet = obj.PriceRulesetSO;
	                var priceRuleSetSO = {};
	
	                priceRuleSetSO.Name = priceRuleSet.name;
	                if (priceRuleSet.id) {
	                    priceRuleSetSO.Id = priceRuleSet.id;
	                }
	                priceRuleSetSO[getPrefixedAttribute('Sequence__c')] = priceRuleSet.sequence;
	                priceRuleSetSO[getPrefixedAttribute('Active__c')] = priceRuleSet.isActive;
	                priceRuleSetSO[getPrefixedAttribute('Description__c')] = priceRuleSet.description;
	                priceRuleSetSO[getPrefixedAttribute('StopProcessingMoreRules__c')] = priceRuleSet.stopProcessingMoreRules;
	                priceRuleSetSO[getPrefixedAttribute('EffectiveDate__c')] = priceRuleSet.effectiveDate;
	                priceRuleSetSO[getPrefixedAttribute('ExpirationDate__c')] = priceRuleSet.expirationDate;
	                priceRuleSetSO[getPrefixedAttribute('Category__c')] = priceRuleSet.category;
	                priceRuleSetSO[getPrefixedAttribute('ChargeType__c')] = priceRuleSet.chargeType;
	                priceRuleSetSO[getPrefixedAttribute('UseType__c')] = priceRuleSet.applicationLevel;
	                priceRuleSetSO[getPrefixedAttribute('ApplicationMethod__c')] = priceRuleSet.applicationMethod;
	                priceRuleSetSO[getPrefixedAttribute('Criteria__c')] = priceRuleSet.rulesetCriteria;
	
	                if (priceRuleSet.productCategory.autocomplete && priceRuleSet.productCategory.autocomplete.selectedItem && priceRuleSet.productCategory.autocomplete.selectedItem.Id) {
	                    priceRuleSetSO[getPrefixedAttribute('ProductCategory__c')] = priceRuleSet.productCategory.autocomplete.selectedItem.Name;
	                } else {
	                    priceRuleSetSO[getPrefixedAttribute('ProductCategory__c')] = '';
	                }
	
	                if (priceRuleSet.productGroup.autocomplete && priceRuleSet.productGroup.autocomplete.selectedItem && priceRuleSet.productGroup.autocomplete.selectedItem.Id) {
	                    priceRuleSetSO[getPrefixedAttribute('ProductGroupId__c')] = priceRuleSet.productGroup.autocomplete.selectedItem.Id;
	                } else {
	                    priceRuleSetSO[getPrefixedAttribute('ProductGroupId__c')] = '';
	                }
	
	                if (priceRuleSet.priceList.autocomplete && priceRuleSet.priceList.autocomplete.selectedItem && priceRuleSet.priceList.autocomplete.selectedItem.Id) {
	                    priceRuleSetSO[getPrefixedAttribute('PriceListId__c')] = priceRuleSet.priceList.autocomplete.selectedItem.Id;
	                } else {
	                    priceRuleSetSO[getPrefixedAttribute('PriceListId__c')] = '';
	                }
	                priceRuleSetSO[getPrefixedAttribute('ProductFamily__c')] = priceRuleSet.productFamily;
	                priceRuleSetSO[getPrefixedAttribute('EnableCurrency__c')] = priceRuleSet.enableCurrency;
	                if (priceRuleSet.enableCurrency) {
	                    priceRuleSetSO.CurrencyIsoCode = priceRuleSet.currency;
	                }
	                priceRuleSetSO[getPrefixedAttribute('EnableDateRange__c')] = priceRuleSet.enableDateRange;
	                reqObj.PriceRulesetDOs[0].PriceRulesetSO = priceRuleSetSO;
	            }
	
	
	            /* Prepare request obj for PriceRuleDOs */
	            if (obj.PriceRuleDOs && obj.PriceRuleDOs.length > 0) {
	                for (var i = 0; i < obj.PriceRuleDOs.length; i++) {
	                    var priceRuleDO = obj.PriceRuleDOs[i],
	                        priceRuleSO = priceRuleDO.PriceRuleSO,
	                        priceRuleEntrySOs = priceRuleDO.PriceRuleEntrySOs;
	                    delete priceRuleSO.CreatedDate;
	                    delete priceRuleSO.CreatedBy;
	                    delete priceRuleSO.CreatedById;
	                    delete priceRuleSO.LastModifiedDate;
	                    delete priceRuleSO.LastModifiedBy;
	                    delete priceRuleSO.LastModifiedById;
	                    delete priceRuleSO.LastReferencedDate;
	                    delete priceRuleSO.LastViewedDate;
	                    delete priceRuleSO.SystemModstamp;
	                    delete priceRuleDO.selected;
	                    delete priceRuleSO[getPrefixedAttribute('Dimension1Id__r')];
	                    delete priceRuleSO[getPrefixedAttribute('RulesetId__r')];
	
	                    for (var j = 0; j < priceRuleEntrySOs.length; j++) {
	                        var priceRuleEntrySO = priceRuleEntrySOs[j];
	                        delete priceRuleEntrySO.CreatedDate;
	                        delete priceRuleEntrySO.CreatedBy;
	                        delete priceRuleEntrySO.CreatedById;
	                        delete priceRuleEntrySO.LastModifiedDate;
	                        delete priceRuleEntrySO.LastModifiedById;
	                        delete priceRuleEntrySO.SystemModstamp;
	                        delete priceRuleEntrySO[getPrefixedAttribute('PriceRuleId__r')];
	                        delete priceRuleEntrySO[getPrefixedAttribute('ProductGroupId__r')];
	                    }
	                }
	                reqObj.PriceRulesetDOs[0].PriceRuleDOs = obj.PriceRuleDOs;
	            }
	
	            return reqObj;
	        }
	
	        function createPriceRuleset(prsItem) {
	            var defered = $q.defer(),
	                requestObj = preparePrsRequestObj(prsItem);
	            remoteService.createPriceRuleset(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	
	            return defered.promise;
	        }
	
	        function updatePriceRuleset(prsItem, hasOriginalObj) {
	            var defered = $q.defer(),
	                requestObj = preparePrsRequestObj(prsItem, hasOriginalObj);;
	            remoteService.updatePriceRuleset(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	
	            return defered.promise;
	        }
	
	        function preparePF(arr) {
	            var response = [];
	            if (arr) {
	                for (var i = 0; i < arr.length; i++) {
	                    response.push({
	                        Name: arr[i],
	                        Id: arr[i]
	                    });
	                }
	            }
	            return response;
	        }
	
	        function searchProductFamily(searchText) {
	            var deferQ = $q.defer();
	            remoteService.searchProductFamily(searchText)
	                .then(function(response) {
	                    deferQ.resolve(preparePF(JSON.parse(response)));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function setSelectedCompletePRS(item) {
	            completePrs = item;
	        }
	
	        function getSelectedCompletePRS() {
	            return completePrs;
	        }
	
	        var service = {
	            setMetadata: setMetadata,
	            getMetadata: getMetadata,
	            setFilter: setFilter,
	            getFilter: getFilter,
	            getPriceRulesets: getPriceRulesets,
	            setPriceRulesets: setPriceRulesets,
	            setSelectedPRS: setSelectedPRS,
	            getSelectedPRS: getSelectedPRS,
	            loadAllPriceRulesets: loadAllPriceRulesets,
	            getSampleNewPriceRuleset: getSampleNewPriceRuleset,
	            getSObjectPicklistFields: getSObjectPicklistFields,
	            getSelectedPriceRulesetDetails: getSelectedPriceRulesetDetails,
	            preparePriceRuleSetDetails: preparePriceRuleSetDetails,
	            extractExpression: extractExpression,
	            createPriceRuleset: createPriceRuleset,
	            updatePriceRuleset: updatePriceRuleset,
	            searchProductGroup: searchProductGroup,
	            searchProductCategory: searchProductCategory,
	            searchProductFamily: searchProductFamily,
	            setSelectedCompletePRS: setSelectedCompletePRS,
	            getSelectedCompletePRS: getSelectedCompletePRS
	        };
	        return service;
	    };
	
	    priceRulesetCommonServices.$inject = [
	        'systemConstants',
	        'moment',
	        'remoteService',
	        '$q'
	    ];
	
	    module.exports = priceRulesetCommonServices;
	})();


/***/ }),
/* 710 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceRuleset.common.filters', [])
	        .filter('priceRulesetUserMessageService', __webpack_require__(711));
	
	})();


/***/ }),
/* 711 */
372,
/* 712 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceRuleset.list',[])
	        .service('priceRulesetListService', __webpack_require__(713))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceRuleset.list', {
	                parent: 'app.priceRuleset',
	                url: '/list',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(714),
	                        controller: __webpack_require__(715),
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 713 */
578,
/* 714 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"price-rule-set-list-container\">\n    <div class=\"two-col-layout auto-height\">\n        <div class=\"auto-height col-lg-12 noPadding list-table-container\">\n            <div class=\"list-header\">\n                <!-- Search Bar starts -->\n                <div class=\"row noMargin search-container title-bar\">\n                    <div class=\"price-rule-set-search\">\n                        <div class=\"col-xs-5\">\n                            <div class=\"search-box-container\">\n                                <span class=\"fa fa-filter pointerEventsNone\" disabled data-ng-click=\"vm.resetPagination();\"></span>\n                                <i class=\"search-icon material-icons\" data-ng-click=\"vm.resetPagination()\">search</i>\n                                <form ng-submit=\"vm.resetPagination()\">\n                                    <input type=\"text\" placeholder=\"Search Price Ruleset\" class=\"search-box\" data-ng-model=\"vm.searchString\">\n                                    <i class=\"clear-icon material-icons\" data-ng-if=\"vm.searchString\" data-ng-click=\"vm.clearSearchInput()\">clear</i>\n                                </form>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-3\"></div>\n                        <div class=\"col-xs-4 text-right price-rule-set-btn-group\">\n                            <div class=\"listBtn\">\n                                <button type=\"button\" class=\"slds-button slds-button_brand\" data-ng-click=\"vm.createNewPriceRuleset()\">{{vm.labels.NewPriceRuleset}}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div preloader add-to-element=\"true\" loading-text=\"vm.loadingText\" data-ng-if=\"vm.showLoader === true\"></div>\n            <div data-ng-if=\"vm.priceRuleSets.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{::vm.labels.NoMatchingPriceRuleset}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.priceRuleSets.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{::vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"list-table\">\n                <table ng-table=\"vm.tableParams\" class=\"table ng-table-resizable-columns\">\n                    <thead>\n                        <tr>\n                            <th ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                                <span ng-click=\"vm.tableHeaderClick(column);\">\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-descent'\">arrow_downward</i>\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-ascent'\">arrow_upward</i> \n                                    {{column.FieldLabel}}\n                                </span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"priceRuleset in vm.priceRuleSets track by priceRuleset.id\">\n                            <td data-ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                                <span data-ng-if=\"::column.FieldName === 'name'\">\n                                    <a data-ng-click=\"vm.loadPriceRulesetDetails(priceRuleset, $event)\" ng-bind-html=\"::priceRuleset[column.FieldName]\" class=\"clickable-item\"></a>\n                                </span>\n                                <span data-ng-if=\"::column.FieldName !== 'name'\" ng-bind-html=\"::vm.getFormattedContent(priceRuleset,column)\"></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"pagination-container text-center\" data-ng-if=\"vm.showPagination === true\">\n                <div class=\"btn-group dropup text-right\" role=\"group\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        {{vm.labels.RecordsPerPage | userMessage:vm.numberOfProductsPerChunk}}\n                        <span class=\"caret\"></span>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 50\">50</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 100\">100</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 150\">150</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 200\">200</a></li>\n                    </ul>\n                </div>\n                <div class=\"navigation-control\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProduct('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                    <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProduct('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 715 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var priceListListController = function($scope, $state, priceListService, $filter, NgTableParams, $timeout, i18nService, systemConstants, priceRulesetConstants, cpqAdminConstants,
	        priceRulesetCommonService, $location) {
	        var vm = this;
	
	        vm.labels = i18nService.CustomLabel;
	        var prefix = systemConstants.nsPrefix || '';
	        vm.tableColumnConfig = [{
	            "FieldLabel": vm.labels.Name,
	            "fieldName": 'Name',
	            "FieldName": "name",
	            "Type": "STRING",
	            "showSortIcon": true,
	            "sortIconCls": 'st-sort-ascent'
	
	        }, {
	            "FieldLabel": vm.labels.Sequence,
	            "fieldName": (prefix + 'Sequence__c'),
	            "FieldName": "sequence",
	            "Type": "quantity",
	
	        }, {
	            "FieldLabel": vm.labels.IsActive,
	            "fieldName": (prefix + 'Active__c'),
	            "FieldName": "isActive",
	            "Type": "BOOLEAN",
	
	        }, {
	            "FieldLabel": vm.labels.ApplicationLevel,
	            "fieldName": (prefix + 'UseType__c'),
	            "FieldName": "applicationLevel",
	            "Type": "STRING"
	        }, {
	            "FieldLabel": vm.labels.ApplicationMethod,
	            "fieldName": (prefix + 'ApplicationMethod__c'),
	            "FieldName": "applicationMethod",
	            "Type": "STRING",
	
	        }];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	        /* 
	         * - vm.searchString : is the value present in the search field at any point of time.
	         * - vm.searchedStr : is the value user has entered and either clicked on search icon or hit
	         * enter / return  key.
	         */
	        vm.searchedStr = '';
	        vm.numberOfProductsPerChunk = priceRulesetConstants.numberOfProductsPerChunk;
	
	        vm.pageNumber = 0;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = false;
	        vm.showLoader = false;
	        vm.loadingText = vm.labels.LoadingText;
	        vm.isMaxSQLSizeExceed = false;
	        vm.showPagination = true;
	        updateCenterBtnText();
	        var sortField, sortDirection, pageNumber = 1,
	            configType = '';
	
	        vm.getProduct = function(type) {
	            if (type === 'next') {
	                pageNumber = pageNumber + 1;
	                vm.pageNumber++;
	                if (vm.pageNumber !== 0) {
	                    vm.disableLeftBtn = false;
	                }
	                loadPriceRuleset();
	            } else {
	                pageNumber = pageNumber - 1;
	                vm.pageNumber--;
	                if (vm.pageNumber === 0) {
	                    vm.disableLeftBtn = true;
	                }
	                loadPriceRuleset();
	            }
	        };
	
	        function updateCenterBtnText(endCount) {
	            /* 
	             * - Search result might return lesser number of records than current pagination count.
	             * e.g. current pagination is : 1-150, but search returned only 20 records.
	             * - Then pagination should be updated to 1-20 instead of 1-150.
	             * - endCount variable contains the exact number of records and will only be defined, if
	             * search count is lesser than current pagination sequence.
	             */
	            if (endCount) {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfProductsPerChunk + 1) + '-' + (vm.pageNumber * vm.numberOfProductsPerChunk + endCount) + ')';
	            } else {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfProductsPerChunk + 1) + '-' + ((vm.pageNumber + 1) * vm.numberOfProductsPerChunk) + ')';
	            }
	        };
	
	        vm.resetPagination = function(resetPageNumber) {
	            vm.showPanel = false;
	            if (resetPageNumber) {
	                vm.pageNumber = 0;
	                pageNumber = 1;
	            }
	            vm.pageNumber = 0;
	            pageNumber = 1;
	            vm.disableLeftBtn = true;
	            updateCenterBtnText();
	            loadPriceRuleset();
	        };
	
	        var deRegisterFunc = $scope.$watch('vm.numberOfProductsPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                vm.resetPagination(false);
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            prsDeRegisterFunc();
	            vm = null;
	        });
	
	
	        vm.getFormattedContent = function(priceList, column) {
	            var modifiedValue, precision,
	                fieldType = column.Type,
	                value = priceList[column.FieldName];
	
	            if (vm.systemProperties && vm.systemProperties.PercentageFieldPrecision) {
	                precision = vm.systemProperties.PercentageFieldPrecision;
	            } else if (vm.properties && vm.properties.Precision) {
	                precision = vm.properties.Precision;
	            } else {
	                precision = 5;
	            }
	
	            switch (fieldType) {
	                case cpqAdminConstants.datetime:
	                case cpqAdminConstants.date:
	                    {
	                        modifiedValue = $filter('aptDateToString')(value);
	                        break;
	                    }
	
	                case cpqAdminConstants.boolean:
	                    {
	                        if (value) {
	                            modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	                        } else {
	                            modifiedValue = "<i class='material-icons show'>check_circle</i>";
	                        }
	                        break;
	                    }
	                case cpqAdminConstants.string:
	                case cpqAdminConstants.textarea:
	                case cpqAdminConstants.url:
	                case cpqAdminConstants.multipicklist:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	                default:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	            }
	            return modifiedValue;
	        };
	
	        function createNgTable(data, numberOfProductsPerChunk) {
	            var initialParams = {
	                count: numberOfProductsPerChunk
	            };
	            var initialSettings = {
	                counts: [],
	                paginationMaxBlocks: 0,
	                paginationMinBlocks: 0,
	                dataset: data
	            };
	            return new NgTableParams(initialParams, initialSettings);
	        }
	
	        var prsDeRegisterFunc = $scope.$watch(function() {
	            return priceRulesetCommonService.getPriceRulesets();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                processData(newValue);
	            }
	        }, true);
	
	        function processData(priceRuleSets) {
	
	            /* Used to bind to table body */
	            vm.priceRuleSets = priceRuleSets;
	            vm.isMaxSQLSizeExceed = false;
	
	            if (!vm.tableParams) {
	                vm.tableParams = createNgTable(priceRuleSets, vm.numberOfProductsPerChunk);
	            }
	
	            /* 
	             * - Show 'No matching products are found for the search entry XXX', when no return
	             * return result set is empty.
	             * - Keep the user messages, until user makes a fresh search which has atleast more
	             * than 1 result item.
	             */
	            vm.showPagination = true;
	            if (priceRuleSets.length === 0 && vm.searchString !== '') {
	                vm.searchedStr = vm.searchString;
	                if (vm.pageNumber === 0) {
	                    vm.showPagination = false;
	                }
	            }
	            if (priceRuleSets.length < vm.numberOfProductsPerChunk) {
	                vm.disableRightBtn = true;
	                updateCenterBtnText(priceRuleSets.length);
	            } else {
	                vm.disableRightBtn = false;
	                updateCenterBtnText();
	            }
	
	            /* Hide the loader on success of service call */
	            vm.showLoader = false;
	
	            $timeout(function() {
	                angular.element(window).resize();
	            }, 1000);
	            document.querySelector('.list-table').scrollTop = 0;
	        }
	
	        /**
	         * - When user enters search string and hits enter, this method gets called
	         * - Updates the smart-table pagination object.
	         * - Table header click
	         */
	        function loadPriceRuleset() {
	            /* Show the loader on start of service call */
	            vm.showLoader = true;
	
	            var requestObj = {
	                "SortField": sortField || 'Name',
	                "SortDirection": sortDirection || cpqAdminConstants.ASCENDING,
	                "SearchString": vm.searchString || '',
	                "NumberOfRecordsPerChunk": vm.numberOfProductsPerChunk,
	                "ChunkNumber": pageNumber
	            };
	
	            priceRulesetCommonService.loadAllPriceRulesets(requestObj)
	                .then(function(response) {
	                    if (response) {
	                        vm.showLoader = false;
	                    }
	                }, function(reason) {});
	        }
	
	        loadPriceRuleset();
	        /**
	         * - Clears searc input box
	         * - Makes a service call to reload the table
	         */
	        vm.clearSearchInput = function() {
	            vm.searchString = '';
	            vm.currentPage = 1;
	            vm.showPanel = false;
	            loadPriceRuleset();
	        };
	
	
	        /**
	         * - Show / Hide ascending or descending icon next to the column header when user clicks on header.
	         * - We are not using the default feature of the ngTable. It's doing local sorting and to
	         * bind to its server side sorting, configs are not available as of now.
	         */
	        vm.tableHeaderClick = function(column) {
	            sortField = column.fieldName;
	            if (!column.sortIconCls) {
	                column.sortIconCls = 'st-sort-ascent';
	            }
	            sortDirection = (column.sortIconCls === 'st-sort-ascent' ? cpqAdminConstants.DESCENDING : cpqAdminConstants.ASCENDING);
	            var columnsList = vm.tableColumnConfig;
	            for (var item in columnsList) {
	                if (column.FieldName === columnsList[item].FieldName) {
	                    columnsList[item].showSortIcon = true;
	                    columnsList[item].sortIconCls = column.sortIconCls ? (column.sortIconCls === 'st-sort-ascent' ? 'st-sort-descent' : 'st-sort-ascent') : 'st-sort-descent';
	                } else {
	                    columnsList[item].showSortIcon = false;
	                    columnsList[item].sortIconCls = false;
	                }
	            }
	            vm.resetPagination();
	        };
	
	        vm.loadPriceRulesetDetails = function(priceRuleset, event) {
	            priceRulesetCommonService.setSelectedPRS(angular.copy(priceRuleset));
	            $state.go('app.priceRuleset.details', {
	                id: priceRuleset.id
	            });
	            event.preventDefault();
	        };
	
	        vm.getDetailsPageUrl = function(id) {
	            var absUrl = $location.absUrl();
	            return absUrl.replace('/priceRuleset/list', '/priceRuleset/' + id + '/details');
	        };
	
	        vm.createNewPriceRuleset = function() {
	            var allPrs = priceRulesetCommonService.getPriceRulesets(),
	                newPrs = priceRulesetCommonService.getSampleNewPriceRuleset();
	            priceRulesetCommonService.setPriceRulesets(angular.copy(allPrs));
	            priceRulesetCommonService.setSelectedPRS(angular.copy(newPrs));
	            priceRulesetCommonService.setSelectedCompletePRS(angular.copy(newPrs));
	            $state.go('app.priceRuleset.details', {
	                id: 'new'
	            });
	        };
	
	    };
	
	    priceListListController.$inject = [
	        '$scope',
	        '$state',
	        'priceListService',
	        '$filter',
	        'NgTableParams',
	        '$timeout',
	        'i18nService',
	        'systemConstants',
	        'priceRulesetConstants',
	        'cpqAdminConstants',
	        'priceRulesetCommonService',
	        '$location'
	    ];
	
	    module.exports = priceListListController;
	
	})();


/***/ }),
/* 716 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceRuleset.details', [])
	        .service('detailsService', __webpack_require__(717))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceRuleset.details', {
	                parent: 'app.priceRuleset',
	                url: '/:id/details',
	                views: {
	                    'priceRulesetContainer': {
	                        template: __webpack_require__(718),
	                        controller: __webpack_require__(719),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    priceRulesetDetails: ['priceRulesetCommonService', '$stateParams', function(priceRulesetCommonService, $stateParams) {
	                        return priceRulesetCommonService.getSelectedPriceRulesetDetails($stateParams.id);
	                    }],
	                    allPicklists: ['priceRulesetCommonService', function(priceRulesetCommonService) {
	                        return priceRulesetCommonService.getSObjectPicklistFields('PriceRuleset__c', null);
	                    }],
	                    productFamilyPicklist: ['apiCallsService', function(apiCallsService) {
	                        return apiCallsService.getSObjectPicklistFields('Product2', ['Family']);
	                    }],
	                    chargeTypePicklist: ['apiCallsService', function(apiCallsService) {
	                        return apiCallsService.getSObjectPicklistFields('PriceListItem__c', ['ChargeType__c']);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 717 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var priceRulesetDetailsService = function($q, moment, i18nService, remoteService, systemConstants, apiCallsService, priceRulesetCommonService) {
	        var prefix = systemConstants.nsPrefix || '',
	            dateFormat = 'MM/DD/YYYY',
	            allPicklists = [],
	            labels = i18nService.CustomLabel;
	
	        function formatDate(date) {
	            if (angular.isDefined(date)) {
	                if (date === null || date === '') {
	                    date = null;
	                } else if (angular.isString(date)) {
	                    date = new Date(date);
	                } else {
	                    date = new Date(date);
	                }
	            }
	            return date ? moment(date).format(dateFormat) : '';
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        function getPicklistValues(type) {
	            var response = [],
	                value = '',
	                noneVar = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                };
	            if (allPicklists.length && type) {
	                if (type.indexOf('__c') > -1) {
	                    value = getPrefixedAttribute(type);
	                } else {
	                    value = type;
	                }
	                for (var i = 0; i < allPicklists.length; i++) {
	                    if (allPicklists[i].FieldName === value) {
	                        response = allPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            response.unshift(noneVar);
	            return response;
	        }
	
	        function setAllPicklists(data) {
	            allPicklists = data;
	        }
	
	        function getTypePicklists() {
	            return getPicklistValues('Type__c');
	        }
	
	        function getCategoryPicklists() {
	            return getPicklistValues('Category__c');
	        }
	
	        function getApplicationLevelTypePicklists() {
	            return getPicklistValues('UseType__c');
	        }
	
	        function getApplicationMethodTypePicklists() {
	            return getPicklistValues('ApplicationMethod__c');
	        }
	
	        var service = {
	            setAllPicklists: setAllPicklists,
	            getCategoryPicklists: getCategoryPicklists,
	            getApplicationLevelTypePicklists: getApplicationLevelTypePicklists,
	            getApplicationMethodTypePicklists: getApplicationMethodTypePicklists,
	            getTypePicklists: getTypePicklists,
	            getPicklistValues: getPicklistValues
	        };
	
	        return service;
	    };
	
	    priceRulesetDetailsService.$inject = [
	        '$q',
	        'moment',
	        'i18nService',
	        'remoteService',
	        'systemConstants',
	        'apiCallsService',
	        'priceRulesetCommonService'
	    ];
	
	    module.exports = priceRulesetDetailsService;
	})();


/***/ }),
/* 718 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"price-rule-sets-detail-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <price-rulesets-listing search-text=\"vm.searchText\"></price-rulesets-listing>\n        </div>\n        <div class=\"price-rule-sets-detail-block\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <!-- Create / Update product details form -->\n            <form class=\"price-rule-sets-detail-form\" novalidate name=\"vm.priceRulesetForm\">\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.PriceRuleSetName\" is-required=\"true\" name=\"name\" max-length=\"{{vm.getFieldValue('Name','Length')}}\"></material-form-field>\n                        <div ng-messages=\"vm.priceRulesetForm.name.$error\" ng-if=\"vm.priceRulesetForm.name.$touched || vm.priceRulesetForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.sequence\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"::vm.labels.Sequence\" is-required=\"true\" name=\"sequence\" precision=\"{{vm.getFieldValue('Sequence__c','Precision')}}\" scale=\"{{vm.getFieldValue('Sequence__c','Scale')}}\"></material-form-field>\n                        <div ng-messages=\"vm.priceRulesetForm.sequence.$error\" ng-if=\"vm.priceRulesetForm.sequence.$touched || vm.priceRulesetForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.isActive\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.IsActive\" element-id=\"isActive\"></material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.stopProcessingMoreRules\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.StopProcessingMoreRules\" element-id=\"stopProcessingMoreRules\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.enableCurrency\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.EnableCurrency\" element-id=\"enableCurrency\"></material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.enableDateRange\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.EnableDateRange\" element-id=\"enableDateRange\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\" ng-if=\"vm.selectedPrs.enableCurrency\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.currency\" \n                            field-type=\"picklist\"\n                            is-editable=\"true\"\n                            properties=\"vm.currencyPicklistEntries\"\n                            field-label=\"::vm.labels.Currency\"\n                            name=\"currency\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\">\n                        <material-form-field model=\"vm.selectedPrs.description\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"::vm.labels.ShortDescription\" max-length=\"{{vm.getFieldValue('Description__c','Length')}}\" name=\"ShortDescription\" id=\"short_description\"></material-form-field>\n                        <div ng-messages=\"vm.priceRulesetForm.ShortDescription.$error\">\n                            <p ng-message=\"maxlength\" class=\"formError\">\n                                {{vm.labels.FormDescriptionMaxCharError | userMessage:vm.labels.ShortDescription}}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.effectiveDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.EffectiveDate\"></material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.expirationDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.ExpirationDate\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field field-type=\"autocomplete\" properties=\"vm.selectedPrs.priceList\" field-label=\"::vm.labels.PriceList\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.productFamily\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.productFamilyPicklist\" field-label=\"::vm.labels.ProductFamily\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field field-type=\"autocomplete\" properties=\"vm.selectedPrs.productCategory\" field-label=\"::vm.labels.ProductCategory\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field field-type=\"autocomplete\" properties=\"vm.selectedPrs.productGroup\" field-label=\"::vm.labels.ProductGroup\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.category\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.categoryTypes\" field-label=\"::vm.labels.Category\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.chargeType\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.chargeTypePicklist\" field-label=\"::vm.labels.ChargeType\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.applicationLevel\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.applicationLevelType\" field-label=\"::vm.labels.ApplicationLevel\" data-ng-click=\"vm.trackSelectedRowIndex($index)\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.applicationMethod\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.applicationMethodType\" field-label=\"::vm.labels.ApplicationMethod\" is-disabled=\"{{vm.selectedPrs.applicationLevel !== 'Aggregate'}}\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex expression-field\">\n                        <material-form-field field-type=\"string\" field-label=\"::vm.labels.RulesetCriteria\" is-editable=\"true\" is-disabled=\"true\" model=\"vm.rulesetCriteriaExp\">\n                        </material-form-field>\n                        <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.openChargeTypeCriteriaPopup()\">\n                            <i class=\"fa fa-external-link\"></i>\n                        </button>\n                    </div>\n                </div>\n            </form>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListingPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.pageSave()\" data-ng-disabled=\"!vm.enableSave\">Save</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 719 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var detailsController = function($q, $scope, $rootScope, $state, $stateParams, applicationService, priceRulesetDetails,
	        detailsService, systemConstants, i18nService, cpqAdminConstants, productConstants, $mdDialog, priceRulesetCommonService, allPicklists, productFamilyPicklist, chargeTypePicklist) {
	
	        var vm = this,
	            isFormSaved = false;
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.selectedPrs = priceRulesetDetails;
	        vm.productFamilyPicklist = { PicklistValues: productFamilyPicklist[0].PicklistValues };
	        vm.chargeTypePicklist = { PicklistValues: chargeTypePicklist[0].PicklistValues };
	
	        detailsService.setAllPicklists(allPicklists);
	
	        vm.rulesetCriteriaExp = priceRulesetCommonService.extractExpression(priceRulesetDetails.rulesetCriteria);
	
	        var metaDataInfo = priceRulesetCommonService.getMetadata();
	        vm.categoryTypes = {
	            PicklistValues: detailsService.getCategoryPicklists()
	        };
	        vm.applicationLevelType = {
	            PicklistValues: detailsService.getApplicationLevelTypePicklists(),
	            methodToCallInController: updateApplicationMethod
	        };
	        vm.applicationMethodType = {
	            PicklistValues: detailsService.getApplicationMethodTypePicklists()
	        };
	        vm.currencyPicklistEntries = {
	            PicklistValues: detailsService.getPicklistValues('CurrencyIsoCode')
	        };
	
	        function updateApplicationMethod(model) {
	            if (model !== 'Aggregate') {
	                vm.selectedPrs.applicationMethod = '';
	            }
	        }
	        var selectedPrs = priceRulesetCommonService.getSelectedPRS();
	
	        /* Uncomment the below code once APIs are ready. This code will be used if user refreshes the page*/
	
	        if (Object.keys(selectedPrs).length === 0 || priceRulesetCommonService.getPriceRulesets().length === 0) {
	            var filter = {
	                SearchString: '',
	                ChunkNumber: 1
	            };
	            priceRulesetCommonService.loadAllPriceRulesets(filter).then(function() {
	                var allPrs = priceRulesetCommonService.getPriceRulesets(),
	                    present = false;
	                for (var i = 0; i < allPrs.length; i++) {
	                    if (allPrs[i].id === $stateParams.id) {
	                        present = true;
	                        priceRulesetCommonService.setSelectedPRS(allPrs[i]);
	                        break;
	                    }
	                }
	            }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	            });
	        } 
	
	        if ($stateParams.id === cpqAdminConstants.NEW) {
	            vm.selectedPrs.category = "All";
	            vm.selectedPrs.applicationLevel = "Line Item";
	            vm.selectedPrs.isActive = true;
	        } else {
	            isFormSaved = false;
	            if (vm.selectedPrs && !vm.selectedPrs.id) {
	                var allPrs = priceRulesetCommonService.getPriceRulesets();
	                allPrs.splice(0, 1);
	                priceRulesetCommonService.setPriceRulesets(allPrs);
	            }
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        function getPriceRulesetDetails(prsId) {
	            var defer = $q.defer();
	            priceRulesetCommonService.getSelectedPriceRulesetDetails(prsId)
	                .then(function(response) {
	                    vm.selectedPrs = response;
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	
	            return defer.promise;
	        }
	
	        function findIndex(arr, item) {
	            var index = -1;
	            for (var i = 0; i < arr.length; i++) {
	                if (arr[i].id === item.id) {
	                    index = i;
	                    break;
	                }
	            }
	            return index;
	        }
	
	        function savePriceRuleset(toState, toParams) {
	            if (vm.priceRulesetForm.$valid && vm.priceRulesetForm.$dirty) {
	                if ($stateParams.id === cpqAdminConstants.NEW) {
	                    priceRulesetCommonService.createPriceRuleset({
	                            PriceRulesetSO: angular.copy(vm.selectedPrs),
	                            PriceRuleDOs: priceRulesetCommonService.getSelectedCompletePRS().PriceRuleDOs
	                        })
	                        .then(function(response) {
	                            if (response.PriceRulesetDOs.length > 0) {
	                                isFormSaved = true;
	                                var allPls = priceRulesetCommonService.getPriceRulesets(),
	                                    firstItem = priceRulesetCommonService.preparePriceRuleSetDetails(response.PriceRulesetDOs[0]);
	                                allPls[0] = firstItem;
	                                priceRulesetCommonService.setPriceRulesets(allPls);
	                                priceRulesetCommonService.setSelectedPRS(firstItem);
	                                if (toState) {
	                                    toParams.id = firstItem.id;
	                                    $state.go(toState, toParams);
	                                } else {
	                                    addAlert('Created successfully', cpqAdminConstants.SUCCESS);
	                                    $state.go('app.priceRuleset.details', {
	                                        id: firstItem.id
	                                    });
	                                }
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                } else {
	                    priceRulesetCommonService.updatePriceRuleset({
	                            PriceRulesetSO: angular.copy(vm.selectedPrs),
	                            PriceRuleDOs: priceRulesetCommonService.getSelectedCompletePRS().PriceRuleDOs
	                        })
	                        .then(function(response) {
	                            isFormSaved = true;
	                            if (toState) {
	                                $state.go(toState, toParams);
	                            } else {
	                                addAlert('Updated successfully', cpqAdminConstants.SUCCESS);
	                                getPriceRulesetDetails(vm.selectedPrs.id)
	                                    .then(function(response) {}, function(reason) {});
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                }
	
	            } else if(vm.priceRulesetForm.$valid && toState){
	                isFormSaved = true;
	                $state.go(toState, toParams);
	            }else {
	                vm.priceRulesetForm.$setSubmitted();
	            }
	        }
	
	        vm.pageSave = function(toState, toParams) {
	            if (vm.selectedPrs) {
	                savePriceRuleset(toState, toParams);
	            } else {
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                }
	            }
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.priceRuleset.list') {
	                return true;
	            } else if (isFormSaved === true) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.pageSave(toState, toParams);
	            }
	        });
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	        $scope.$watchGroup(['vm.priceRulesetForm.$valid', 'vm.priceRulesetForm.$invalid'], function() {
	            if (vm.priceRulesetForm && vm.priceRulesetForm.$valid) {
	                vm.enableSave = true;
	            } else {
	                vm.enableSave = false;
	            }
	        });
	
	        $scope.$on(vm.labels.NewPriceRuleset.split(' ').join('-'), function() {
	            createNewPriceRuleset();
	        });
	
	        function createNewPriceRuleset() {
	            var allPrs = priceRulesetCommonService.getPriceRulesets(),
	                newPrs = priceRulesetCommonService.getSampleNewPriceRuleset();
	            priceRulesetCommonService.setPriceRulesets(angular.copy(allPrs));
	            priceRulesetCommonService.setSelectedPRS(angular.copy(newPrs));
	            priceRulesetCommonService.setSelectedCompletePRS(angular.copy(newPrs));
	            $state.go('app.priceRuleset.details', {
	                id: 'new'
	            });
	        };
	
	        vm.setFilters = function() {
	            var filterObj = {
	                SearchString: vm.searchText || '',
	                ChunkNumber: 1
	            };
	            priceRulesetCommonService.setFilters(filterObj);
	        };
	
	        function getFilters() {
	            var filter = priceRulesetCommonService.getFilters();
	            if (filter && filter.SearchString) {
	                vm.searchText = filter.SearchString;
	            }
	        }
	
	        vm.goToListingPage = function() {
	            $state.go('app.priceRuleset.list');
	        };
	
	        function getField(fieldName) {
	            var fieldObj, name;
	            if (fieldName.indexOf('__c') > -1) {
	                fieldName = getPrefixedAttribute(fieldName);
	            }
	            if (metaDataInfo) {
	                for (var i = 0; i < metaDataInfo.length; i++) {
	                    var name = metaDataInfo[i].FieldName;
	                    if (name === fieldName) {
	                        fieldObj = metaDataInfo[i];
	                        break;
	                    }
	                }
	            }
	            return fieldObj;
	        }
	        vm.getFieldValue = function(fieldName, fieldValueToBeExtracted) {
	            var field = getField(fieldName);
	            if (field) {
	                return field[fieldValueToBeExtracted];
	            } else {
	                return '';
	            }
	            return 25;
	        };
	
	        vm.openChargeTypeCriteriaPopup = function() {
	            $mdDialog.show({
	                controller: __webpack_require__(424),
	                template: __webpack_require__(425),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	                    selectedPli: function() {
	                        var criteria = getPrefixedAttribute('Criteria__c');
	                        var obj = {
	                            PriceListItemSO: {
	
	                            }
	                        };
	                        obj.PriceListItemSO[criteria] = priceRulesetDetails.rulesetCriteria;
	                        return obj;
	                    }
	                }
	            }).then(function(response) {
	                vm.selectedPrs.rulesetCriteria = response.pli.PriceListItemSO[getPrefixedAttribute('Criteria__c')];
	                vm.rulesetCriteriaExp = priceRulesetCommonService.extractExpression(response.pli.PriceListItemSO[getPrefixedAttribute('Criteria__c')]);
	                vm.priceRulesetForm.$setDirty();
	            });
	        };
	    };
	
	    detailsController.$inject = [
	        '$q',
	        '$scope',
	        '$rootScope',
	        '$state',
	        '$stateParams',
	        'applicationService',
	        'priceRulesetDetails',
	        'detailsService',
	        'systemConstants',
	        'i18nService',
	        'cpqAdminConstants',
	        'productConstants',
	        '$mdDialog',
	        'priceRulesetCommonService',
	        'allPicklists',
	        'productFamilyPicklist',
	        'chargeTypePicklist'
	
	    ];
	
	    module.exports = detailsController;
	
	})();


/***/ }),
/* 720 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceRuleset.priceRules', [])
	        .service('priceRulesService', __webpack_require__(721))
	        .filter('userMessage', __webpack_require__(722))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceRuleset.priceRules', {
	                parent: 'app.priceRuleset',
	                url: '/:id/priceRules',
	                views: {
	                    'priceRulesetContainer': {
	                        template: __webpack_require__(723),
	                        controller: __webpack_require__(724),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    selectedPriceRuleDetails: ['priceRulesetCommonService', '$stateParams', function(priceRulesetCommonService, $stateParams) {
	                        return priceRulesetCommonService.getSelectedPriceRulesetDetails($stateParams.id, true);
	                    }],
	                    allPriceRuleEntryPicklists: ['priceRulesetCommonService', '$stateParams', function(priceRulesetCommonService, $stateParams) {
	                        return priceRulesetCommonService.getSObjectPicklistFields('PriceRuleEntry__c', null);
	                    }],
	                    allPriceRulePicklists: ['priceRulesetCommonService', '$stateParams', function(priceRulesetCommonService, $stateParams) {
	                        return priceRulesetCommonService.getSObjectPicklistFields('PriceRule__c', null);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 721 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var priceRulesService = function($q, systemConstants, remoteService, priceRulesetConstants, priceRulesetCommonService, i18nService, apiCallsService) {
	        var prefix = systemConstants.nsPrefix || '',
	            allPriceRuleEntryPicklists = [],
	            labels = i18nService.CustomLabel;
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (attribute.indexOf('__') > -1 ? prefix + attribute : attribute).trim();
	        }
	
	        function setAllPriceRuleEntryPicklists(data) {
	            allPriceRuleEntryPicklists = data;
	        }
	
	        function getPriceRule(priceRuleId, numberOfEntriesPerChunk, chunkNumber) {
	            var defered = $q.defer(),
	                requestObj = {
	                    "PriceRuleId": priceRuleId,
	                    "NumberOfEntriesPerChunk": numberOfEntriesPerChunk || priceRulesetConstants.treePanelItemsPerChunk,
	                    "ChunkNumber": chunkNumber || 1
	                };
	
	            remoteService.getPriceRule(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function getPriceRuleEntryPicklistValues(type) {
	            var response = [];
	            if (allPriceRuleEntryPicklists.length && type) {
	                for (var i = 0; i < allPriceRuleEntryPicklists.length; i++) {
	                    if (allPriceRuleEntryPicklists[i].FieldName === getPrefixedAttribute(type)) {
	                        response = allPriceRuleEntryPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            return response;
	        }
	
	        function getPriceRuleEntryAdjustmentTypes() {
	            var noneVar = {
	                label: labels.NoneAsPickListValue,
	                value: ''
	            }; 
	            var picklistValues = getPriceRuleEntryPicklistValues('AdjustmentType__c') || [];
	            if(picklistValues[0].value !== '') {
	                picklistValues.unshift(noneVar);
	            }
	            return picklistValues;
	        }
	
	        function getPriceRuleEntryInclusionMethodTypes() {
	            return getPriceRuleEntryPicklistValues('InclusionMethod__c') || [];
	        }
	
	        function deletePriceRule(id) {
	            var defered = $q.defer(),
	                requestObj = {
	                    'PriceRuleIds': [id]
	                };
	            remoteService.deletePriceRulesetData(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function deletePriceRuleEntry(id) {
	            var defered = $q.defer(),
	                requestObj = {
	                    PriceRuleEntryIds: [id]
	                };
	            remoteService.deletePriceRulesetData(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	            return defered.promise;
	        }
	
	        function processPriceDimensions(dimensions) {
	            var response = [];
	            for (var i = 0; i < dimensions.length; i++) {
	                response.push({
	                    Name: dimensions[i].PriceDimensionSO.Name,
	                    Id: dimensions[i].PriceDimensionSO.Id
	                });
	            }
	            return response;
	        }
	
	        function getPriceDimensions(searchText) {
	            var deferQ = $q.defer(),
	                requestObj = {
	                    "SearchString": searchText || ''
	                };
	            remoteService.getPriceDimensions(requestObj)
	                .then(function(response) {
	                    deferQ.resolve(processPriceDimensions(response.PriceDimensionDOs));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function getSampleData(type) {
	            if (type === 'Dimension') {
	                return {
	                    id: '',
	                    adjustmentAmount: '',
	                    adjustmentType: '',
	                    adjustmentAmountSource: {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    },
	                    adjustmentUOM: '',
	                    dimension1: '',
	                    dimension2: '',
	                    dimension3: '',
	                    dimension4: '',
	                    dimension5: '',
	                    dimension6: '',
	                    priceRuleId: '',
	                    sequence: ''
	                };
	            } else if (type === 'Inclusion') {
	                return {
	                    id: '',
	                    sequence: '',
	                    priceRuleId: '',
	                    adjustmentAmount: '',
	                    adjustmentType: '',
	                    adjustmentAmountSource: {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    },
	                    adjustmentUOM: '',
	                    inclusionMethod: '',
	                    productGroup: {
	                        autocomplete: {
	                            querySearch: priceRulesetCommonService.searchProductGroup,
	                            displayName: 'Name'
	                        }
	                    }
	
	                };
	            } else if (type === 'Volume') {
	                return {
	                    id: '',
	                    sequence: '',
	                    adjustmentAmount: '',
	                    adjustmentType: '',
	                    adjustmentAmountSource: {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    },
	                    adjustmentUOM: '',
	                    priceRuleId: '',
	                    minProducts: '',
	                    maxProducts: '',
	                    minQuantity: '',
	                    maxQuantity: '',
	                    productFamily: {
	                        autocomplete: {
	                            querySearch: priceRulesetCommonService.searchProductFamily,
	                            displayName: 'Name'
	                        }
	                    },
	                    productCategory: {
	                        autocomplete: {
	                            querySearch: priceRulesetCommonService.searchProductCategory,
	                            displayName: 'Name',
	                            displayLabel: 'Label',
	                        }
	                    },
	                    productGroup: {
	                        autocomplete: {
	                            querySearch: priceRulesetCommonService.searchProductGroup,
	                            displayName: 'Name'
	                        }
	                    }
	                };
	            } else if (type === 'Condition') {
	                return {
	                    id: '',
	                    sequence: '',
	                    adjustmentAmount: '',
	                    adjustmentType: '',
	                    adjustmentAmountSource: {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    },
	                    adjustmentUOM: '',
	                    expression: '',
	                    productGroup: {
	                        autocomplete: {
	                            querySearch: priceRulesetCommonService.searchProductGroup,
	                            displayName: 'Name'
	                        }
	                    },
	                    matchInAsset: false,
	                    priceRuleId: ''
	                };
	            }
	        }
	
	        function getPriceRuleEntryAdjustmentUOMs() {
	            var noneVar = {
	                label: labels.NoneAsPickListValue,
	                value: ''
	            };
	            var picklistValues = getPriceRuleEntryPicklistValues('AdjustmentUom__c') || [];
	            if(picklistValues[0].value !== '') {
	                picklistValues.unshift(noneVar);
	            }
	            return picklistValues;
	        }
	
	        var service = {
	            getPriceRule: getPriceRule,
	            getPriceRuleEntryAdjustmentTypes: getPriceRuleEntryAdjustmentTypes,
	            getPriceRuleEntryInclusionMethodTypes: getPriceRuleEntryInclusionMethodTypes,
	            setAllPriceRuleEntryPicklists: setAllPriceRuleEntryPicklists,
	            deletePriceRule: deletePriceRule,
	            getPriceDimensions: getPriceDimensions,
	            deletePriceRuleEntry: deletePriceRuleEntry,
	            getSampleData: getSampleData,
	            getPriceRuleEntryAdjustmentUOMs: getPriceRuleEntryAdjustmentUOMs
	        };
	        return service;
	    };
	
	    priceRulesService.$inject = [
	        '$q',
	        'systemConstants',
	        'remoteService',
	        'priceRulesetConstants',
	        'priceRulesetCommonService',
	        'i18nService',
	        'apiCallsService'
	    ];
	    module.exports = priceRulesService;
	})()


/***/ }),
/* 722 */
372,
/* 723 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"price-rules-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <header>\n                <h4>Price Rule</h4>\n            </header>\n            <div ng-if=\"vm.selectedPriceRuleSet.PriceRuleDOs.length === 0\" class=\"no-price-rules-available\"> {{vm.labels.NoPriceRulesAvailable}} </div>\n            <div class=\"list-table\" ng-if=\"vm.selectedPriceRuleSet.PriceRuleDOs.length > 0\">\n                <ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedPriceRule(event, index, item)\" class=\"left-price-rules-list\">\n                    <li ng-repeat=\"item in vm.selectedPriceRuleSet.PriceRuleDOs\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" ng-class=\"{active: item.selected === true}\" ng-click=\"vm.loadPriceRuleDetails($index)\">\n                        <span class=\"drag-icon-placeholder\">||</span>\n                        <div class=\"each-price-rule-item\">\n                            <div class=\"item-name\" title=\"{{ item.PriceRuleSO.Name }}\">{{ item.PriceRuleSO.Name }}</div>\n                            <div class=\"item-type\">{{ item.PriceRuleSO[vm.prefix +'RuleType__c'] }}</div>\n                        </div>\n                        <div class=\"clear-all\"></div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n        <div class=\"price-rule-detail-block\">\n            <uib-alert ng-repeat=\"alert in vm.alertList\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <div class=\"pricing-header\" ng-if=\"vm.showCenterPanel === true\">\n                <i class=\"material-icons\" data-ng-click=\"vm.showRemoveConfirmation(vm.selectedPriceRule.PriceRuleSO.Id,'PriceRule')\" aria-hidden=\"true\">clear</i>\n                <p data-ng-click=\"vm.openPriceRulePopup('edit')\">{{vm.selectedPriceRule.PriceRuleSO.Name}}</p>\n            </div>\n            <div class=\"price-rule-container\" data-ng-if=\"vm.showCenterPanel === true \">\n                <div ng-include=\"'dimension.html'\" data-ng-if=\"vm.ruleType === 'Dimension' && vm.matrixTable.headers.length > 2 \"></div>\n                <div ng-include=\"'volume.html'\" data-ng-if=\"vm.ruleType === 'Volume'\"></div>\n                <div ng-include=\"'inclusion.html'\" data-ng-if=\"vm.ruleType === 'Inclusion'\"></div>\n                <div ng-include=\"'condition.html'\" data-ng-if=\"vm.ruleType === 'Condition'\"></div>\n                <div class=\"pagination-container text-center\">\n                    <div class=\"navigation-control\">\n                        <div class=\"btn-group dropup text-right\" role=\"group\">\n                            <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                {{vm.labels.RecordsPerPage | userMessage:vm.numberOfProductsPerChunk}}\n                                <span class=\"caret\"></span>\n                            </button>\n                            <ul class=\"dropdown-menu\">\n                                <li><a href=\"#\" data-ng-click=\"vm.numberOfProductsPerChunk = 25\">25</a></li>\n                                <li><a href=\"#\" data-ng-click=\"vm.numberOfProductsPerChunk = 50\">50</a></li>\n                                <li><a href=\"#\" data-ng-click=\"vm.numberOfProductsPerChunk = 75\">75</a></li>\n                                <li><a href=\"#\" data-ng-click=\"vm.numberOfProductsPerChunk = 100\">100</a></li>\n                            </ul>\n                        </div>\n                        <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disablePriceRuleEntryLeftBtn\" data-ng-click=\"vm.getPriceRuleEntry('previous')\">\n                            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                        <span class=\"disabled\">{{vm.MatrixEntryPaginationCenterText}}</span>\n                        <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disablePriceRuleEntryRightBtn\" data-ng-click=\"vm.getPriceRuleEntry('next')\">\n                            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListingPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">Save</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\n</div>\n<div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n    <div class=\"modalOverlay\">\n        <div class=\"modalHeaderBody\">\n            <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n            <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n            <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n        </div>\n        <div class=\"modal-Footer text-right\">\n            <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Cancel}}</span>\n            </button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\n                <span class=\"modal-TextColor\">{{vm.labels.Ok}}</span>\n            </button>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 724 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    var matricesController = function($q, $stateParams, $state, $scope, systemConstants, i18nService, $mdDialog, selectedPriceRuleDetails, applicationService, priceRulesetConstants, $timeout, priceRulesService, allPriceRuleEntryPicklists, priceRulesetCommonService, $templateCache, allPriceRulePicklists, cpqAdminConstants, apiCallsService) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '',
	            isFormSaved = false,
	            newEntryAdded = false;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.selectedPriceRuleSet = selectedPriceRuleDetails;
	
	        var selectedPrs = priceRulesetCommonService.getSelectedPRS();
	
	        if (Object.keys(selectedPrs).length === 0) {
	            priceRulesetCommonService.getSelectedPriceRulesetDetails($stateParams.id, true)
	                .then(function(response) {}, function(reason) {});
	        }
	
	        vm.numberOfProductsPerChunk = priceRulesetConstants.treePanelItemsPerChunk;
	        vm.alertList = [];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        $templateCache.put('volume.html', __webpack_require__(725));
	        $templateCache.put('inclusion.html', __webpack_require__(726));
	        $templateCache.put('dimension.html', __webpack_require__(727));
	        $templateCache.put('condition.html', __webpack_require__(728));
	
	        priceRulesService.setAllPriceRuleEntryPicklists(allPriceRuleEntryPicklists);
	
	        vm.adjustmentTypePicklistEntries = {
	            PicklistValues: priceRulesService.getPriceRuleEntryAdjustmentTypes()
	        };
	        vm.inclusionMethodPicklistEntries = {
	            PicklistValues: priceRulesService.getPriceRuleEntryInclusionMethodTypes()
	        };
	        vm.adjustmentUOMPicklistEntries = {
	            PicklistValues: priceRulesService.getPriceRuleEntryAdjustmentUOMs()
	        };
	        
	        $scope.$on(vm.labels.NewPriceRule.split(' ').join('-'), function() {
	            vm.openPriceRulePopup('new');
	        });
	
	        function getNextSequence(arr) {
	            var nextSequence,
	                maxSequence,
	                tempSeqArr = [];
	            if (arr && arr.length) {
	                for (var i = 0; i < arr.length; i++) {
	                    if (arr[i].PriceRuleSO[getPrefixedAttribute('Sequence__c')]) {
	                        tempSeqArr.push(+arr[i].PriceRuleSO[getPrefixedAttribute('Sequence__c')]);
	                    }
	                }
	                if (tempSeqArr.length > 0) {
	                    maxSequence = Math.max.apply(Math, tempSeqArr);;
	                    if (maxSequence) {
	                        nextSequence = maxSequence + 1;
	                    }
	                }
	            }
	            return nextSequence || 1;
	        }
	
	        function getNewPriceRuleSample() {
	            var sample = {
	                PriceRuleEntrySOs: [],
	                PriceRuleSO: {
	                    Name: ''
	                }
	            };
	            sample.PriceRuleSO[getPrefixedAttribute('Sequence__c')] = getNextSequence(vm.selectedPriceRuleSet.PriceRuleDOs);
	            sample.PriceRuleSO[getPrefixedAttribute('Description__c')] = '';
	            sample.PriceRuleSO[getPrefixedAttribute('StopProcessingMoreRules__c')] = false;
	            sample.PriceRuleSO[getPrefixedAttribute('Active__c')] = true;
	            sample.PriceRuleSO[getPrefixedAttribute('RuleType__c')] = 'Dimension';
	            sample.PriceRuleSO[getPrefixedAttribute('AllowableAction__c')] = 'Unrestricted';
	            sample.PriceRuleSO[getPrefixedAttribute('AdjustmentAppliesTo__c')] = '';
	            sample.PriceRuleSO[getPrefixedAttribute('AdjustmentChargeType__c')] = '';
	            sample.PriceRuleSO[getPrefixedAttribute('AllowRemovalOfAdjustment__c')] = false;
	
	            return sample;
	        }
	
	        function prepareDimensionEntries() {
	            var temp = vm.matrixTable.values,
	                priceRuleEntrySOs = [],
	                hasError = false;
	
	            if (vm.selectedPriceRuleSet && vm.selectedPriceRule && (selectedRuleIndex !== undefined)) {
	                for (var i = 0; i < temp.length; i++) {
	                    var eachObj = {};
	                    if (temp[i].id) {
	                        eachObj['Id'] = temp[i].id;
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentAmount__c')] = temp[i].adjustmentAmount;
	                    eachObj[getPrefixedAttribute('AdjustmentType__c')] = temp[i].adjustmentType;
	                    eachObj[getPrefixedAttribute('PriceRuleId__c')] = temp[i].priceRuleId;
	                    eachObj[getPrefixedAttribute('Sequence__c')] = temp[i].sequence;
	                    if (temp[i].adjustmentAmountSource.autocomplete && temp[i].adjustmentAmountSource.autocomplete.selectedItem && temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = '';
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentUom__c')] = temp[i].adjustmentUOM;
	                    setPriceRuleEntryEffectiveDates(temp[i], eachObj, true);
	
	                    for (var j = 0; j < 6; j++) {
	                        var field = 'dimension' + (j + 1);
	                        if (temp[i][field]) {
	                            if ((temp[i][field] !== '') || (temp[i][field] !== undefined)) {
	                                eachObj[getPrefixedAttribute('Dimension' + (j + 1) + 'Value__c')] = temp[i][field];
	                                temp[i].hasError = false;
	                            } else {
	                                /*temp[i].hasError = true;
	                                hasError = true;
	                                break;*/
	                            }
	                        } else {
	                            /*temp[i].hasError = true;
	                            hasError = true;
	                            break;*/
	                        }
	                    }
	                    priceRuleEntrySOs.push(eachObj);
	                }
	                vm.selectedPriceRuleSet.PriceRuleDOs[selectedRuleIndex].PriceRuleEntrySOs = priceRuleEntrySOs;
	            }
	            return hasError;
	        }
	
	        function prepareVolumeEntries() {
	            var temp = vm.matrixTable.values,
	                priceRuleEntrySOs = [],
	                hasError = false;
	
	            if (vm.selectedPriceRuleSet && vm.selectedPriceRule && (selectedRuleIndex !== undefined)) {
	                for (var i = 0; i < temp.length; i++) {
	                    var eachObj = {};
	                    if (temp[i].id) {
	                        eachObj['Id'] = temp[i].id;
	                    }
	                    eachObj[getPrefixedAttribute('PriceRuleId__c')] = temp[i].priceRuleId;
	                    eachObj[getPrefixedAttribute('Sequence__c')] = temp[i].sequence;
	                    eachObj[getPrefixedAttribute('MinProducts__c')] = temp[i].minProducts;
	                    eachObj[getPrefixedAttribute('MaxProducts__c')] = temp[i].maxProducts;
	                    eachObj[getPrefixedAttribute('MinQuantity__c')] = temp[i].minQuantity;
	                    eachObj[getPrefixedAttribute('MaxQuantity__c')] = temp[i].maxQuantity;
	                    eachObj[getPrefixedAttribute('AdjustmentAmount__c')] = temp[i].adjustmentAmount;
	                    eachObj[getPrefixedAttribute('AdjustmentType__c')] = temp[i].adjustmentType;
	                    if (temp[i].productCategory.autocomplete && temp[i].productCategory.autocomplete.selectedItem && temp[i].productCategory.autocomplete.selectedItem.Name) {
	                        eachObj[getPrefixedAttribute('ProductCategory__c')] = temp[i].productCategory.autocomplete.selectedItem.Name;
	                    } else {
	                        eachObj[getPrefixedAttribute('ProductCategory__c')] = '';
	                    }
	                    if (temp[i].productFamily.autocomplete && temp[i].productFamily.autocomplete.selectedItem && temp[i].productFamily.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('ProductFamily__c')] = temp[i].productFamily.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('ProductFamily__c')] = '';
	                    }
	                    if (temp[i].productGroup.autocomplete && temp[i].productGroup.autocomplete.selectedItem && temp[i].productGroup.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('ProductGroupId__c')] = temp[i].productGroup.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('ProductGroupId__c')] = '';
	                    }
	                    if (temp[i].adjustmentAmountSource.autocomplete && temp[i].adjustmentAmountSource.autocomplete.selectedItem && temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = '';
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentUom__c')] = temp[i].adjustmentUOM;
	                    setPriceRuleEntryEffectiveDates(temp[i], eachObj, true);
	                    priceRuleEntrySOs.push(eachObj);
	                }
	                vm.selectedPriceRuleSet.PriceRuleDOs[selectedRuleIndex].PriceRuleEntrySOs = priceRuleEntrySOs;
	            }
	            return hasError;
	        }
	
	        function prepareInclusionEntries() {
	            var temp = vm.matrixTable.values,
	                priceRuleEntrySOs = [],
	                hasError = false;
	
	            if (vm.selectedPriceRuleSet && vm.selectedPriceRule && (selectedRuleIndex !== undefined)) {
	                for (var i = 0; i < temp.length; i++) {
	                    var eachObj = {};
	                    if (temp[i].id) {
	                        eachObj['Id'] = temp[i].id;
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentAmount__c')] = temp[i].adjustmentAmount;
	                    eachObj[getPrefixedAttribute('AdjustmentType__c')] = temp[i].adjustmentType;
	                    eachObj[getPrefixedAttribute('PriceRuleId__c')] = temp[i].priceRuleId;
	                    eachObj[getPrefixedAttribute('Sequence__c')] = temp[i].sequence;
	                    eachObj[getPrefixedAttribute('InclusionMethod__c')] = temp[i].inclusionMethod;
	                    if (temp[i].productGroup.autocomplete && temp[i].productGroup.autocomplete.selectedItem && temp[i].productGroup.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('ProductGroupId__c')] = temp[i].productGroup.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('ProductGroupId__c')] = '';
	                    }
	                    if (temp[i].adjustmentAmountSource.autocomplete && temp[i].adjustmentAmountSource.autocomplete.selectedItem && temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = '';
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentUom__c')] = temp[i].adjustmentUOM;
	                    setPriceRuleEntryEffectiveDates(temp[i], eachObj, true);
	                    priceRuleEntrySOs.push(eachObj);
	                }
	                vm.selectedPriceRuleSet.PriceRuleDOs[selectedRuleIndex].PriceRuleEntrySOs = priceRuleEntrySOs;
	            }
	            return hasError;
	        }
	
	        function preparePriceRuleEntries() {
	            var hasError = false;
	            if (vm.selectedPriceRule) {
	                var selectedPriceRule = vm.selectedPriceRule,
	                    priceRuleSO = selectedPriceRule.PriceRuleSO,
	                    ruleType = priceRuleSO[getPrefixedAttribute('RuleType__c')];
	                if (ruleType === 'Dimension') {
	                    hasError = prepareDimensionEntries();
	                } else if (ruleType === 'Volume') {
	                    hasError = prepareVolumeEntries();
	                } else if (ruleType === 'Inclusion') {
	                    hasError = prepareInclusionEntries();
	                } else if (ruleType === 'Condition') {
	                    hasError = prepareConditionEntries();
	                }
	            }
	            return hasError;
	        }
	
	        function updatePriceRuleItem(toState, toParams, updateEntries) {
	            var defer = $q.defer();
	            if (vm.selectedPriceRule) {
	                if (!preparePriceRuleEntries()) {
	                    priceRulesetCommonService.updatePriceRuleset(angular.copy(vm.selectedPriceRuleSet), true)
	                        .then(function(response) {
	                            isFormSaved = true;
	                            if (toState) {
	                                $state.go(toState, toParams);
	                            } else {
	                                vm.selectedPriceRuleSet = response.PriceRulesetDOs[0]; 
	                                if(updateEntries === true) {
	                                    addAlert({
	                                        msg: 'Updated successfully',
	                                        type: cpqAdminConstants.SUCCESS
	                                    });
	                                }
	                                if (updateEntries && newEntryAdded) {
	                                    /* Check if any new entries were made here . If added then update the view */
	                                    loadPriceRuleDetailsCall(selectedRuleIndex);
	                                    newEntryAdded = false;
	                                }
	                                defer.resolve(response);
	                            }
	                        }, function(reason) {
	                            isFormSaved = false;
	                            applicationService.showErrorMessage(reason);
	                            defer.reject(false);
	                        });
	                } else {
	                    defer.reject(false);
	                }
	            } else {
	                isFormSaved = true;
	                defer.resolve(true);
	            }
	
	            return defer.promise;
	        }
	
	        var priceRuleEntryPageNumber = 0,
	            selectedRuleIndex,
	            noOfMatrixEntriesPerchunk = vm.numberOfProductsPerChunk;
	
	        function resetMatrixTable() {
	            priceRuleEntryPageNumber = 0;
	            vm.selectedPriceRule = null;
	            selectedRuleIndex = undefined;
	            vm.showCenterPanel = false;
	            vm.matrixTable = {
	                headers: [],
	                values: []
	            };
	        }
	        vm.disablePriceRuleEntryLeftBtn = true;
	
	        vm.matrixTable = {
	            headers: [],
	            values: []
	        };
	
	        function createPriceRuleObj(obj) {
	            vm.selectedPriceRuleSet.PriceRuleDOs.push(obj.rule);
	            vm.selectedPriceRule = obj.rule;
	            updatePriceRuleItem()
	                .then(function(response) {
	                    resetMatrixTable();
	                    vm.loadPriceRuleDetails(vm.selectedPriceRuleSet.PriceRuleDOs.length - 1);
	                }, function(reason) {});
	        }
	
	        function updatePriceRuleObj(obj) {
	            vm.selectedPriceRuleSet.PriceRuleDOs[selectedRuleIndex].PriceRuleSO = obj.rule.PriceRuleSO;
	            updatePriceRuleItem()
	                .then(function(response) {
	                    loadPriceRuleDetailsCall(selectedRuleIndex);
	                }, function(reason) {});
	        }
	
	        vm.openPriceRulePopup = function(type) {
	            $mdDialog.show({
	                    controller: __webpack_require__(729),
	                    template: __webpack_require__(730),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    controllerAs: 'vm',
	                    resolve: {
	                        selectedPriceRule: function() {
	                            return type && type == 'new' ? angular.copy(getNewPriceRuleSample()) : vm.selectedPriceRule;
	                        },
	                        type: function() {
	                            return type;
	                        },
	                        allPicklists: function() {
	                            return allPriceRulePicklists;
	                        }
	                    }
	                })
	                .then(function(requestObj) {
	                    if (requestObj.type === 'new') {
	                        createPriceRuleObj(requestObj);
	                    } else {
	                        updatePriceRuleObj(requestObj);
	                    }
	                }, function() {});
	        };
	
	        function highlightCurrentPriceRule(index) {
	            var allRules = vm.selectedPriceRuleSet.PriceRuleDOs;
	            for (var i = 0; i < allRules.length; i++) {
	                if (i === index) {
	                    allRules[i].selected = true;
	                } else {
	                    allRules[i].selected = false;
	                }
	            }
	        }
	
	        var columnLoadedCount = [];
	
	        function reorderMatrixColumns(index) {
	            columnLoadedCount.push(index);
	            if (columnLoadedCount.length === 6) {
	                var finalReorderedColumn = [];
	                for (var i = 0; i < 6; i++) {
	                    for (var j = 0; j < vm.matrixTable.headers.length; j++) {
	                        if (vm.matrixTable.headers[j].valueField === ('dimension' + (i + 1))) {
	                            finalReorderedColumn.push(angular.copy(vm.matrixTable.headers[j]));
	                            break;
	                        }
	                    }
	                }
	
	                finalReorderedColumn.push({
	                    name: vm.labels.AdjustmentAmount,
	                    valueField: 'adjustmentAmount',
	                    fieldType: 'STRING'
	                });
	                finalReorderedColumn.push({
	                    name: vm.labels.AdjustmentType,
	                    valueField: 'adjustmentType',
	                    fieldType: 'PICKLIST',
	                    picklistValues: {
	                        PicklistValues: priceRulesService.getPriceRuleEntryAdjustmentTypes()
	                    }
	                });
	                finalReorderedColumn.push({
	                    name: vm.labels.AdjustmentAmountSource,
	                    valueField: 'adjustmentAmountSource',
	                    fieldType: 'AUTOCOMPLETE',
	                    'autocomplete': {
	                        'querySearch': apiCallsService.searchSObjectRecords,
	                        'displayName': 'Name',
	                        'selectedItem': null,
	                        'sObjectName': getPrefixedAttribute('FormulaField__c')
	                    }
	                });
	                finalReorderedColumn.push({
	                    name: vm.labels.UOM,
	                    valueField: 'adjustmentUOM',
	                    fieldType: 'PICKLIST',
	                    picklistValues: vm.adjustmentUOMPicklistEntries
	                });
	                if (vm.selectedPriceRuleSet.PriceRulesetSO[getPrefixedAttribute('EnableDateRange__c')]) {
	                    finalReorderedColumn.push({
	                        name: vm.labels.StartDate,
	                        valueField: 'periodStartDate',
	                        fieldType: 'DATETIME'
	                    });
	                    finalReorderedColumn.push({
	                        name: vm.labels.EndDate,
	                        valueField: 'periodEndDate',
	                        fieldType: 'DATETIME'
	                    });
	                }
	                vm.matrixTable.headers = finalReorderedColumn;
	            }
	        }
	
	        function prepareDimensionMatrixHeaders(response) {
	            var selectedPriceMatrix = response.PriceRuleDO,
	                priceRuleSO = selectedPriceMatrix.PriceRuleSO,
	                priceDimensionDOs = selectedPriceMatrix.PriceDimensionDOs;
	            columnLoadedCount = [];
	            for (var i = 0; i < 6; i++) {
	                var objName = getPrefixedAttribute('Dimension' + (i + 1) + 'Id__r');
	                if (priceRuleSO[objName]) {
	                    var fieldType = 'STRING',
	                        picklistValues = [];
	                    for (var j = 0; j < priceDimensionDOs.length; j++) {
	                        if (priceDimensionDOs[j].PriceDimensionSO.Id === priceRuleSO[objName].Id) {
	                            fieldType = priceDimensionDOs[j].FieldDO.Type;
	                            if (fieldType === 'MULTIPICKLIST') {
	                                fieldType = 'PICKLIST';
	                            }
	                            picklistValues = priceDimensionDOs[j].FieldDO.PicklistValues;
	                            break;
	                        }
	                    }
	                    vm.matrixTable.headers.push({
	                        name: priceRuleSO[objName].Name,
	                        valueField: 'dimension' + (i + 1),
	                        fieldType: fieldType,
	                        picklistValues: {
	                            PicklistValues: picklistValues || []
	                        }
	                    });
	                    reorderMatrixColumns(i);
	
	                } else {
	                    reorderMatrixColumns(i);
	                }
	            }
	        }
	
	        function prepareVolumeMatrixHeaders() {
	            vm.matrixTable.headers = [
	                { name: 'Min Products' },
	                { name: 'Max Products' },
	                { name: 'Min Quantity' },
	                { name: 'Max Quantity' },
	                { name: 'Product Family' },
	                { name: 'Product Category' },
	                { name: 'Product Group' },
	                { name: 'Adjustment Amount' },
	                { name: 'Adjustment Type' },
	                { name: vm.labels.AdjustmentAmountSource },
	                { name: vm.labels.UOM }
	            ];
	            addEffectiveDatesColumnHeaders();
	        }
	
	        function prepareInclusionMatrixHeaders() {
	            vm.matrixTable.headers = [
	                { name: 'Inclusion Method' },
	                { name: 'Product Group' },
	                { name: 'Adjustment Amount' },
	                { name: 'Adjustment Type' },
	                { name: vm.labels.AdjustmentAmountSource },
	                { name: vm.labels.UOM }
	            ];
	            addEffectiveDatesColumnHeaders();
	        }
	
	        function prepareConditionMatrixHeaders() {
	            vm.matrixTable.headers = [
	                { name: 'Expression' },
	                { name: vm.labels.ProductGroup },
	                { name: vm.labels.MatchInAsset },
	                { name: 'Adjustment Amount' },
	                { name: 'Adjustment Type' },
	                { name: vm.labels.AdjustmentAmountSource },
	                { name: vm.labels.UOM }
	            ];
	            addEffectiveDatesColumnHeaders();
	        }
	
	        function prepareMatrixTableHeaders(response) {
	
	            var selectedPriceMatrix = response.PriceRuleDO,
	                PriceRuleSO = selectedPriceMatrix.PriceRuleSO,
	                ruleType = PriceRuleSO[getPrefixedAttribute('RuleType__c')];
	            vm.ruleType = ruleType;
	            vm.matrixTable.headers = [];
	            if (ruleType === 'Dimension') {
	                prepareDimensionMatrixHeaders(response);
	            } else if (ruleType === 'Volume') {
	                prepareVolumeMatrixHeaders();
	            } else if (ruleType === 'Inclusion') {
	                prepareInclusionMatrixHeaders();
	            } else if (ruleType === 'Condition') {
	                prepareConditionMatrixHeaders();
	            }
	        }
	
	        function prepareDimensionTableContent(priceRuleEntrySOs) {
	            if (priceRuleEntrySOs.length) {
	                vm.matrixTable.values = []; //Clearing the Array
	                for (var i = 0; i < priceRuleEntrySOs.length; i++) {
	                    var temp = {};
	                    temp['id'] = priceRuleEntrySOs[i].Id;
	                    temp['sequence'] = priceRuleEntrySOs[i][getPrefixedAttribute('Sequence__c')];
	                    temp['adjustmentAmount'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmount__c')] || '';
	                    temp['adjustmentType'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentType__c')] || '';
	                    temp['priceRuleId'] = priceRuleEntrySOs[i][getPrefixedAttribute('PriceRuleId__c')] || '';
	                    const adjustmentAmountSource = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmountSourceId__r')];
	                    if (adjustmentAmountSource) {
	                        temp['adjustmentAmountSource'] = {
	                            'autocomplete': {
	                                'querySearch': apiCallsService.searchSObjectRecords,
	                                'displayName': 'Name',
	                                'selectedItem': {
	                                    Name: adjustmentAmountSource.Name,
	                                    Id: adjustmentAmountSource.Id
	                                },
	                                'sObjectName': getPrefixedAttribute('FormulaField__c')
	                            }
	                        };
	                    } else {
	                        temp['adjustmentAmountSource'] = {
	                            'autocomplete': {
	                                'querySearch': apiCallsService.searchSObjectRecords,
	                                'displayName': 'Name',
	                                'selectedItem': null,
	                                'sObjectName': getPrefixedAttribute('FormulaField__c')
	                            }
	                        };
	                    }
	                    temp['adjustmentUOM'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentUom__c')] || '';
	                    setPriceRuleEntryEffectiveDates(temp, priceRuleEntrySOs[i], false);
	                    for (var j = 0; j < 6; j++) {
	                        var field = getPrefixedAttribute('Dimension' + (j + 1) + 'Value__c');
	                        if (priceRuleEntrySOs[i][field]) {
	                            temp['dimension' + (j + 1)] = priceRuleEntrySOs[i][field];
	                        }
	                    }
	                    vm.matrixTable.values.push(temp);
	                }
	            }
	        }
	
	        function prepareVolumeTableContent(priceRuleEntrySOs) {
	            if (priceRuleEntrySOs.length) {
	                for (var i = 0; i < priceRuleEntrySOs.length; i++) {
	                    var temp = {};
	                    temp['id'] = priceRuleEntrySOs[i].Id;
	                    temp['priceRuleId'] = priceRuleEntrySOs[i][getPrefixedAttribute('PriceRuleId__c')] || '';
	                    temp['sequence'] = priceRuleEntrySOs[i][getPrefixedAttribute('Sequence__c')];
	                    temp['minProducts'] = priceRuleEntrySOs[i][getPrefixedAttribute('MinProducts__c')] || '';
	                    temp['maxProducts'] = priceRuleEntrySOs[i][getPrefixedAttribute('MaxProducts__c')] || '';
	                    temp['minQuantity'] = priceRuleEntrySOs[i][getPrefixedAttribute('MinQuantity__c')] || '';
	                    temp['maxQuantity'] = priceRuleEntrySOs[i][getPrefixedAttribute('MaxQuantity__c')] || '';
	                    temp['adjustmentAmount'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmount__c')] || '';
	                    temp['adjustmentType'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentType__c')] || '';
	
	                    var productFamily = priceRuleEntrySOs[i][getPrefixedAttribute('ProductFamily__c')] || '';
	                    if (productFamily) {
	                        temp['productFamily'] = {
	                            'autocomplete': {
	                                querySearch: priceRulesetCommonService.searchProductFamily,
	                                displayName: 'Name',
	                                selectedItem: {
	                                    Id: productFamily,
	                                    Name: productFamily
	                                }
	                            }
	                        };
	                    } else {
	                        temp['productFamily'] = {
	                            'autocomplete': {
	                                querySearch: priceRulesetCommonService.searchProductFamily,
	                                displayName: 'Name'
	                            }
	                        };
	                    }
	
	                    var productCategory = priceRuleEntrySOs[i][getPrefixedAttribute('ProductCategory__c')] || '';
	                    if (productCategory) {
	                        temp['productCategory'] = {
	                            'autocomplete': {
	                                querySearch: priceRulesetCommonService.searchProductCategory,
	                                displayName: 'Name',
	                                displayLabel: 'Label',
	                                selectedItem: {
	                                    Id: productCategory,
	                                    Name: productCategory
	                                }
	                            }
	                        };
	                    } else {
	                        temp['productCategory'] = {
	                            'autocomplete': {
	                                querySearch: priceRulesetCommonService.searchProductCategory,
	                                displayName: 'Name',
	                                displayLabel: 'Label'
	                            }
	                        };
	                    }
	
	                    var productGroup = priceRuleEntrySOs[i][getPrefixedAttribute('ProductGroupId__r')] || '';
	                    if (productGroup) {
	                        temp['productGroup'] = {
	                            'autocomplete': {
	                                querySearch: priceRulesetCommonService.searchProductGroup,
	                                displayName: 'Name',
	                                selectedItem: {
	                                    Id: productGroup.Id,
	                                    Name: productGroup.Name
	                                }
	                            }
	                        };
	                    } else {
	                        temp['productGroup'] = {
	                            'autocomplete': {
	                                querySearch: priceRulesetCommonService.searchProductGroup,
	                                displayName: 'Name'
	                            }
	                        };
	                    }
	                    const adjustmentAmountSource = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmountSourceId__r')];
	                    if (adjustmentAmountSource) {
	                        temp['adjustmentAmountSource'] = {
	                            'autocomplete': {
	                                'querySearch': apiCallsService.searchSObjectRecords,
	                                'displayName': 'Name',
	                                'selectedItem': {
	                                    Name: adjustmentAmountSource.Name,
	                                    Id: adjustmentAmountSource.Id
	                                },
	                                'sObjectName': getPrefixedAttribute('FormulaField__c')
	                            }
	                        };
	                    } else {
	                        temp['adjustmentAmountSource'] = {
	                            'autocomplete': {
	                                'querySearch': apiCallsService.searchSObjectRecords,
	                                'displayName': 'Name',
	                                'selectedItem': null,
	                                'sObjectName': getPrefixedAttribute('FormulaField__c')
	                            }
	                        };
	                    }
	                    temp['adjustmentUOM'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentUom__c')] || '';
	                    setPriceRuleEntryEffectiveDates(temp, priceRuleEntrySOs[i], false);
	                    vm.matrixTable.values.push(temp);
	                }
	            }
	        }
	
	
	        function prepareInclusionTableContent(priceRuleEntrySOs) {
	            if (priceRuleEntrySOs.length) {
	                for (var i = 0; i < priceRuleEntrySOs.length; i++) {
	                    var temp = {};
	                    temp['id'] = priceRuleEntrySOs[i].Id;
	                    temp['sequence'] = priceRuleEntrySOs[i][getPrefixedAttribute('Sequence__c')];
	                    temp['priceRuleId'] = priceRuleEntrySOs[i][getPrefixedAttribute('PriceRuleId__c')] || '';
	                    temp['inclusionMethod'] = priceRuleEntrySOs[i][getPrefixedAttribute('InclusionMethod__c')] || '';
	                    temp['adjustmentAmount'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmount__c')] || '';
	                    temp['adjustmentType'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentType__c')] || '';
	
	                    var productGroup = priceRuleEntrySOs[i][getPrefixedAttribute('ProductGroupId__r')] || '';
	                    if (productGroup) {
	                        temp['productGroup'] = {
	                            'autocomplete': {
	                                querySearch: priceRulesetCommonService.searchProductGroup,
	                                displayName: 'Name',
	                                selectedItem: {
	                                    Id: productGroup.Id,
	                                    Name: productGroup.Name
	                                }
	                            }
	                        };
	                    } else {
	                        temp['productGroup'] = {
	                            'autocomplete': {
	                                querySearch: priceRulesetCommonService.searchProductGroup,
	                                displayName: 'Name'
	                            }
	                        };
	                    }
	                    const adjustmentAmountSource = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmountSourceId__r')];
	                    temp['adjustmentAmountSource'] = {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    };
	                    if (adjustmentAmountSource) {
	                        temp.adjustmentAmountSource.autocomplete.selectedItem = {
	                            Name: adjustmentAmountSource.Name,
	                            Id: adjustmentAmountSource.Id
	                        };
	                    }
	                    temp['adjustmentUOM'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentUom__c')] || '';
	                    setPriceRuleEntryEffectiveDates(temp, priceRuleEntrySOs[i], false);
	                    vm.matrixTable.values.push(temp);
	                }
	            }
	        }
	
	        function prepareMatrixTableContent(response) {
	            var selectedPriceRule = response.PriceRuleDO,
	                priceRuleSO = selectedPriceRule.PriceRuleSO,
	                priceRuleEntrySO = selectedPriceRule.PriceRuleEntrySOs,
	                ruleType = priceRuleSO[getPrefixedAttribute('RuleType__c')];
	                vm.matrixTable.values = [];
	            if (ruleType === 'Dimension') {
	                prepareDimensionTableContent(priceRuleEntrySO);
	            } else if (ruleType === 'Volume') {
	                prepareVolumeTableContent(priceRuleEntrySO);
	            } else if (ruleType === 'Inclusion') {
	                prepareInclusionTableContent(priceRuleEntrySO);
	            } else if (ruleType === 'Condition') {
	                prepareConditionTableContent(priceRuleEntrySO);
	            }
	        }
	
	        function updateRuleEntryPagination(length) {
	            var pageNumber = priceRuleEntryPageNumber,
	                endCount = length;
	
	            if (priceRuleEntryPageNumber === 0) {
	                vm.disablePriceRuleEntryLeftBtn = true;
	            } else {
	                vm.disablePriceRuleEntryLeftBtn = false;
	            }
	            if (endCount < vm.numberOfProductsPerChunk) {
	                vm.disablePriceRuleEntryRightBtn = true;
	            } else {
	                vm.disablePriceRuleEntryRightBtn = false;
	            }
	
	            if (endCount === 0 && priceRuleEntryPageNumber === 0) {
	                vm.MatrixEntryPaginationCenterText = '(0-0)';
	            } else if (endCount < vm.numberOfProductsPerChunk) {
	                vm.MatrixEntryPaginationCenterText = '(' + (priceRuleEntryPageNumber * vm.numberOfProductsPerChunk + 1) + '-' + (priceRuleEntryPageNumber * vm.numberOfProductsPerChunk + endCount) + ')';
	            } else {
	                vm.MatrixEntryPaginationCenterText = '(' + (priceRuleEntryPageNumber * vm.numberOfProductsPerChunk + 1) + '-' + ((priceRuleEntryPageNumber + 1) * vm.numberOfProductsPerChunk) + ')';
	            }
	        }
	
	        function loadPriceRuleEntries(type, pageNumber, previousSelectedRuleIndex) {
	
	            var index = selectedRuleIndex;
	            if (previousSelectedRuleIndex >= 0) {
	                index = previousSelectedRuleIndex;
	                selectedRuleIndex = previousSelectedRuleIndex;
	                vm.selectedPriceRule = vm.selectedPriceRuleSet.PriceRuleDOs[index];
	                vm.showCenterPanel = true;
	                highlightCurrentPriceRule(index);
	            } else {
	                index = selectedRuleIndex;
	            }
	
	            var selectedPriceRule = vm.selectedPriceRuleSet.PriceRuleDOs[index],
	                priceRuleSO = selectedPriceRule.PriceRuleSO,
	                priceRuleId = priceRuleSO.Id,
	                toBeCalledWithPageNumber;
	            if (pageNumber >= 0) {
	                toBeCalledWithPageNumber = (type === 'next' ? (pageNumber + 1) : (pageNumber + 1));
	                priceRuleEntryPageNumber = pageNumber;
	                vm.isRightPanelVisible = true;
	            } else {
	                toBeCalledWithPageNumber = priceRuleEntryPageNumber;
	            }
	
	            priceRulesService.getPriceRule(priceRuleId, vm.numberOfProductsPerChunk, toBeCalledWithPageNumber)
	                .then(function(response) {
	                    if (angular.isDefined(response.PriceRuleDO.PriceRuleEntrySOs)) {
	                        prepareMatrixTableHeaders(response);
	                        prepareMatrixTableContent(response);
	                        updateRuleEntryPagination(response.PriceRuleDO.PriceRuleEntrySOs.length);
	                    } else {
	                        vm.disablePriceRuleEntryRightBtn = true;
	                        priceRuleEntryPageNumber--;
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function loadPriceRuleDetailsCall(index) {
	            resetMatrixTable();
	            selectedRuleIndex = index;
	            vm.selectedPriceRule = vm.selectedPriceRuleSet.PriceRuleDOs[index];
	            vm.showCenterPanel = true;
	            highlightCurrentPriceRule(index);
	            loadPriceRuleEntries();
	        }
	
	        vm.loadPriceRuleDetails = function(index) {
	            //loadPriceRuleDetailsCall(index);
	            /* 
	             * TODO : Save if any is opened already. and then load this new one 
	             *  1. get the right pricing matrix from the right side panel. use matrix id for this .
	             *  2. make the header array and value array from the selected pli.
	             *  3. load the data in the center of the panel 
	             */
	
	            if (vm.selectedPriceRule && Object.keys(vm.selectedPriceRule).length > 0) {
	                updatePriceRuleItem()
	                    .then(function(response) {
	                        $timeout(function() {
	                            vm.numberOfProductsPerChunk = priceRulesetConstants.treePanelItemsPerChunk;
	                            loadPriceRuleDetailsCall(index);
	                        }, 100);
	
	                    }, function(reason) {});
	            } else {
	                loadPriceRuleDetailsCall(index);
	            }
	        };
	        vm.getPriceRuleEntry = function(type) {
	            var selectedMIndex = selectedRuleIndex,
	                matrixEntryPageNumber;
	            if (type === 'next') {
	                priceRuleEntryPageNumber++;
	            } else if (type === 'previous') {
	                priceRuleEntryPageNumber--;
	            }
	            matrixEntryPageNumber = priceRuleEntryPageNumber;
	            /* TODO : Save the current 25 items first and on success load the rest data set */
	            /* Prepare the MatrixDO if any and then call the udpate PLI */
	            updatePriceRuleItem()
	                .then(function(response) {
	                    loadPriceRuleEntries(type, matrixEntryPageNumber, selectedMIndex);
	                }, function(reason) {});
	
	        };
	        var priceRuleEntriesDeregisterFunction = $scope.$watch('vm.numberOfProductsPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                if (vm.selectedPriceRule && Object.keys(vm.selectedPriceRule).length > 0) {
	                    var selectedIndex = selectedRuleIndex;
	                    updatePriceRuleItem()
	                        .then(function(response) {
	                            $timeout(function() {
	                                priceRuleEntryPageNumber = 0;
	                                loadPriceRuleDetailsCall(selectedIndex);
	                            }, 100);
	                        }, function(reason) {});
	                }
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            priceRuleEntriesDeregisterFunction();
	            vm = null;
	        });
	
	        var toBeRemovedId, typeToBeRemoved, toBeRemovedIndex;
	
	        function resetDeleteSetup() {
	            toBeRemovedId = typeToBeRemoved = toBeRemovedIndex = undefined;
	        }
	
	        vm.showRemoveConfirmation = function(id, type, index) {
	            vm.confiramtionPopup = true;
	            toBeRemovedId = id;
	            typeToBeRemoved = type;
	            toBeRemovedIndex = (type === 'PriceRule' ? selectedRuleIndex : index);
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.ConfirmMatrixDelete,
	                messageNote: vm.labels.DeleteMessageNote
	            }
	        };
	
	        function reloadPrDetails() {
	            priceRulesetCommonService.getSelectedPriceRulesetDetails($stateParams.id, true)
	                .then(function(response) {
	                    vm.selectedPriceRule = response;
	                });
	        }
	
	        function reSequencePrEntries() {
	            for (var item = 0; item < vm.matrixTable.values.length; item++) {
	                vm.matrixTable.values[item].sequence = ((item + 1) + (priceRuleEntryPageNumber * vm.numberOfProductsPerChunk));
	            }
	        }
	
	        function removePriceRuleEntry(priceRuleEntryId, index) {
	            if (priceRuleEntryId) {
	                priceRulesService.deletePriceRuleEntry(priceRuleEntryId)
	                    .then(function(response) {
	                        vm.matrixTable.values.splice(index, 1);
	                        updateRuleEntryPagination(vm.matrixTable.values.length);
	                        resetDeleteSetup();
	                        reSequencePrEntries();
	                    }, function(reason) {});
	            } else {
	                vm.matrixTable.values.splice(index, 1);
	                updateRuleEntryPagination(vm.matrixTable.values.length);
	                resetDeleteSetup();
	                reSequencePrEntries();
	            }
	        }
	
	        function sequencePriceRules() {
	            var rules = vm.selectedPriceRuleSet.PriceRuleDOs;
	            for (var i = 0; i < rules.length; i++) {
	                rules[i].PriceRuleSO[getPrefixedAttribute('Sequence__c')] = (i + 1);
	            }
	        }
	
	        function removePriceRule(priceRuleId, index) {
	            priceRulesService.deletePriceRule(priceRuleId)
	                .then(function(response) {
	                    vm.selectedPriceRuleSet.PriceRuleDOs.splice(index, 1);
	                    resetMatrixTable();
	                    resetDeleteSetup();
	                    sequencePriceRules();
	                    updatePriceRuleItem()
	                        .then(function(res) {
	                            //reloadPrDetails();
	                        });
	
	                }, function(reason) {});
	        }
	
	        vm.confirmRemove = function() {
	            vm.confiramtionPopup = false;
	            if (typeToBeRemoved === 'PriceRule') {
	                removePriceRule(toBeRemovedId, toBeRemovedIndex);
	            } else if (typeToBeRemoved === 'PriceRuleEntry') {
	                removePriceRuleEntry(toBeRemovedId, toBeRemovedIndex);
	            }
	
	        };
	
	        vm.cancelRemove = function() {
	            vm.confiramtionPopup = false;
	            resetDeleteSetup();
	        };
	
	        function getNextRuleEntrySequence() {
	            var nextSequence,
	                sequenceArr = [],
	                maxSequence;
	            for (var i = 0; i < vm.matrixTable.values.length; i++) {
	                var sequence = vm.matrixTable.values[i].sequence;
	                if (sequence) {
	                    sequenceArr.push(sequence);
	                }
	            }
	            if (sequenceArr.length > 0) {
	                maxSequence = Math.max.apply(Math, sequenceArr);;
	                if (maxSequence) {
	                    nextSequence = maxSequence + 1;
	                }
	            }
	            return nextSequence || 1;
	        }
	        vm.addRowToEntryTable = function(index) {
	            /*TODO : allow only 25 items to be added per page. show warning message after that */
	                var ruleType = vm.ruleType,
	                    samplePriceRuleEntry,
	                    PriceRuleSO = vm.selectedPriceRule.PriceRuleSO;
	
	                if (ruleType === 'Dimension') {
	                    samplePriceRuleEntry = priceRulesService.getSampleData('Dimension');
	
	                } else if (ruleType === 'Volume') {
	                    samplePriceRuleEntry = priceRulesService.getSampleData('Volume');
	
	                } else if (ruleType === 'Inclusion') {
	                    samplePriceRuleEntry = priceRulesService.getSampleData('Inclusion');
	                } else if (ruleType === 'Condition') {
	                    samplePriceRuleEntry = priceRulesService.getSampleData('Condition');
	                }
	                samplePriceRuleEntry.priceRuleId = vm.selectedPriceRule.PriceRuleSO.Id;
	                samplePriceRuleEntry.sequence = '';
	
	                if (index >= 0) {
	                    vm.matrixTable.values.splice((index + 1), 0, angular.copy(samplePriceRuleEntry));
	                } else {
	                    vm.matrixTable.values.push(angular.copy(samplePriceRuleEntry));
	                }
	                updateRuleEntryPagination(vm.matrixTable.values.length);
	                reSequencePrEntries();
	                newEntryAdded = true;
	        };
	
	        vm.save = function(e, toState, toParams) {
	            updatePriceRuleItem(toState, toParams, true);
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (isFormSaved) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.save(e, toState, toParams);
	            }
	        });
	
	        function addAlert(obj) {
	            vm.alertList = [];
	            vm.alertList.push(obj);
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        function findIndex(arr, obj) {
	            var index;
	            for (var item = 0; item < arr.length; item++) {
	                if (angular.equals(angular.copy(arr[item]), angular.copy(obj))) {
	                    index = item;
	                }
	            }
	            return index;
	        }
	
	        vm.addDroppedPriceRule = function(event, index, item) {
	            var location = findIndex(angular.copy(vm.selectedPriceRuleSet.PriceRuleDOs), item);
	            if (location >= 0) {
	                vm.selectedPriceRuleSet.PriceRuleDOs.splice(parseInt(location), 1);
	            }
	            vm.selectedPriceRuleSet.PriceRuleDOs.splice(parseInt(index), 0, item);
	
	            for (var item = 0; item < vm.selectedPriceRuleSet.PriceRuleDOs.length; item++) {
	                vm.selectedPriceRuleSet.PriceRuleDOs[item].PriceRuleSO[getPrefixedAttribute('Sequence__c')] = (item + 1);
	            }
	
	            if (vm.selectedPriceRule) {
	                for (var item = 0; item < vm.selectedPriceRuleSet.PriceRuleDOs.length; item++) {
	                    if (vm.selectedPriceRuleSet.PriceRuleDOs[item].PriceRuleSO.Id === vm.selectedPriceRule.PriceRuleSO.Id) {
	                        vm.selectedPriceRule.PriceRuleSO[getPrefixedAttribute('Sequence__c')] = vm.selectedPriceRuleSet.PriceRuleDOs[item].PriceRuleSO[getPrefixedAttribute('Sequence__c')];
	                    }
	                }
	            }
	            priceRulesetCommonService.updatePriceRuleset(angular.copy(vm.selectedPriceRuleSet), true);
	            return true;
	        };
	
	        vm.addDroppedPriceRuleEntries = function(event, index, item) {
	            var location = findIndex(angular.copy(vm.matrixTable.values), item);
	            if (location >= 0) {
	                vm.matrixTable.values.splice(parseInt(location), 1);
	            }
	            vm.matrixTable.values.splice(parseInt(index), 0, item);
	
	            reSequencePrEntries();
	
	            return true;
	        };
	
	        vm.goToListingPage = function() {
	            isFormSaved = true;
	            $state.go('app.priceRuleset.list');
	        };
	
	        vm.openConditionCriteria = function(condition, index) {
	            $mdDialog.show({
	                    controller: __webpack_require__(620),
	                    template: __webpack_require__(621),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    controllerAs: 'vm',
	                    resolve: {
	                        selectedCondition: function() {
	                            return condition;
	                        },
	                        selectedMatrixEntryIndex: function() {
	                            return index;
	                        }
	                    }
	                })
	                .then(function(requestObj) {
	                    updateMatrixEntryObj(requestObj);
	                }, function() {});
	        };
	
	        function updateMatrixEntryObj(obj) {
	            var selectedIndex = obj.index,
	                conditionCriteria = removeExtraFieldsFromConditionCriteria(obj.conditionCriteria),
	                matrixEntry = vm.matrixTable.values[selectedIndex];
	
	            matrixEntry.condition = JSON.stringify(conditionCriteria);
	            matrixEntry.expression = conditionCriteria.exprStr;
	
	        }
	
	        function removeExtraFieldsFromConditionCriteria(conditionCriteria) {
	            var filters = conditionCriteria.filter.predicates,
	                childFilters = conditionCriteria.filter.childFilter.predicates;
	            if (filters.length) {
	                for (var i = 0; i < filters.length; i++) {
	                    delete filters[i].picklistValues;
	                    delete filters[i].targetField;
	                }
	            }
	            if (childFilters.length) {
	                for (var i = 0; i < childFilters.length; i++) {
	                    delete childFilters[i].picklistValues;
	                    delete childFilters[i].targetField;
	                }
	            }
	            return conditionCriteria;
	        }
	
	        function prepareConditionEntries() {
	            var temp = vm.matrixTable.values,
	                priceRuleEntrySOs = [],
	                hasError = false;
	            if (vm.selectedPriceRuleSet && vm.selectedPriceRule && (selectedRuleIndex !== undefined)) {
	                for (var i = 0; i < temp.length; i++) {
	                    var eachObj = {};
	                    if (temp[i].id) {
	                        eachObj['Id'] = temp[i].id;
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentAmount__c')] = temp[i].adjustmentAmount;
	                    eachObj[getPrefixedAttribute('AdjustmentType__c')] = temp[i].adjustmentType;
	                    eachObj[getPrefixedAttribute('MatchInAsset__c')] = temp[i].matchInAsset;
	                    eachObj[getPrefixedAttribute('PriceRuleId__c')] = temp[i].priceRuleId;
	                    if (temp[i].productGroup.autocomplete && temp[i].productGroup.autocomplete.selectedItem && temp[i].productGroup.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('ProductGroupId__c')] = temp[i].productGroup.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('ProductGroupId__c')] = '';
	                    }
	                    if (temp[i].adjustmentAmountSource.autocomplete && temp[i].adjustmentAmountSource.autocomplete.selectedItem && temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = '';
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentUom__c')] = temp[i].adjustmentUOM;
	                    setPriceRuleEntryEffectiveDates(temp[i], eachObj, true);
	                    var condition = temp[i].condition,
	                        conditionObj;
	                    if (condition) {
	                        conditionObj = JSON.parse(temp[i].condition);
	                    } else {
	                        conditionObj = '';
	                    }
	                    if (!conditionObj.exprStr) {
	                        hasError = true;
	                        temp[i].hasError = true;
	                        addAlert({
	                            msg: vm.labels.ConditionPriceRuleRequired,
	                            type: cpqAdminConstants.DANGER
	                        });
	                        break;
	                    } else {
	                        delete temp[i].hasError;
	                    }
	                    eachObj[getPrefixedAttribute('Condition__c')] = temp[i].condition ? temp[i].condition : '';
	                    eachObj[getPrefixedAttribute('Sequence__c')] = temp[i].sequence;
	                    priceRuleEntrySOs.push(eachObj);
	                }
	                if (hasError) {
	                    return hasError;
	                } else {
	                    vm.selectedPriceRuleSet.PriceRuleDOs[selectedRuleIndex].PriceRuleEntrySOs = priceRuleEntrySOs;
	                    return hasError;
	                }
	            }
	            return hasError;
	        }
	
	        function prepareConditionTableContent(priceRuleEntrySOs) {
	            if (priceRuleEntrySOs.length) {
	                for (var i = 0; i < priceRuleEntrySOs.length; i++) {
	                    var temp = {};
	                    temp['id'] = priceRuleEntrySOs[i].Id;
	                    temp['sequence'] = priceRuleEntrySOs[i][getPrefixedAttribute('Sequence__c')];
	                    temp['expression'] = getConditionExpression(priceRuleEntrySOs[i][getPrefixedAttribute('Condition__c')])
	                    temp['adjustmentAmount'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmount__c')] || '';
	                    temp['adjustmentType'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentType__c')] || '';
	                    temp['condition'] = priceRuleEntrySOs[i][getPrefixedAttribute('Condition__c')] || '';
	                    temp['matchInAsset'] = priceRuleEntrySOs[i][getPrefixedAttribute('MatchInAsset__c')] || false;
	                    temp['priceRuleId'] = priceRuleEntrySOs[i][getPrefixedAttribute('PriceRuleId__c')] || '';
	                    var productGroup = priceRuleEntrySOs[i][getPrefixedAttribute('ProductGroupId__r')] || '';
	                    temp['productGroup'] = {
	                        'autocomplete': {
	                            querySearch: priceRulesetCommonService.searchProductGroup,
	                            displayName: 'Name'
	                        }
	                    };
	                    if (productGroup) {
	                        temp['productGroup'].autocomplete.selectedItem = {
	                            Id: productGroup.Id,
	                            Name: productGroup.Name
	                        };
	                    }
	                    const adjustmentAmountSource = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmountSourceId__r')];
	                    temp['adjustmentAmountSource'] = {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    };
	                    if (adjustmentAmountSource) {
	                        temp.adjustmentAmountSource.autocomplete.selectedItem = {
	                            Name: adjustmentAmountSource.Name,
	                            Id: adjustmentAmountSource.Id
	                        };
	                    }
	                    temp['adjustmentUOM'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentUom__c')] || '';
	                    setPriceRuleEntryEffectiveDates(temp, priceRuleEntrySOs[i], false);
	                    vm.matrixTable.values.push(temp);
	                }
	            }
	        }
	
	        function getConditionExpression(conditionObj) {
	            var obj = JSON.parse(conditionObj);
	            return obj.exprStr;
	        }
	
	        function setPriceRuleEntryEffectiveDates(sourceObj, priceRuleEntrySObject, setOnSObject) {
	            if (vm.selectedPriceRuleSet.PriceRulesetSO[getPrefixedAttribute('EnableDateRange__c')]) {
	                if (setOnSObject) {
	                    priceRuleEntrySObject[getPrefixedAttribute('PeriodStartDate__c')] = sourceObj.periodStartDate;
	                    priceRuleEntrySObject[getPrefixedAttribute('PeriodEndDate__c')] = sourceObj.periodEndDate;
	                } else {
	                    if (priceRuleEntrySObject[getPrefixedAttribute('PeriodStartDate__c')] >= 0) {
	                        sourceObj['periodStartDate'] = priceRuleEntrySObject[getPrefixedAttribute('PeriodStartDate__c')];
	                    }
	                    if (priceRuleEntrySObject[getPrefixedAttribute('PeriodEndDate__c')] >= 0) {
	                        sourceObj['periodEndDate'] = priceRuleEntrySObject[getPrefixedAttribute('PeriodEndDate__c')];
	                    }
	                }
	            }
	        }
	
	        function addEffectiveDatesColumnHeaders() {
	            if (vm.selectedPriceRuleSet.PriceRulesetSO[getPrefixedAttribute('EnableDateRange__c')]) {
	                vm.matrixTable.headers.push({name: vm.labels.StartDate});
	                vm.matrixTable.headers.push({name: vm.labels.EndDate});
	            }
	        }
	    };
	
	    matricesController.$inject = [
	        '$q',
	        '$stateParams',
	        '$state',
	        '$scope',
	        'systemConstants',
	        'i18nService',
	        '$mdDialog',
	        'selectedPriceRuleDetails',
	        'applicationService',
	        'priceRulesetConstants',
	        '$timeout',
	        'priceRulesService',
	        'allPriceRuleEntryPicklists',
	        'priceRulesetCommonService',
	        '$templateCache',
	        'allPriceRulePicklists',
	        'cpqAdminConstants',
	        'apiCallsService'
	    ];
	
	    module.exports = matricesController;
	})();


/***/ }),
/* 725 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"condition-container\">\n    <div class=\"price-rule-table-header\" layout=\"row\">\n        <div flex=\"10\"></div>\n        <div flex=\"20\" data-ng-repeat=\"item in vm.matrixTable.headers\" title=\"{{::item.name}}\">{{::item.name}}</div>\n    </div>\n    <div class=\"clearfix\"></div>\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addRowToEntryTable()\" data-ng-if=\"vm.matrixTable.values.length === 0\">\n        <i class=\"material-icons\">add</i>\n    </button>\n    <div class=\"price-rule-table-body\">\n        <ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedPriceRuleEntries(event, index, item)\" class=\"price-rule-entry-list\">\n            <li ng-repeat=\"item in vm.matrixTable.values\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" class=\"individual-row\" ng-class=\"{'error': item.hasError}\" layout=\"row\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\" flex=\"10\">\n                    <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                        <i class=\"material-icons\">more_vert</i>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li data-ng-click=\"vm.showRemoveConfirmation(item.id,'PriceRuleEntry', $index)\" class=\"action-Menu\">\n                            <i class=\"material-icons\">clear</i>\n                            <span class=\"remove-label\">{{vm.labels.Remove}}</span>\n                        </li>\n                        <li class=\"action-Menu\" data-ng-click=\"vm.addRowToEntryTable($index)\">\n                            <i class=\"material-icons\">add</i>\n                            <span class=\"add-label\">Add</span>\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.minProducts\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"''\"></material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.maxProducts\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"''\"></material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.minQuantity\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"''\"></material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.maxQuantity\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"''\"></material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"item.productFamily\" field-label=\"vm.labels.ProductFamily\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"item.productCategory\" field-label=\"vm.labels.ProductCategory\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"item.productGroup\" field-label=\"vm.labels.ProductGroup\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.adjustmentAmount\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"''\"></material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.adjustmentType\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"vm.adjustmentTypePicklistEntries\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field field-type=\"autocomplete\" properties=\"item.adjustmentAmountSource\" field-label=\"' '\" name=\"autocompletefield\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.adjustmentUOM\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"vm.adjustmentUOMPicklistEntries\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item dimension-date-range-field\" flex=\"20\" ng-if=\"vm.selectedPriceRuleSet.PriceRulesetSO[vm.prefix + 'EnableDateRange__c']\">\n                    <material-form-field model=\"item.periodStartDate\"\n                        field-type=\"DATETIME\"\n                        is-editable=\"true\"\n                        field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item dimension-date-range-field\" flex=\"20\" ng-if=\"vm.selectedPriceRuleSet.PriceRulesetSO[vm.prefix + 'EnableDateRange__c']\">\n                    <material-form-field model=\"item.periodEndDate\"\n                        field-type=\"DATETIME\"\n                        is-editable=\"true\"\n                        field-label=\"''\">\n                    </material-form-field>\n                </div>\n            </li>\n        </ul>\n        <div class=\"clearfix\"></div>\n    </div>\n</div>\n"

/***/ }),
/* 726 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"condition-container\" ng-if=\"vm.ruleType === 'Inclusion'\">\n    <div class=\"price-rule-table-header\" layout=\"row\">\n        <div flex=\"5\"></div>\n        <div flex=\"20\" data-ng-repeat=\"item in vm.matrixTable.headers\" title=\"{{::item.name}}\">{{::item.name}}</div>\n    </div>\n    <div class=\"clearfix\"></div>\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addRowToEntryTable()\" data-ng-if=\"vm.matrixTable.values.length === 0\">\n        <i class=\"material-icons\">add</i>\n    </button>\n    <div class=\"price-rule-table-body\">\n        <ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedPriceRuleEntries(event, index, item)\" class=\"price-rule-entry-list\">\n            <li ng-repeat=\"item in vm.matrixTable.values\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" class=\"individual-row\" layout=\"row\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\" flex=\"5\">\n                    <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                        <i class=\"material-icons\">more_vert</i>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li data-ng-click=\"vm.showRemoveConfirmation(item.id,'PriceRuleEntry', $index)\" class=\"action-Menu\">\n                            <i class=\"material-icons\">clear</i>\n                            <span class=\"remove-label\">{{vm.labels.Remove}}</span>\n                        </li>\n                        <li class=\"action-Menu\" data-ng-click=\"vm.addRowToEntryTable($index)\">\n                            <i class=\"material-icons\">add</i>\n                            <span class=\"add-label\">Add</span>\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.inclusionMethod\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.inclusionMethodPicklistEntries\" field-label=\"\" name=\"inclusionMethod\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"item.productGroup\" field-label=\"vm.labels.ProductGroup\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.adjustmentAmount\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"''\"></material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.adjustmentType\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.adjustmentTypePicklistEntries\" field-label=\"\" name=\"adjustmentType\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field field-type=\"autocomplete\" properties=\"item.adjustmentAmountSource\" field-label=\"' '\" name=\"autocompletefield\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.adjustmentUOM\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.adjustmentUOMPicklistEntries\" field-label=\"\" name=\"adjustmentUOM\">\n                    </material-form-field>\n                </div>\n                <div class=\"item dimension-date-range-field\" flex=\"20\" ng-if=\"vm.selectedPriceRuleSet.PriceRulesetSO[vm.prefix + 'EnableDateRange__c']\">\n                    <material-form-field model=\"item.periodStartDate\"\n                        field-type=\"DATETIME\"\n                        is-editable=\"true\"\n                        field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item dimension-date-range-field\" flex=\"20\" ng-if=\"vm.selectedPriceRuleSet.PriceRulesetSO[vm.prefix + 'EnableDateRange__c']\">\n                    <material-form-field model=\"item.periodEndDate\"\n                        field-type=\"DATETIME\"\n                        is-editable=\"true\"\n                        field-label=\"''\">\n                    </material-form-field>\n                </div>\n            </li>\n        </ul>\n        <div class=\"clearfix\"></div>\n    </div>\n</div>\n"

/***/ }),
/* 727 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"condition-container\">\n    <div class=\"price-rule-table-header\" layout=\"row\">\n        <div flex=\"5\"></div>\n        <div flex=\"20\" data-ng-repeat=\"item in vm.matrixTable.headers\" title=\"{{::item.name}}\" >{{::item.name}}</div>\n    </div>\n    <div class=\"clearfix\"></div>\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addRowToEntryTable()\" data-ng-if=\"vm.matrixTable.values.length === 0\">\n        <i class=\"material-icons\">add</i>\n    </button>\n    <div class=\"price-rule-table-body\">\n        <ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedPriceRuleEntries(event, index, item)\" class=\"price-rule-entry-list\">\n            <li ng-repeat=\"item in vm.matrixTable.values\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" class=\"individual-row\" layout=\"row\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\" flex=\"5\">\n                    <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                        <i class=\"material-icons\">more_vert</i>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li data-ng-click=\"vm.showRemoveConfirmation(item.id,'PriceRuleEntry', $index)\" class=\"action-Menu\">\n                            <i class=\"material-icons\">clear</i>\n                            <span class=\"remove-label\">{{vm.labels.Remove}}</span>\n                        </li>\n                        <li class=\"action-Menu\" data-ng-click=\"vm.addRowToEntryTable($index)\">\n                            <i class=\"material-icons\">add</i>\n                            <span class=\"add-label\">Add</span>\n                        </li>\n                    </ul>\n                </div>\n                <div data-ng-repeat=\"header in vm.matrixTable.headers\" class=\"item\" ng-class=\"{'dimension-date-range-field': header.fieldType === 'DATETIME'}\" flex=\"20\">\n                    <material-form-field model=\"item[header.valueField]\" field-type=\"STRING\" is-editable=\"true\" ng-if=\"header.fieldType !== 'PICKLIST' && header.fieldType !== 'MULTIPICKLIST' && header.fieldType !== 'DATETIME' && header.valueField !== 'adjustmentAmountSource'\">\n                    </material-form-field>\n                    <material-form-field model=\"item[header.valueField]\" field-type=\"DATETIME\" is-editable=\"true\" ng-if=\"header.fieldType === 'DATETIME'\">\n                    </material-form-field>\n                    <material-form-field model=\"item[header.valueField]\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"header.picklistValues\" ng-if=\"header.fieldType === 'PICKLIST'\">\n                    </material-form-field>\n                    <material-form-field model=\"item[header.valueField]\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" properties=\"header.picklistValues\" field-label=\"''\" ng-if=\"header.fieldType === 'MULTIPICKLIST'\">\n                    </material-form-field>\n                    <material-form-field field-type=\"autocomplete\" properties=\"item.adjustmentAmountSource\" field-label=\"' '\" name=\"autocompletefield\" ng-if=\"header.valueField === 'adjustmentAmountSource'\">\n                    </material-form-field>\n                </div>\n            </li>\n        </ul>\n        <div class=\"clearfix\"></div>\n    </div>\n</div>\n"

/***/ }),
/* 728 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"condition-container\">\n    <div class=\"price-rule-table-header\" layout=\"row\">\n        <div flex=\"5\"></div>\n        <div flex=\"20\" data-ng-repeat=\"item in vm.matrixTable.headers\" title=\"{{::item.name}}\" ng-class=\"{'condition-expression' : item.name === 'Expression'}\">{{::item.name}}</div>\n    </div>\n    <div class=\"clearfix\"></div>\n    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.addRowToEntryTable()\" data-ng-if=\"vm.matrixTable.values.length === 0\">\n        <i class=\"material-icons\">add</i>\n    </button>\n    <div class=\"price-rule-table-body\">\n        <ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedPriceRuleEntries(event, index, item)\" class=\"price-rule-entry-list\">\n            <li ng-repeat=\"item in vm.matrixTable.values\" dnd-draggable=\"item\" dnd-effect-allowed=\"move\" class=\"individual-row\" ng-class=\"{'error': item.hasError}\" layout=\"row\">\n                <div class=\"btn-group\" role=\"group\" aria-label=\"...\" flex=\"5\">\n                    <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                        <i class=\"material-icons\">more_vert</i>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li data-ng-click=\"vm.showRemoveConfirmation(item.id,'PriceRuleEntry', $index)\" class=\"action-Menu\">\n                            <i class=\"material-icons\">clear</i>\n                            <span class=\"remove-label\">{{vm.labels.Remove}}</span>\n                        </li>\n                        <li class=\"action-Menu\" data-ng-click=\"vm.addRowToEntryTable($index)\">\n                            <i class=\"material-icons\">add</i>\n                            <span class=\"add-label\">Add</span>\n                        </li>\n                    </ul>\n                </div>\n                <div class=\"item\" style=\"position: relative;width: 500px;\" flex=\"20\">\n                    <div style=\"width:calc(100% - 25px);\">\n                        <material-form-field model=\"item.expression\" field-type=\"STRING\" is-editable=\"true\" field-label=\"''\" is-disabled=\"true\">\n                        </material-form-field>\n                    </div>\n                    <button type=\"button\" class=\"slds-button\" style=\"padding: 0px;position: absolute;top: 5px;right: 5px;\" data-ng-click=\"vm.openConditionCriteria(item.condition, $index)\">\n                        <i class=\"fa fa-external-link\"></i>\n                    </button>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field field-type=\"AUTOCOMPLETE\" properties=\"item.productGroup\" field-label=\"' '\">\n                    </material-form-field>\n                </div>\n                <div class=\"item text-center\" flex=\"20\">\n                    <material-form-field field-type=\"CHECKBOX\" model=\"item.matchInAsset\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.adjustmentAmount\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.adjustmentType\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"vm.adjustmentTypePicklistEntries\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field field-type=\"autocomplete\" properties=\"item.adjustmentAmountSource\" field-label=\"' '\" name=\"autocompletefield\">\n                    </material-form-field>\n                </div>\n                <div class=\"item\" flex=\"20\">\n                    <material-form-field model=\"item.adjustmentUOM\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"vm.adjustmentUOMPicklistEntries\" field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item dimension-date-range-field\" flex=\"20\" ng-if=\"vm.selectedPriceRuleSet.PriceRulesetSO[vm.prefix + 'EnableDateRange__c']\">\n                    <material-form-field model=\"item.periodStartDate\"\n                        field-type=\"DATETIME\"\n                        is-editable=\"true\"\n                        field-label=\"''\">\n                    </material-form-field>\n                </div>\n                <div class=\"item dimension-date-range-field\" flex=\"20\" ng-if=\"vm.selectedPriceRuleSet.PriceRulesetSO[vm.prefix + 'EnableDateRange__c']\">\n                    <material-form-field model=\"item.periodEndDate\"\n                        field-type=\"DATETIME\"\n                        is-editable=\"true\"\n                        field-label=\"''\">\n                    </material-form-field>\n                </div>\n            </li>\n        </ul>\n        <div class=\"clearfix\"></div>\n    </div>\n</div>\n"

/***/ }),
/* 729 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var priceRuleModalController = function($scope, $mdDialog, i18nService, systemConstants, priceRulesetConstants, selectedPriceRule, type, allPicklists, priceRulesService) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.ruleNameMaxLength = priceRulesetConstants.maxLength;
	        vm.dimensions = [];
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (attribute.indexOf('__') > -1 ? prefix + attribute : attribute).trim();
	        }
	
	        vm.alertList = [];
	        vm.selectedPriceRule = angular.copy(selectedPriceRule);
	
	        function prepareDimensions() {
	            var priceRuleSO = selectedPriceRule.PriceRuleSO;
	            vm.dimensions = [];
	            for (var i = 0; i < 6; i++) {
	                var objName = getPrefixedAttribute('Dimension' + (i + 1) + 'Id__r'),
	                    objValueType = getPrefixedAttribute('Dimension' + (i + 1) + 'ValueType__c'),
	                    id = objName.Id;
	                if (priceRuleSO[objName]) {
	                    vm.dimensions.push({
	                        id: id,
	                        dimensionValueType: priceRuleSO[objValueType],
	                        dimensionLabel: 'Dimension ' + (i + 1),
	                        autocomplete: {
	                            'querySearch': priceRulesService.getPriceDimensions,
	                            'displayName': 'Name',
	                            'selectedItem': {
	                                Name: priceRuleSO[objName].Name,
	                                Id: priceRuleSO[objName].Id
	                            }
	                        }
	                    });
	                } else {
	                    vm.dimensions.push({
	                        dimensionValueType: priceRuleSO[objValueType],
	                        dimensionLabel: 'Dimension ' + (i + 1),
	                        autocomplete: {
	                            'querySearch': priceRulesService.getPriceDimensions,
	                            'displayName': 'Name'
	                        }
	                    });
	                }
	            }
	        }
	
	        /* Uncomment the below code once APIs are ready */
	        prepareDimensions();
	
	        function getPicklistValues(type) {
	            var response = [],
	                noneVar = {
	                    label: vm.labels.NoneAsPickListValue,
	                    value: ''
	                };
	            if (allPicklists.length && type) {
	                for (var i = 0; i < allPicklists.length; i++) {
	                    if (allPicklists[i].FieldName === getPrefixedAttribute(type)) {
	                        response = angular.copy(allPicklists[i].PicklistValues);
	                        break;
	                    }
	                }
	            }
	            response.unshift(noneVar);
	            return response;
	        }
	
	        vm.dimensionPicklistEntries = {
	            PicklistValues: getPicklistValues('Dimension1ValueType__c')
	        };
	        vm.ruleTypePicklistEntries = {
	            PicklistValues: getPicklistValues('RuleType__c')
	        };
	        vm.allowableActionPicklistEntries = {
	            PicklistValues: getPicklistValues('AllowableAction__c')
	        };
	        vm.adjustmentAppliesToPicklistEntries = {
	            PicklistValues: getPicklistValues('AdjustmentAppliesTo__c')
	        };
	        vm.adjustmentChargeTypePicklistEntries = {
	            PicklistValues: getPicklistValues('AdjustmentChargeType__c')
	        };
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        vm.removeDimension = function(index) {
	            var item = vm.dimensions[index];
	            item.dimensionValueType = '';
	            delete item.autocomplete.selectedItem;
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        function addDimensionsToMatrixSo() {
	            var errorFree = true,
	                uniqueEntries = [];
	
	            for (var i = 0; i < vm.dimensions.length; i++) {
	                var dimension = vm.dimensions[i].autocomplete.selectedItem,
	                    objName = getPrefixedAttribute('Dimension' + (i + 1) + 'Id__c'),
	                    relationObjName = getPrefixedAttribute('Dimension' + (i + 1) + 'Id__r'),
	                    objValueType = getPrefixedAttribute('Dimension' + (i + 1) + 'ValueType__c');
	
	                if (dimension && dimension.Id) {
	                    if (uniqueEntries.indexOf(dimension.Id) <= -1) {
	
	                        uniqueEntries.push(dimension.Id);
	
	                        vm.selectedPriceRule.PriceRuleSO[objName] = dimension.Id;
	                        vm.selectedPriceRule.PriceRuleSO[relationObjName] = {
	                            Id: dimension.Id,
	                            Name: dimension.Name
	                        };
	                        vm.selectedPriceRule.PriceRuleSO[objValueType] = vm.dimensions[i].dimensionValueType;
	                    } else {
	                        addAlert({
	                            msg: vm.labels.DuplicateDimensions
	                        });
	                        errorFree = false;
	                        break;
	                    }
	                } else {
	                    vm.selectedPriceRule.PriceRuleSO[objName] = '';
	                    vm.selectedPriceRule.PriceRuleSO[relationObjName] = {
	                        Id: '',
	                        Name: ''
	                    };
	                    vm.selectedPriceRule.PriceRuleSO[objValueType] = '';
	                }
	
	            }
	            return errorFree;
	        }
	        vm.save = function() {
	            vm.priceRuleForm.$setSubmitted();
	            if (vm.priceRuleForm.$valid) {
	                if (addDimensionsToMatrixSo()) {
	                    $mdDialog.hide({
	                        type: type,
	                        rule: angular.copy(vm.selectedPriceRule)
	                    });
	                }
	            }
	
	        };
	
	    };
	
	    priceRuleModalController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'priceRulesetConstants',
	        'selectedPriceRule',
	        'type',
	        'allPicklists',
	        'priceRulesService'
	    ];
	
	    module.exports = priceRuleModalController;
	})();


/***/ }),
/* 730 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"price-rule-dialog\">\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n        </i>\n    </button>\n    <md-dialog-content class=\"price-rule-dialog-content\">\n        <md-tabs md-selected=\"vm.selctedTabIndex\" md-dynamic-height md-border-bottom>\n            <md-tab label=\"DETAILS\">\n                <md-content>\n                    <div class=\"error-indicator\">\n                        <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"5000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n                    </div>\n                    <div class=\"md-padding content-wide\">\n                        <form class=\"product-detail-form\" novalidate name=\"vm.priceRuleForm\">\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO.Name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.RuleName\" name=\"ruleName\" is-required=\"true\" max-length=\"{{vm.ruleNameMaxLength}}\">\n                                    </material-form-field>\n                                    <div ng-messages=\"vm.priceRuleForm.ruleName.$error\" ng-if=\"vm.priceRuleForm.ruleName.$touched || vm.priceRuleForm.$submitted\">\n                                        <p ng-message=\"required\" class=\"formError\">\n                                            {{vm.labels.MandatoryField}}\n                                        </p>\n                                    </div>\n                                </div>\n                                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'Sequence__c']\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"vm.labels.Sequence\" name=\"sequence\" is-required=\"true\" is-disabled=\"true\">\n                                    </material-form-field>\n                                    <div ng-messages=\"vm.priceRuleForm.sequence.$error\" ng-if=\"vm.priceRuleForm.sequence.$touched || vm.priceRuleForm.$submitted\">\n                                        <p ng-message=\"required\" class=\"formError\">\n                                            {{vm.labels.MandatoryField}}\n                                        </p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" style=\"height:85px;\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'Description__c']\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.ShortDescription\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+ 'StopProcessingMoreRules__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.StopProcessingMoreRules\" show-inline=\"true\">\n                                    </material-form-field>\n                                </div>\n                                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+ 'Active__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.IsActive\" show-inline=\"true\"></material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'RuleType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.ruleTypePicklistEntries\" field-label=\"::vm.labels.RuleType\" name=\"ruleType\">\n                                    </material-form-field>\n                                </div>\n                                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'AllowableAction__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.allowableActionPicklistEntries\" field-label=\"::vm.labels.AllowableAction\" name=\"allowableAction\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'AdjustmentAppliesTo__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.adjustmentAppliesToPicklistEntries\" field-label=\"::vm.labels.AdjustmentAppliesTo\" name=\"adjustmentAppliesTo\">\n                                    </material-form-field>\n                                </div>\n                                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'AdjustmentChargeType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.adjustmentChargeTypePicklistEntries\" field-label=\"::vm.labels.AdjustmentChargeType\" name=\"adjustmentChargeType\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+ 'AllowRemovalOfAdjustment__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.AllowRemovalOfAdjustment\" show-inline=\"true\"></material-form-field>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </md-content>\n            </md-tab>\n            <md-tab label=\"DIMENSIONS\" ng-if=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'RuleType__c'] === 'Dimension'\">\n                <md-content>\n                    <div class=\"dimension-container\">\n                        <div data-ng-repeat=\"item in vm.dimensions\" class=\"each-dimension\">\n                            <div class=\"auto-complete-field\">\n                                <material-form-field field-type=\"autocomplete\" properties=\"item\" field-label=\"::item.dimensionLabel\">\n                                </material-form-field>\n                            </div>\n                            <div class=\"auto-complete-field\">\n                                <material-form-field model=\"item.dimensionValueType\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.dimensionPicklistEntries\" field-label=\"::vm.labels.DimensionValueType\" name=\"dimensionValueType\">\n                                </material-form-field>\n                            </div>\n                            <div class=\"action-items\">\n                                <div class=\"btn-group\" role=\"group\">\n                                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeDimension($index)\">\n                                        <i class=\"material-icons\">clear</i>\n                                    </button>\n                                </div>\n                            </div>\n                            <div class=\"clearfix\"></div>\n                        </div>\n                    </div>\n                </md-content>\n            </md-tab>\n        </md-tabs>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 731 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var priceRulesetController = function($state, $scope, $rootScope, i18nService, priceRulesetCommonService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	
	        function findStateName(stateName) {
	            vm.stateCurrentName = stateName;
	        }
	        findStateName($state.current.name);
	
	        $scope.$on('$stateChangeSuccess', function(e, toState, toParams) {
	            findStateName(toState.name);
	            updateTabMenus();
	        });
	
	        /* Menu for specific Tabs */
	        vm.tabFirstMenu = '';
	        vm.tabMenuItems = [];
	
	        function updateTabMenus() {
	            var currentState = vm.stateCurrentName,
	                currentHash = currentState.split('app.priceRuleset.')[1];
	            switch (currentHash) {
	                case 'details':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewPriceRuleset;
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                case 'priceRules':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewPriceRule;
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                default:
	                    {
	                        vm.tabFirstMenu = '';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	            }
	        }
	
	        vm.tabMenuClicked = function(menuName) {
	            var eventName = menuName.split(' ').join('-');
	            $scope.$broadcast(eventName);
	        };
	
	        vm.currentState = $state.current.name;
	
	        $scope.$watch(function() {
	            return priceRulesetCommonService.getSelectedPRS();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                vm.selectedPRS = newValue;
	            }
	        }, true);
	    };
	
	    priceRulesetController.$inject = [
	        '$state',
	        '$scope',
	        '$rootScope',
	        'i18nService',
	        'priceRulesetCommonService'
	    ];
	
	    module.exports = priceRulesetController;
	})();


/***/ }),
/* 732 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		var constants = {
			/*
			 * This object can be any level nested depending on modularity we want to achieve 
			 * - Either per page
			 * - Per standalone functionality
			 */
			'new': 'new',
			'update': 'update',
			'numberOfProductsPerChunk': 50,
			'treePanelItemsPerChunk': 25,
			'maxLength': 80
			
		};
	
		module.exports = constants;
	
	})();

/***/ }),
/* 733 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"price-ruleset\">\n    <div class=\"price-ruleset-main-container\">\n        <div class=\"price-ruleset-header title-bar\">\n            <div class=\"price-ruleset-title-container title\">\n                <div class=\"price-ruleset-info\">\n                    <span class=\"title\">{{vm.selectedPRS.name}}</span>\n                </div>\n            </div>\n            <div id=\"navbar\">\n                <price-ruleset-sub-menu></price-ruleset-sub-menu>\n                <!-- Product menu bar with its values -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"list-product-btn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabFirstMenu)\" data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                        <div class=\"drop drop-menu\" data-ng-if=\"::vm.tabMenuItems.length > 0\">\n                            <md-menu md-offset=\"50 50\">\n                                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                    <i class=\"material-icons\">more_vert</i>\n                                </button>\n                                <md-menu-content width=\"2\">\n                                    <md-menu-item data-ng-repeat=\"menu in ::vm.tabMenuItems\">\n                                        <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                            <div layout=\"row\" flex>\n                                                <p flex>{{::menu}}</p>\n                                            </div>\n                                        </md-button>\n                                    </md-menu-item>\n                                </md-menu-content>\n                            </md-menu>\n                        </div>\n                    </div>\n                </ul>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"price-ruleset-center-container\">\n            <!-- Content layout starts -->\n            <div ui-view=\"priceRulesetContainer\" class=\"price-ruleset-container\"></div>\n            <!-- Content layout ends -->\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 734 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    __webpack_require__(735);
	    __webpack_require__(740);
	    __webpack_require__(742);
	    __webpack_require__(746);
	
	    module.exports = angular.module('cpqAdmin.priceDimension', [
	
	            'cpqAdmin.priceDimension.common.services',
	            'cpqAdmin.priceDimension.common.directives',
	            'cpqAdmin.priceDimension.list',
	            'cpqAdmin.priceDimension.details'
	        ])
	        .controller('priceDimensionController', __webpack_require__(752))
	        .constant('priceDimensionConstants', __webpack_require__(753))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceDimension', {
	                url: '/priceDimension',
	                //abstract: true,
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(754),
	                        controller: 'priceDimensionController',
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 735 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceDimension.common.directives', [])
	        .directive('priceDimensionSubMenu', __webpack_require__(736))
	        .directive('priceDimensionsListing', __webpack_require__(738));
	})();


/***/ }),
/* 736 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var priceDimensionSubMenuController = function($stateParams, systemConstants, i18nService) {
	        var vm = this;
	
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	
	    };
	
	    priceDimensionSubMenuController.$inject = [
	        '$stateParams',
	        'systemConstants',
	        'i18nService'
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: priceDimensionSubMenuController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(737),
	    };
	};


/***/ }),
/* 737 */
/***/ (function(module, exports) {

	module.exports = "<ul class=\"nav navbar-nav price-dimension-menu\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.priceDimension.details({id:vm.$stateParams.id})\">{{vm.labels.Details}}</a>\n    </li>\n</ul>\n"

/***/ }),
/* 738 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    module.exports = [
	        function() {
	            var priceDimensionsListingController = function($scope, applicationService, systemConstants, $state, $stateParams,
	                i18nService, remoteService, priceDimensionCommonService, priceDimensionConstants) {
	
	                var vm = this,
	                    prefix = systemConstants.nsPrefix || '',
	                    filter = {
	                        SearchString: '',
	                        ChunkNumber: 1,
	                        NumberOfRecordsPerChunk: priceDimensionConstants.numberOfRecordsPerChunk || 50
	                    },
	                    pageNumber = 1;
	
	                vm.labels = i18nService.CustomLabel;
	                vm.disableLeftBtn = true;
	                vm.searchedStr = '';
	                vm.isMaxSQLSizeExceed = false;
	                vm.numberOfRecordsPerChunk = priceDimensionConstants.numberOfRecordsPerChunk || 50;
	
	                vm.searchPriceDimensions = function() {
	                    filter.SearchString = vm.searchText || '';
	                    filter.ChunkNumber = 1;
	                    filter.NumberOfRecordsPerChunk = vm.numberOfRecordsPerChunk;
	                    loadPriceDimensions();
	                };
	
	                vm.prepareFiltersAndPriceDimensions = function() {
	                    filter = priceDimensionCommonService.getFilter();
	                    if (Object.keys(filter).length) {
	                        vm.searchText = filter.SearchString;
	                    } else {
	                        filter = {
	                            ChunkNumber: pageNumber || 1,
	                            NumberOfRecordsPerChunk: vm.numberOfRecordsPerChunk,
	                            SearchString: vm.searchString || ''
	                        };
	                    }
	                };
	
	                /* On Page load while there are no filters applied */
	                vm.prepareFiltersAndPriceDimensions();
	
	                vm.getPriceDimensions = function(type) {
	                    if (type === 'next') {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber + 1);
	                        if (filter.ChunkNumber !== 1) {
	                            vm.disableLeftBtn = false;
	                        }
	                        loadPriceDimensions();
	                    } else {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber - 1);
	                        if (filter.ChunkNumber === 1) {
	                            vm.disableLeftBtn = true;
	                        }
	                        loadPriceDimensions();
	                    }
	                };
	
	                var pLDeRegisterFunc = $scope.$watch(function() {
	                    return priceDimensionCommonService.getPriceDimensions();
	                }, function(newValue, oldValue) {
	                    if (newValue && oldValue) {
	                        processData(newValue);
	                    }
	                }, true);
	
	                function processData(priceDimensions) {
	                    /* Used to bind to table body */
	                    vm.priceDimensions = priceDimensions;
	                    vm.isMaxSQLSizeExceed = false;
	
	                    if (priceDimensions.length === 0) {
	                        vm.searchedStr = vm.searchString;
	                    }
	                    /**
	                     * - Check if the response size is less than the current chunk size.
	                     * - If less, disable the next button
	                     * - else keep it enabled
	                     */
	
	                    if (priceDimensions.length < filter.NumberOfRecordsPerChunk) {
	                        vm.disableRightBtn = true;
	                        updateCenterBtnText(filter, priceDimensions.length);
	                    } else {
	                        vm.disableRightBtn = false;
	                        updateCenterBtnText(filter, priceDimensions.length);
	                    }
	
	                    /* Hide the loader on success of service call */
	                    vm.showLoader = false;
	                    document.querySelector('.list-table').scrollTop = 0;
	                }
	
	                function loadPriceDimensions() {
	
	                    vm.showLoader = true;
	                    priceDimensionCommonService.loadAllPriceDimensions(filter)
	                        .then(function(response) {}, function(reason) {});
	
	                }
	
	                function updateCenterBtnText(filterObj, endCount) {
	                    /* 
	                     * - Search result might return lesser number of records than current pagination count.
	                     * e.g. current pagination is : 1-150, but search returned only 20 records.
	                     * - Then pagination should be updated to 1-20 instead of 1-150.
	                     * - endCount variable contains the exact number of records and will only be defined, if
	                     * search count is lesser than current pagination sequence.
	                     */
	                    if (filterObj.ChunkNumber === 1) {
	                        vm.disableLeftBtn = true;
	                    }
	                    if (endCount) {
	                        vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfRecordsPerChunk + 1) + '-' + ((filterObj.ChunkNumber - 1) * vm.numberOfRecordsPerChunk + endCount) + ')';
	                        if (endCount < vm.numberOfRecordsPerChunk) {
	                            vm.disableRightBtn = true;
	                        }
	                    } else {
	                        vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfRecordsPerChunk + 1) + '-' + (filterObj.ChunkNumber * vm.numberOfRecordsPerChunk) + ')';
	                    }
	                }
	
	                vm.getActiveClass = function(id) {
	                    if ($stateParams.id === id) {
	                        return true;
	                    } else {
	                        return false;
	                    }
	                };
	
	                $scope.$on('destroy', function() {
	                    deRegisterFunc();
	                    pLDeRegisterFunc();
	                    vm = null;
	                });
	
	                vm.loadPriceDimensionDetails = function(toBeLoadedPriceDimension) {
	                    if (toBeLoadedPriceDimension.PriceDimensionSO[prefix + 'ContextType__c'] === priceDimensionConstants.lineItem ||
	                        toBeLoadedPriceDimension.PriceDimensionSO[prefix + 'ContextType__c'] === priceDimensionConstants.productAttribute ||
	                        toBeLoadedPriceDimension.PriceDimensionSO[prefix + 'ContextType__c'] === priceDimensionConstants.formulaField ||
	                        toBeLoadedPriceDimension.PriceDimensionSO[prefix + 'ContextType__c'] === priceDimensionConstants.custom) {
	                        priceDimensionCommonService.setSelectedPriceDimension(angular.copy(toBeLoadedPriceDimension));
	                        $state.go('app.priceDimension.details', {
	                            id: toBeLoadedPriceDimension.PriceDimensionSO.Id
	                        });
	                    }
	                };
	            };
	
	            priceDimensionsListingController.$inject = [
	                '$scope',
	                'applicationService',
	                'systemConstants',
	                '$state',
	                '$stateParams',
	                'i18nService',
	                'remoteService',
	                'priceDimensionCommonService',
	                'priceDimensionConstants'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {},
	                controller: priceDimensionsListingController,
	                controllerAs: 'vm',
	                bindToController: {
	                    searchText: '='
	                },
	                template: __webpack_require__(739),
	            };
	        }
	    ];
	})();


/***/ }),
/* 739 */
/***/ (function(module, exports) {

	module.exports = "<header>\n    <h4>{{::vm.labels.AllPriceDimensions}}</h4>\n    <div class=\"search\">\n        <form ng-submit=\"vm.searchPriceDimensions()\" novalidate>\n            <div class=\"search-input-container\">\n                <div class=\"input-group\">\n                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                    <label class=\"ng-binding\">Search</label>\n                </div>\n            </div>\n        </form>\n    </div>\n</header>\n<div data-ng-if=\"vm.priceDimensions.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n    {{::vm.labels.NoMatchingPriceDimensions}} <span><b>{{vm.searchedStr}}</b></span>\n</div>\n<div data-ng-if=\"vm.priceDimensions.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n    {{::vm.labels.MaxSQLSizeExceedMessage}}\n</div>\n<div class=\"list-table\">\n    <table>\n        <tbody>\n            <tr ng-repeat=\"item in vm.priceDimensions track by item.PriceDimensionSO.Id\" ng-click=\"vm.loadPriceDimensionDetails(item)\" ng-class=\"{active: vm.getActiveClass(item.PriceDimensionSO.Id) === true}\">\n                <td>\n                    {{::item.PriceDimensionSO.Name }}\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<div class=\"pagination price-dimensions-list-pagination\">\n    <div class=\"place price-dimensions-list-place\">\n        {{vm.paginationCenterText}}\n    </div>\n    <div class=\"next-prev\">\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getPriceDimensions('previous')\">\n            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n        </button>\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getPriceDimensions('next')\">\n            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n        </button>\n    </div>\n</div>\n"

/***/ }),
/* 740 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceDimension.common.services', [])
	        .service('priceDimensionCommonService', __webpack_require__(741));
	        
	})();


/***/ }),
/* 741 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var priceDimensionCommonServices = function(systemConstants, remoteService, $q, priceDimensionConstants) {
	
	        var filter = {},
	            selectedPriceDimension = {},
	            priceDimension = [],
	            metadata = [];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function setSelectedPriceDimension(obj) {
	            selectedPriceDimension = obj;
	        }
	
	        function getSelectedPriceDimension() {
	            return selectedPriceDimension;
	        }
	
	        function loadAllPriceDimensions(requestObj) {
	            var defer = $q.defer();
	            remoteService.getPriceDimensions(requestObj)
	                .then(function(response) {
	                    setPriceDimensions(response.PriceDimensionDOs);
	                    defer.resolve(true);
	                }, function(reason) {
	                    defer.reject(true);
	                });
	            return defer.promise;
	        }
	
	        function setPriceDimensions(arr) {
	            priceDimension = [];
	            priceDimension = angular.copy(arr);
	        }
	
	        function getPriceDimensions() {
	            return priceDimension;
	        }
	
	        function setFilter(obj) {
	            filter = obj;
	        }
	
	        function getFilter() {
	            return filter;
	        }
	
	        function getSObjectPicklistFields(sObjectName, fields) {
	            var defer = $q.defer(),
	                picklistFieldNames;
	            sObjectName = getPrefixedAttribute(sObjectName);
	            if (fields && fields.length) {
	                for (var i = 0; i < fields.length; i++) {
	                    fields[i] = getPrefixedAttribute(fields[i]);
	                }
	                picklistFieldNames = fields;
	            } else {
	                picklistFieldNames = null;
	            }
	            remoteService.getSObjectPicklistFields(sObjectName, picklistFieldNames)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function getSelectedPriceDimensionDetails(id) {
	            var defer = $q.defer();
	            if(id === 'new'){
	                defer.resolve({});
	            } else if (selectedPriceDimension && selectedPriceDimension.PriceDimensionSO) {
	                defer.resolve(selectedPriceDimension.PriceDimensionSO);
	            } else {
	                var requestObj = {PriceDimensionIds: [id]}
	                remoteService.getPriceDimensions(requestObj).then(function(response) {
	                    if(response && response.PriceDimensionDOs.length > 0){
	                        defer.resolve(response.PriceDimensionDOs[0].PriceDimensionSO);
	                    } else {
	                        defer.resolve({});
	                    }
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            }
	            return defer.promise;
	        }
	
	        var service = {
	            setFilter: setFilter,
	            getFilter: getFilter,
	            getPriceDimensions: getPriceDimensions,
	            setPriceDimensions: setPriceDimensions,
	            setSelectedPriceDimension: setSelectedPriceDimension,
	            getSelectedPriceDimension: getSelectedPriceDimension,
	            loadAllPriceDimensions: loadAllPriceDimensions,
	            getSObjectPicklistFields: getSObjectPicklistFields,
	            getSelectedPriceDimensionDetails: getSelectedPriceDimensionDetails
	        };
	        return service;
	    };
	
	    priceDimensionCommonServices.$inject = [
	        'systemConstants',
	        'remoteService',
	        '$q',
	        'priceDimensionConstants'
	    ];
	
	    module.exports = priceDimensionCommonServices;
	})();


/***/ }),
/* 742 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceDimension.list',[])
	        .service('priceDimensionListService', __webpack_require__(743))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceDimension.list', {
	                parent: 'app.priceDimension',
	                url: '/list',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(744),
	                        controller: __webpack_require__(745),
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 743 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var priceDimensionListService = function(remoteService, $q) {
	
	
	        function getAllPriceLists(request) {
	            var defer = $q.defer();
	            /* This API doesnt support sorting by any column */
	            remoteService.getAllPriceLists(request).then(function(response) {
	                defer.resolve(response);
	            }, function(reason) {
	                defer.reject(reason);
	            });
	            return defer.promise;
	        }
	
	        var service = {
	            getAllPriceLists: getAllPriceLists
	        };
	
	        return service;
	    };
	    priceDimensionListService.$inject = [
	        'remoteService',
	        '$q'
	    ];
	
	    module.exports = priceDimensionListService;
	})();


/***/ }),
/* 744 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"price-dimension-list-container\">\n    <div class=\"two-col-layout auto-height\">\n        <div class=\"auto-height col-lg-12 noPadding list-table-container\">\n            <div class=\"list-header\">\n                <!-- Search Bar starts -->\n                <div class=\"row noMargin search-container title-bar\">\n                    <div class=\"price-dimension-search\">\n                        <div class=\"col-xs-5\">\n                            <div class=\"search-box-container\">\n                                <span class=\"fa fa-filter pointerEventsNone\" disabled data-ng-click=\"vm.resetPagination();\"></span>\n                                <i class=\"search-icon material-icons\" data-ng-click=\"vm.resetPagination()\">search</i>\n                                <form ng-submit=\"vm.resetPagination()\">\n                                    <input type=\"text\" placeholder=\"Search Price Dimension\" class=\"search-box\" data-ng-model=\"vm.searchString\">\n                                    <i class=\"clear-icon material-icons\" data-ng-if=\"vm.searchString\" data-ng-click=\"vm.clearSearchInput()\">clear</i>\n                                </form>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-3\"></div>\n                        <div class=\"col-xs-4 text-right price-dimension-btn-group\">\n                            <div class=\"listBtn\">\n                                <button type=\"button\" class=\"slds-button slds-button_brand\" data-ng-click=\"vm.createNewPriceDimension()\">{{vm.labels.NewPriceDimension}}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div preloader add-to-element=\"true\" loading-text=\"vm.loadingText\" data-ng-if=\"vm.showLoader === true\"></div>\n            <div data-ng-if=\"vm.priceDimensions.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{::vm.labels.NoMatchingPriceDimensions}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.priceDimensions.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{::vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"list-table\">\n                <table ng-table=\"vm.tableParams\" class=\"table ng-table-resizable-columns\">\n                    <thead>\n                        <tr>\n                            <th ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                                <span ng-click=\"vm.tableHeaderClick(column);\">\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-descent'\">arrow_downward</i>\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-ascent'\">arrow_upward</i> \n                                    {{column.FieldLabel}}\n                                </span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"priceDimension in vm.priceDimensions track by priceDimension.PriceDimensionSO.Id\">\n                            <td data-ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                                <span data-ng-if=\"::column.FieldName === 'Name'\" ng-switch on=\"vm.isClickable(priceDimension.PriceDimensionSO)\">\n                                    <a data-ng-click=\"vm.loadPriceDimensionDetails(priceDimension, $event)\" ng-bind-html=\"::priceDimension.PriceDimensionSO[column.FieldName]\" class=\"clickable-item\" ng-switch-when=\"true\"></a>\n                                    <span ng-switch-when=\"false\" ng-bind-html=\"::priceDimension.PriceDimensionSO[column.FieldName]\"></span>\n                                </span>\n                                <span data-ng-if=\"::column.FieldName !== 'Name'\" ng-bind-html=\"::vm.getFormattedContent(priceDimension,column)\"></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"pagination-container text-center\" data-ng-if=\"vm.showPagination === true\">\n                <div class=\"btn-group dropup text-right\" role=\"group\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        {{vm.labels.RecordsPerPage | userMessage:vm.numberOfRecordsPerChunk}}\n                        <span class=\"caret\"></span>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li><a data-ng-click=\"vm.numberOfRecordsPerChunk = 50\">50</a></li>\n                        <li><a data-ng-click=\"vm.numberOfRecordsPerChunk = 100\">100</a></li>\n                        <li><a data-ng-click=\"vm.numberOfRecordsPerChunk = 150\">150</a></li>\n                        <li><a data-ng-click=\"vm.numberOfRecordsPerChunk = 200\">200</a></li>\n                    </ul>\n                </div>\n                <div class=\"navigation-control\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProduct('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                    <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProduct('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 745 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var priceDimensionListController = function($scope, $state, $filter, NgTableParams, $timeout, i18nService, systemConstants, priceDimensionConstants, cpqAdminConstants,
	        priceDimensionCommonService, $location, applicationService) {
	        var vm = this;
	
	        vm.labels = i18nService.CustomLabel;
	        var prefix = systemConstants.nsPrefix || '';
	        vm.tableColumnConfig = [{
	            "FieldLabel": vm.labels.Name,
	            "FieldName": "Name",
	            "Type": "STRING",
	            "showSortIcon": true,
	            "sortIconCls": 'st-sort-ascent'
	
	        }, {
	            "FieldLabel": 'Context Type',
	            "FieldName": getPrefixedAttribute("ContextType__c"),
	            "Type": "STRING",
	
	        }, {
	            "FieldLabel": 'Business Object',
	            "FieldName": getPrefixedAttribute("BusinessObject__c"),
	            "Type": "STRING",
	
	        }, {
	            "FieldLabel": vm.labels.Field,
	            "FieldName": getPrefixedAttribute("Datasource__c"),
	            "Type": "STRING"
	        }, {
	            "FieldLabel": vm.labels.Description,
	            "FieldName": getPrefixedAttribute("Description__c"),
	            "Type": "STRING",
	
	        }];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	        /* 
	         * - vm.searchString : is the value present in the search field at any point of time.
	         * - vm.searchedStr : is the value user has entered and either clicked on search icon or hit
	         * enter / return  key.
	         */
	        vm.searchedStr = '';
	        vm.numberOfRecordsPerChunk = priceDimensionConstants.numberOfRecordsPerChunk;
	
	        vm.pageNumber = 0;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = false;
	        vm.showLoader = false;
	        vm.loadingText = vm.labels.LoadingText;
	        vm.isMaxSQLSizeExceed = false;
	        vm.showPagination = true;
	        updateCenterBtnText();
	        var sortField, sortDirection, pageNumber = 1,
	            configType = '';
	
	        vm.getProduct = function(type) {
	            if (type === 'next') {
	                pageNumber = pageNumber + 1;
	                vm.pageNumber++;
	                if (vm.pageNumber !== 0) {
	                    vm.disableLeftBtn = false;
	                }
	                loadPriceDimension();
	            } else {
	                pageNumber = pageNumber - 1;
	                vm.pageNumber--;
	                if (vm.pageNumber === 0) {
	                    vm.disableLeftBtn = true;
	                }
	                loadPriceDimension();
	            }
	        };
	
	        function updateCenterBtnText(endCount) {
	            /* 
	             * - Search result might return lesser number of records than current pagination count.
	             * e.g. current pagination is : 1-150, but search returned only 20 records.
	             * - Then pagination should be updated to 1-20 instead of 1-150.
	             * - endCount variable contains the exact number of records and will only be defined, if
	             * search count is lesser than current pagination sequence.
	             */
	            if (endCount) {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfRecordsPerChunk + 1) + '-' + (vm.pageNumber * vm.numberOfRecordsPerChunk + endCount) + ')';
	            } else {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfRecordsPerChunk + 1) + '-' + ((vm.pageNumber + 1) * vm.numberOfRecordsPerChunk) + ')';
	            }
	        };
	
	        vm.resetPagination = function(resetPageNumber) {
	            vm.showPanel = false;
	            if (resetPageNumber) {
	                vm.pageNumber = 0;
	                pageNumber = 1;
	            }
	            vm.pageNumber = 0;
	            pageNumber = 1;
	            vm.disableLeftBtn = true;
	            if (vm.priceDimensions.length < vm.numberOfRecordsPerChunk) {
	                updateCenterBtnText(vm.priceDimensions.length);
	            }
	            loadPriceDimension();
	        };
	
	        var deRegisterFunc = $scope.$watch('vm.numberOfRecordsPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                vm.resetPagination(false);
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            priceDimensionDeRegisterFunc();
	            vm = null;
	        });
	
	
	        vm.getFormattedContent = function(priceDimension, column) {
	            var modifiedValue, precision,
	                fieldType = column.Type,
	                value = priceDimension.PriceDimensionSO[column.FieldName];
	
	            if (vm.systemProperties && vm.systemProperties.PercentageFieldPrecision) {
	                precision = vm.systemProperties.PercentageFieldPrecision;
	            } else if (vm.properties && vm.properties.Precision) {
	                precision = vm.properties.Precision;
	            } else {
	                precision = 5;
	            }
	
	            switch (fieldType) {
	                case cpqAdminConstants.datetime:
	                case cpqAdminConstants.date:
	                    {
	                        modifiedValue = $filter('aptDateToString')(value);
	                        break;
	                    }
	
	                case cpqAdminConstants.boolean:
	                    {
	                        if (value) {
	                            modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	                        } else {
	                            modifiedValue = "<i class='material-icons show'>check_circle</i>";
	                        }
	                        break;
	                    }
	                case cpqAdminConstants.string:
	                case cpqAdminConstants.textarea:
	                case cpqAdminConstants.url:
	                case cpqAdminConstants.multipicklist:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	                default:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	            }
	            return modifiedValue;
	        };
	
	        function createNgTable(data, numberOfRecordsPerChunk) {
	            var initialParams = {
	                count: numberOfRecordsPerChunk
	            };
	            var initialSettings = {
	                counts: [],
	                paginationMaxBlocks: 0,
	                paginationMinBlocks: 0,
	                dataset: data
	            };
	            return new NgTableParams(initialParams, initialSettings);
	        }
	
	        var priceDimensionDeRegisterFunc = $scope.$watch(function() {
	            return priceDimensionCommonService.getPriceDimensions();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                processData(newValue);
	            }
	        }, true);
	
	        function processData(priceDimensions) {
	
	            /* Used to bind to table body */
	            vm.priceDimensions = priceDimensions;
	            vm.isMaxSQLSizeExceed = false;
	
	            if (!vm.tableParams) {
	                vm.tableParams = createNgTable(priceDimensions, vm.numberOfRecordsPerChunk);
	            }
	
	            /* 
	             * - Show 'No matching products are found for the search entry XXX', when no return
	             * return result set is empty.
	             * - Keep the user messages, until user makes a fresh search which has atleast more
	             * than 1 result item.
	             */
	            vm.showPagination = true;
	            if (priceDimensions.length === 0 && vm.searchString !== '') {
	                vm.searchedStr = vm.searchString;
	                if (vm.pageNumber === 0) {
	                    vm.showPagination = false;
	                }
	            }
	            if (priceDimensions.length < vm.numberOfRecordsPerChunk) {
	                vm.disableRightBtn = true;
	                updateCenterBtnText(priceDimensions.length);
	            } else {
	                vm.disableRightBtn = false;
	                updateCenterBtnText();
	            }
	
	            /* Hide the loader on success of service call */
	            vm.showLoader = false;
	
	            $timeout(function() {
	                angular.element(window).resize();
	            }, 1000);
	            document.querySelector('.list-table').scrollTop = 0;
	        }
	
	        /**
	         * - When user enters search string and hits enter, this method gets called
	         * - Updates the smart-table pagination object.
	         * - Table header click
	         */
	        function loadPriceDimension() {
	            /* Show the loader on start of service call */
	            vm.showLoader = true;
	
	            var requestObj = {
	                "SortField": sortField || 'Name',
	                "SortDirection": sortDirection || cpqAdminConstants.ASCENDING,
	                "SearchString": vm.searchString || '',
	                "NumberOfRecordsPerChunk": vm.numberOfRecordsPerChunk,
	                "ChunkNumber": pageNumber
	            };
	
	            priceDimensionCommonService.loadAllPriceDimensions(requestObj)
	                .then(function(response) {
	                    if (response) {
	                        vm.showLoader = false;
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        loadPriceDimension();
	        /**
	         * - Clears searc input box
	         * - Makes a service call to reload the table
	         */
	        vm.clearSearchInput = function() {
	            vm.searchString = '';
	            vm.currentPage = 1;
	            vm.showPanel = false;
	            loadPriceDimension();
	        };
	
	
	        /**
	         * - Show / Hide ascending or descending icon next to the column header when user clicks on header.
	         * - We are not using the default feature of the ngTable. It's doing local sorting and to
	         * bind to its server side sorting, configs are not available as of now.
	         */
	        vm.tableHeaderClick = function(column) {
	            sortField = column.FieldName;
	            if (!column.sortIconCls) {
	                column.sortIconCls = 'st-sort-ascent';
	            }
	            sortDirection = (column.sortIconCls === 'st-sort-ascent' ? cpqAdminConstants.DESCENDING : cpqAdminConstants.ASCENDING);
	            var columnsList = vm.tableColumnConfig;
	            for (var item in columnsList) {
	                if (column.FieldName === columnsList[item].FieldName) {
	                    columnsList[item].showSortIcon = true;
	                    columnsList[item].sortIconCls = column.sortIconCls ? (column.sortIconCls === 'st-sort-ascent' ? 'st-sort-descent' : 'st-sort-ascent') : 'st-sort-descent';
	                } else {
	                    columnsList[item].showSortIcon = false;
	                    columnsList[item].sortIconCls = false;
	                }
	            }
	            vm.resetPagination();
	        };
	
	        vm.loadPriceDimensionDetails = function(priceDimension, event) {
	            priceDimensionCommonService.setSelectedPriceDimension(angular.copy(priceDimension));
	            $state.go('app.priceDimension.details', {
	                id: priceDimension.PriceDimensionSO.Id
	            });
	            event.preventDefault();
	        };
	
	        vm.getDetailsPageUrl = function(id) {
	            var absUrl = $location.absUrl();
	            return absUrl.replace('/priceDimension/list', '/priceDimension/' + id + '/details');
	        };
	
	        vm.createNewPriceDimension = function() {
	            var allPriceDimensions = priceDimensionCommonService.getPriceDimensions();
	            priceDimensionCommonService.setPriceDimensions(angular.copy(allPriceDimensions));
	            $state.go('app.priceDimension.details', {
	                id: 'new'
	            });
	        };
	
	        vm.isClickable = function(priceDimension) {
	            var contextType = getPrefixedAttribute('ContextType__c');
	            if (priceDimension[contextType] === priceDimensionConstants.lineItem || 
	                priceDimension[contextType] === priceDimensionConstants.productAttribute || 
	                priceDimension[contextType] === priceDimensionConstants.formulaField ||
	                priceDimension[contextType] === priceDimensionConstants.custom) {
	                return true;
	            } else {
	                return false;
	            }
	        };
	
	    };
	
	    priceDimensionListController.$inject = [
	        '$scope',
	        '$state',
	        '$filter',
	        'NgTableParams',
	        '$timeout',
	        'i18nService',
	        'systemConstants',
	        'priceDimensionConstants',
	        'cpqAdminConstants',
	        'priceDimensionCommonService',
	        '$location',
	        'applicationService'
	    ];
	
	    module.exports = priceDimensionListController;
	
	})();


/***/ }),
/* 746 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.priceDimension.details', [])
	        .service('priceDimensionDetailsService', __webpack_require__(747))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.priceDimension.details', {
	                parent: 'app.priceDimension',
	                url: '/:id/details',
	                views: {
	                    'priceDimensionContainer': {
	                        template: __webpack_require__(748),
	                        controller: __webpack_require__(749),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    priceDimensionDetails: ['priceDimensionCommonService', '$stateParams', function(priceDimensionCommonService, $stateParams) {
	                        return priceDimensionCommonService.getSelectedPriceDimensionDetails($stateParams.id);
	                    }],
	                    allPicklists: ['priceDimensionCommonService', function(priceDimensionCommonService) {
	                        return priceDimensionCommonService.getSObjectPicklistFields('PriceDimension__c', null);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 747 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var priceDimensionDetailsService = function($q, moment, i18nService, remoteService, systemConstants, apiCallsService, priceRulesetCommonService, priceDimensionConstants, cpqAdminConstants) {
	        var prefix = systemConstants.nsPrefix || '',
	            dateFormat = 'MM/DD/YYYY',
	            allPicklists = [],
	            labels = i18nService.CustomLabel;
	
	        function formatDate(date) {
	            if (angular.isDefined(date)) {
	                if (date === null || date === '') {
	                    date = null;
	                } else if (angular.isString(date)) {
	                    date = new Date(date);
	                } else {
	                    date = new Date(date);
	                }
	            }
	            return date ? moment(date).format(dateFormat) : '';
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        function getPicklistValues(type) {
	            var response = [],
	                value = '',
	                noneVar = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                };
	            if (allPicklists.length && type) {
	                if (type.indexOf('__c') > -1) {
	                    value = getPrefixedAttribute(type);
	                } else {
	                    value = type;
	                }
	                for (var i = 0; i < allPicklists.length; i++) {
	                    if (allPicklists[i].FieldName === value) {
	                        response = allPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            response.unshift(noneVar);
	            return response;
	        }
	
	        function setAllPicklists(data) {
	            allPicklists = data;
	        }
	
	        function getTypePicklists() {
	            return getPicklistValues('Type__c');
	        }
	
	        function getContextTypePicklists() {
	            return [{
	                label: priceDimensionConstants.lineItem,
	                value: priceDimensionConstants.lineItem
	            }, {
	                label: priceDimensionConstants.productAttribute,
	                value: priceDimensionConstants.productAttribute
	            }, {
	                label: priceDimensionConstants.formulaField,
	                value: priceDimensionConstants.formulaField
	            }, {
	                label: priceDimensionConstants.custom,
	                value: priceDimensionConstants.custom
	            }];
	        }
	
	        function getRelationTypePicklists() {
	            return getPicklistValues('RelationType__c');
	        }
	
	        function createPriceDimension(priceDimension) {
	            var contextType = getPrefixedAttribute('ContextType__c');
	            if (priceDimension[contextType] === priceDimensionConstants.lineItem) {
	                if (priceDimension[getPrefixedAttribute('AttributeId__c')]) {
	                    priceDimension[getPrefixedAttribute('AttributeId__c')] = null;
	                }
	            }
	            var request = {
	                PriceDimensionSOs: [priceDimension]
	            };
	            return remoteService.createPriceDimensions(request);
	        }
	
	        function updatePriceDimension(priceDimension) {
	            var contextType = getPrefixedAttribute('ContextType__c');
	            if (priceDimension[contextType] === priceDimensionConstants.lineItem) {
	                if (priceDimension[getPrefixedAttribute('AttributeId__c')]) {
	                    priceDimension[getPrefixedAttribute('AttributeId__c')] = null;
	                }
	            }
	            var request = {
	                PriceDimensionSOs: [priceDimension]
	            };
	            return remoteService.updatePriceDimensions(request);
	        }
	
	        function getAttributesForAttributeGroup(attributeGroupId) {
	            var request = {
	                NumberOfRecordsPerChunk: cpqAdminConstants.MAX_CHUNK_SIZE,
	                ChunkNumber: 1,
	                AttributeGroupId: attributeGroupId
	            };
	            var deferQ = $q.defer();
	            remoteService.getAttributesForAttributeGroup(request).then(function(response) {
	                if (response && response.AttributeDOs) {
	                    deferQ.resolve(createPickList(response.AttributeDOs));
	                }
	            }, function(reason) {
	                deferQ.reject(reason);
	            });
	            return deferQ.promise;
	        }
	
	        function createPickList(attributes) {
	            for (var i = 0; i < attributes.length; i++) {
	                attributes[i].label = attributes[i].AttributeFieldLabel;
	                attributes[i].value = attributes[i].ProductAttributeSO.Id;
	            }
	            return attributes;
	        }
	
	        function getCumulativePriceDimensions() {
	            var requestObj = {
	                GetCumulativeDimensionsOnly: true,
	                SortField: "Name",
	                SortDirection: "ASC",
	                SearchString: "",
	                NumberOfRecordsPerChunk: cpqAdminConstants.MAX_CHUNK_SIZE,
	                ChunkNumber: 1
	            };
	            return remoteService.getPriceDimensions(requestObj);
	        }
	
	        var service = {
	            setAllPicklists: setAllPicklists,
	            getContextTypePicklists: getContextTypePicklists,
	            getTypePicklists: getTypePicklists,
	            getPicklistValues: getPicklistValues,
	            getRelationTypePicklists: getRelationTypePicklists,
	            createPriceDimension: createPriceDimension,
	            updatePriceDimension: updatePriceDimension,
	            getAttributesForAttributeGroup: getAttributesForAttributeGroup,
	            getCumulativePriceDimensions: getCumulativePriceDimensions
	        };
	
	        return service;
	    };
	
	    priceDimensionDetailsService.$inject = [
	        '$q',
	        'moment',
	        'i18nService',
	        'remoteService',
	        'systemConstants',
	        'apiCallsService',
	        'priceRulesetCommonService',
	        'priceDimensionConstants',
	        'cpqAdminConstants'
	    ];
	
	    module.exports = priceDimensionDetailsService;
	})();

/***/ }),
/* 748 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"price-dimensions-detail-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <price-dimensions-listing search-text=\"vm.searchText\"></price-dimensions-listing>\n        </div>\n        <div class=\"price-dimensions-detail-block\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <!-- Create / Update product details form -->\n            <form class=\"price-dimensions-detail-form\" novalidate name=\"vm.priceDimensionForm\">\n                <div layout=\"row\" layout-wrap>\n                    <div flex-offset=\"5\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPriceDimension.Name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.Name\" is-required=\"true\" name=\"name\" max-length=\"80\"></material-form-field>\n                        <div ng-messages=\"vm.priceDimensionForm.name.$error\" ng-if=\"vm.priceDimensionForm.name.$touched || vm.priceDimensionForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPriceDimension[vm.prefix+'ContextType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.contextTypes\" field-label=\"::vm.labels.ContextType\" name=\"contextType\" is-required=\"true\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.priceDimensionForm.contextType.$error\" ng-if=\"vm.priceDimensionForm.contextType.$touched || vm.priceDimensionForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\" ng-if=\"vm.selectedPriceDimension[vm.prefix+'ContextType__c']\">\n                        <material-form-field model=\"vm.selectedPriceDimension[vm.prefix+'BusinessObject__c']\" field-type=\"STRING\" is-editable=\"true\" is-disabled=\"true\" field-label=\"::vm.labels.BusinessObject\">\n                        </material-form-field>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\" ng-if=\"vm.selectedPriceDimension[vm.prefix+'ContextType__c'] === vm.pageVars.lineItem\">\n                        <material-form-field model=\"vm.selectedPriceDimension[vm.prefix+'Datasource__c']\" field-type=\"picklist\" is-editable=\"true\" field-label=\"vm.labels.Field\" properties=\"vm.fields\" is-required=\"true\" name=\"field\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.priceDimensionForm.field.$error\" ng-if=\"vm.priceDimensionForm.field.$touched || vm.priceDimensionForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\" ng-if=\"vm.selectedPriceDimension[vm.prefix+'ContextType__c'] === vm.pageVars.productAttribute\">\n                        <material-form-field field-type=\"autocomplete\" field-label=\"vm.labels.AttributeGroup\" name=\"attributeName\" properties=\"vm.attributeGroupAutoComplete\" is-required=\"true\" name=\"attributeGroup\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.priceDimensionForm.attributeGroup.$error\" ng-if=\"vm.priceDimensionForm.attributeGroup.$touched || vm.priceDimensionForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\" ng-if=\"vm.selectedPriceDimension[vm.prefix+'ContextType__c'] === vm.pageVars.productAttribute\">\n                        <material-form-field model=\"vm.selectedPriceDimension[vm.prefix+'AttributeId__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.attributes\" field-label=\"::vm.labels.AttributeLabel\" is-required=\"true\" name='attribute'>\n                        </material-form-field>\n                        <div ng-messages=\"vm.priceDimensionForm.attribute.$error\" ng-if=\"vm.priceDimensionForm.attribute.$touched || vm.priceDimensionForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\" ng-if=\"vm.selectedPriceDimension[vm.prefix+'ContextType__c'] === vm.pageVars.formulaField\">\n                        <material-form-field model=\"vm.selectedPriceDimension[vm.prefix+'Datasource__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.formulaFields\" field-label=\"'Formula Field'\">\n                        </material-form-field>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\" ng-if=\"vm.selectedPriceDimension[vm.prefix+'ContextType__c'] === vm.pageVars.custom\" class=\"expression-field\">\n                        <material-form-field model=\"vm.selectedPriceDimension[vm.prefix+'Datasource__c']\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.FormulaField\">\n                        </material-form-field>\n                        <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.onFocus(vm.prefix + 'Datasource__c')\">\n                            <i class=\"fa fa-external-link\"></i>\n                        </button>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\" ng-if=\"vm.showCumulativeDim\">\n                        <material-form-field model=\"vm.selectedPriceDimension[vm.prefix+'CumulativeDimensionId__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.cumulativeDimensions\" field-label=\"vm.labels.CumulativeDimension\">\n                        </material-form-field>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPriceDimension[vm.prefix+'Type__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.types\" field-label=\"::vm.labels.Type\">\n                        </material-form-field>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPriceDimension[vm.prefix+'RelationType__c']\" field-type=\"picklist\" is-editable=\"true\" field-label=\"::vm.labels.RelationType\" properties=\"vm.relationTypes\" ng-if=\"vm.selectedPriceDimension[vm.prefix+'ContextType__c'] === vm.pageVars.lineItem\"></material-form-field>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"95\">\n                        <material-form-field model=\"vm.selectedPriceDimension[vm.prefix+'Description__c']\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"::vm.labels.Description\" max-length=\"255\" name=\"description\" id=\"short_description\"></material-form-field>\n                        <div ng-messages=\"vm.priceDimensionForm.description.$error\">\n                            <p ng-message=\"maxlength\" class=\"formError\">\n                                {{::vm.labels.FormDescriptionMaxCharError | mergeMessage:vm.labels.Description}}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </form>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListingPage()\">{{::vm.labels.Cancel}}</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.pageSave()\" data-ng-disabled=\"!vm.enableSave\">{{::vm.labels.SaveButton}}</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 749 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var detailsController = function($q, $scope, $rootScope, $state, $stateParams, applicationService, priceDimensionDetails,
	        priceDimensionDetailsService, systemConstants, i18nService, cpqAdminConstants, priceDimensionCommonService,
	        allPicklists, apiCallsService, attributesService, priceDimensionConstants, $mdDialog) {
	
	        var vm = this,
	            isFormSaved = false,
	            selectedImageIndex = 0,
	            currentlySelectedProduct;
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.pageVars = {
	            lineItem: priceDimensionConstants.lineItem,
	            productAttribute: priceDimensionConstants.productAttribute,
	            formulaField: priceDimensionConstants.formulaField,
	            custom: priceDimensionConstants.custom
	        };
	        vm.selectedPriceDimension = priceDimensionDetails;
	        priceDimensionDetailsService.setAllPicklists(allPicklists);
	
	        vm.contextTypes = {
	            PicklistValues: priceDimensionDetailsService.getContextTypePicklists(),
	            methodToCallInController: renderBusinessObject
	        };
	        vm.types = {
	            PicklistValues: priceDimensionDetailsService.getTypePicklists()
	        };
	
	        vm.relationTypes = {
	            PicklistValues: priceDimensionDetailsService.getRelationTypePicklists()
	        };
	
	        vm.attributeGroupAutoComplete = {
	            'autocomplete': {
	                'querySearch': apiCallsService.searchSObjectRecords,
	                'displayName': 'Name',
	                'selectedItem': null,
	                'sObjectName': vm.prefix + 'ProductAttributeGroup__c',
	                'selectedItemChange': updateAttribute
	            }
	        };
	
	        if ($stateParams.id === 'new') {
	            vm.selectedPriceDimension[vm.prefix + 'Type__c'] = priceDimensionConstants.standard;
	        }
	
	        function updateAttribute(item) {
	            if (item) {
	                priceDimensionDetailsService.getAttributesForAttributeGroup(item.Id).then(function(response) {
	                    if (response && response.length > 0) {
	                        vm.attributes = {
	                            PicklistValues: response,
	                            methodToCallInController: showCumulativeDimensions
	                        };
	                    }
	                });
	            } else {
	                vm.attributes = {
	                    PicklistValues: []
	                };
	            }
	        }
	
	        if (vm.selectedPriceDimension[vm.prefix + 'ContextType__c'] === priceDimensionConstants.productAttribute &&
	            vm.selectedPriceDimension[vm.prefix + 'AttributeId__r']) {
	            var attributeGroup = vm.selectedPriceDimension[vm.prefix + 'AttributeId__r'][vm.prefix + 'AttributeGroupId__r'];
	            vm.attributeGroupAutoComplete.autocomplete.selectedItem = {
	                Id: attributeGroup.Id,
	                Name: attributeGroup.Name
	            };
	            updateAttribute(vm.attributeGroupAutoComplete.autocomplete.selectedItem);
	        } else if (vm.selectedPriceDimension[vm.prefix + 'ContextType__c'] === priceDimensionConstants.lineItem) {
	            renderBusinessObject(priceDimensionConstants.lineItem);
	        } else if (vm.selectedPriceDimension[vm.prefix + 'ContextType__c'] === priceDimensionConstants.formulaField) {
	            getFormulaFields();
	        }
	
	        if(vm.selectedPriceDimension[vm.prefix + 'ContextType__c'] === priceDimensionConstants.formulaField || 
	            vm.selectedPriceDimension[vm.prefix + 'ContextType__c'] === priceDimensionConstants.custom){
	            vm.showCumulativeDim = false;
	        } else if (vm.selectedPriceDimension[vm.prefix + 'CumulativeDimensionId__c']) {
	            vm.showCumulativeDim = true;
	            getCumulativePriceDimensions();
	        }
	
	        function renderBusinessObject(model) {
	            if (model === priceDimensionConstants.lineItem) {
	                vm.selectedPriceDimension[vm.prefix + 'BusinessObject__c'] = getPrefixedAttribute('LineItem__c');
	                if (!vm.fields) {
	                    getSObjectFields('LineItem__c');
	                    vm.displayBusinessObject = true;
	                }
	
	            } else if (model === priceDimensionConstants.productAttribute) {
	                vm.selectedPriceDimension[vm.prefix + 'BusinessObject__c'] = getPrefixedAttribute('ProductAttributeValue__c');
	            } else if (model === priceDimensionConstants.formulaField) {
	                vm.selectedPriceDimension[vm.prefix + 'BusinessObject__c'] = getPrefixedAttribute('LineItem__c');
	                if (!vm.formulaFields) {
	                    getFormulaFields();
	                    vm.displayBusinessObject = true;
	                }
	
	            }
	        }
	
	        var selectedPriceDimension = priceDimensionCommonService.getSelectedPriceDimension();
	
	        /* Uncomment the below code once APIs are ready. This code will be used if user refreshes the page*/
	
	        if (Object.keys(selectedPriceDimension).length === 0 || priceDimensionCommonService.getPriceDimensions().length === 0) {
	            var filter = {
	                SearchString: '',
	                ChunkNumber: 1
	            };
	            priceDimensionCommonService.loadAllPriceDimensions(filter).then(function() {
	                var allPriceDimension = priceDimensionCommonService.getPriceDimensions(),
	                    present = false;
	                for (var i = 0; i < allPriceDimension.length; i++) {
	                    if (allPriceDimension[i].PriceDimensionSO.Id === $stateParams.id) {
	                        present = true;
	                        priceDimensionCommonService.setSelectedPriceDimension(allPriceDimension[i]);
	                        break;
	                    }
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        if ($stateParams.id !== cpqAdminConstants.NEW) {
	            isFormSaved = false;
	            if (vm.selectedPriceDimension && !vm.selectedPriceDimension.id) {
	                var allPriceDimension = priceDimensionCommonService.getPriceDimensions();
	                priceDimensionCommonService.setPriceDimensions(allPriceDimension);
	            }
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        function getPriceDimensionDetails(prsId) {
	            var defer = $q.defer();
	            priceDimensionCommonService.getSelectedPriceDimensionDetails(prsId)
	                .then(function(response) {
	                    vm.selectedPriceDimension = response;
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	
	            return defer.promise;
	        }
	
	        function findIndex(arr, item) {
	            var index = -1;
	            for (var i = 0; i < arr.length; i++) {
	                if (arr[i].id === item.id) {
	                    index = i;
	                    break;
	                }
	            }
	            return index;
	        }
	
	        function savePriceDimension(toState, toParams) {
	            if (vm.priceDimensionForm.$valid && vm.priceDimensionForm.$dirty) {
	                setDataSource();
	                if ($stateParams.id === cpqAdminConstants.NEW) {
	                    priceDimensionDetailsService.createPriceDimension(angular.copy(vm.selectedPriceDimension))
	                        .then(function(response) {
	                            if (response.PriceDimensionSOs.length > 0) {
	                                isFormSaved = true;
	                                vm.selectedPriceDimension.Id = response.PriceDimensionSOs[0].Id;
	                                var allPls = priceDimensionCommonService.getPriceDimensions(),
	                                    firstItem = response.PriceDimensionSOs[0];
	                                allPls.unshift({ PriceDimensionSO: firstItem });
	                                priceDimensionCommonService.setPriceDimensions(allPls);
	                                priceDimensionCommonService.setSelectedPriceDimension(firstItem);
	                                if (toState) {
	                                    toParams.id = firstItem.Id;
	                                    $state.go(toState, toParams);
	                                } else {
	                                    addAlert(vm.labels.SavedSuccessfully, cpqAdminConstants.SUCCESS);
	                                    $state.go('app.priceDimension.details', {
	                                        id: firstItem.Id
	                                    });
	                                }
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                } else {
	                    priceDimensionDetailsService.updatePriceDimension(angular.copy(vm.selectedPriceDimension))
	                        .then(function(response) {
	                            isFormSaved = true;
	                            if (response && response.PriceDimensionSOs.length > 0) {
	                                vm.selectedPriceDimension = response.PriceDimensionSOs[0];
	                                priceDimensionCommonService.setSelectedPriceDimension({ PriceDimensionSO: angular.copy(vm.selectedPriceDimension) });
	                            }
	                            if (toState) {
	                                $state.go(toState, toParams);
	                            } else {
	                                addAlert(vm.labels.SavedSuccessfully, cpqAdminConstants.SUCCESS);
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                }
	
	            } else {
	                vm.priceDimensionForm.$setSubmitted();
	                if (!vm.priceDimensionForm.$dirty && toState) {
	                    isFormSaved = true;
	                    $state.go(toState, toParams);
	                }
	            }
	        }
	
	        vm.pageSave = function(toState, toParams) {
	            if (vm.selectedPriceDimension) {
	                savePriceDimension(toState, toParams);
	            } else {
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                }
	            }
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.priceDimension.list') {
	                return true;
	            } else if (isFormSaved === true) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.pageSave(toState, toParams);
	            }
	        });
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	        $scope.$watchGroup(['vm.priceDimensionForm.$valid', 'vm.priceDimensionForm.$invalid'], function() {
	            if (vm.priceDimensionForm && vm.priceDimensionForm.$valid) {
	                vm.enableSave = true;
	            } else {
	                vm.enableSave = false;
	            }
	        });
	
	        if (vm.labels.NewPriceDimension) {
	            $scope.$on(vm.labels.NewPriceDimension.split(' ').join('-'), function() {
	                createNewPriceDimension();
	            });
	        }
	
	        function createNewPriceDimension() {
	            var allPriceDimension = priceDimensionCommonService.getPriceDimensions();
	            priceDimensionCommonService.setPriceDimensions(angular.copy(allPriceDimension));
	            $state.go('app.priceDimension.details', {
	                id: 'new'
	            });
	        };
	
	        vm.setFilters = function() {
	            var filterObj = {
	                SearchString: vm.searchText || '',
	                ChunkNumber: 1
	            };
	            priceDimensionCommonService.setFilters(filterObj);
	        };
	
	        function getFilters() {
	            var filter = priceDimensionCommonService.getFilters();
	            if (filter && filter.SearchString) {
	                vm.searchText = filter.SearchString;
	            }
	        }
	
	        vm.goToListingPage = function() {
	            $state.go('app.priceDimension.list');
	        };
	
	        function getField(fieldName) {
	            var fieldObj, name;
	            if (fieldName.indexOf('__c') > -1) {
	                fieldName = getPrefixedAttribute(fieldName);
	            }
	            if (metaDataInfo) {
	                for (var i = 0; i < metaDataInfo.length; i++) {
	                    var name = metaDataInfo[i].FieldName;
	                    if (name === fieldName) {
	                        fieldObj = metaDataInfo[i];
	                        break;
	                    }
	                }
	            }
	            return fieldObj;
	        }
	        vm.getFieldValue = function(fieldName, fieldValueToBeExtracted) {
	            var field = getField(fieldName);
	            if (field) {
	                return field[fieldValueToBeExtracted];
	            } else {
	                return '';
	            }
	            return 25;
	        };
	
	        function getSObjectFields(sObjectName) {
	            apiCallsService.getFieldsForSObjectName(sObjectName, false, true).then(function(response) {
	                if (response) {
	                    vm.fields = {
	                        PicklistValues: response.FieldItems,
	                        methodToCallInController: showCumulativeDimensions
	                    };
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        function setDataSource() {
	            if (vm.selectedPriceDimension[vm.prefix + 'ContextType__c'] === priceDimensionConstants.productAttribute &&
	                vm.selectedPriceDimension[vm.prefix + 'AttributeId__c']) {
	                var selectedAttribute = vm.attributes.PicklistValues.find(function(item) {
	                    return item.value === vm.selectedPriceDimension[vm.prefix + 'AttributeId__c'];
	                });
	                if (selectedAttribute)
	                    vm.selectedPriceDimension[vm.prefix + 'Datasource__c'] = selectedAttribute.ProductAttributeSO[vm.prefix + 'Field__c'];
	                else
	                    delete vm.selectedPriceDimension[vm.prefix + 'Datasource__c'];
	            }
	        }
	
	        function showCumulativeDimensions(model) {
	            if (model) {
	                var selectedField;
	                if (vm.selectedPriceDimension[vm.prefix + 'ContextType__c'] === priceDimensionConstants.productAttribute) {
	                    selectedField = vm.attributes.PicklistValues.find(function(item) {
	                        return item.value === model;
	                    });
	                    selectedField.fieldType = selectedField.FieldType;
	                } else {
	                    selectedField = vm.fields.PicklistValues.find(function(item) {
	                        return item.value === model;
	                    });
	                }
	                if (selectedField &&
	                    (selectedField.fieldType === cpqAdminConstants.double || selectedField.fieldType === cpqAdminConstants.percent || selectedField.fieldType === cpqAdminConstants.currency)) {
	                    vm.showCumulativeDim = true;
	                    if (!vm.cumulativeDimensions) {
	                        getCumulativePriceDimensions();
	                    }
	                } else {
	                    vm.showCumulativeDim = false;
	                    if (vm.selectedPriceDimension[vm.prefix + 'CumulativeDimensionId__c']) {
	                        vm.selectedPriceDimension[vm.prefix + 'CumulativeDimensionId__c'] = null;
	                    }
	                }
	            }
	        }
	
	        function getCumulativePriceDimensions() {
	            priceDimensionDetailsService.getCumulativePriceDimensions().then(function(response) {
	                if (response && response.PriceDimensionDOs) {
	                    var picklistValues = [];
	                    for (var i = 0; i < response.PriceDimensionDOs.length; i++) {
	                        picklistValues.push({
	                            label: response.PriceDimensionDOs[i].PriceDimensionSO.Name,
	                            value: response.PriceDimensionDOs[i].PriceDimensionSO.Id
	                        });
	                    }
	                    var noneVar = {
	                        label: vm.labels.NoneAsPickListValue,
	                        value: ''
	                    };
	                    picklistValues.unshift(noneVar);
	                    vm.cumulativeDimensions = { PicklistValues: picklistValues };
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        function getFormulaFields() {
	            var properties = {
	                autocomplete: { sObjectName: vm.prefix + 'FormulaField__c' },
	                numberOfRecordsPerChunk: cpqAdminConstants.MAX_CHUNK_SIZE,
	                otherFields: [getPrefixedAttribute('Formula__c')]
	            };
	            apiCallsService.searchSObjectRecords('', properties).then(function(response) {
	                if (response) {
	                    var picklistValues = [];
	                    for (var i = 0; i < response.length; i++) {
	                        picklistValues.push({
	                            label: response[i].Name,
	                            value: response[i][getPrefixedAttribute('Formula__c')]
	                        });
	                    }
	                    var noneVar = {
	                        label: vm.labels.NoneAsPickListValue,
	                        value: ''
	                    };
	                    picklistValues.unshift(noneVar);
	                    vm.formulaFields = { PicklistValues: picklistValues };
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        vm.onFocus = function(field, index) {
	            $mdDialog.show({
	                controller: __webpack_require__(750),
	                controllerAs: 'vm',
	                template: __webpack_require__(751),
	                parent: angular.element(document.body),
	                clickOutsideToClose: false,
	                resolve: {
	                    expression: function() {
	                        var expression = '';
	                        return expression;
	                    }
	                }
	            }).then(function(response) {
	                if(response){
	                    vm.selectedPriceDimension[field] = response;
	                }
	                if (vm.priceDimensionForm) {
	                    vm.priceDimensionForm.$dirty = true;
	                }
	            });
	        };
	    };
	
	    detailsController.$inject = [
	        '$q',
	        '$scope',
	        '$rootScope',
	        '$state',
	        '$stateParams',
	        'applicationService',
	        'priceDimensionDetails',
	        'priceDimensionDetailsService',
	        'systemConstants',
	        'i18nService',
	        'cpqAdminConstants',
	        'priceDimensionCommonService',
	        'allPicklists',
	        'apiCallsService',
	        'attributesService',
	        'priceDimensionConstants',
	        '$mdDialog'
	    ];
	
	    module.exports = detailsController;
	
	})();

/***/ }),
/* 750 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var formulaFieldController = function ($scope, $mdDialog, systemConstants, i18nService, cpqAdminConstants, $q, applicationService, 
	            _, apiCallsService, expression) {
	
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '';
	
	        function onLoad() {
	            vm.labels = i18nService.CustomLabel;
	            vm.trackSelectedRowIndex = -1;
	            vm.selectFieldsArr = [{
	                PicklistValues: [{
	                    label: 'Line Item',
	                    value: getPrefixedAttribute('LineItem__c'),
	                    fieldType: 'REFERENCE',
	                    sObjectName: getPrefixedAttribute('LineItem__c'),
	                    fieldNameReference: '',//prefix + 'LineItem__c',
	                    fieldName: prefix + 'LineItem__c'
	                }, {
	                    label: 'Product Attribute',
	                    value: getPrefixedAttribute('ProductAttributeValue__c'),
	                    fieldType: 'REFERENCE',
	                    sObjectName: getPrefixedAttribute('ProductAttributeValue__c'),
	                    fieldNameReference: prefix + 'AttributeValueId__r',
	                    fieldName: prefix + 'AttributeValueId__r'
	                }],
	                methodToCallInController: prepareNextField
	            }];
	            vm.selectedField = [];
	            vm.showFormula = false;
	        }
	
	        vm.cancel = function() {
	            $mdDialog.hide();
	        };
	
	        function getPrefixedAttribute(attribute) {
	            prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function prepareNextField(model) {
	            if (model && vm.trackSelectedRowIndex > -1) {
	                var array = vm.selectFieldsArr[vm.trackSelectedRowIndex];
	                var item = array.PicklistValues.find(function(f){
	                    return f.value === model;
	                });
	                vm.selectedField.fieldType = item.fieldType;
	                if (item.fieldType === 'REFERENCE') {
	                    var itemIndex = vm.trackSelectedRowIndex;
	                    if ((itemIndex + 1) !== vm.selectFieldsArr.length) {
	                        vm.selectFieldsArr.splice((itemIndex + 1), (vm.selectFieldsArr.length - 1));
	                        vm.selectedField.splice(itemIndex + 1);
	                    }
	                    getSObjectFields(item.sObjectName);
	                    if(vm.selectedField.length === itemIndex)
	                        vm.selectedField.push(item.fieldNameReference);
	                    else
	                        vm.selectedField[itemIndex] = item.fieldNameReference;
	                    vm.showFormula = false;
	                } else {
	                    var itemIndex = vm.trackSelectedRowIndex;
	                    if ((itemIndex + 1) !== vm.selectFieldsArr.length) {
	                        vm.selectFieldsArr.splice((itemIndex + 1), (vm.selectFieldsArr.length - 1));
	                        vm.selectedField.splice(itemIndex + 1);
	                    }
	                    if(vm.selectedField.length === itemIndex)
	                        vm.selectedField.push(item.fieldName);
	                    else
	                        vm.selectedField[itemIndex] = item.fieldName;
	                    vm.showFormula = true;
	                }
	
	                /* Remove first . from the string */
	                vm.apiDisplayName = vm.selectedField.join('.');
	                if(vm.apiDisplayName.indexOf('.') === 0){
	                    vm.apiDisplayName = vm.apiDisplayName.substr(1);
	                }
	            }
	        }
	
	        function getSObjectFields(sObjectName) {
	            apiCallsService.getFieldsForSObjectName(sObjectName, false, true).then(function(response) {
	                if (response) {
	                    vm.selectFieldsArr.push({
	                        PicklistValues: response.FieldItems,
	                        methodToCallInController: prepareNextField
	                    });
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        vm.saveFormula = function(){
	            $mdDialog.hide(angular.copy(vm.apiDisplayName));
	        };
	
	        onLoad();
	    };
	
	    formulaFieldController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'systemConstants',
	        'i18nService',
	        'cpqAdminConstants',
	        '$q',
	        'applicationService',
	        'lodash',
	        'apiCallsService',
	        'expression'
	    ];
	
	    module.exports = formulaFieldController;
	})();


/***/ }),
/* 751 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"formula-field-dialog\" ng-cloak>\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h4>{{vm.labels.FormulaField}}</h4>\n            <span flex></span>\n            <button class=\"slds-button slds-button--icon\" ng-click=\"vm.cancel()\">\n                <i class=\"material-icons\">clear</i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"dialog-content md-padding\">\n        <div layout=\"row\" layout-wrap>\n            <div flex-offset=\"{{$index%2==0 ? 0 : 5}}\" flex=\"45\" ng-repeat=\"item in vm.selectFieldsArr\">\n                <material-form-field model=\"item.value\" field-type=\"PICKLIST\" is-editable=\"true\" field-label=\"\" properties=\"item\" data-ng-click=\"vm.trackSelectedRowIndex = $index\">\n                </material-form-field>\n            </div>\n        </div>\n        <div ng-if=\"vm.showFormula\">\n            <p>{{vm.labels.YouHaveSelected}} : <b>{{vm.apiDisplayName}}</b></p>\n            <p>{{vm.labels.Type}} : <b>{{vm.selectedField.fieldType}}</b></p>\n            <p>{{vm.labels.APIName}} : <b>{{vm.apiDisplayName}}</b></p>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.DialogCancelButton}}</a>\n        <button class=\"slds-button slds-button_brand\" data-ng-click=\"vm.saveFormula()\" ng-disabled=\"!vm.showFormula\">{{vm.labels.DialogSaveButton}}</button>\n    </md-dialog-actions>\n</md-dialog>"

/***/ }),
/* 752 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var priceDimensionController = function($state, $scope, $rootScope, i18nService, priceDimensionCommonService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	
	        function findStateName(stateName) {
	            vm.stateCurrentName = stateName;
	        }
	        findStateName($state.current.name);
	
	        $scope.$on('$stateChangeSuccess', function(e, toState, toParams) {
	            findStateName(toState.name);
	            updateTabMenus();
	        });
	
	        /* Menu for specific Tabs */
	        vm.tabFirstMenu = '';
	        vm.tabMenuItems = [];
	
	        function updateTabMenus() {
	            var currentState = vm.stateCurrentName,
	                currentHash = currentState.split('app.priceDimension.')[1];
	            switch (currentHash) {
	                case 'details':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewPriceDimension;
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                default:
	                    {
	                        vm.tabFirstMenu = '';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	            }
	        }
	
	        vm.tabMenuClicked = function(menuName) {
	            var eventName = menuName.split(' ').join('-');
	            $scope.$broadcast(eventName);
	        };
	
	        vm.currentState = $state.current.name;
	
	        $scope.$watch(function() {
	            return priceDimensionCommonService.getSelectedPriceDimension();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                vm.selectedPriceDimension = newValue;
	            }
	        }, true);
	    };
	
	    priceDimensionController.$inject = [
	        '$state',
	        '$scope',
	        '$rootScope',
	        'i18nService',
	        'priceDimensionCommonService'
	    ];
	
	    module.exports = priceDimensionController;
	})();


/***/ }),
/* 753 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		var constants = {
			/*
			 * This object can be any level nested depending on modularity we want to achieve 
			 * - Either per page
			 * - Per standalone functionality
			 */
			'new': 'new',
			'update': 'update',
			'numberOfRecordsPerChunk': 50,
			'treePanelItemsPerChunk': 25,
			'lineItem' : 'Line Item',
			'productAttribute': 'Product Attribute',
			'formulaField': 'Formula Field',
			'custom': 'Custom',
			'standard': 'Standard' //used to set default value for type
		};
	
		module.exports = constants;
	
	})();

/***/ }),
/* 754 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"price-dimension\">\n    <div class=\"price-dimension-main-container\">\n        <div class=\"price-dimension-header title-bar\">\n            <div class=\"price-dimension-title-container title\">\n                <div class=\"price-dimension-info\">\n                    <span class=\"title\">{{vm.selectedPriceDimension.PriceDimensionSO.Name}}</span>\n                </div>\n            </div>\n            <div id=\"navbar\">\n                <price-dimension-sub-menu></price-dimension-sub-menu>\n                <!-- Product menu bar with its values -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"list-product-btn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabFirstMenu)\" data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                        <div class=\"drop drop-menu\" data-ng-if=\"::vm.tabMenuItems.length > 0\">\n                            <md-menu md-offset=\"50 50\">\n                                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                    <i class=\"material-icons\">more_vert</i>\n                                </button>\n                                <md-menu-content width=\"2\">\n                                    <md-menu-item data-ng-repeat=\"menu in ::vm.tabMenuItems\">\n                                        <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                            <div layout=\"row\" flex>\n                                                <p flex>{{::menu}}</p>\n                                            </div>\n                                        </md-button>\n                                    </md-menu-item>\n                                </md-menu-content>\n                            </md-menu>\n                        </div>\n                    </div>\n                </ul>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"price-dimension-center-container\">\n            <!-- Content layout starts -->\n            <div ui-view=\"priceDimensionContainer\" class=\"price-dimension-container\"></div>\n            <!-- Content layout ends -->\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 755 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  'use strict';
	
	  __webpack_require__(756);
	  __webpack_require__(761);
	  __webpack_require__(763);
	  __webpack_require__(766);
	  __webpack_require__(771);
	  __webpack_require__(774);
	
	  module.exports = angular.module('cpqAdmin.pricePipeline', [
	        'cpqAdmin.pricePipeline.common.services',
	        'cpqAdmin.pricePipeline.common.directives',
	        'cpqAdmin.pricePipeline.list',
	        'cpqAdmin.pricePipeline.detail',
	        'cpqAdmin.pricePipeline.adjustmentGrouping',
	        'cpqAdmin.pricePipeline.waterfallSetup'
	      ])
	      .controller('pricePipelineController', __webpack_require__(777))
	      .constant('pricePipelineConstants', __webpack_require__(778))
	      .config(['$stateProvider', function($stateProvider) {
	          $stateProvider.state('app.pricePipeline', {
	              url: '/price-pipeline',
	              views: {
	                  'pageContent@': {
	                      template: __webpack_require__(779),
	                      controller: 'pricePipelineController',
	                      controllerAs: 'vm'
	                  }
	              }
	          });
	      }]);
	
	})();


/***/ }),
/* 756 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  'use strict';
	
	  module.exports = angular.module('cpqAdmin.pricePipeline.common.directives', [])
	      .directive('pricePipelineSubMenu', __webpack_require__(757))
	      .directive('pricePipelineListing', __webpack_require__(759));
	})();


/***/ }),
/* 757 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	  'use strict';
	
	  var pricePipelineSubMenuController = function($stateParams, systemConstants, i18nService) {
	      var vm = this;
	
	      vm.$stateParams = $stateParams;
	      vm.labels = i18nService.CustomLabel;
	      vm.prefix = systemConstants.nsPrefix || '';
	
	  };
	
	  pricePipelineSubMenuController.$inject = [
	      '$stateParams',
	      'systemConstants',
	      'i18nService'
	  ];
	
	  return {
	      restrict: 'E',
	      scope: {},
	      controller: pricePipelineSubMenuController,
	      controllerAs: 'vm',
	      bindToController: true,
	      template: __webpack_require__(758),
	  };
	};


/***/ }),
/* 758 */
/***/ (function(module, exports) {

	module.exports = "<ul class=\"nav navbar-nav price-pipeline-menu\">\n  <li data-ui-sref-active=\"active\" class=\"menu-item\">\n      <a data-ui-sref=\"app.pricePipeline.details({id:vm.$stateParams.id})\">{{vm.labels.Details}}</a>\n  </li>\n  <!-- <li data-ui-sref-active=\"active\" class=\"menu-item\">\n      <a data-ui-sref=\"app.pricePipeline.adjustmentGrouping({id:vm.$stateParams.id})\">{{vm.labels.AdjustmentGrouping}}</a>\n  </li>\n  <li data-ui-sref-active=\"active\" class=\"menu-item\">\n      <a data-ui-sref=\"app.pricePipeline.waterfallSetup({id:vm.$stateParams.id})\">{{vm.labels.WaterfallSetup}}</a>\n  </li> -->\n</ul>\n"

/***/ }),
/* 759 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  'use strict';
	  module.exports = [
	      function() {
	          var pricePipelineListingController = function($scope, applicationService, systemConstants, $state, $stateParams,
	              i18nService, remoteService, pricePipelineCommonService, pricePipelineConstants) {
	
	              var vm = this,
	                  prefix = systemConstants.nsPrefix || '',
	                  filter = {
	                      SearchString: '',
	                      ChunkNumber: 1,
	                      NumberOfRecordsPerChunk: pricePipelineConstants.numberOfRecordsPerChunk || 50
	                  },
	                  pageNumber = 1;
	
	              vm.labels = i18nService.CustomLabel;
	              vm.disableLeftBtn = true;
	              vm.searchedStr = '';
	              vm.isMaxSQLSizeExceed = false;
	              vm.numberOfRecordsPerChunk = pricePipelineConstants.numberOfRecordsPerChunk || 50;
	
	              vm.searchPricePipeliness = function() {
	                  filter.SearchString = vm.searchText || '';
	                  filter.ChunkNumber = 1;
	                  filter.NumberOfRecordsPerChunk = vm.numberOfRecordsPerChunk;
	                  loadPricePipeliness();
	              };
	
	              vm.prepareFiltersAndPricePipelines = function() {
	                  filter = pricePipelineCommonService.getFilter();
	                  if (Object.keys(filter).length) {
	                      vm.searchText = filter.SearchString;
	                  } else {
	                      filter = {
	                          ChunkNumber: pageNumber || 1,
	                          NumberOfRecordsPerChunk: vm.numberOfRecordsPerChunk,
	                          SearchString: vm.searchString || ''
	                      };
	                  }
	              };
	
	              /* On Page load while there are no filters applied */
	              vm.prepareFiltersAndPricePipelines();
	
	              vm.getPricePipelines = function(type) {
	                  if (type === 'next') {
	                      var chunkNumber = filter.ChunkNumber;
	                      filter.ChunkNumber = (chunkNumber + 1);
	                      if (filter.ChunkNumber !== 1) {
	                          vm.disableLeftBtn = false;
	                      }
	                      loadPricePipelines();
	                  } else {
	                      var chunkNumber = filter.ChunkNumber;
	                      filter.ChunkNumber = (chunkNumber - 1);
	                      if (filter.ChunkNumber === 1) {
	                          vm.disableLeftBtn = true;
	                      }
	                      loadPricePipelines();
	                  }
	              };
	
	              var pLDeRegisterFunc = $scope.$watch(function() {
	                  return pricePipelineCommonService.getPricePipelines();
	              }, function(newValue, oldValue) {
	                  if (newValue && oldValue) {
	                      processData(newValue);
	                  }
	              }, true);
	
	              function processData(pricePipelines) {
	                  /* Used to bind to table body */
	                  vm.pricePipelines = pricePipelines;
	                  vm.isMaxSQLSizeExceed = false;
	
	                  if (pricePipelines.length === 0) {
	                      vm.searchedStr = vm.searchString;
	                  }
	                  /**
	                   * - Check if the response size is less than the current chunk size.
	                   * - If less, disable the next button
	                   * - else keep it enabled
	                   */
	
	                  if (pricePipelines.length < filter.NumberOfRecordsPerChunk) {
	                      vm.disableRightBtn = true;
	                      updateCenterBtnText(filter, pricePipelines.length);
	                  } else {
	                      vm.disableRightBtn = false;
	                      updateCenterBtnText(filter, pricePipelines.length);
	                  }
	
	                  /* Hide the loader on success of service call */
	                  vm.showLoader = false;
	                  document.querySelector('.list-table').scrollTop = 0;
	              }
	
	              function loadPricePipeliness() {
	
	                  vm.showLoader = true;
	                  pricePipelineCommonService.loadAllPricePipeliness(filter)
	                      .then(function(response) {}, function(reason) {});
	
	              }
	
	              function updateCenterBtnText(filterObj, endCount) {
	                  /* 
	                   * - Search result might return lesser number of records than current pagination count.
	                   * e.g. current pagination is : 1-150, but search returned only 20 records.
	                   * - Then pagination should be updated to 1-20 instead of 1-150.
	                   * - endCount variable contains the exact number of records and will only be defined, if
	                   * search count is lesser than current pagination sequence.
	                   */
	                  if (filterObj.ChunkNumber === 1) {
	                      vm.disableLeftBtn = true;
	                  }
	                  if (endCount) {
	                      vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfRecordsPerChunk + 1) + '-' + ((filterObj.ChunkNumber - 1) * vm.numberOfRecordsPerChunk + endCount) + ')';
	                      if (endCount < vm.numberOfRecordsPerChunk) {
	                          vm.disableRightBtn = true;
	                      }
	                  } else {
	                      vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfRecordsPerChunk + 1) + '-' + (filterObj.ChunkNumber * vm.numberOfRecordsPerChunk) + ')';
	                  }
	              }
	
	              vm.getActiveClass = function(id) {
	                  if ($stateParams.id === id) {
	                      return true;
	                  } else {
	                      return false;
	                  }
	              };
	
	              $scope.$on('destroy', function() {
	                  deRegisterFunc();
	                  pLDeRegisterFunc();
	                  vm = null;
	              });
	
	              vm.loadPricePipelineDetails = function(toBeLoadedPricePipeline) {
	                pricePipelineCommonService.setSelectedPricePipeline(angular.copy(toBeLoadedPricePipeline));
	                $state.go('app.pricePipeline.details', {
	                    id: toBeLoadedPricePipeline.PricePipelineSO.Id
	                });
	              };
	          };
	
	          pricePipelineListingController.$inject = [
	              '$scope',
	              'applicationService',
	              'systemConstants',
	              '$state',
	              '$stateParams',
	              'i18nService',
	              'remoteService',
	              'pricePipelineCommonService',
	              'pricePipelineConstants'
	          ];
	
	          return {
	              restrict: 'E',
	              scope: {},
	              controller: pricePipelineListingController,
	              controllerAs: 'vm',
	              bindToController: {
	                  searchText: '='
	              },
	              template: __webpack_require__(760),
	          };
	      }
	  ];
	})();


/***/ }),
/* 760 */
/***/ (function(module, exports) {

	module.exports = "<header>\n  <h4>{{::vm.labels.AllPricePipelines}}</h4>\n  <div class=\"search\">\n      <form ng-submit=\"vm.searchPricePipelines()\" novalidate>\n          <div class=\"search-input-container\">\n              <div class=\"input-group\">\n                  <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                  <label class=\"ng-binding\">Search</label>\n              </div>\n          </div>\n      </form>\n  </div>\n</header>\n<div data-ng-if=\"vm.pricePipelines.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n  {{::vm.labels.NoMatchingPricePipelines}} <span><b>{{vm.searchedStr}}</b></span>\n</div>\n<div data-ng-if=\"vm.pricePipelines.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n  {{::vm.labels.MaxSQLSizeExceedMessage}}\n</div>\n<div class=\"list-table\">\n  <table>\n      <tbody>\n          <tr ng-repeat=\"item in vm.pricePipelines track by item.PricePipelineSO.Id\" ng-click=\"vm.loadPricePipelineDetails(item)\" ng-class=\"{active: vm.getActiveClass(item.PricePipelineSO.Id) === true}\">\n              <td>\n                  {{::item.PricePipelineSO.Name }}\n              </td>\n          </tr>\n      </tbody>\n  </table>\n</div>\n<div class=\"pagination price-pipelines-list-pagination\">\n  <div class=\"place price-pipelines-list-place\">\n      {{vm.paginationCenterText}}\n  </div>\n  <div class=\"next-prev\">\n      <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getPricePipelines('previous')\">\n          <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n      </button>\n      <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getPricePipelines('next')\">\n          <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n      </button>\n  </div>\n</div>\n"

/***/ }),
/* 761 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  'use strict';
	
	  module.exports = angular.module('cpqAdmin.pricePipeline.common.services', [])
	      .service('pricePipelineCommonService', __webpack_require__(762));
	      
	})();


/***/ }),
/* 762 */
/***/ (function(module, exports) {

	(function () {
	  'use strict';
	
	  var pricePipelineCommonService = function (systemConstants, remoteService, $q, pricePipelineConstants) {
	    var filter = {},
	      selectedPricePipeline = {},
	      pricePipelines = [],
	      metadata = [];
	
	    function getPrefixedAttribute(attribute) {
	      var prefix = systemConstants.nsPrefix || '';
	      /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	      return (prefix + attribute).trim();
	    }
	
	    function setSelectedPricePipeline(obj) {
	      selectedPricePipeline = obj;
	    }
	
	    function getSelectedPricePipeline() {
	      return selectedPricePipeline;
	    }
	
	    function loadAllPricePipelines(requestObj) {
	      var defer = $q.defer();
	      return remoteService.getAllPricePipelines(requestObj)
	        .then(response => {
	          const processedData = processAllPricePipelineResponse(response.PricePipelineDOs);
	          setPricePipelines(processedData);
	          return true;
	        }, reason => {
	          return reason;
	        });
	    }
	
	    function processAllPricePipelineResponse(pipelines) {
	      if (pipelines && pipelines.length > 0) {
	        return pipelines.map(record => ({
	          Name: record.PricePipelineSO.Name,
	          Id: record.PricePipelineSO.Id,
	          EffectiveDate: record.PricePipelineSO[getPrefixedAttribute('EffectiveDate__c')],
	          ExpirationDate: record.PricePipelineSO[getPrefixedAttribute('ExpirationDate__c')],
	          Active: record.PricePipelineSO[getPrefixedAttribute('Active__c')],
	          Sequence: record.PricePipelineSO[getPrefixedAttribute('Sequence__c')],
	          Description: record.PricePipelineSO[getPrefixedAttribute('Description__c')],
	          PipelineCriteria: record.PricePipelineSO[getPrefixedAttribute('Criteria__c')],
	          PricePoints: extractPricePointsFromRecord(record)
	        }));
	      }
	      return [];
	    }
	
	    function extractPricePointsFromRecord(record) {
	      return record.PricePointDOs.map(pricePoint => new PricePoint({
	        Id: pricePoint.PricePointSO.Id,
	        Name: pricePoint.PricePointSO[getPrefixedAttribute('PricePoints__c')],
	        isModifiable: pricePoint.PricePointSO[getPrefixedAttribute('AllowableAction__c')] === 'Unrestricted',
	        isNetPrice: pricePoint.PricePointSO[getPrefixedAttribute('RuleType__c')] === 'Net Price Point',
	        rulesetId: pricePoint.PricePointSO[getPrefixedAttribute('RulesetId__c')],
	        selectedItem: {
	          value: pricePoint.PricePointSO,
	          label: pricePoint.PricePointSO[getPrefixedAttribute('PricePoints__c')]
	        }
	      }));
	    }
	
	    var results = [];
	
	    function setPricePipelines(arr) {
	      pricePipelines = [];
	      pricePipelines = angular.copy(arr);
	    }
	
	    function getPricePipelines() {
	      return pricePipelines;
	    }
	
	    function setFilter(obj) {
	      filter = obj;
	    }
	
	    function getFilter() {
	      return filter;
	    }
	
	    function getSelectedPricePipelineDetails(id) {
	      if (id === 'new') {
	        const samplePipeline = getSamplePricePipeline();
	        setSelectedPricePipeline(samplePipeline);
	        return $q.when(samplePipeline);
	      } else if (!angular.equals(selectedPricePipeline, {})) {
	        return $q.when(selectedPricePipeline);
	      } else {
	        return remoteService.getPricePipelineDetails({PricePipelineIds: [id]})
	          .then(response => {
	            setSelectedPricePipeline(processAllPricePipelineResponse(response.PricePipelineDOs)[0]);
	            return selectedPricePipeline;
	          }, reason => {
	            return reason;
	          });
	      }
	    }
	
	    function getSamplePricePipeline() {
	      return {
	        Name: '',
	        EffectiveDate: '',
	        ExpirationDate: '',
	        Description: '',
	        Active: true,
	        Sequence: undefined,
	        PipelineCriteria: undefined,
	        PricePoints: [
	          getSamplePricePoint({Name: 'List Price'}),
	          getSamplePricePoint({Name: 'Base Price'})
	        ]
	      }
	    }
	
	    function getSamplePricePoint(config) {
	      return new PricePoint(config);
	    }
	
	    function PricePoint(config) {
	      if (!config)
	        config = {};
	      this.Id = config.Id ? config.Id : 'newPricePoint' + Math.floor(Math.random() * 10000);
	      this.Name = config.Name ? config.Name : '';
	      this.isModifiable = config.isModifiable;
	      this.isNetPrice = config.isNetPrice;
	      this.rulesetId = config.rulesetId;
	      // Properties object for the material form field 'autocomplete' type
	      this.properties = {
	        autocomplete: {
	          minLength: 0,
	          searchTextChange: () => {},
	          selectedItemChange: (event) => {
	            if (event) {
	              this.Name = event.label;
	              this.properties.autocomplete.selectedItem.value = event.value;
	              this.properties.autocomplete.selectedItem.label = event.label;
	            }
	          },
	          querySearch: (searchText) => filterResults(searchText),
	          displayName: 'label',
	          showNoResults: true,
	          noResultsText: 'No Matching Price Points',
	          selectedItem: config.selectedItem
	          ?
	          {
	            value: config.selectedItem.value,
	            label: config.selectedItem.label
	          }
	          : null
	        }
	      }
	    }
	
	    function filterResults(searchText) {
	      // If searchText is empty return full list except those that are already selected
	      return results.filter(entry => {
	        return (
	          (
	            searchText === ''
	            ?
	            true
	            :
	            entry.label.toLowerCase().includes(searchText.trim().toLowerCase())
	          )
	          &&
	          !getSelectedPricePipeline().PricePoints.find(pricePoint => pricePoint.Name.toLowerCase() === entry.label.toLowerCase())
	        );
	      });
	    }
	
	    function extractExpression(chargeTypeCriteria) {
	      var chargeTypeCriteriaObj = ((chargeTypeCriteria !== undefined && chargeTypeCriteria !== '') ? JSON.parse(chargeTypeCriteria) : '');
	      var chargeTypeExpression = '';
	      if (chargeTypeCriteriaObj) {
	        chargeTypeExpression = chargeTypeCriteriaObj.exprStr;
	      } else {
	        chargeTypeExpression = '';
	      }
	      return chargeTypeExpression;
	    }
	
	    function setPricePointResults(pricePoints) {
	      results = pricePoints;
	    }
	
	    function createPricePipeline(requestObj) {
	      return remoteService.createPricePipeline(requestObj)
	        .then(response => {
	          return response;
	        }, reason => {
	          return reason;
	        });
	    }
	
	    function updatePricePipeline(requestObj) {
	      return remoteService.updatePricePipeline(requestObj)
	        .then(response => {
	          return response;
	        }, reason => {
	          return reason;
	        });
	    }
	
	    var service = {
	      setSelectedPricePipeline: setSelectedPricePipeline,
	      getSelectedPricePipeline: getSelectedPricePipeline,
	      loadAllPricePipelines: loadAllPricePipelines,
	      processAllPricePipelineResponse: processAllPricePipelineResponse,
	      setPricePipelines: setPricePipelines,
	      getPricePipelines: getPricePipelines,
	      getFilter: getFilter,
	      setFilter: setFilter,
	      getSelectedPricePipelineDetails: getSelectedPricePipelineDetails,
	      getSamplePricePipeline: getSamplePricePipeline,
	      getSamplePricePoint: getSamplePricePoint,
	      extractExpression: extractExpression,
	      setPricePointResults: setPricePointResults,
	      updatePricePipeline: updatePricePipeline,
	      createPricePipeline: createPricePipeline
	    };
	
	    return service;
	  };
	
	  pricePipelineCommonService.$inject = [
	    'systemConstants',
	    'remoteService',
	    '$q',
	    'pricePipelineConstants'
	  ];
	
	  module.exports = pricePipelineCommonService;
	})();


/***/ }),
/* 763 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  'use strict';
	
	  module.exports = angular.module('cpqAdmin.pricePipeline.list',[])
	      .config(['$stateProvider', function($stateProvider) {
	          $stateProvider.state('app.pricePipeline.list', {
	              parent: 'app.pricePipeline',
	              url: '/list',
	              views: {
	                  'pageContent@': {
	                      template: __webpack_require__(764),
	                      controller: __webpack_require__(765),
	                      controllerAs: 'vm'
	                  }
	              }
	          });
	      }]);
	
	})();


/***/ }),
/* 764 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"price-pipeline-list-container\">\n  <div class=\"two-col-layout auto-height\">\n      <div class=\"auto-height col-lg-12 noPadding list-table-container\">\n          <div class=\"list-header\">\n              <!-- Search Bar starts -->\n              <div class=\"row noMargin search-container title-bar\">\n                  <div class=\"price-pipeline-search\">\n                      <div class=\"col-xs-5\">\n                          <div class=\"search-box-container\">\n                              <span class=\"fa fa-filter pointerEventsNone\" disabled data-ng-click=\"vm.resetPagination();\"></span>\n                              <i class=\"search-icon material-icons\" data-ng-click=\"vm.resetPagination()\">search</i>\n                              <form ng-submit=\"vm.resetPagination()\">\n                                  <input type=\"text\" placeholder=\"Search Price Pipeline\" class=\"search-box\" data-ng-model=\"vm.searchString\">\n                                  <i class=\"clear-icon material-icons\" data-ng-if=\"vm.searchString\" data-ng-click=\"vm.clearSearchInput()\">clear</i>\n                              </form>\n                          </div>\n                      </div>\n                      <div class=\"col-xs-3\"></div>\n                      <div class=\"col-xs-4 text-right price-pipeline-btn-group\">\n                          <div class=\"listBtn\">\n                              <button type=\"button\" class=\"slds-button slds-button_brand\" data-ng-click=\"vm.createNewPricePipeline()\">{{vm.labels.NewPricePipeline}}</button>\n                          </div>\n                      </div>\n                  </div>\n              </div>\n          </div>\n          <div preloader add-to-element=\"true\" loading-text=\"vm.loadingText\" data-ng-if=\"vm.showLoader === true\"></div>\n          <div data-ng-if=\"vm.pricePipelines.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n              {{::vm.labels.NoMatchingPricePipelines}} <span><b>{{vm.searchedStr}}</b></span>\n          </div>\n          <div data-ng-if=\"vm.pricePipelines.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n              {{::vm.labels.MaxSQLSizeExceedMessage}}\n          </div>\n          <div class=\"list-table\">\n              <table ng-table=\"vm.tableParams\" class=\"table ng-table-resizable-columns\">\n                  <thead>\n                      <tr>\n                          <th ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                              <span ng-click=\"vm.tableHeaderClick(column);\">\n                                  <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-descent'\">arrow_downward</i>\n                                  <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-ascent'\">arrow_upward</i> \n                                  {{column.FieldLabel}}\n                              </span>\n                          </th>\n                      </tr>\n                  </thead>\n                  <tbody>\n                      <tr ng-repeat=\"pricePipeline in vm.pricePipelines track by pricePipeline.Id\">\n                          <td data-ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                              <span data-ng-if=\"::column.FieldName === 'Name'\">\n                                  <a data-ng-click=\"vm.loadPricePipelineDetails(pricePipeline, $event)\" ng-bind-html=\"pricePipeline[column.FieldName]\" class=\"clickable-item\"></a>\n                              </span>\n                              <span data-ng-if=\"::column.FieldName !== 'Name'\" ng-bind-html=\"vm.getFormattedContent(pricePipeline,column)\"></span>\n                          </td>\n                      </tr>\n                  </tbody>\n              </table>\n          </div>\n          <div class=\"pagination-container text-center\" data-ng-if=\"vm.showPagination === true\">\n              <div class=\"btn-group dropup text-right\" role=\"group\">\n                  <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                      {{vm.labels.RecordsPerPage | userMessage:vm.numberOfRecordsPerChunk}}\n                      <span class=\"caret\"></span>\n                  </button>\n                  <ul class=\"dropdown-menu\">\n                      <li><a data-ng-click=\"vm.numberOfRecordsPerChunk = 50\">50</a></li>\n                      <li><a data-ng-click=\"vm.numberOfRecordsPerChunk = 100\">100</a></li>\n                      <li><a data-ng-click=\"vm.numberOfRecordsPerChunk = 150\">150</a></li>\n                      <li><a data-ng-click=\"vm.numberOfRecordsPerChunk = 200\">200</a></li>\n                  </ul>\n              </div>\n              <div class=\"navigation-control\">\n                  <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getPage('previous')\">\n                      <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                  <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                  <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getPage('next')\">\n                      <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n              </div>\n          </div>\n      </div>\n  </div>\n</div>\n"

/***/ }),
/* 765 */
/***/ (function(module, exports) {

	(function() {
	  'use strict';
	  var pricePipelineListController = function($scope, $state, $filter, $timeout, i18nService, NgTableParams, cpqAdminConstants, pricePipelineConstants, pricePipelineCommonService, applicationService, systemConstants) {
	    var vm = this;
	
	    vm.pageNumber = 0;
	    vm.disableLeftBtn = true;
	    vm.disableRightBtn = true;
	    vm.showPagination = true;
	    vm.numberOfRecordsPerChunk = pricePipelineConstants.numberOfRecordsPerChunk;
	    vm.labels = i18nService.CustomLabel;
	    var prefix = systemConstants.nsPrefix || '';
	
	      vm.tableColumnConfig = [
	          {
	              FieldLabel: 'Name',
	              FieldName: 'Name',
	              PrefixedFieldName: 'Name',
	              Type: cpqAdminConstants.string,
	              showSortIcon: true,
	              sortIconCls: 'st-sort-ascent'
	          },
	          {
	              FieldLabel: 'Sequence',
	              FieldName: 'Sequence',
	              PrefixedFieldName: prefix + 'Sequence__c',
	              Type: cpqAdminConstants.quantity,
	          },
	          {
	              FieldLabel: 'Effective Date',
	              FieldName: 'EffectiveDate',
	              PrefixedFieldName: prefix + 'EffectiveDate__c',
	              Type: cpqAdminConstants.date,
	          },
	          {
	              FieldLabel: 'Expiration Date',
	              FieldName: 'ExpirationDate',
	              PrefixedFieldName: prefix + 'ExpirationDate__c',
	              Type: cpqAdminConstants.date,
	          },
	          {
	              FieldLabel: 'Active',
	              FieldName: 'Active',
	              PrefixedFieldName: prefix + 'Active__c',
	              Type: cpqAdminConstants.boolean
	          },
	          {
	              FieldLabel: 'Description',
	              FieldName: 'Description',
	              PrefixedFieldName: prefix + 'Description__c',
	              Type: cpqAdminConstants.textarea
	          }
	      ];
	
	    vm.pricePipelines = [];
	
	    vm.tableParams = new NgTableParams(
	      {count: 50},
	      {
	        counts: [],
	        paginationMaxBlocks: 0,
	        paginationMinBlocks: 0,
	        dataset: vm.pricePipelines
	    });
	
	
	    var sortField, sortDirection, pageNumber = 1,
	    configType = '';
	
	    /**
	     * - Show / Hide ascending or descending icon next to the column header when user clicks on header.
	     * - We are not using the default feature of the ngTable. It's doing local sorting and to
	     * bind to its server side sorting, configs are not available as of now.
	     */
	    vm.tableHeaderClick = function(column) {
	      sortField = column.PrefixedFieldName;
	      if (!column.sortIconCls) {
	          column.sortIconCls = 'st-sort-ascent';
	      }
	      sortDirection = (column.sortIconCls === 'st-sort-ascent' ? cpqAdminConstants.DESCENDING : cpqAdminConstants.ASCENDING);
	      var columnsList = vm.tableColumnConfig;
	      for (var item in columnsList) {
	          if (column.FieldName === columnsList[item].FieldName) {
	              columnsList[item].showSortIcon = true;
	              columnsList[item].sortIconCls = column.sortIconCls ? (column.sortIconCls === 'st-sort-ascent' ? 'st-sort-descent' : 'st-sort-ascent') : 'st-sort-descent';
	          } else {
	              columnsList[item].showSortIcon = false;
	              columnsList[item].sortIconCls = false;
	          }
	      }
	      vm.resetPagination();
	    };
	
	    vm.getFormattedContent = function(pricePipeline, column) {
	      var modifiedValue, precision,
	          fieldType = column.Type,
	          value = pricePipeline[column.FieldName];
	
	      if (vm.systemProperties && vm.systemProperties.PercentageFieldPrecision) {
	          precision = vm.systemProperties.PercentageFieldPrecision;
	      } else if (vm.properties && vm.properties.Precision) {
	          precision = vm.properties.Precision;
	      } else {
	          precision = 5;
	      }
	
	      switch (fieldType) {
	          case cpqAdminConstants.datetime:
	          case cpqAdminConstants.date:
	              {
	                  modifiedValue = $filter('aptDateToString')(value);
	                  break;
	              }
	
	          case cpqAdminConstants.boolean:
	              {
	                  if (value) {
	                      modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	                  } else {
	                      modifiedValue = "<i class='material-icons show'>check_circle</i>";
	                  }
	                  break;
	              }
	          case cpqAdminConstants.string:
	          case cpqAdminConstants.textarea:
	          case cpqAdminConstants.url:
	          case cpqAdminConstants.multipicklist:
	              {
	                  modifiedValue = value;
	                  break;
	              }
	
	          default:
	              {
	                  modifiedValue = value;
	                  break;
	              }
	
	      }
	      return modifiedValue;
	    };
	
	    vm.getPage = function(type) {
	        if (type === 'next') {
	            pageNumber = pageNumber + 1;
	            vm.pageNumber++;
	            if (vm.pageNumber !== 0) {
	                vm.disableLeftBtn = false;
	            }
	            loadPricePipeline();
	        } else {
	            pageNumber = pageNumber - 1;
	            vm.pageNumber--;
	            if (vm.pageNumber === 0) {
	                vm.disableLeftBtn = true;
	            }
	            loadPricePipeline();
	        }
	    };
	
	    vm.loadPricePipelineDetails = function(pricePipeline, event) {
	      pricePipelineCommonService.setSelectedPricePipeline(angular.copy(pricePipeline));
	      $state.go('app.pricePipeline.details', {
	          id: pricePipeline.Id
	      });
	      event.preventDefault();
	    };
	
	    vm.resetPagination = function(resetPageNumber) {
	        if (resetPageNumber) {
	            vm.pageNumber = 0;
	            pageNumber = 1;
	        }
	        vm.pageNumber = 0;
	        pageNumber = 1;
	        vm.disableLeftBtn = true;
	        if (vm.pricePipelines.length < vm.numberOfRecordsPerChunk) {
	            updateCenterBtnText(vm.pricePipelines.length);
	        }
	        loadPricePipeline();
	    };
	
	    /**
	     * - Clears search input box
	     * - Makes a service call to reload the table
	     */
	    vm.clearSearchInput = function() {
	        vm.searchString = '';
	        loadPricePipeline();
	    };
	
	    vm.createNewPricePipeline = function() {
	        pricePipelineCommonService.setSelectedPricePipeline(pricePipelineCommonService.getSamplePricePipeline());
	        $state.go('app.pricePipeline.details', {
	            id: 'new'
	        });
	    }
	
	    function createNgTable(data, numberOfRecordsPerChunk) {
	      var initialParams = {
	          count: numberOfRecordsPerChunk
	      };
	      var initialSettings = {
	          counts: [],
	          paginationMaxBlocks: 0,
	          paginationMinBlocks: 0,
	          dataset: data
	      };
	      return new NgTableParams(initialParams, initialSettings);
	    }
	
	
	    function processData(pricePipelines) {
	
	      /* Used to bind to table body */
	      vm.pricePipelines = pricePipelines;
	      vm.isMaxSQLSizeExceed = false;
	
	      if (!vm.tableParams) {
	          vm.tableParams = createNgTable(pricePipelines, vm.numberOfRecordsPerChunk);
	      }
	
	      /* 
	       * - Show 'No matching products are found for the search entry XXX', when no return
	       * return result set is empty.
	       * - Keep the user messages, until user makes a fresh search which has atleast more
	       * than 1 result item.
	       */
	      vm.showPagination = true;
	      if (pricePipelines.length === 0 && vm.searchString !== '') {
	          vm.searchedStr = vm.searchString;
	          if (vm.pageNumber === 0) {
	              vm.showPagination = false;
	          }
	      }
	      if (pricePipelines.length < vm.numberOfRecordsPerChunk) {
	          vm.disableRightBtn = true;
	          updateCenterBtnText(pricePipelines.length);
	      } else {
	          vm.disableRightBtn = false;
	          updateCenterBtnText();
	      }
	
	      /* Hide the loader on success of service call */
	      vm.showLoader = false;
	
	      document.querySelector('.list-table').scrollTop = 0;
	    }
	
	
	    /**
	     * - When user enters search string and hits enter, this method gets called
	     * - Updates the smart-table pagination object.
	     * - Table header click
	     */
	    function loadPricePipeline() {
	      /* Show the loader on start of service call */
	      vm.showLoader = true;
	
	      var requestObj = {
	          "SortField": sortField || 'Name',
	          "SortDirection": sortDirection || cpqAdminConstants.ASCENDING,
	          "SearchString": vm.searchString || '',
	          "NumberOfRecordsPerChunk": vm.numberOfRecordsPerChunk,
	          "ChunkNumber": pageNumber
	      };
	
	      pricePipelineCommonService.loadAllPricePipelines(requestObj)
	          .then(function(response) {
	              if (response) {
	                  vm.showLoader = false;
	              }
	          }, function(reason) {
	              applicationService.showErrorMessage(reason);
	          });
	    }
	
	    loadPricePipeline();
	
	    function updateCenterBtnText(endCount) {
	      /* 
	       * - Search result might return lesser number of records than current pagination count.
	       * e.g. current pagination is : 1-150, but search returned only 20 records.
	       * - Then pagination should be updated to 1-20 instead of 1-150.
	       * - endCount variable contains the exact number of records and will only be defined, if
	       * search count is lesser than current pagination sequence.
	       */
	      if (endCount) {
	          vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfRecordsPerChunk + 1) + '-' + (vm.pageNumber * vm.numberOfRecordsPerChunk + endCount) + ')';
	      } else {
	          vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfRecordsPerChunk + 1) + '-' + ((vm.pageNumber + 1) * vm.numberOfRecordsPerChunk) + ')';
	      }
	    };
	
	    var deRegisterFunc = $scope.$watch('vm.numberOfRecordsPerChunk', function(newValue, oldValue) {
	      if (newValue && oldValue && newValue !== oldValue) {
	          vm.resetPagination(false);
	      }
	    });
	
	    var pricePipelineDeRegisterFunc = $scope.$watch(function() {
	        return pricePipelineCommonService.getPricePipelines();
	    }, function(newValue, oldValue) {
	        if (newValue && oldValue) {
	            processData(newValue);
	        }
	    }, true);
	
	    $scope.$on('destroy', function() {
	      deRegisterFunc();
	      pricePipelineDeRegisterFunc();
	      vm = null;
	  });
	
	  }
	
	  pricePipelineListController.$inject = [
	    '$scope',
	    '$state',
	    '$filter',
	    '$timeout',
	    'i18nService',
	    'NgTableParams',
	    'cpqAdminConstants',
	    'pricePipelineConstants',
	    'pricePipelineCommonService',
	    'applicationService',
	    'systemConstants'
	  ];
	
	  module.exports = pricePipelineListController;
	})();

/***/ }),
/* 766 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  'use strict';
	
	  module.exports = angular.module('cpqAdmin.pricePipeline.detail', [])
	  .config(['$stateProvider', function($stateProvider) {
	      $stateProvider.state('app.pricePipeline.details', {
	          parent: 'app.pricePipeline',
	          url: '/:id/details',
	          views: {
	              'pricePipelineContainer': {
	                  template: __webpack_require__(767),
	                  controller: __webpack_require__(768),
	                  controllerAs: 'vm'
	              }
	          },
	          resolve: {
	              pricePipelineDetails: ['pricePipelineCommonService', '$stateParams', function(pricePipelineCommonService, $stateParams) {
	                return pricePipelineCommonService.getSelectedPricePipelineDetails($stateParams.id);
	              }],
	              priceRuleMetadata: ['remoteService', 'systemConstants', function(remoteService, systemConstants) {
	                var prefix = systemConstants.nsPrefix || '';
	                return remoteService.getFieldsForSObjectName({SObjectName: prefix + 'PriceRule__c', GetExtraReferenceDotNameFields: false, IncludeNormalReferenceFields: false});
	              }]
	          }
	      })
	  }]);
	})();

/***/ }),
/* 767 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"price-pipelines-detail-container\">\n        <!-- <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <price-pipeline-listing search-text=\"vm.searchText\"></price-pipeline-listing>\n        </div> -->\n        <div class=\"price-pipelines-detail-block\">\n            <div class=\"container\">\n                <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\"\n                    close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n                <!-- Create / Update product details form -->\n                <form class=\"price-pipelines-detail-form\" novalidate name=\"vm.pricePipelineForm\">\n                    <div layout=\"row\" layout-wrap>\n                        <div class=\"flex\" flex=45>\n                            <material-form-field model=\"vm.selectedPricePipeline.Name\" field-type=\"STRING\"\n                                is-editable=\"true\" field-label=\"::vm.labels.Name\" is-required=\"true\" name=\"name\"\n                                max-length=\"{{vm.getFieldValue('Name','Length')}}\"></material-form-field>\n                            <div ng-messages=\"vm.pricePipelineForm.name.$error\"\n                                ng-if=\"vm.pricePipelineForm.name.$touched || vm.pricePipelineForm.$submitted \">\n                                <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                            </div>\n                        </div>\n                        <div class=\"flex\" flex-offset=\"10\">\n                            <material-form-field model=\"vm.selectedPricePipeline.Sequence\" field-type=\"QUANTITY\"\n                                is-editable=\"true\" field-label=\"::vm.labels.Sequence\" is-required=\"true\" name=\"sequence\"\n                                precision=\"5\"\n                                scale=\"0\"></material-form-field>\n                            <div ng-messages=\"vm.pricePipelineForm.sequence.$error\"\n                                ng-if=\"vm.pricePipelineForm.sequence.$touched || vm.pricePipelineForm.$submitted \">\n                                <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div layout=\"row\" layout-wrap>\n                        <div class=\"flex\" flex=\"45\">\n                            <material-form-field model=\"vm.selectedPricePipeline.Active\" field-type=\"BOOLEAN\" is-editable=\"true\"\n                                field-label=\"::vm.labels.IsActive\" element-id=\"isActive\"></material-form-field>\n                        </div>\n                    </div>\n                    <div layout=\"row\">\n                        <div class=\"flex\">\n                            <material-form-field model=\"vm.selectedPricePipeline.Description\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"::vm.labels.Description\" max-length=\"{{vm.getFieldValue('Description__c','Length')}}\" name=\"Description\" id=\"description\"></material-form-field>\n                            <div ng-messages=\"vm.pricePipelineForm.Description.$error\">\n                                <p ng-message=\"maxlength\" class=\"formError\">\n                                    {{vm.labels.FormDescriptionMaxCharError | userMessage:vm.labels.Description}}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                    <div layout=\"row\">\n                        <div class=\"flex\" flex=\"45\">\n                            <material-form-field model=\"vm.selectedPricePipeline.EffectiveDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.EffectiveDate\"></material-form-field>\n                        </div>\n                        <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                            <material-form-field model=\"vm.selectedPricePipeline.ExpirationDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.ExpirationDate\"></material-form-field>\n                        </div>\n                    </div>\n                    <div layout=\"row\">\n                        <div class=\"flex expression-field\">\n                            <material-form-field field-type=\"string\" field-label=\"::vm.labels.PipelineCriteria\" is-editable=\"true\" is-disabled=\"true\" model=\"vm.pipelineCriteriaExp\">\n                            </material-form-field>\n                            <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.openPipelineCriteriaModal()\">\n                                <i class=\"fa fa-external-link\"></i>\n                            </button>\n                        </div>\n                    </div>\n                    <input type=\"text\" style=\"visibility: hidden;\" name=\"hiddenPricePointInput\">\n                </form>\n                <div class=\"pricePointSection\">\n                    <h3>{{::vm.labels.DefinePricePoints}}</h3>\n                    <div ng-if=\"vm.pricePointsError.isVisible\">\n                        <p class=\"formError\">{{vm.pricePointsError.errorMessage}}</p>\n                    </div>\n                    <div class=\"pricePointList\">\n                        <div class=\"pricePointListHeader row\">\n                            <div class=\"col-xs-6\">{{vm.labels.Name}}</div>\n                            <div class=\"col-xs-2\">{{vm.labels.IsModifiable}}</div>\n                            <div class=\"col-xs-2\">{{vm.labels.NetPrice}}</div>\n                            <div class=\"col-xs-2\">{{vm.labels.Add}} / {{vm.labels.Remove}}</div>\n                        </div>\n                        <div class=\"pricePointListSection row\">\n                            <ul dnd-list=\"list\" dnd-drop=\"vm.addDroppedPricePoint(event, index, item)\">\n                                <li ng-repeat=\"pricePoint in vm.selectedPricePipeline.PricePoints track by $index\" class=\"row\" dnd-draggable=\"pricePoint\" dnd-disable-if=\"$index < 2\" dnd-effect-allowed=\"move\">\n                                    <div class=\"col-xs-6\">\n                                        <span ng-if=\"$index > 1\" class=\"material-icons\">drag_indicator</span>\n                                        <span ng-if=\"$index < 2\">{{pricePoint.Name}}</span>\n                                        <material-form-field\n                                            ng-if=\"$index > 1\"\n                                            field-type=\"autocomplete\"\n                                            field-label=\"'hidden label'\"\n                                            properties=\"pricePoint.properties\"\n                                            value-change=\"vm.validatePricePoints(); vm.pricePipelineForm.$setDirty();\"\n                                        ></material-form-field>\n                                    </div>\n                                    <div class=\"col-xs-2\">\n                                        <material-form-field\n                                            ng-if=\"$index > 1\"\n                                            model=\"pricePoint.isModifiable\"\n                                            field-type=\"boolean\"\n                                            element-id={{pricePoint.Id}}\n                                            value-change=\"vm.pricePipelineForm.$setDirty()\"\n                                        ></material-form-field>\n                                    </div>\n                                    <div class=\"col-xs-2\">\n                                        <material-form-field\n                                            ng-if=\"$index > 1\"\n                                            model=\"pricePoint.isNetPrice\"\n                                            field-type=\"boolean\"\n                                            element-id={{pricePoint.Id}}\n                                            value-change=\"vm.handleToggleGroupChange($index); vm.pricePipelineForm.$setDirty();\"\n                                        ></material-form-field>\n                                    </div>\n                                    <div class=\"col-xs-2\">\n                                        <span\n                                            ng-if=\"$index > 0\"\n                                            class=\"material-icons\"\n                                            ng-click=\"vm.addPricePoint($index); vm.pricePipelineForm.$setDirty();\"\n                                        >\n                                            add\n                                        </span>\n                                        <span\n                                            ng-if=\"$index > 1\"\n                                            class=\"material-icons\"\n                                            ng-click=\"vm.removePricePoint($index); vm.pricePipelineForm.$setDirty();\"\n                                        >\n                                            delete\n                                        </span>\n                                    </div>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\"\n                        data-ng-click=\"vm.goToListingPage()\">{{::vm.labels.Cancel}}</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.pageSave()\"\n                        data-ng-disabled=\"!vm.enableSave\">{{::vm.labels.SaveButton}}</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 768 */
/***/ (function(module, exports, __webpack_require__) {

	(function () {
	  'use strict';
	
	  var pricePipelineDetailsController = function ($scope, $state, $timeout, pricePipelineDetails, i18nService, systemConstants, pricePipelineCommonService, $mdDialog, priceRuleMetadata, $stateParams, cpqAdminConstants, applicationService) {
	
	    var vm = this,
	      isFormSaved = false;;
	    // Get the price point metadata information and send it to the pricePipelineCommonService
	    pricePipelineCommonService.setPricePointResults(priceRuleMetadata.FieldItems.find(field => field.fieldName === getPrefixedAttribute('PricePoints__c')).picklistValues);
	
	    vm.labels = i18nService.CustomLabel;
	    vm.alerts = [];
	    vm.pricePointsError = {
	      isVisible: true,
	      errorMessage: ''
	    };
	    vm.selectedPricePipeline = angular.copy(pricePipelineDetails);
	    vm.pipelineCriteriaExp = pricePipelineCommonService.extractExpression(pricePipelineDetails.PipelineCriteria);
	
	    function addAlert(message, type) {
	      vm.alerts = [];
	      vm.alerts.push({
	        msg: message,
	        type: type
	      });
	    }
	
	    function getPrefixedAttribute(attribute) {
	      var prefix = systemConstants.nsPrefix || '';
	      return (prefix + attribute).trim();
	    }
	
	    function getField(fieldName) {
	      var fieldObj, name;
	      if (fieldName.indexOf('__c') > -1) {
	        fieldName = getPrefixedAttribute(fieldName);
	      }
	      return fieldObj;
	    }
	
	    function savePricePipeline(toState, toParams) {
	      if (vm.pricePipelineForm.$valid && vm.pricePipelineForm.$dirty) {
	        if ($stateParams.id === cpqAdminConstants.NEW) {
	          const requestObj = preparePipelineRequestObject();
	          delete requestObj.PricePipelineDOs[0].PricePipelineSO.Id;
	          pricePipelineCommonService.createPricePipeline(requestObj)
	            .then(response => {
	              isFormSaved = true;
	              const savedPipeline = pricePipelineCommonService.processAllPricePipelineResponse(response.PricePipelineDOs)[0];
	              pricePipelineCommonService.setSelectedPricePipeline(savedPipeline);
	              if (response.statusCode === 400 || response.statusCode === 500) {
	                addAlert('Failed to save pipeline', cpqAdminConstants.DANGER);
	                applicationService.showErrorMessage(response);
	              }
	              else if (toState) {
	                $state.go(toState, toParams);
	              }
	              else {
	                addAlert('Created Successfully', cpqAdminConstants.SUCCESS);
	                $state.go('app.pricePipeline.details', {
	                    id: savedPipeline.Id
	                });
	              }
	            }, reason => {
	              applicationService.showErrorMessage(reason);
	            });
	        }
	        else {
	          pricePipelineCommonService.updatePricePipeline(preparePipelineRequestObject())
	            .then(response => {
	              isFormSaved = true;
	              if (toState) {
	                $state.go(toState, toParams);
	              }
	              else {
	                addAlert('Updated Successfully', cpqAdminConstants.SUCCESS);
	              }
	            }, reason => {
	              applicationService.showErrorMessage(reason);
	            });
	        }
	      }
	      else if (vm.pricePipelineForm.$valid && toState) {
	        isFormSaved = true;
	        $state.go(toState, toParams);
	      }
	      else {
	        vm.pricePipelineForm.$setSubmitted();
	      }
	    }
	
	    function preparePipelineRequestObject() {
	      const requestObj = {
	        PricePipelineDOs: [
	          {
	            PricePipelineSO: {
	              Name: vm.selectedPricePipeline.Name,
	              Id: vm.selectedPricePipeline.Id,
	              [getPrefixedAttribute('EffectiveDate__c')]: vm.selectedPricePipeline.EffectiveDate,
	              [getPrefixedAttribute('ExpirationDate__c')]: vm.selectedPricePipeline.ExpirationDate,
	              [getPrefixedAttribute('Active__c')]: vm.selectedPricePipeline.Active,
	              [getPrefixedAttribute('Sequence__c')]: vm.selectedPricePipeline.Sequence,
	              [getPrefixedAttribute('Description__c')]: vm.selectedPricePipeline.Description,
	              [getPrefixedAttribute('Criteria__c')]: vm.selectedPricePipeline.PipelineCriteria
	            },
	            PricePointDOs: vm.selectedPricePipeline.PricePoints.map((pricePoint, index) => ({
	              PricePointSO: {
	                Id: pricePoint.Id.includes('newPricePoint') ? null : pricePoint.Id,
	                Name: pricePoint.Name,
	                [getPrefixedAttribute('RuleType__c')]: pricePoint.isNetPrice ? 'Net Price Point' : 'Price Point',
	                [getPrefixedAttribute('AllowableAction__c')]: pricePoint.isModifiable ? 'Unrestricted' : 'No Adjustments',
	                [getPrefixedAttribute('Sequence__c')]: index + 1,
	                [getPrefixedAttribute('PricePoints__c')]: pricePoint.Name,
	                [getPrefixedAttribute('RulesetId__c')]: pricePoint.rulesetId
	              },
	              PriceRuleEntrySOs: []
	            })),
	            NullFields: []
	          }
	        ]
	      }
	      // If either effective date or expiration date are null or undefined do not send them in the request
	      // If dates are null, undefined or equal to 0 add them to NullFields list.
	      const pricePipelineDO = requestObj.PricePipelineDOs[0];
	      const pricePipelineSO = pricePipelineDO.PricePipelineSO;
	      if (!pricePipelineSO[getPrefixedAttribute('EffectiveDate__c')]
	          || pricePipelineSO[getPrefixedAttribute('EffectiveDate__c')] === 0) {
	        delete pricePipelineSO[getPrefixedAttribute('EffectiveDate__c')];
	        pricePipelineDO.NullFields.push(getPrefixedAttribute('EffectiveDate__c'));
	      }
	      if (!pricePipelineSO[getPrefixedAttribute('ExpirationDate__c')]
	      || pricePipelineSO[getPrefixedAttribute('ExpirationDate__c')] === 0) {
	        delete pricePipelineSO[getPrefixedAttribute('ExpirationDate__c')];
	        pricePipelineDO.NullFields.push(getPrefixedAttribute('ExpirationDate__c'));
	      }
	      // If pipeline criteria is null or undefined add to NullFields list.
	      if (!pricePipelineSO[getPrefixedAttribute('Criteria__c')]) {
	        pricePipelineDO.NullFields.push(getPrefixedAttribute('Criteria__c'));
	      }
	      return requestObj;
	    }
	
	    vm.validatePricePoints = function() {
	      // Check for at least one price point set to 'Net Price'
	      if (vm.selectedPricePipeline.PricePoints.find(pricePoint => pricePoint.isNetPrice)) {
	        // Check if any price points don't have a name
	        if (!vm.selectedPricePipeline.PricePoints.find(pricePoint => pricePoint.Name === '')) {
	          vm.pricePointsError.isVisible = false;
	          vm.pricePointsError.errorMessage = '';
	          vm.pricePipelineForm.$setValidity('hiddenPricePointInput', true);
	          pricePipelineCommonService.setSelectedPricePipeline(vm.selectedPricePipeline);
	        }
	        else {
	          vm.pricePointsError.isVisible = true;
	          vm.pricePointsError.errorMessage = 'Name field not set on one or more price points. Please select name from dropdown list.';
	          vm.pricePipelineForm.$setValidity('hiddenPricePointInput', false);
	        }
	      }
	      else {
	        vm.pricePointsError.isVisible = true;
	        vm.pricePointsError.errorMessage = 'No Net Price set! Set one price point as the Net Price.';
	        vm.pricePipelineForm.$setValidity('hiddenPricePointInput', false);
	      }
	    }
	
	    vm.getFieldValue = function (fieldName, fieldValueToBeExtracted) {
	      var field = getField(fieldName);
	      if (field) {
	        return field[fieldValueToBeExtracted];
	      } else {
	        return '';
	      }
	      return 25;
	    };
	
	    vm.handleToggleGroupChange = function (index) {
	      for (let i = 0; i < vm.selectedPricePipeline.PricePoints.length; i++) {
	        if (i !== index) {
	          vm.selectedPricePipeline.PricePoints[i].isNetPrice = false;
	        }
	      }
	      // Wait for next digest cycle to validate the price points
	      $timeout(() => {
	        vm.validatePricePoints();
	      });
	    }
	
	    vm.addDroppedPricePoint = function (event, index, item) {
	      if (index < 2)
	        return false;
	      const itemIndex = vm.selectedPricePipeline.PricePoints.findIndex(element => element.Id === item.Id);
	      const removedItem = vm.selectedPricePipeline.PricePoints.splice(itemIndex, 1)[0];
	      vm.selectedPricePipeline.PricePoints.splice(index > itemIndex ? index - 1 : index, 0, removedItem);
	      return true;
	    }
	
	    vm.addPricePoint = function (index) {
	      const newPricePoint = pricePipelineCommonService.getSamplePricePoint();
	      vm.selectedPricePipeline.PricePoints.splice(index + 1, 0, newPricePoint);
	    }
	
	    vm.removePricePoint = function (index) {
	      vm.selectedPricePipeline.PricePoints.splice(index, 1);
	    }
	
	    vm.openPipelineCriteriaModal = function () {
	      $mdDialog.show({
	        controller: __webpack_require__(769),
	        template: __webpack_require__(770),
	        parent: angular.element(document.body),
	        controllerAs: 'vm',
	        clickOutsideToClose: false,
	        resolve: {
	          selectedPipeline: function () {
	            return {
	              PricePipelineSO: {
	                [getPrefixedAttribute('Criteria__c')]: pricePipelineDetails.PipelineCriteria
	              }
	            };
	          }
	        }
	      }).then(function (response) {
	        vm.selectedPricePipeline.PipelineCriteria = response.pli.PricePipelineSO[getPrefixedAttribute('Criteria__c')];
	        vm.pipelineCriteriaExp = pricePipelineCommonService.extractExpression(response.pli.PricePipelineSO[getPrefixedAttribute('Criteria__c')]);
	        vm.pricePipelineForm.$setDirty();
	      });
	    }
	
	    vm.goToListingPage = function () {
	      $state.go('app.pricePipeline.list');
	    };
	
	    vm.pageSave = function (toState, toParams) {
	      vm.validatePricePoints();
	      if (vm.selectedPricePipeline) {
	        savePricePipeline(toState, toParams);
	      } else {
	        isFormSaved = true;
	        if (toState) {
	          $state.go(toState, toParams);
	        }
	      }
	    };
	
	    $scope.$on('$stateChangeStart', function (e, toState, toParams) {
	      if (toState.name === 'app.pricePipeline.list') {
	        return true;
	      } else if (isFormSaved === true) {
	        return true;
	      } else {
	        e.preventDefault();
	        vm.pageSave(toState, toParams);
	      }
	    });
	
	    $scope.$watchGroup(['vm.pricePipelineForm.$valid', 'vm.pricePipelineForm.$invalid'], function () {
	      if (vm.pricePipelineForm && vm.pricePipelineForm.$valid) {
	        vm.enableSave = true;
	      } else {
	        vm.enableSave = false;
	      }
	    });
	
	    $scope.$on(vm.labels.NewPricePipeline.replace(/ /g, '-'), function () {
	      pricePipelineCommonService.setSelectedPricePipeline(pricePipelineCommonService.getSamplePricePipeline());
	      $state.go('app.pricePipeline.details', {
	        id: 'new'
	      });
	    })
	
	  }
	
	  pricePipelineDetailsController.$inject = [
	    '$scope',
	    '$state',
	    '$timeout',
	    'pricePipelineDetails',
	    'i18nService',
	    'systemConstants',
	    'pricePipelineCommonService',
	    '$mdDialog',
	    'priceRuleMetadata',
	    '$stateParams',
	    'cpqAdminConstants',
	    'applicationService'
	  ];
	
	  module.exports = pricePipelineDetailsController;
	
	})();

/***/ }),
/* 769 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var pipelineCriteriaController = function($scope, $mdDialog, i18nService, cpqAdminConstants, chargeTypeCriteriaService, selectedPipeline, systemConstants) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	        vm.prefix = prefix;
	        vm.alertList = [];
	        vm.pli = selectedPipeline;
	        vm.pli.PriceListItemSO = selectedPipeline.PricePipelineSO;
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        function getChargeTypeCriterias() {
	            var lineItems = vm.pli.PriceListItemSO.chargeTypeCriteria;
	            if (lineItems && lineItems.filter && lineItems.filter.predicates) {
	                var lineItemPredicates = lineItems.filter.predicates;
	                for (var i = 0; i < lineItemPredicates.length; i++) {
	                    var value = getPrefixedAttribute('LineItem__c') + '.' + lineItemPredicates[i]['FieldName'],
	                        fieldType = lineItemPredicates[i].FieldType;
	                    if (fieldType === 'PICKLIST') {
	                        (function(label, j, value) {
	                            chargeTypeCriteriaService.searchTargetAttributesForLineItems(label)
	                                .then(function(response) {
	                                    lineItemPredicates[j]['picklistValues'] = {
	                                        PicklistValues: response.length > 0 ? chargeTypeCriteriaService.getMatchingPicklistValues(response, label) : []
	                                    };
	                                    lineItemPredicates[j]['targetField'] = {
	                                        autocomplete: {
	                                            'selectedItemChange': updateChargeTypesForLineItems,
	                                            'querySearch': chargeTypeCriteriaService.searchTargetAttributesForLineItems,
	                                            'displayName': 'label',
	                                            'selectedItem': {
	                                                'value': value,
	                                                'label': chargeTypeCriteriaService.getChargeTypeFilterLabel(lineItems['sObjectLabel'], lineItemPredicates[j]['FieldName'], lineItemPredicates[j]['FieldLabel'])
	                                            }
	                                        }
	                                    };
	                                });
	                        })(lineItemPredicates[i]['FieldLabel'], i, value);
	                    } else {
	                        if (fieldType === 'DOUBLE' || fieldType === 'CURRENCY') {
	                            lineItemPredicates[i].FieldValue = lineItemPredicates[i].FieldValue ? +lineItemPredicates[i].FieldValue : 0;
	                        }
	                        lineItemPredicates[i]['picklistValues'] = { PicklistValues: [] };
	                        lineItemPredicates[i]['targetField'] = {
	                            autocomplete: {
	                                'selectedItemChange': updateChargeTypesForLineItems,
	                                'querySearch': chargeTypeCriteriaService.searchTargetAttributesForLineItems,
	                                'displayName': 'label',
	                                'selectedItem': {
	                                    'value': value,
	                                    'label': chargeTypeCriteriaService.getChargeTypeFilterLabel(lineItems['sObjectLabel'], lineItemPredicates[i]['FieldName'], lineItemPredicates[i]['FieldLabel'])
	                                }
	                            }
	                        };
	                    }
	
	                }
	            }
	            if (lineItems && lineItems.filter && lineItems.filter.childFilter) {
	                var paItems = lineItems.filter.childFilter.predicates || [];
	                for (var i = 0; i < paItems.length; i++) {
	                    var value = getPrefixedAttribute('ProductAttributeValue__c') + '.' + paItems[i]['FieldName'],
	                        fieldType = paItems[i].FieldType;
	                    if (fieldType === 'PICKLIST') {
	                        (function(label, j, value) {
	                            chargeTypeCriteriaService.searchTargetAttributesForProductAttributes(label)
	                                .then(function(response) {
	                                    paItems[j]['picklistValues'] = {
	                                        PicklistValues: response.length > 0 ? chargeTypeCriteriaService.getMatchingPicklistValues(response, label) : []
	                                    };
	                                    paItems[j]['targetField'] = {
	                                        autocomplete: {
	                                            'selectedItemChange': updateChargeTypesForProductAttributes,
	                                            'querySearch': chargeTypeCriteriaService.searchTargetAttributesForProductAttributes,
	                                            'displayName': 'label',
	                                            'selectedItem': {
	                                                'value': value,
	                                                'label': chargeTypeCriteriaService.getChargeTypeFilterLabel(lineItems.filter.childFilter['childSObjectLabel'], paItems[j]['FieldName'], paItems[j]['FieldLabel'])
	                                            }
	                                        }
	                                    };
	                                });
	                        })(paItems[i]['FieldLabel'], i, value);
	                    } else {
	                        if (fieldType === 'DOUBLE' || fieldType === 'CURRENCY') {
	                            paItems[i].FieldValue = paItems[i].FieldValue ? +paItems[i].FieldValue : 0;
	                        }
	                        paItems[i]['picklistValues'] = { PicklistValues: [] };
	                        paItems[i]['targetField'] = {
	                            autocomplete: {
	                                'selectedItemChange': updateChargeTypesForProductAttributes,
	                                'querySearch': chargeTypeCriteriaService.searchTargetAttributesForProductAttributes,
	                                'displayName': 'label',
	                                'selectedItem': {
	                                    'value': value,
	                                    'label': chargeTypeCriteriaService.getChargeTypeFilterLabel(lineItems.filter.childFilter['childSObjectLabel'], paItems[i]['FieldName'], paItems[i]['FieldLabel'])
	                                }
	                            }
	                        };
	                    }
	                }
	            } else {
	                lineItems.filter.childFilter = {
	                    condExpr: '',
	                    childSObjectLabel: vm.labels.ProductAttributeValue,
	                    childSObjectName: getPrefixedAttribute("ProductAttributeValue__c"),
	                    predicates: [],
	                    relationFieldName: getPrefixedAttribute("LineItemId__c")
	                };
	            }
	        }
	
	        var chargeTypeCriteria = vm.pli.PriceListItemSO[getPrefixedAttribute('Criteria__c')];
	        var chargeTypeCriteriaObj = ((chargeTypeCriteria !== undefined && chargeTypeCriteria !== '') ? JSON.parse(chargeTypeCriteria) : '');
	        if (chargeTypeCriteriaObj) {
	            vm.pli.PriceListItemSO.chargeTypeCriteria = chargeTypeCriteriaObj;
	            getChargeTypeCriterias();
	
	        } else {
	            vm.pli.PriceListItemSO.chargeTypeCriteria = {
	                searchText: null,
	                exprStr: '',
	                sObjectLabel: vm.labels.LineItem,
	                sObjectName: getPrefixedAttribute("LineItem__c"),
	                fields: [],
	                filter: {
	                    condExpr: '',
	                    predicates: [],
	                    hasRHSFields: false,
	                    childFilter: {
	                        condExpr: '',
	                        childSObjectLabel: vm.labels.ProductAttributeValue,
	                        childSObjectName: getPrefixedAttribute("ProductAttributeValue__c"),
	                        predicates: [],
	                        relationFieldName: getPrefixedAttribute("LineItemId__c")
	                    }
	                }
	            };
	        }
	        if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.condExpr !== '') {
	            vm.showLIAdvancedPanel = true;
	        } else {
	            vm.showLIAdvancedPanel = false;
	        }
	        if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.condExpr !== '') {
	            vm.showPARAdvancedPanel = true;
	        } else {
	            vm.showPARAdvancedPanel = false;
	        }
	
	        function prepareCriteria() {
	            var criteria = vm.pli.PriceListItemSO.chargeTypeCriteria;
	            if (criteria) {
	                var linepredicates = criteria.filter.predicates;
	                if (linepredicates.length > 0) {
	                    for (var i = 0; i < linepredicates.length; i++) {
	                        var temp = linepredicates[i];
	                        temp.hasError ? delete temp.hasError : '';
	                        temp.targetField ? delete temp.targetField : '';
	                        temp.picklistValues ? delete temp.picklistValues : '';
	                    }
	                }
	                var productAttributePredicates = criteria.filter.childFilter.predicates;
	                if (productAttributePredicates.length > 0) {
	                    for (var i = 0; i < productAttributePredicates.length; i++) {
	                        var temp = productAttributePredicates[i];
	                        temp.hasError ? delete temp.hasError : '';
	                        temp.targetField ? delete temp.targetField : '';
	                        temp.picklistValues ? delete temp.picklistValues : '';
	                    }
	                }
	                vm.pli.PriceListItemSO[getPrefixedAttribute('Criteria__c')] = JSON.stringify(criteria);
	            } else {
	                vm.pli.PriceListItemSO[getPrefixedAttribute('Criteria__c')] = '';
	            }
	        }
	
	
	        /* Charge Type Criteria */
	        function updateChargeTypesForLineItems(item) {
	            if (item) {
	                var lineItems = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	                for (var i = 0; i < lineItems.length; i++) {
	                    if (item.label === lineItems[i].targetField.autocomplete.selectedItem.label) {
	
	                        if (item.fieldType) {
	                            lineItems[i].FieldType = item.fieldType;
	                            if (item.fieldType === 'BOOLEAN') {
	                                lineItems[i].FieldValue = false;
	                            } else {
	                                lineItems[i].FieldValue = '';
	                            }
	                        }
	                        if (item.picklistValues) {
	                            lineItems[i].picklistValues = {
	                                PicklistValues: item.picklistValues
	                            };
	                        }
	                        break;
	                    }
	                }
	            }
	        }
	
	        function updateChargeTypesForProductAttributes(item) {
	            if (item) {
	                var productAttributes = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	                for (var i = 0; i < productAttributes.length; i++) {
	                    if (item.label === productAttributes[i].targetField.autocomplete.selectedItem.label) {
	                        if (item.fieldType) {
	                            productAttributes[i].FieldType = item.fieldType;
	                            if (item.fieldType === 'BOOLEAN') {
	                                productAttributes[i].FieldValue = false;
	                            } else {
	                                productAttributes[i].FieldValue = '';
	                            }
	                        }
	                        if (item.picklistValues) {
	                            productAttributes[i].picklistValues = {
	                                PicklistValues: item.picklistValues
	                            };
	                        }
	                        break;
	                    }
	                }
	            }
	        }
	
	        vm.operatorPicklistEntries = {
	            PicklistValues: [{
	                label: vm.labels.EqualTo,
	                value: vm.labels.EqualTo
	            }, {
	                label: vm.labels.NotEqualTo,
	                value: vm.labels.NotEqualTo
	            }, {
	                label: vm.labels.StartsWith,
	                value: vm.labels.StartsWith
	            }, {
	                label: vm.labels.Contains,
	                value: vm.labels.Contains
	            }, {
	                label: vm.labels.DoesNotContain,
	                value: vm.labels.DoesNotContain
	            }, {
	                label: vm.labels.LessThan,
	                value: vm.labels.LessThan
	            }, {
	                label: vm.labels.GreaterThan,
	                value: vm.labels.GreaterThan
	            }, {
	                label: vm.labels.LessThanOrEqualTo,
	                value: vm.labels.LessThanOrEqualTo
	            }, {
	                label: vm.labels.GreaterThanOrEqualTo,
	                value: vm.labels.GreaterThanOrEqualTo
	            }, {
	                label: vm.labels.In,
	                value: vm.labels.In
	            }, {
	                label: vm.labels.NotIn,
	                value: vm.labels.NotIn
	            }]
	        };
	
	        function getNextRowNumber(type) {
	            if (type === 'Line Items') {
	                return (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.length + 1);
	            } else if (type === 'Product Attributes') {
	                return (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.length + 1);
	            }
	        }
	
	        vm.addChargeType = function(type) {
	            var targetField = {},
	                querySearch;
	            if (type === 'Line Items') {
	                targetField = {
	                    autocomplete: {
	                        'selectedItemChange': updateChargeTypesForLineItems,
	                        'querySearch': chargeTypeCriteriaService.searchTargetAttributesForLineItems,
	                        'displayName': 'label'
	                    }
	                };
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.push({
	                    'RowNum': getNextRowNumber(type),
	                    'RHSSObjectName': null,
	                    'RHSFieldType': null,
	                    'RHSFieldName': null,
	                    'RHSFieldLabel': null,
	                    'RHSChildFilterName': null,
	                    'RefFieldName': null,
	                    'OffsetValue': null,
	                    'LHSSObjectName': null,
	                    'LHSChildFilterName': null,
	                    'FieldValue': '',
	                    'FieldType': '',
	                    'FieldName': '',
	                    'FieldLabel': '',
	                    'CompOper': '',
	                    'BoolOper': 'AND',
	                    'statementProduct': '',
	                    'targetField': targetField
	                });
	            } else if (type === 'Product Attributes') {
	                targetField = {
	                    autocomplete: {
	                        'selectedItemChange': updateChargeTypesForProductAttributes,
	                        'querySearch': chargeTypeCriteriaService.searchTargetAttributesForProductAttributes,
	                        'displayName': 'label'
	                    }
	                };
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.push({
	                    'RowNum': getNextRowNumber(type),
	                    'RHSSObjectName': null,
	                    'RHSFieldType': null,
	                    'RHSFieldName': null,
	                    'RHSFieldLabel': null,
	                    'RHSChildFilterName': null,
	                    'RefFieldName': null,
	                    'OffsetValue': null,
	                    'LHSSObjectName': null,
	                    'LHSChildFilterName': null,
	                    'FieldValue': '',
	                    'FieldType': '',
	                    'FieldName': '',
	                    'FieldLabel': '',
	                    'CompOper': '',
	                    'BoolOper': 'AND',
	                    'statementProduct': '',
	                    'targetField': targetField
	                });
	            }
	
	        };
	
	        function updateRowNumValue(type) {
	            if (type === 'Line Items') {
	                var filters = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	                for (var i = 0; i < filters.length; i++) {
	                    filters[i].RowNum = (i + 1);
	                }
	            } else if (type === 'Product Attributes') {
	                var filters = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	                for (var i = 0; i < filters.length; i++) {
	                    filters[i].RowNum = (i + 1);
	                }
	            }
	        }
	
	        vm.prepareConditionExpression = function(type) {
	            if (type === 'Line Items') {
	                var expr = '',
	                    predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	
	                for (var i = 0; i < predicates.length; i++) {
	                    if (i === (predicates.length - 1)) {
	                        expr += predicates[i].RowNum;
	                    } else {
	                        expr += predicates[i].RowNum + ' AND ';
	                    }
	                }
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.condExpr = expr;
	            } else if (type === 'Product Attributes') {
	                var expr = '',
	                    predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	
	                for (var i = 0; i < predicates.length; i++) {
	                    if (i === (predicates.length - 1)) {
	                        expr += predicates[i].RowNum;
	                    } else {
	                        expr += predicates[i].RowNum + ' AND ';
	                    }
	                }
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.condExpr = expr;
	            }
	        };
	
	        function isLineConditionValid() {
	            var isValid = true,
	                condExpr = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.condExpr;
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.length > 0) {
	                    var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < rowNumArr.length; i++) {
	                    var value = rowNumArr[i];
	                    if (condExprArr.indexOf(value.toString()) <= -1) {
	                        isValid = false;
	                        break;
	                    }
	                }
	            }
	            return isValid;
	        }
	
	        function lineItemsFilterListContainsError() {
	            var containsError = false;
	            if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.length > 0) {
	                var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	                for (var i = 0; i < predicates.length; i++) {
	                    var targetField = predicates[i].targetField,
	                        operator = predicates[i].CompOper;
	                    if (targetField && targetField.autocomplete && targetField.autocomplete.selectedItem) {
	                        if (!targetField.autocomplete.selectedItem.value || !targetField.autocomplete.selectedItem.label) {
	                            containsError = true;
	                            predicates[i].hasError = true;
	                        } else {
	                            predicates[i].hasError = false;
	                        }
	                    } else {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    }
	                    if (operator === undefined || operator === '') {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    } else {
	                        if (predicates[i].hasError !== true) {
	                            predicates[i].hasError = false;
	                        }
	                    }
	                }
	                if (!isLineConditionValid()) {
	                    containsError = true;
	                    addAlert({
	                        type: cpqAdminConstants.DANGER,
	                        msg: vm.labels.InvalidLIChargeTypeCondition
	                    });
	                }
	            }
	            return containsError;
	        }
	
	        function isProductAttributeConditionValid() {
	            var isValid = true,
	                condExpr = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.condExpr;
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.length > 0) {
	                    var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < rowNumArr.length; i++) {
	                    var value = rowNumArr[i];
	                    if (condExprArr.indexOf(value.toString()) <= -1) {
	                        isValid = false;
	                        break;
	                    }
	                }
	            }
	            return isValid;
	        }
	
	        function productAttributesFilterListContainsError() {
	            var containsError = false;
	            if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.length > 0) {
	                var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	                for (var i = 0; i < predicates.length; i++) {
	                    var targetField = predicates[i].targetField,
	                        operator = predicates[i].CompOper;
	                    if (targetField && targetField.autocomplete && targetField.autocomplete.selectedItem) {
	                        if (!targetField.autocomplete.selectedItem.value || !targetField.autocomplete.selectedItem.label) {
	                            containsError = true;
	                            predicates[i].hasError = true;
	                        } else {
	                            predicates[i].hasError = false;
	                        }
	                    } else {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    }
	                    if (operator === undefined || operator === '') {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    } else {
	                        if (predicates[i].hasError !== true) {
	                            predicates[i].hasError = false;
	                        }
	                    }
	                }
	                if (!isProductAttributeConditionValid()) {
	                    containsError = true;
	                    addAlert({
	                        type: cpqAdminConstants.DANGER,
	                        msg: vm.labels.InvalidPAChargeTypeCondition
	                    });
	                }
	            }
	            return containsError;
	        }
	
	        function prepareExpressionString(label, value, operator) {
	            var str = '';
	            switch (operator) {
	                case vm.labels.EqualTo:
	                    {
	                        str = '(' + label + ' = ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.NotEqualTo:
	                    {
	                        str = '(' + label + ' != ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.StartsWith:
	                    {
	                        str = '(' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.Contains:
	                    {
	                        str = '(' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.DoesNotContain:
	                    {
	                        str = '(NOT ' + label + ' LIKE ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.LessThan:
	                    {
	                        str = '(' + label + ' < ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.GreaterThan:
	                    {
	                        str = '(' + label + ' > ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.LessThanOrEqualTo:
	                    {
	                        str = '(' + label + ' <= ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.GreaterThanOrEqualTo:
	                    {
	                        str = '(' + label + ' >= ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.In:
	                    {
	                        str = '(' + label + ' IN ' + value + ') ';
	                        break;
	                    }
	                case vm.labels.NotIn:
	                    {
	                        str = '(' + label + ' NOT IN ' + value + ') ';
	                        break;
	                    }
	            }
	            return str;
	        }
	
	
	        function prepareLineItemsCriteriaExpression(condExpr) {
	
	            var str = '';
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.length > 0) {
	                    var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < condExprArr.length; i++) {
	                    if (!isNaN(+condExprArr[i])) {
	                        var value = +condExprArr[i];
	                        if (value !== 0) {
	                            if (rowNumArr.indexOf(value) <= -1) {
	                                str += '{' + (value - 1) + '}';
	                            } else {
	                                var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates;
	                                var fieldLabel = predicates[(value - 1)].FieldLabel.trim(),
	                                    fieldValue = predicates[(value - 1)].FieldValue,
	                                    operator = predicates[(value - 1)].CompOper,
	                                    fieldType = predicates[(value - 1)].FieldType;
	                                if (angular.isString(fieldValue)) {
	                                    fieldValue = fieldValue.trim();
	                                } else if (angular.isArray(fieldValue)) {
	                                    fieldValue = fieldValue.join(';');
	                                    predicates[(value - 1)].FieldValue = fieldValue;
	                                }
	                                str += prepareExpressionString(fieldLabel, fieldValue, operator);
	                            }
	                        }
	
	                    } else {
	                        str += condExprArr[i] + ' ';
	                    }
	                }
	            }
	
	            return str !== '' ? str.trim() : str;
	        }
	
	        function prepareProductAttributesCriteriaExpression(condExpr) {
	
	            var str = '';
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.length > 0) {
	                    var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < condExprArr.length; i++) {
	                    if (!isNaN(+condExprArr[i])) {
	                        var value = +condExprArr[i];
	                        if (value !== 0) {
	                            if (rowNumArr.indexOf(value) <= -1) {
	                                str += '{' + (value - 1) + '}';
	                            } else {
	                                var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates;
	                                var fieldLabel = predicates[(value - 1)].FieldLabel.trim(),
	                                    fieldValue = predicates[(value - 1)].FieldValue,
	                                    operator = predicates[(value - 1)].CompOper,
	                                    fieldType = predicates[(value - 1)].FieldType;
	                                if (angular.isString(fieldValue)) {
	                                    fieldValue = fieldValue.trim();
	                                } else if (angular.isArray(fieldValue)) {
	                                    fieldValue = fieldValue.join(';');
	                                    predicates[(value - 1)].FieldValue = fieldValue;
	                                }
	                                str += prepareExpressionString(fieldLabel, fieldValue, operator);
	                            }
	                        }
	
	                    } else {
	                        str += condExprArr[i] + ' ';
	                    }
	                }
	            }
	
	            return str !== '' ? str.trim() : str;
	        }
	
	        vm.removeChargeType = function(index, type) {
	            if (type === 'Line Items') {
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.splice(index, 1);
	            } else if (type === 'Product Attributes') {
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.splice(index, 1);
	            }
	            updateRowNumValue(type);
	            vm.prepareConditionExpression(type);
	        };
	
	
	        function getValueType(label) {
	            var response;
	            if (label) {
	                response = label.split(' : ')[0];
	            }
	            return response || label;
	        }
	
	        function updateCriteriaContentForLineItems() {
	            if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates.length > 0) {
	                var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates,
	                    exprStr = '';
	
	                var condExpr = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.condExpr;
	                if (!condExpr) {
	                    vm.prepareConditionExpression('Line Items');
	                }
	                for (var i = 0; i < predicates.length; i++) {
	                    var temp,
	                        label,
	                        value,
	                        tempValue,
	                        length,
	                        fieldType = predicates[i].FieldType;
	
	                    if (fieldType === 'MULTIPICKLIST') {
	                        predicates[i].FieldValue = predicates[i].FieldValue.join(';');
	                    }
	                    temp = predicates[i].targetField.autocomplete.selectedItem,
	                        label = temp.label,
	                        tempValue = temp.value;
	                    value = tempValue.split(getPrefixedAttribute('LineItem__c') + '.')[1];
	                    predicates[i]['FieldName'] = value;
	                    predicates[i]['FieldLabel'] = label.split(':').length > 1 ? label.split(':')[1].trim() : label;
	                    vm.pli.PriceListItemSO.chargeTypeCriteria.fields.push(value);
	
	                }
	            } else {
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates = [];
	            }
	        }
	
	        function updateCriteriaContentForProductAttribute() {
	            if (vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates.length > 0) {
	                var predicates = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates,
	                    exprStr = '';
	                var condExpr = vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.condExpr;
	                if (!condExpr) {
	                    vm.prepareConditionExpression('Product Attributes');
	                }
	                for (var i = 0; i < predicates.length; i++) {
	                    var temp, label, value, tempValue,
	                        fieldType = predicates[i].FieldType;
	
	                    if (fieldType === 'MULTIPICKLIST') {
	                        predicates[i].FieldValue = predicates[i].FieldValue.join(';');
	                    };
	                    temp = predicates[i].targetField.autocomplete.selectedItem,
	                        label = temp.label;
	
	                    tempValue = temp.value;
	                    value = tempValue.replace(getPrefixedAttribute('ProductAttributeValue__c'), getPrefixedAttribute('AttributeValueId__r'));
	
	                    predicates[i]['FieldName'] = value.replace(getPrefixedAttribute('AttributeValueId__r.'), '');
	                    predicates[i]['FieldLabel'] = label.split(':').length > 1 ? label.split(':')[1].trim() : label;
	                    vm.pli.PriceListItemSO.chargeTypeCriteria.fields.push(value);
	
	                }
	            } else {
	                vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates = [];
	            }
	        }
	
	        /* Charge Type Criteria */
	
	        vm.save = function() {
	            if (!lineItemsFilterListContainsError() && !productAttributesFilterListContainsError()) {
	                vm.pli.PriceListItemSO.chargeTypeCriteria.fields = [];
	                updateCriteriaContentForLineItems();
	                updateCriteriaContentForProductAttribute();
	                var lineItemExpStr = prepareLineItemsCriteriaExpression(vm.pli.PriceListItemSO.chargeTypeCriteria.filter.condExpr);
	                var productAttributeExpStr = prepareProductAttributesCriteriaExpression(vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.condExpr);
	                var finalExpression = '';
	                if (lineItemExpStr) {
	                    finalExpression += lineItemExpStr;
	                }
	                if (productAttributeExpStr) {
	                    if (lineItemExpStr) {
	                        finalExpression += ' AND ';
	                    }
	                    finalExpression += productAttributeExpStr;
	                }
	                vm.pli.PriceListItemSO.chargeTypeCriteria.exprStr = finalExpression;
	                vm.pli = chargeTypeCriteriaService.prepareCriteria(vm.pli);
	                delete vm.pli.PriceListItemSO.chargeTypeCriteria;
	                $mdDialog.hide({
	                    pli: angular.copy(vm.pli)
	                });
	            }
	        };
	
	    };
	
	    pipelineCriteriaController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'i18nService',
	        'cpqAdminConstants',
	        'chargeTypeCriteriaService',
	        'selectedPipeline',
	        'systemConstants'
	    ];
	
	    module.exports = pipelineCriteriaController;
	})();


/***/ }),
/* 770 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"charge-type-criteria-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>{{::vm.labels.PipelineCriteria}}</h2>\n            <span flex></span>\n            <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n                </i>\n            </button>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"charge-type-criteria-dialog-content\">\n        <div class=\"error-indicator\">\n            <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"5000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n        </div>\n        <div class=\"advance-tab\">\n            <md-tabs md-dynamic-height md-border-bottom>\n                <md-tab label=\"Line Items\">\n                    <md-content>\n                        <button class=\"slds-button slds-button_brand\" ng-click=\"vm.addChargeType('Line Items')\">Add New Criteria</button>\n                        <div class=\"filter-container\">\n                            <div class=\"each-row\" data-ng-repeat=\"item in vm.pli.PriceListItemSO.chargeTypeCriteria.filter.predicates track by $index\" data-ng-class=\"item.hasError === true ? 'error' :''\">\n                                <div class=\"each-row-container\">\n                                    <div class=\"btn-group\">\n                                        <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeChargeType($index,'Line Items')\"><i class=\"material-icons\">clear</i>\n                                        </button>\n                                    </div>\n                                    <div class=\"rowNum\">\n                                        <material-form-field model=\"item.RowNum\" field-type=\"string\" is-editable=\"false\" field-label=\"'Row Num'\" name=\"rowNum\">\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"autocomplete\">\n                                        <material-form-field field-type=\"autocomplete\" field-label=\"'Field'\" name=\"field\" properties=\"item.targetField\" is-required=\"true\">\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"operator\">\n                                        <material-form-field model=\"item.CompOper\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.operatorPicklistEntries\" field-label=\"'Operator'\" name=\"operator\" is-required=\"true\">\n                                        </material-form-field>\n                                    </div>\n                                    <div ng-class=\"{'value': item.FieldType != 'PICKLIST', 'operator': item.FieldType == 'PICKLIST'}\">\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"STRING\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'STRING'\"></material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"DOUBLE\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'DOUBLE'\"></material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'CURRENCY'\">\n                                        </material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'PICKLIST'\">\n                                        </material-form-field>\n                                        <material-form-field class=\"field-checkbox\" model=\"item.FieldValue\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"'Value'\" show-inline=\"true\" data-ng-if=\"item.FieldType === 'BOOLEAN'\">\n                                        </material-form-field>\n                                    </div>\n                                </div>\n                                <div class=\"clearfix\"></div>\n                            </div>\n                        </div>\n                        <div class=\"advance-filter-container\">\n                            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showLIAdvancedPanel = true;\" data-ng-if=\"vm.showLIAdvancedPanel !== true\">Advanced Options</button>\n                            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showLIAdvancedPanel = false;vm.prepareConditionExpression();\" data-ng-if=\"vm.showLIAdvancedPanel === true\">Clear Advanced Options</button>\n                            <div class=\"value\" data-ng-if=\"vm.showLIAdvancedPanel === true\">\n                                <material-form-field model=\"vm.pli.PriceListItemSO.chargeTypeCriteria.filter.condExpr\" field-type=\"string\" is-editable=\"true\" field-label=\"'Advanced Filter Condition'\" name=\"value\">\n                                </material-form-field>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n                <md-tab label=\"Product Attributes\">\n                    <md-content>\n                        <button class=\"slds-button slds-button_brand\" ng-click=\"vm.addChargeType('Product Attributes')\">Add New Criteria</button>\n                        <div class=\"filter-container\">\n                            <div class=\"each-row\" data-ng-repeat=\"item in vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.predicates track by $index\" data-ng-class=\"item.hasError === true ? 'error' :''\">\n                                <div class=\"each-row-container\">\n                                    <div class=\"btn-group\">\n                                        <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeChargeType($index,'Product Attributes')\"><i class=\"material-icons\">clear</i>\n                                        </button>\n                                    </div>\n                                    <div class=\"rowNum\">\n                                        <material-form-field model=\"item.RowNum\" field-type=\"string\" is-editable=\"false\" field-label=\"'Row Num'\" name=\"rowNum\">\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"autocomplete\">\n                                        <material-form-field field-type=\"autocomplete\" field-label=\"'Field'\" name=\"field\" properties=\"item.targetField\" is-required=\"true\">\n                                        </material-form-field>\n                                    </div>\n                                    <div class=\"operator\">\n                                        <material-form-field model=\"item.CompOper\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.operatorPicklistEntries\" field-label=\"'Operator'\" name=\"operator\" is-required=\"true\">\n                                        </material-form-field>\n                                    </div>\n                                    <div ng-class=\"{'value': item.FieldType != 'PICKLIST', 'operator': item.FieldType == 'PICKLIST'}\">\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"STRING\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'STRING'\"></material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"DOUBLE\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'DOUBLE'\"></material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'CURRENCY'\">\n                                        </material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"'Value'\" data-ng-if=\"item.FieldType === 'PICKLIST'\">\n                                        </material-form-field>\n                                        <material-form-field model=\"item.FieldValue\" class=\"field-checkbox\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"'Value'\" show-inline=\"true\" data-ng-if=\"item.FieldType === 'BOOLEAN'\">\n                                        </material-form-field>\n                                    </div>\n                                </div>\n                                <div class=\"clearfix\"></div>\n                            </div>\n                        </div>\n                        <div class=\"advance-filter-container\">\n                            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showPARAdvancedPanel = true;\" data-ng-if=\"vm.showPARAdvancedPanel !== true\">Advanced Options</button>\n                            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showPARAdvancedPanel = false;vm.prepareConditionExpression();\" data-ng-if=\"vm.showPARAdvancedPanel === true\">Clear Advanced Options</button>\n                            <div class=\"value\" data-ng-if=\"vm.showPARAdvancedPanel === true\">\n                                <material-form-field model=\"vm.pli.PriceListItemSO.chargeTypeCriteria.filter.childFilter.condExpr\" field-type=\"string\" is-editable=\"true\" field-label=\"'Advanced Filter Condition'\" name=\"value\">\n                                </material-form-field>\n                            </div>\n                        </div>\n                    </md-content>\n                </md-tab>\n            </md-tabs>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 771 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  'use strict';
	
	  module.exports = angular.module('cpqAdmin.pricePipeline.adjustmentGrouping', [])
	  .config(['$stateProvider', function($stateProvider) {
	    $stateProvider.state('app.pricePipeline.adjustmentGrouping', {
	      parent: 'app.pricePipeline',
	      url: '/:id/adjustment-grouping',
	      views: {
	        'pricePipelineContainer': {
	          template: __webpack_require__(772),
	          controller: __webpack_require__(773),
	          controllerAs: 'vm'
	        }
	      }
	    })
	  }]);
	})();

/***/ }),
/* 772 */
/***/ (function(module, exports) {

	module.exports = "<h1>Adjustment Grouping Works!</h1>"

/***/ }),
/* 773 */
/***/ (function(module, exports) {

	(function() {
	  'use strict';
	
	  var adjustmentGroupingController = function() {
	
	  }
	
	  adjustmentGroupingController.$inject = [
	
	  ];
	
	  module.exports = adjustmentGroupingController;
	
	})();

/***/ }),
/* 774 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	  'use strict';
	
	  module.exports = angular.module('cpqAdmin.pricePipeline.waterfallSetup', [])
	  .config(['$stateProvider', function($stateProvider) {
	    $stateProvider.state('app.pricePipeline.waterfallSetup', {
	      parent: 'app.pricePipeline',
	      url: '/:id/waterfall-setup',
	      views: {
	        'pricePipelineContainer': {
	          template: __webpack_require__(775),
	          controller: __webpack_require__(776),
	          controllerAs: 'vm'
	        }
	      }
	    })
	  }]);
	})();

/***/ }),
/* 775 */
/***/ (function(module, exports) {

	module.exports = "<h1>Waterfall Setup works!</h1>"

/***/ }),
/* 776 */
/***/ (function(module, exports) {

	(function() {
	  'use strict';
	
	  var waterfallSetupController = function() {
	
	  }
	
	  waterfallSetupController.$inject = [
	
	  ];
	
	  module.exports = waterfallSetupController;
	
	})();

/***/ }),
/* 777 */
/***/ (function(module, exports) {

	(function () {
	    'use strict';
	
	    var pricePipelineController = function ($state, $scope, i18nService, pricePipelineCommonService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	
	        function findStateName(stateName) {
	            vm.stateCurrentName = stateName;
	        }
	        findStateName($state.current.name);
	
	        $scope.$on('$stateChangeSuccess', function (e, toState, toParams) {
	            findStateName(toState.name);
	            updateTabMenus();
	            vm.showTitle = $state.params.id !== 'new';
	        });
	
	        /* Menu for specific Tabs */
	        vm.tabFirstMenu = '';
	        vm.tabMenuItems = [];
	
	        function updateTabMenus() {
	            var currentState = vm.stateCurrentName,
	                currentHash = currentState.split('app.pricePipeline.')[1];
	            switch (currentHash) {
	                case 'details':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewPricePipeline;
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                case 'adjustmentGrouping':
	                    {
	                        vm.tabFirstMenu = 'New Price Point Grouping';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                case 'waterfallSetup':
	                    {
	                        vm.tabFirstMenu = 'New Price Waterfall';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                default:
	                    {
	                        vm.tabFirstMenu = '';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	            }
	        }
	
	        vm.tabMenuClicked = function (menuName) {
	            var eventName = menuName.replace(/ /g, '-');
	            $scope.$broadcast(eventName);
	        };
	
	        vm.currentState = $state.current.name;
	
	        $scope.$watch(function () {
	            return pricePipelineCommonService.getSelectedPricePipeline();
	        }, function (newValue, oldValue) {
	            if (newValue && oldValue) {
	                vm.selectedPricePipeline = newValue;
	            }
	        }, true);
	    };
	
	    pricePipelineController.$inject = [
	        '$state',
	        '$scope',
	        'i18nService',
	        'pricePipelineCommonService'
	    ];
	
	    module.exports = pricePipelineController;
	})();


/***/ }),
/* 778 */
753,
/* 779 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"price-pipeline\">\n    <div class=\"price-pipeline-main-container\">\n        <div class=\"price-pipeline-header title-bar\">\n            <div class=\"price-pipeline-title-container title\">\n                <div class=\"price-pipeline-info\">\n                    <span ng-if=\"vm.showTitle\" class=\"title\">{{vm.selectedPricePipeline.Name}}</span>\n                </div>\n            </div>\n            <div id=\"navbar\">\n                <price-pipeline-sub-menu></price-pipeline-sub-menu>\n                <!-- Product menu bar with its values -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"list-product-btn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\"\n                            data-ng-click=\"vm.tabMenuClicked(vm.tabFirstMenu)\"\n                            data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                        <div class=\"drop drop-menu\" data-ng-if=\"::vm.tabMenuItems.length > 0\">\n                            <md-menu md-offset=\"50 50\">\n                                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\"\n                                    ng-click=\"$mdOpenMenu($event)\">\n                                    <i class=\"material-icons\">more_vert</i>\n                                </button>\n                                <md-menu-content width=\"2\">\n                                    <md-menu-item data-ng-repeat=\"menu in ::vm.tabMenuItems\">\n                                        <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                            <div layout=\"row\" flex>\n                                                <p flex>{{::menu}}</p>\n                                            </div>\n                                        </md-button>\n                                    </md-menu-item>\n                                </md-menu-content>\n                            </md-menu>\n                        </div>\n                    </div>\n                </ul>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"price-pipeline-center-container\">\n            <!-- Content layout starts -->\n            <div ui-view=\"pricePipelineContainer\" class=\"price-pipeline-container\"></div>\n            <!-- Content layout ends -->\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>"

/***/ }),
/* 780 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    __webpack_require__(781);
	    __webpack_require__(786);
	    __webpack_require__(788);
	    __webpack_require__(790);
	    __webpack_require__(794);
	    __webpack_require__(798);
	
	    module.exports = angular.module('cpqAdmin.pricePipelineRuleset', [
	
	            'cpqAdmin.pricePipelineRuleset.common.services',
	            'cpqAdmin.pricePipelineRuleset.common.directives',
	            'cpqAdmin.pricePipelineRuleset.common.filters',
	            'cpqAdmin.pricePipelineRuleset.list',
	            'cpqAdmin.pricePipelineRuleset.details',
	            'cpqAdmin.pricePipelineRuleset.pricePipelineRules'
	        ])
	        .controller('pricePipelineRulesetController', __webpack_require__(809))
	        .constant('pricePipelineRulesetConstants', __webpack_require__(810))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.pricePipelineRuleset', {
	                url: '/price-pipeline-ruleset',
	                //abstract: true,
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(811),
	                        controller: 'pricePipelineRulesetController',
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 781 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.pricePipelineRuleset.common.directives', ['cpqAdmin.pricePipelineRuleset.common.services'])
	        .directive('pricePipelineRulesetSubMenu', __webpack_require__(782))
	        .directive('pricePipelineRulesetsListing', __webpack_require__(784));
	})();


/***/ }),
/* 782 */
[901, 783],
/* 783 */
/***/ (function(module, exports) {

	module.exports = "<ul class=\"nav navbar-nav price-rule-set-menu\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.pricePipelineRuleset.details({id:vm.$stateParams.id})\">{{vm.labels.Details}}</a>\n    </li>\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.pricePipelineRuleset.pricePipelineRules({id:vm.$stateParams.id})\">{{vm.labels.PricePipelineRules}}</a>\n    </li>\n</ul>\n"

/***/ }),
/* 784 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    module.exports = [
	        function() {
	            var pricePipelineRulesetsListingController = function($scope, applicationService, systemConstants, $state, $stateParams,
	                i18nService, remoteService, pricePipelineRulesetCommonService, pricePipelineRulesetConstants) {
	
	                var vm = this,
	                    prefix = systemConstants.nsPrefix || '',
	                    filter = {
	                        SearchString: '',
	                        ChunkNumber: 1,
	                        NumberOfRecordsPerChunk: pricePipelineRulesetConstants.numberOfProductsPerChunk || 50
	                    },
	                    pageNumber = 1;
	
	                vm.labels = i18nService.CustomLabel;
	                vm.disableLeftBtn = true;
	                vm.searchedStr = '';
	                vm.isMaxSQLSizeExceed = false;
	                vm.numberOfProductsPerChunk = pricePipelineRulesetConstants.numberOfProductsPerChunk || 50;
	
	                vm.searchPriceRulesets = function() {
	                    filter.SearchString = vm.searchText || '';
	                    filter.ChunkNumber = 1;
	                    filter.NumberOfRecordsPerChunk = vm.numberOfProductsPerChunk;
	                    loadPriceRulesets();
	                };
	
	                vm.prepareFiltersAndPriceRulesets = function() {
	                    filter = pricePipelineRulesetCommonService.getFilter();
	                    if (Object.keys(filter).length) {
	                        vm.searchText = filter.SearchString;
	                    } else {
	                        filter = {
	                            ChunkNumber: pageNumber || 1,
	                            NumberOfRecordsPerChunk: vm.numberOfProductsPerChunk,
	                            SearchString: vm.searchString || ''
	                        };
	                    }
	                };
	
	                /* On Page load while there are no filters applied */
	                vm.prepareFiltersAndPriceRulesets();
	
	                vm.getPriceRulesets = function(type) {
	                    if (type === 'next') {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber + 1);
	                        if (filter.ChunkNumber !== 1) {
	                            vm.disableLeftBtn = false;
	                        }
	                        loadPriceRulesets();
	                    } else {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber - 1);
	                        if (filter.ChunkNumber === 1) {
	                            vm.disableLeftBtn = true;
	                        }
	                        loadPriceRulesets();
	                    }
	                };
	
	                var pLDeRegisterFunc = $scope.$watch(function() {
	                    return pricePipelineRulesetCommonService.getPriceRulesets();
	                }, function(newValue, oldValue) {
	                    if (newValue && oldValue) {
	                        processData(newValue);
	                    }
	                }, true);
	
	                function processData(priceRulesets) {
	                    /* Used to bind to table body */
	                    vm.priceRulesets = priceRulesets;
	                    vm.isMaxSQLSizeExceed = false;
	
	                    if (priceRulesets.length === 0) {
	                        vm.searchedStr = vm.searchString;
	                    }
	                    /**
	                     * - Check if the response size is less than the current chunk size.
	                     * - If less, disable the next button
	                     * - else keep it enabled
	                     */
	
	                    if (priceRulesets.length < filter.NumberOfRecordsPerChunk) {
	                        vm.disableRightBtn = true;
	                        updateCenterBtnText(filter, priceRulesets.length);
	                    } else {
	                        vm.disableRightBtn = false;
	                        updateCenterBtnText(filter, priceRulesets.length);
	                    }
	
	                    /* Hide the loader on success of service call */
	                    vm.showLoader = false;
	                    document.querySelector('.list-table').scrollTop = 0;
	                }
	
	                function loadPriceRulesets() {
	
	                    vm.showLoader = true;
	                    pricePipelineRulesetCommonService.loadAllPriceRulesets(filter)
	                        .then(function(response) {}, function(reason) {});
	
	                }
	
	                function updateCenterBtnText(filterObj, endCount) {
	                    /* 
	                     * - Search result might return lesser number of records than current pagination count.
	                     * e.g. current pagination is : 1-150, but search returned only 20 records.
	                     * - Then pagination should be updated to 1-20 instead of 1-150.
	                     * - endCount variable contains the exact number of records and will only be defined, if
	                     * search count is lesser than current pagination sequence.
	                     */
	                    if (filterObj.ChunkNumber === 1) {
	                        vm.disableLeftBtn = true;
	                    }
	                    if (endCount) {
	                        vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfProductsPerChunk + 1) + '-' + ((filterObj.ChunkNumber - 1) * vm.numberOfProductsPerChunk + endCount) + ')';
	                        if (endCount < vm.numberOfProductsPerChunk) {
	                            vm.disableRightBtn = true;
	                        }
	                    } else {
	                        vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfProductsPerChunk + 1) + '-' + (filterObj.ChunkNumber * vm.numberOfProductsPerChunk) + ')';
	                    }
	                }
	
	                vm.getActiveClass = function(id) {
	                    if ($stateParams.id === id) {
	                        return true;
	                    } else {
	                        return false;
	                    }
	                };
	
	                $scope.$on('destroy', function() {
	                    deRegisterFunc();
	                    pLDeRegisterFunc();
	                    vm = null;
	                });
	
	                vm.loadPricePipelineRulesetDetails = function(toBeLoadedPrs) {
	                    pricePipelineRulesetCommonService.setSelectedPRS(angular.copy(toBeLoadedPrs));
	                    $state.go('app.pricePipelineRuleset.details', {
	                        id: toBeLoadedPrs.id
	                    });
	                };
	            };
	
	            pricePipelineRulesetsListingController.$inject = [
	                '$scope',
	                'applicationService',
	                'systemConstants',
	                '$state',
	                '$stateParams',
	                'i18nService',
	                'remoteService',
	                'pricePipelineRulesetCommonService',
	                'pricePipelineRulesetConstants'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {},
	                controller: pricePipelineRulesetsListingController,
	                controllerAs: 'vm',
	                bindToController: {
	                    searchText: '='
	                },
	                template: __webpack_require__(785),
	            };
	        }
	    ];
	})();


/***/ }),
/* 785 */
/***/ (function(module, exports) {

	module.exports = "<header>\n    <h4>{{::vm.labels.AllPricePipelineRuleSets}}</h4>\n    <div class=\"search\">\n        <form ng-submit=\"vm.searchPriceRulesets()\" novalidate>\n            <div class=\"search-input-container\">\n                <div class=\"input-group\">\n                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                    <label class=\"ng-binding\">Search</label>\n                </div>\n            </div>\n        </form>\n    </div>\n</header>\n<div data-ng-if=\"vm.priceRulesets.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n    {{::vm.labels.NoMatchingPricePipelineRuleSets}} <span><b>{{vm.searchedStr}}</b></span>\n</div>\n<div data-ng-if=\"vm.priceRulesets.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n    {{::vm.labels.MaxSQLSizeExceedMessage}}\n</div>\n<div class=\"list-table\">\n    <table>\n        <tbody>\n            <tr ng-repeat=\"item in vm.priceRulesets track by item.id\" ng-click=\"vm.loadPricePipelineRulesetDetails(item)\" ng-class=\"{active: vm.getActiveClass(item.id) === true}\">\n                <td title=\"{{item.name}}\">\n                    {{::item.name }}\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<div class=\"pagination price-rule-sets-list-pagination\">\n    <div class=\"place price-rule-sets-list-place\">\n        {{vm.paginationCenterText}}\n    </div>\n    <div class=\"next-prev\">\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getPriceRulesets('previous')\">\n            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n        </button>\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getPriceRulesets('next')\">\n            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n        </button>\n    </div>\n</div>\n"

/***/ }),
/* 786 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.pricePipelineRuleset.common.services', [])
	        .service('pricePipelineRulesetCommonService', __webpack_require__(787));
	        
	})();


/***/ }),
/* 787 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var pricePipelineRulesetCommonServices = function(systemConstants, moment, remoteService, $q) {
	
	        var dummyData = [];
	
	        function Pipeline(data) {
	            this.id = dummyData.length.toString();
	            this.name = `${data.name} Pipeline`;
	            this.sequence = data.sequence;
	            this.isActive = data.isActive;
	            this.applicationLevel = data.applicationLevel;
	            this.applicationMethod = `${data.name} Application`;
	            this.PriceRuleDOs = [];
	            this.getRuleType = num => {
	                if (num < 4)
	                    return 'Condition';
	                else if (num < 6)
	                    return 'Dimension';
	                else if (num < 7)
	                    return 'Volume';
	                else if (num < 8)
	                    return 'Inclusion';
	                else
	                    return '?';
	            }
	            for (let i = 1; i < 8; i++) {
	                this.PriceRuleDOs.push({
	                    PriceRuleSO: {
	                        Name: `${data.name} Rule 0${i}`,
	                        Apttus_Config2__RuleType__c: this.getRuleType(i)
	                    }
	                });
	            };
	        }
	
	        dummyData.push(new Pipeline({
	            name: 'Hardware',
	            sequence: 1,
	            isActive: true,
	            applicationLevel: 'Line Item'
	        }));
	        dummyData.push(new Pipeline({
	            name: 'Software',
	            sequence: 1,
	            isActive: true,
	            applicationLevel: 'Line Item'
	        }));
	        dummyData.push(new Pipeline({
	            name: 'Service',
	            sequence: 2,
	            isActive: true,
	            applicationLevel: 'Bundle'
	        }));
	        dummyData.push(new Pipeline({
	            name: 'Programming',
	            sequence: 2,
	            isActive: false,
	            applicationLevel: 'Line Item'
	        }));
	        dummyData.push(new Pipeline({
	            name: 'Subscription',
	            sequence: 1,
	            isActive: false,
	            applicationLevel: 'Bundle'
	        }));
	        dummyData.push(new Pipeline({
	            name: 'Test',
	            sequence: 3,
	            isActive: true,
	            applicationLevel: 'Line Item'
	        }));
	
	
	        // var dummyData = [
	        //     {
	        //         id: '0',
	        //         name: 'Hardware Pipeline',
	        //         sequence: 1,
	        //         isActive: true,
	        //         applicationLevel: 'Line Item',
	        //         applicationMethod: 'Hardware Application',
	        //         PriceRuleDOs: [
	        //             {
	        //                 PriceRuleSO: {
	        //                     Name: 'Hardware Rule 01',
	        //                     Apttus_Config2__RuleType__c: 'Condition'
	        //                 }
	        //             },
	        //             {
	        //                 PriceRuleSO: {
	        //                     Name: 'Hardware Rule 02',
	        //                     Apttus_Config2__RuleType__c: 'Condition'
	        //                 }
	        //             },
	        //             {
	        //                 PriceRuleSO: {
	        //                     Name: 'Hardware Rule 03',
	        //                     Apttus_Config2__RuleType__c: 'Condition'
	        //                 }
	        //             },
	        //             {
	        //                 PriceRuleSO: {
	        //                     Name: 'Hardware Rule 04',
	        //                     Apttus_Config2__RuleType__c: 'Dimension'
	        //                 }
	        //             },
	        //             {
	        //                 PriceRuleSO: {
	        //                     Name: 'Hardware Rule 05',
	        //                     Apttus_Config2__RuleType__c: 'Dimension'
	        //                 }
	        //             },
	        //             {
	        //                 PriceRuleSO: {
	        //                     Name: 'Hardware Rule 06',
	        //                     Apttus_Config2__RuleType__c: 'Volume'
	        //                 }
	        //             },
	        //             {
	        //                 PriceRuleSO: {
	        //                     Name: 'Hardware Rule 07',
	        //                     Apttus_Config2__RuleType__c: 'Inclusion'
	        //                 }
	        //             }
	        //         ]
	        //     },
	        //     {
	        //         id: '1',
	        //         name: 'Software Pipeline',
	        //         sequence: 1,
	        //         isActive: true,
	        //         applicationLevel: 'Line Item',
	        //         applicationMethod: 'Software Application'
	        //     },
	        //     {
	        //         id: '2',
	        //         name: 'Service Pipeline',
	        //         sequence: 2,
	        //         isActive: true,
	        //         applicationLevel: 'Line Item',
	        //         applicationMethod: 'Service Application'
	        //     },
	        //     {
	        //         id: '3',
	        //         name: 'Programming Pipeline',
	        //         sequence: 2,
	        //         isActive: false,
	        //         applicationLevel: 'Line Item',
	        //         applicationMethod: 'Programming Application'
	        //     },
	        //     {
	        //         id: '4',
	        //         name: 'Subscription Pipeline',
	        //         sequence: 1,
	        //         isActive: false,
	        //         applicationLevel: 'Line Item',
	        //         applicationMethod: 'Subscription Application'
	        //     },
	        //     {
	        //         id: '5',
	        //         name: 'Test Pipeline',
	        //         sequence: 1,
	        //         isActive: true,
	        //         applicationLevel: 'Line Item',
	        //         applicationMethod: 'Test Application'
	        //     }
	        // ];
	
	
	
	
	        var filter = {},
	            selectedPRS = {},
	            completePrs = {},
	            priceRuleset = [],
	            dateFormat = 'MM/DD/YYYY',
	            metadata = [];
	
	        /* 
	         * Converts a date in string format or in milliseconds to date to format to be used
	         * in datepicker component
	         */
	        function formatDate(date) {
	            if (angular.isDefined(date)) {
	                if (date === null || date === '') {
	                    date = null;
	                } else if (angular.isString(date)) {
	                    date = new Date(date);
	                } else {
	                    date = new Date(date);
	                }
	            }
	            return date ? moment(date).format(dateFormat) : '';
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function setSelectedPRS(obj) {
	            selectedPRS = obj;
	        }
	
	        function getSelectedPRS() {
	            return selectedPRS;
	        }
	
	        function processAllPriceRulesetResponse(prsItems) {
	            var response = [];
	            if (prsItems && prsItems.length > 0) {
	                for (var i = 0; i < prsItems.length; i++) {
	                    var tempItem = prsItems[i].PriceRulesetSO,
	                        obj = {};
	                    obj['name'] = tempItem.Name;
	                    obj['id'] = tempItem.Id;
	                    obj['sequence'] = tempItem[getPrefixedAttribute('Sequence__c')];
	                    obj['isActive'] = tempItem[getPrefixedAttribute('Active__c')];
	                    obj['applicationLevel'] = tempItem[getPrefixedAttribute('UseType__c')];
	                    obj['applicationMethod'] = tempItem[getPrefixedAttribute('ApplicationMethod__c')];
	
	                    response.push(obj);
	                }
	            }
	            return response;
	        }
	
	        function loadAllPriceRulesets(requestObj) {
	            var defer = $q.defer();
	            // remoteService.getAllPriceRulesets(requestObj)
	            //     .then(function(response) {
	            //         var processedData = processAllPriceRulesetResponse(response.PriceRulesetDOs);
	            //         setPriceRulesets(processedData);
	            //         defer.resolve(true);
	            //     }, function(reason) {
	            //         defer.reject(true);
	            //     });
	            // return defer.promise;
	            return $q.when(setPriceRulesets(dummyData));
	        }
	
	        function setPriceRulesets(arr) {
	            priceRuleset = [];
	            priceRuleset = angular.copy(arr);
	        }
	
	        function getPriceRulesets() {
	            return priceRuleset;
	        }
	
	        function processAllPriceListResponse(items) {
	            var response = [];
	            for (var i = 0; i < items.length; i++) {
	                response.push({
	                    Name: items[i].PriceListSO.Name,
	                    Id: items[i].PriceListSO.Id
	                });
	            }
	            return response;
	        }
	
	        function searchPriceList(searchText) {
	            var defer = $q.defer(),
	                requestObj = {
	                    ChunkNumber: 1,
	                    NumberOfRecordsPerChunk: 50,
	                    SearchString: searchText
	                };
	            remoteService.getAllPriceLists(requestObj)
	                .then(function(response) {
	                    var processedData = processAllPriceListResponse(response.PriceListDOs);
	                    defer.resolve(processedData);
	                }, function(reason) {
	                    defer.reject(true);
	                });
	            return defer.promise;
	        }
	
	        function getSampleNewPriceRuleset() {
	            var newPriceRuleset = {
	                name: '',
	                sequence: '',
	                isActive: true,
	                stopProcessingMoreRules: false,
	                effectiveDate: undefined,
	                expirationDate: undefined,
	                description: '',
	                category: '',
	                chargeType: '',
	                applicationLevel: '',
	                applicationMethod: '',
	                productCategory: {
	                    autocomplete: {
	                        querySearch: searchProductCategory,
	                        displayName: 'Name',
	                        displayLabel: 'Label'
	                    }
	                },
	                productGroup: {
	                    autocomplete: {
	                        querySearch: searchProductGroup,
	                        displayName: 'Name'
	                    }
	                },
	                priceList: {
	                    autocomplete: {
	                        querySearch: searchPriceList,
	                        displayName: 'Name'
	                    }
	                },
	                productFamily: '',
	                enableCurrency: false,
	                enableDateRange: false,
	                currency: ''
	            };
	            return newPriceRuleset;
	        }
	
	        function setFilter(obj) {
	            filter = obj;
	        }
	
	        function getFilter() {
	            return filter;
	        }
	
	        function getSObjectPicklistFields(sObjectName, fields) {
	            var defer = $q.defer(),
	                picklistFieldNames;
	            sObjectName = getPrefixedAttribute(sObjectName);
	            if (fields && fields.length) {
	                for (var i = 0; i < fields.length; i++) {
	                    fields[i] = getPrefixedAttribute(fields[i]);
	                }
	                picklistFieldNames = fields;
	            } else {
	                picklistFieldNames = null;
	            }
	            remoteService.getSObjectPicklistFields(sObjectName, picklistFieldNames)
	                .then(function(response) {
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function extractExpression(chargeTypeCriteria) {
	            var chargeTypeCriteriaObj = ((chargeTypeCriteria !== undefined && chargeTypeCriteria !== '') ? JSON.parse(chargeTypeCriteria) : '');
	            var chargeTypeExpression = '';
	            if (chargeTypeCriteriaObj) {
	                chargeTypeExpression = chargeTypeCriteriaObj.exprStr;
	            } else {
	                chargeTypeExpression = '';
	            }
	            return chargeTypeExpression;
	        }
	
	        function preparePriceRuleSetDetails(response) {
	            var tempItem = response.PriceRulesetSO,
	                obj = {};
	            obj['name'] = tempItem.Name;
	            obj['id'] = tempItem.Id;
	            obj['sequence'] = tempItem[getPrefixedAttribute('Sequence__c')];
	            obj['isActive'] = tempItem[getPrefixedAttribute('Active__c')];
	            obj['description'] = tempItem[getPrefixedAttribute('Description__c')] || '';
	            obj['stopProcessingMoreRules'] = tempItem[getPrefixedAttribute('StopProcessingMoreRules__c')];
	            obj['effectiveDate'] = tempItem[getPrefixedAttribute('EffectiveDate__c')];
	            obj['expirationDate'] = tempItem[getPrefixedAttribute('ExpirationDate__c')];
	            obj['category'] = tempItem[getPrefixedAttribute('Category__c')] || '';
	            obj['chargeType'] = tempItem[getPrefixedAttribute('ChargeType__c')] || '';
	            obj['applicationLevel'] = tempItem[getPrefixedAttribute('UseType__c')] || '';
	            obj['applicationMethod'] = tempItem[getPrefixedAttribute('ApplicationMethod__c')] || '';
	            obj['rulesetCriteria'] = tempItem[getPrefixedAttribute('Criteria__c')] || '';
	            var productCategory = tempItem[getPrefixedAttribute('ProductCategory__c')] || '';
	            obj['productCategory'] = {
	                'autocomplete': {
	                    querySearch: searchProductCategory,
	                    displayName: 'Name',
	                    displayLabel: 'Label'
	                }
	            };
	            if (productCategory) {
	                obj['productCategory'].autocomplete.selectedItem = {
	                    Id: productCategory,
	                    Name: productCategory
	                }
	            }
	            var productGroup = tempItem[getPrefixedAttribute('ProductGroupId__r')] || '';
	            if (productGroup) {
	                obj['productGroup'] = {
	                    'autocomplete': {
	                        querySearch: searchProductGroup,
	                        displayName: 'Name',
	                        selectedItem: {
	                            Id: productGroup.Id,
	                            Name: productGroup.Name
	                        }
	                    }
	                };
	            } else {
	                obj['productGroup'] = {
	                    'autocomplete': {
	                        querySearch: searchProductGroup,
	                        displayName: 'Name'
	                    }
	                };
	            }
	
	            var priceList = tempItem[getPrefixedAttribute('PriceListId__r')] || '';
	            if (priceList) {
	                obj['priceList'] = {
	                    'autocomplete': {
	                        querySearch: searchPriceList,
	                        displayName: 'Name',
	                        selectedItem: {
	                            Id: priceList.Id,
	                            Name: priceList.Name
	                        }
	                    }
	                };
	            } else {
	                obj['priceList'] = {
	                    'autocomplete': {
	                        querySearch: searchPriceList,
	                        displayName: 'Name'
	                    }
	                };
	            }
	
	            obj['productFamily'] = tempItem[getPrefixedAttribute('ProductFamily__c')] || '';
	            obj['enableCurrency'] = tempItem[getPrefixedAttribute('EnableCurrency__c')];
	            obj['enableDateRange'] = tempItem[getPrefixedAttribute('EnableDateRange__c')];
	            if (obj.enableCurrency) {
	                obj.currency = tempItem.CurrencyIsoCode;
	            }
	            return obj;
	        }
	
	        function searchProductGroup(searchText) {
	            var defer = $q.defer();
	            remoteService.searchProductGroups(searchText || '')
	                .then(function(response) {
	                    defer.resolve(JSON.parse(response));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return defer.promise;
	        }
	
	        function prepareProductCategoryList(items) {
	            var response = [];
	
	            for (var i = 0; i < items.length; i++) {
	                var hierarchy = items[i][getPrefixedAttribute('HierarchyId__r')];
	                var ancestor = items[i][getPrefixedAttribute('AncestorId__r')];
	                var productCategory = {
	                    Name: items[i].Name,
	                    Id: items[i].Id
	                };
	                if (hierarchy && hierarchy.Name) {
	                    productCategory.Label = hierarchy.Name;
	                }
	                if (ancestor && ancestor.Name) {
	                    if (productCategory.Label !== ancestor.Name)
	                        productCategory.Label = productCategory.Label + " <i class='fa fa-angle-double-right'></i> " + ancestor.Name;
	                }
	                response.push(productCategory);
	            }
	            return response;
	        }
	
	        function searchProductCategory(searchText) {
	            var request = {
	                ChunkNumber: 1,
	                NumberOfCategoriesPerChunk: 50,
	                PriceListId: null,
	                SearchString: searchText || '',
	                SortDirection: "ASC",
	                SortField: "Name"
	            };
	            var defer = $q.defer();
	            remoteService.getAllCategoriesForPriceList(request).then(function(response) {
	                defer.resolve(prepareProductCategoryList(response.CategoryHierarchySOs));
	            }, function(reason) {
	                deferQ.reject(reason);
	            });
	            return defer.promise;
	        }
	
	        function getSelectedPricePipelineRulesetDetails(prsId, returnEntireObj) {
	            // var defer = $q.defer(),
	            //     requestObj = {
	            //         "PriceRulesetIds": [prsId],
	            //         "IncludeMetadataForPriceRuleset": true,
	            //         "IncludeMetadataForPriceRuleEntry": true,
	            //         "IncludeMetadataForPriceRule": true
	            //     },
	            //     response = {};
	            // remoteService.getPriceRulesetDetails(requestObj)
	            //     .then(function(response) {
	            //         setMetadata(response.PriceRulesetMetadata);
	            //         if (prsId !== 'new') {
	            //             var extractedDetails = preparePriceRuleSetDetails(response.PriceRulesetDOs[0]);
	            //             setSelectedPRS(extractedDetails);
	            //             setSelectedCompletePRS(response.PriceRulesetDOs[0]);
	            //             if (returnEntireObj) {
	            //                 defer.resolve(response.PriceRulesetDOs[0]);
	            //             } else {
	            //                 defer.resolve(extractedDetails);
	            //             }
	            //         } else {
	            //             defer.resolve(getSampleNewPriceRuleset());
	            //         }
	
	            //     }, function(reason) {
	            //         defer.reject(reason);
	            //     });
	
	            // return defer.promise;
	            return $q.when(dummyData.filter(item => item.id === prsId)[0]);
	        }
	
	        function setMetadata(items) {
	            metadata = items;
	        }
	
	        function getMetadata() {
	            return metadata;
	        }
	
	        function preparePrsRequestObj(obj, hasOriginalObj) {
	            /* Prepare request obj for PriceRulesetSO */
	            var priceRuleSet = {},
	                reqObj = {
	                    PriceRulesetDOs: [{
	                        "PriceRulesetSO": {},
	                        "PriceRuleDOs": []
	                    }]
	                };
	            if (hasOriginalObj) {
	                priceRuleSet = obj.PriceRulesetSO;
	                delete priceRuleSet.CreatedBy;
	                delete priceRuleSet.CreatedById;
	                delete priceRuleSet.CreatedDate;
	                delete priceRuleSet.LastModifiedBy;
	                delete priceRuleSet.LastModifiedById;
	                delete priceRuleSet.LastModifiedDate;
	                delete priceRuleSet.LastReferencedDate;
	                delete priceRuleSet.LastViewedDate;
	                delete priceRuleSet.Owner;
	                delete priceRuleSet.OwnerId;
	                delete priceRuleSet.SystemModstamp;
	                delete priceRuleSet[getPrefixedAttribute('PriceListId__r')];
	                delete priceRuleSet[getPrefixedAttribute('ProductGroupId__r')];
	                delete priceRuleSet[getPrefixedAttribute('ProductCategoryId__r')];
	
	                reqObj.PriceRulesetDOs[0].PriceRulesetSO = priceRuleSet;
	            } else {
	                priceRuleSet = obj.PriceRulesetSO;
	                var priceRuleSetSO = {};
	
	                priceRuleSetSO.Name = priceRuleSet.name;
	                if (priceRuleSet.id) {
	                    priceRuleSetSO.Id = priceRuleSet.id;
	                }
	                priceRuleSetSO[getPrefixedAttribute('Sequence__c')] = priceRuleSet.sequence;
	                priceRuleSetSO[getPrefixedAttribute('Active__c')] = priceRuleSet.isActive;
	                priceRuleSetSO[getPrefixedAttribute('Description__c')] = priceRuleSet.description;
	                priceRuleSetSO[getPrefixedAttribute('StopProcessingMoreRules__c')] = priceRuleSet.stopProcessingMoreRules;
	                priceRuleSetSO[getPrefixedAttribute('EffectiveDate__c')] = priceRuleSet.effectiveDate;
	                priceRuleSetSO[getPrefixedAttribute('ExpirationDate__c')] = priceRuleSet.expirationDate;
	                priceRuleSetSO[getPrefixedAttribute('Category__c')] = priceRuleSet.category;
	                priceRuleSetSO[getPrefixedAttribute('ChargeType__c')] = priceRuleSet.chargeType;
	                priceRuleSetSO[getPrefixedAttribute('UseType__c')] = priceRuleSet.applicationLevel;
	                priceRuleSetSO[getPrefixedAttribute('ApplicationMethod__c')] = priceRuleSet.applicationMethod;
	                priceRuleSetSO[getPrefixedAttribute('Criteria__c')] = priceRuleSet.rulesetCriteria;
	
	                if (priceRuleSet.productCategory.autocomplete && priceRuleSet.productCategory.autocomplete.selectedItem && priceRuleSet.productCategory.autocomplete.selectedItem.Id) {
	                    priceRuleSetSO[getPrefixedAttribute('ProductCategory__c')] = priceRuleSet.productCategory.autocomplete.selectedItem.Name;
	                } else {
	                    priceRuleSetSO[getPrefixedAttribute('ProductCategory__c')] = '';
	                }
	
	                if (priceRuleSet.productGroup.autocomplete && priceRuleSet.productGroup.autocomplete.selectedItem && priceRuleSet.productGroup.autocomplete.selectedItem.Id) {
	                    priceRuleSetSO[getPrefixedAttribute('ProductGroupId__c')] = priceRuleSet.productGroup.autocomplete.selectedItem.Id;
	                } else {
	                    priceRuleSetSO[getPrefixedAttribute('ProductGroupId__c')] = '';
	                }
	
	                if (priceRuleSet.priceList.autocomplete && priceRuleSet.priceList.autocomplete.selectedItem && priceRuleSet.priceList.autocomplete.selectedItem.Id) {
	                    priceRuleSetSO[getPrefixedAttribute('PriceListId__c')] = priceRuleSet.priceList.autocomplete.selectedItem.Id;
	                } else {
	                    priceRuleSetSO[getPrefixedAttribute('PriceListId__c')] = '';
	                }
	                priceRuleSetSO[getPrefixedAttribute('ProductFamily__c')] = priceRuleSet.productFamily;
	                priceRuleSetSO[getPrefixedAttribute('EnableCurrency__c')] = priceRuleSet.enableCurrency;
	                if (priceRuleSet.enableCurrency) {
	                    priceRuleSetSO.CurrencyIsoCode = priceRuleSet.currency;
	                }
	                priceRuleSetSO[getPrefixedAttribute('EnableDateRange__c')] = priceRuleSet.enableDateRange;
	                reqObj.PriceRulesetDOs[0].PriceRulesetSO = priceRuleSetSO;
	            }
	
	
	            /* Prepare request obj for PriceRuleDOs */
	            if (obj.PriceRuleDOs && obj.PriceRuleDOs.length > 0) {
	                for (var i = 0; i < obj.PriceRuleDOs.length; i++) {
	                    var priceRuleDO = obj.PriceRuleDOs[i],
	                        priceRuleSO = priceRuleDO.PriceRuleSO,
	                        priceRuleEntrySOs = priceRuleDO.PriceRuleEntrySOs;
	                    delete priceRuleSO.CreatedDate;
	                    delete priceRuleSO.CreatedBy;
	                    delete priceRuleSO.CreatedById;
	                    delete priceRuleSO.LastModifiedDate;
	                    delete priceRuleSO.LastModifiedBy;
	                    delete priceRuleSO.LastModifiedById;
	                    delete priceRuleSO.LastReferencedDate;
	                    delete priceRuleSO.LastViewedDate;
	                    delete priceRuleSO.SystemModstamp;
	                    delete priceRuleDO.selected;
	                    delete priceRuleSO[getPrefixedAttribute('Dimension1Id__r')];
	                    delete priceRuleSO[getPrefixedAttribute('RulesetId__r')];
	
	                    for (var j = 0; j < priceRuleEntrySOs.length; j++) {
	                        var priceRuleEntrySO = priceRuleEntrySOs[j];
	                        delete priceRuleEntrySO.CreatedDate;
	                        delete priceRuleEntrySO.CreatedBy;
	                        delete priceRuleEntrySO.CreatedById;
	                        delete priceRuleEntrySO.LastModifiedDate;
	                        delete priceRuleEntrySO.LastModifiedById;
	                        delete priceRuleEntrySO.SystemModstamp;
	                        delete priceRuleEntrySO[getPrefixedAttribute('PriceRuleId__r')];
	                        delete priceRuleEntrySO[getPrefixedAttribute('ProductGroupId__r')];
	                    }
	                }
	                reqObj.PriceRulesetDOs[0].PriceRuleDOs = obj.PriceRuleDOs;
	            }
	
	            return reqObj;
	        }
	
	        function createPriceRuleset(prsItem) {
	            var defered = $q.defer(),
	                requestObj = preparePrsRequestObj(prsItem);
	            remoteService.createPriceRuleset(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	
	            return defered.promise;
	        }
	
	        function updatePriceRuleset(prsItem, hasOriginalObj) {
	            var defered = $q.defer(),
	                requestObj = preparePrsRequestObj(prsItem, hasOriginalObj);;
	            remoteService.updatePriceRuleset(requestObj)
	                .then(function(response) {
	                    defered.resolve(response);
	                }, function(reason) {
	                    defered.reject(reason);
	                });
	
	            return defered.promise;
	        }
	
	        function preparePF(arr) {
	            var response = [];
	            if (arr) {
	                for (var i = 0; i < arr.length; i++) {
	                    response.push({
	                        Name: arr[i],
	                        Id: arr[i]
	                    });
	                }
	            }
	            return response;
	        }
	
	        function searchProductFamily(searchText) {
	            var deferQ = $q.defer();
	            remoteService.searchProductFamily(searchText)
	                .then(function(response) {
	                    deferQ.resolve(preparePF(JSON.parse(response)));
	                }, function(reason) {
	                    deferQ.reject(reason);
	                });
	            return deferQ.promise;
	        }
	
	        function setSelectedCompletePRS(item) {
	            completePrs = item;
	        }
	
	        function getSelectedCompletePRS() {
	            return completePrs;
	        }
	
	        var service = {
	            setMetadata: setMetadata,
	            getMetadata: getMetadata,
	            setFilter: setFilter,
	            getFilter: getFilter,
	            getPriceRulesets: getPriceRulesets,
	            setPriceRulesets: setPriceRulesets,
	            setSelectedPRS: setSelectedPRS,
	            getSelectedPRS: getSelectedPRS,
	            loadAllPriceRulesets: loadAllPriceRulesets,
	            getSampleNewPriceRuleset: getSampleNewPriceRuleset,
	            getSObjectPicklistFields: getSObjectPicklistFields,
	            getSelectedPricePipelineRulesetDetails: getSelectedPricePipelineRulesetDetails,
	            preparePriceRuleSetDetails: preparePriceRuleSetDetails,
	            extractExpression: extractExpression,
	            createPriceRuleset: createPriceRuleset,
	            updatePriceRuleset: updatePriceRuleset,
	            searchProductGroup: searchProductGroup,
	            searchProductCategory: searchProductCategory,
	            searchProductFamily: searchProductFamily,
	            setSelectedCompletePRS: setSelectedCompletePRS,
	            getSelectedCompletePRS: getSelectedCompletePRS
	        };
	        return service;
	    };
	
	    pricePipelineRulesetCommonServices.$inject = [
	        'systemConstants',
	        'moment',
	        'remoteService',
	        '$q'
	    ];
	
	    module.exports = pricePipelineRulesetCommonServices;
	})();


/***/ }),
/* 788 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.pricePipelineRuleset.common.filters', [])
	        .filter('pricePipelineRulesetUserMessageService', __webpack_require__(789));
	
	})();


/***/ }),
/* 789 */
372,
/* 790 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.pricePipelineRuleset.list',[])
	        .service('pricePipelineRulesetListService', __webpack_require__(791))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.pricePipelineRuleset.list', {
	                parent: 'app.pricePipelineRuleset',
	                url: '/list',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(792),
	                        controller: __webpack_require__(793),
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 791 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var pricePipelineRulesetListService = function(remoteService, $q) {
	
	
	        function getAllPriceLists(request) {
	            var defer = $q.defer();
	            /* This API doesnt support sorting by any column */
	            remoteService.getAllPriceLists(request).then(function(response) {
	                defer.resolve(response);
	            }, function(reason) {
	                defer.reject(reason);
	            });
	            return defer.promise;
	        }
	
	        var service = {
	            getAllPriceLists: getAllPriceLists
	        };
	
	        return service;
	    };
	    pricePipelineRulesetListService.$inject = [
	        'remoteService',
	        '$q'
	    ];
	
	    module.exports = pricePipelineRulesetListService;
	})();


/***/ }),
/* 792 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"price-rule-set-list-container\">\n    <div class=\"two-col-layout auto-height\">\n        <div class=\"auto-height col-lg-12 noPadding list-table-container\">\n            <div class=\"list-header\">\n                <!-- Search Bar starts -->\n                <div class=\"row noMargin search-container title-bar\">\n                    <div class=\"price-rule-set-search\">\n                        <div class=\"col-xs-5\">\n                            <div class=\"search-box-container\">\n                                <span class=\"fa fa-filter pointerEventsNone\" disabled data-ng-click=\"vm.resetPagination();\"></span>\n                                <i class=\"search-icon material-icons\" data-ng-click=\"vm.resetPagination()\">search</i>\n                                <form ng-submit=\"vm.resetPagination()\">\n                                    <input type=\"text\" placeholder=\"Search Price Pipeline Ruleset\" class=\"search-box\" data-ng-model=\"vm.searchString\">\n                                    <i class=\"clear-icon material-icons\" data-ng-if=\"vm.searchString\" data-ng-click=\"vm.clearSearchInput()\">clear</i>\n                                </form>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-3\"></div>\n                        <div class=\"col-xs-4 text-right price-rule-set-btn-group\">\n                            <div class=\"listBtn\">\n                                <button type=\"button\" class=\"slds-button slds-button_brand\" data-ng-click=\"vm.createNewPricePipelineRuleset()\">{{vm.labels.NewPricePipelineRuleset}}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div preloader add-to-element=\"true\" loading-text=\"vm.loadingText\" data-ng-if=\"vm.showLoader === true\"></div>\n            <div data-ng-if=\"vm.pricePipelineRulesets.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{::vm.labels.NoMatchingPricePipelineRuleset}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.pricePipelineRulesets.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{::vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"list-table\">\n                <table ng-table=\"vm.tableParams\" class=\"table ng-table-resizable-columns\">\n                    <thead>\n                        <tr>\n                            <th ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                                <span ng-click=\"vm.tableHeaderClick(column);\">\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-descent'\">arrow_downward</i>\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-ascent'\">arrow_upward</i> \n                                    {{column.FieldLabel}}\n                                </span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"pricePipelineRuleset in vm.pricePipelineRulesets track by pricePipelineRuleset.id\">\n                            <td data-ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                                <span data-ng-if=\"::column.FieldName === 'name'\">\n                                    <a data-ng-click=\"vm.loadPricePipelineRulesetDetails(pricePipelineRuleset, $event)\" ng-bind-html=\"::pricePipelineRuleset[column.FieldName]\" class=\"clickable-item\"></a>\n                                </span>\n                                <span data-ng-if=\"::column.FieldName !== 'name'\" ng-bind-html=\"::vm.getFormattedContent(pricePipelineRuleset,column)\"></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"pagination-container text-center\" data-ng-if=\"vm.showPagination === true\">\n                <div class=\"btn-group dropup text-right\" role=\"group\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        {{vm.labels.RecordsPerPage | userMessage:vm.numberOfProductsPerChunk}}\n                        <span class=\"caret\"></span>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 50\">50</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 100\">100</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 150\">150</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 200\">200</a></li>\n                    </ul>\n                </div>\n                <div class=\"navigation-control\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProduct('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                    <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProduct('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 793 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var pricePipelineRulesetListController = function($scope, $state, priceListService, $filter, NgTableParams, $timeout, i18nService, systemConstants, pricePipelineRulesetConstants, cpqAdminConstants,
	        pricePipelineRulesetCommonService, $location) {
	        var vm = this;
	
	        vm.labels = i18nService.CustomLabel;
	        var prefix = systemConstants.nsPrefix || '';
	        vm.tableColumnConfig = [{
	            "FieldLabel": vm.labels.Name,
	            "fieldName": 'Name',
	            "FieldName": "name",
	            "Type": "STRING",
	            "showSortIcon": true,
	            "sortIconCls": 'st-sort-ascent'
	
	        }, {
	            "FieldLabel": vm.labels.Sequence,
	            "fieldName": (prefix + 'Sequence__c'),
	            "FieldName": "sequence",
	            "Type": "quantity",
	
	        }, {
	            "FieldLabel": vm.labels.IsActive,
	            "fieldName": (prefix + 'Active__c'),
	            "FieldName": "isActive",
	            "Type": "BOOLEAN",
	
	        }, {
	            "FieldLabel": vm.labels.ApplicationLevel,
	            "fieldName": (prefix + 'UseType__c'),
	            "FieldName": "applicationLevel",
	            "Type": "STRING"
	        }, {
	            "FieldLabel": vm.labels.ApplicationMethod,
	            "fieldName": (prefix + 'ApplicationMethod__c'),
	            "FieldName": "applicationMethod",
	            "Type": "STRING",
	
	        }];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	        /* 
	         * - vm.searchString : is the value present in the search field at any point of time.
	         * - vm.searchedStr : is the value user has entered and either clicked on search icon or hit
	         * enter / return  key.
	         */
	        vm.searchedStr = '';
	        vm.numberOfProductsPerChunk = pricePipelineRulesetConstants.numberOfProductsPerChunk;
	
	        vm.pageNumber = 0;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = false;
	        vm.showLoader = false;
	        vm.loadingText = vm.labels.LoadingText;
	        vm.isMaxSQLSizeExceed = false;
	        vm.showPagination = true;
	        updateCenterBtnText();
	        var sortField, sortDirection, pageNumber = 1,
	            configType = '';
	
	        vm.getProduct = function(type) {
	            if (type === 'next') {
	                pageNumber = pageNumber + 1;
	                vm.pageNumber++;
	                if (vm.pageNumber !== 0) {
	                    vm.disableLeftBtn = false;
	                }
	                loadPricePipelineRuleset();
	            } else {
	                pageNumber = pageNumber - 1;
	                vm.pageNumber--;
	                if (vm.pageNumber === 0) {
	                    vm.disableLeftBtn = true;
	                }
	                loadPricePipelineRuleset();
	            }
	        };
	
	        function updateCenterBtnText(endCount) {
	            /* 
	             * - Search result might return lesser number of records than current pagination count.
	             * e.g. current pagination is : 1-150, but search returned only 20 records.
	             * - Then pagination should be updated to 1-20 instead of 1-150.
	             * - endCount variable contains the exact number of records and will only be defined, if
	             * search count is lesser than current pagination sequence.
	             */
	            if (endCount) {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfProductsPerChunk + 1) + '-' + (vm.pageNumber * vm.numberOfProductsPerChunk + endCount) + ')';
	            } else {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfProductsPerChunk + 1) + '-' + ((vm.pageNumber + 1) * vm.numberOfProductsPerChunk) + ')';
	            }
	        };
	
	        vm.resetPagination = function(resetPageNumber) {
	            vm.showPanel = false;
	            if (resetPageNumber) {
	                vm.pageNumber = 0;
	                pageNumber = 1;
	            }
	            vm.pageNumber = 0;
	            pageNumber = 1;
	            vm.disableLeftBtn = true;
	            updateCenterBtnText();
	            loadPricePipelineRuleset();
	        };
	
	        var deRegisterFunc = $scope.$watch('vm.numberOfProductsPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                vm.resetPagination(false);
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            prsDeRegisterFunc();
	            vm = null;
	        });
	
	
	        vm.getFormattedContent = function(priceList, column) {
	            var modifiedValue, precision,
	                fieldType = column.Type,
	                value = priceList[column.FieldName];
	
	            if (vm.systemProperties && vm.systemProperties.PercentageFieldPrecision) {
	                precision = vm.systemProperties.PercentageFieldPrecision;
	            } else if (vm.properties && vm.properties.Precision) {
	                precision = vm.properties.Precision;
	            } else {
	                precision = 5;
	            }
	
	            switch (fieldType) {
	                case cpqAdminConstants.datetime:
	                case cpqAdminConstants.date:
	                    {
	                        modifiedValue = $filter('aptDateToString')(value);
	                        break;
	                    }
	
	                case cpqAdminConstants.boolean:
	                    {
	                        if (value) {
	                            modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	                        } else {
	                            modifiedValue = "<i class='material-icons show'>check_circle</i>";
	                        }
	                        break;
	                    }
	                case cpqAdminConstants.string:
	                case cpqAdminConstants.textarea:
	                case cpqAdminConstants.url:
	                case cpqAdminConstants.multipicklist:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	                default:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	            }
	            return modifiedValue;
	        };
	
	        function createNgTable(data, numberOfProductsPerChunk) {
	            var initialParams = {
	                count: numberOfProductsPerChunk
	            };
	            var initialSettings = {
	                counts: [],
	                paginationMaxBlocks: 0,
	                paginationMinBlocks: 0,
	                dataset: data
	            };
	            return new NgTableParams(initialParams, initialSettings);
	        }
	
	        var prsDeRegisterFunc = $scope.$watch(function() {
	            return pricePipelineRulesetCommonService.getPriceRulesets();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                processData(newValue);
	            }
	        }, true);
	
	        function processData(priceRuleSets) {
	
	            /* Used to bind to table body */
	            vm.pricePipelineRulesets = priceRuleSets;
	            vm.isMaxSQLSizeExceed = false;
	
	            if (!vm.tableParams) {
	                vm.tableParams = createNgTable(priceRuleSets, vm.numberOfProductsPerChunk);
	            }
	
	            /* 
	             * - Show 'No matching products are found for the search entry XXX', when no return
	             * return result set is empty.
	             * - Keep the user messages, until user makes a fresh search which has atleast more
	             * than 1 result item.
	             */
	            vm.showPagination = true;
	            if (priceRuleSets.length === 0 && vm.searchString !== '') {
	                vm.searchedStr = vm.searchString;
	                if (vm.pageNumber === 0) {
	                    vm.showPagination = false;
	                }
	            }
	            if (priceRuleSets.length < vm.numberOfProductsPerChunk) {
	                vm.disableRightBtn = true;
	                updateCenterBtnText(priceRuleSets.length);
	            } else {
	                vm.disableRightBtn = false;
	                updateCenterBtnText();
	            }
	
	            /* Hide the loader on success of service call */
	            vm.showLoader = false;
	
	            $timeout(function() {
	                angular.element(window).resize();
	            }, 1000);
	            document.querySelector('.list-table').scrollTop = 0;
	        }
	
	        /**
	         * - When user enters search string and hits enter, this method gets called
	         * - Updates the smart-table pagination object.
	         * - Table header click
	         */
	        function loadPricePipelineRuleset() {
	            /* Show the loader on start of service call */
	            vm.showLoader = true;
	
	            var requestObj = {
	                "SortField": sortField || 'Name',
	                "SortDirection": sortDirection || cpqAdminConstants.ASCENDING,
	                "SearchString": vm.searchString || '',
	                "NumberOfRecordsPerChunk": vm.numberOfProductsPerChunk,
	                "ChunkNumber": pageNumber
	            };
	
	            pricePipelineRulesetCommonService.loadAllPriceRulesets(requestObj)
	                .then(function(response) {
	                    if (response) {
	                        vm.showLoader = false;
	                    }
	                }, function(reason) {});
	        }
	
	        loadPricePipelineRuleset();
	        /**
	         * - Clears searc input box
	         * - Makes a service call to reload the table
	         */
	        vm.clearSearchInput = function() {
	            vm.searchString = '';
	            vm.currentPage = 1;
	            vm.showPanel = false;
	            loadPricePipelineRuleset();
	        };
	
	
	        /**
	         * - Show / Hide ascending or descending icon next to the column header when user clicks on header.
	         * - We are not using the default feature of the ngTable. It's doing local sorting and to
	         * bind to its server side sorting, configs are not available as of now.
	         */
	        vm.tableHeaderClick = function(column) {
	            sortField = column.fieldName;
	            if (!column.sortIconCls) {
	                column.sortIconCls = 'st-sort-ascent';
	            }
	            sortDirection = (column.sortIconCls === 'st-sort-ascent' ? cpqAdminConstants.DESCENDING : cpqAdminConstants.ASCENDING);
	            var columnsList = vm.tableColumnConfig;
	            for (var item in columnsList) {
	                if (column.FieldName === columnsList[item].FieldName) {
	                    columnsList[item].showSortIcon = true;
	                    columnsList[item].sortIconCls = column.sortIconCls ? (column.sortIconCls === 'st-sort-ascent' ? 'st-sort-descent' : 'st-sort-ascent') : 'st-sort-descent';
	                } else {
	                    columnsList[item].showSortIcon = false;
	                    columnsList[item].sortIconCls = false;
	                }
	            }
	            vm.resetPagination();
	        };
	
	        vm.loadPricePipelineRulesetDetails = function(pricePipelineRuleset, event) {
	            pricePipelineRulesetCommonService.setSelectedPRS(angular.copy(pricePipelineRuleset));
	            $state.go('app.pricePipelineRuleset.details', {
	                id: pricePipelineRuleset.id
	            });
	            event.preventDefault();
	        };
	
	        vm.getDetailsPageUrl = function(id) {
	            var absUrl = $location.absUrl();
	            return absUrl.replace('/priceRuleset/list', '/priceRuleset/' + id + '/details');
	        };
	
	        vm.createNewPricePipelineRuleset = function() {
	            var allPrs = pricePipelineRulesetCommonService.getPriceRulesets(),
	                newPrs = pricePipelineRulesetCommonService.getSampleNewPriceRuleset();
	            pricePipelineRulesetCommonService.setPriceRulesets(angular.copy(allPrs));
	            pricePipelineRulesetCommonService.setSelectedPRS(angular.copy(newPrs));
	            pricePipelineRulesetCommonService.setSelectedCompletePRS(angular.copy(newPrs));
	            $state.go('app.pricePipelineRuleset.details', {
	                id: 'new'
	            });
	        };
	
	    };
	
	    pricePipelineRulesetListController.$inject = [
	        '$scope',
	        '$state',
	        'priceListService',
	        '$filter',
	        'NgTableParams',
	        '$timeout',
	        'i18nService',
	        'systemConstants',
	        'pricePipelineRulesetConstants',
	        'cpqAdminConstants',
	        'pricePipelineRulesetCommonService',
	        '$location'
	    ];
	
	    module.exports = pricePipelineRulesetListController;
	
	})();


/***/ }),
/* 794 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.pricePipelineRuleset.details', [])
	        .service('detailsService', __webpack_require__(795))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.pricePipelineRuleset.details', {
	                parent: 'app.pricePipelineRuleset',
	                url: '/:id/details',
	                views: {
	                    'pricePipelineRulesetContainer': {
	                        template: __webpack_require__(796),
	                        controller: __webpack_require__(797),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    pricePipelineRulesetDetails: ['pricePipelineRulesetCommonService', '$stateParams', function(pricePipelineRulesetCommonService, $stateParams) {
	                        return pricePipelineRulesetCommonService.getSelectedPricePipelineRulesetDetails($stateParams.id);
	                    }],
	                    allPicklists: ['pricePipelineRulesetCommonService', function(pricePipelineRulesetCommonService) {
	                        return pricePipelineRulesetCommonService.getSObjectPicklistFields('PriceRuleset__c', null);
	                    }],
	                    productFamilyPicklist: ['apiCallsService', function(apiCallsService) {
	                        return apiCallsService.getSObjectPicklistFields('Product2', ['Family']);
	                    }],
	                    chargeTypePicklist: ['apiCallsService', function(apiCallsService) {
	                        return apiCallsService.getSObjectPicklistFields('PriceListItem__c', ['ChargeType__c']);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 795 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var pricePipelineRulesetDetailsService = function($q, moment, i18nService, remoteService, systemConstants, apiCallsService, pricePipelineRulesetCommonService) {
	        var prefix = systemConstants.nsPrefix || '',
	            dateFormat = 'MM/DD/YYYY',
	            allPicklists = [],
	            labels = i18nService.CustomLabel;
	
	        function formatDate(date) {
	            if (angular.isDefined(date)) {
	                if (date === null || date === '') {
	                    date = null;
	                } else if (angular.isString(date)) {
	                    date = new Date(date);
	                } else {
	                    date = new Date(date);
	                }
	            }
	            return date ? moment(date).format(dateFormat) : '';
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        function getPicklistValues(type) {
	            var response = [],
	                value = '',
	                noneVar = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                };
	            if (allPicklists.length && type) {
	                if (type.indexOf('__c') > -1) {
	                    value = getPrefixedAttribute(type);
	                } else {
	                    value = type;
	                }
	                for (var i = 0; i < allPicklists.length; i++) {
	                    if (allPicklists[i].FieldName === value) {
	                        response = allPicklists[i].PicklistValues;
	                        break;
	                    }
	                }
	            }
	            response.unshift(noneVar);
	            return response;
	        }
	
	        function setAllPicklists(data) {
	            allPicklists = data;
	        }
	
	        function getTypePicklists() {
	            return getPicklistValues('Type__c');
	        }
	
	        function getCategoryPicklists() {
	            return getPicklistValues('Category__c');
	        }
	
	        function getApplicationLevelTypePicklists() {
	            return getPicklistValues('UseType__c');
	        }
	
	        function getApplicationMethodTypePicklists() {
	            return getPicklistValues('ApplicationMethod__c');
	        }
	
	        var service = {
	            setAllPicklists: setAllPicklists,
	            getCategoryPicklists: getCategoryPicklists,
	            getApplicationLevelTypePicklists: getApplicationLevelTypePicklists,
	            getApplicationMethodTypePicklists: getApplicationMethodTypePicklists,
	            getTypePicklists: getTypePicklists,
	            getPicklistValues: getPicklistValues
	        };
	
	        return service;
	    };
	
	    pricePipelineRulesetDetailsService.$inject = [
	        '$q',
	        'moment',
	        'i18nService',
	        'remoteService',
	        'systemConstants',
	        'apiCallsService',
	        'pricePipelineRulesetCommonService'
	    ];
	
	    module.exports = pricePipelineRulesetDetailsService;
	})();


/***/ }),
/* 796 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"price-rule-sets-detail-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <price-pipeline-rulesets-listing search-text=\"vm.searchText\"></price-pipeline-rulesets-listing>\n        </div>\n        <div class=\"price-rule-sets-detail-block\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <!-- Create / Update product details form -->\n            <form class=\"price-rule-sets-detail-form\" novalidate name=\"vm.pricePipelineRulesetForm\">\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.PriceRuleSetName\" is-required=\"true\" name=\"name\" max-length=\"{{vm.getFieldValue('Name','Length')}}\"></material-form-field>\n                        <div ng-messages=\"vm.pricePipelineRulesetForm.name.$error\" ng-if=\"vm.pricePipelineRulesetForm.name.$touched || vm.pricePipelineRulesetForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.sequence\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"::vm.labels.Sequence\" is-required=\"true\" name=\"sequence\" precision=\"{{vm.getFieldValue('Sequence__c','Precision')}}\" scale=\"{{vm.getFieldValue('Sequence__c','Scale')}}\"></material-form-field>\n                        <div ng-messages=\"vm.pricePipelineRulesetForm.sequence.$error\" ng-if=\"vm.pricePipelineRulesetForm.sequence.$touched || vm.pricePipelineRulesetForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.isActive\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.IsActive\" element-id=\"isActive\"></material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.stopProcessingMoreRules\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.StopProcessingMoreRules\" element-id=\"stopProcessingMoreRules\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.enableCurrency\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.EnableCurrency\" element-id=\"enableCurrency\"></material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.enableDateRange\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.EnableDateRange\" element-id=\"enableDateRange\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\" ng-if=\"vm.selectedPrs.enableCurrency\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.currency\" \n                            field-type=\"picklist\"\n                            is-editable=\"true\"\n                            properties=\"vm.currencyPicklistEntries\"\n                            field-label=\"::vm.labels.Currency\"\n                            name=\"currency\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\">\n                        <material-form-field model=\"vm.selectedPrs.description\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"::vm.labels.ShortDescription\" max-length=\"{{vm.getFieldValue('Description__c','Length')}}\" name=\"ShortDescription\" id=\"short_description\"></material-form-field>\n                        <div ng-messages=\"vm.pricePipelineRulesetForm.ShortDescription.$error\">\n                            <p ng-message=\"maxlength\" class=\"formError\">\n                                {{vm.labels.FormDescriptionMaxCharError | userMessage:vm.labels.ShortDescription}}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.effectiveDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.EffectiveDate\"></material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.expirationDate\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.ExpirationDate\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field field-type=\"autocomplete\" properties=\"vm.selectedPrs.priceList\" field-label=\"::vm.labels.PriceList\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.productFamily\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.productFamilyPicklist\" field-label=\"::vm.labels.ProductFamily\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field field-type=\"autocomplete\" properties=\"vm.selectedPrs.productCategory\" field-label=\"::vm.labels.ProductCategory\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field field-type=\"autocomplete\" properties=\"vm.selectedPrs.productGroup\" field-label=\"::vm.labels.ProductGroup\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.category\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.categoryTypes\" field-label=\"::vm.labels.Category\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.chargeType\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.chargeTypePicklist\" field-label=\"::vm.labels.ChargeType\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedPrs.applicationLevel\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.applicationLevelType\" field-label=\"::vm.labels.ApplicationLevel\" data-ng-click=\"vm.trackSelectedRowIndex($index)\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedPrs.applicationMethod\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.applicationMethodType\" field-label=\"::vm.labels.ApplicationMethod\" is-disabled=\"{{vm.selectedPrs.applicationLevel !== 'Aggregate'}}\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex expression-field\">\n                        <material-form-field field-type=\"string\" field-label=\"::vm.labels.RulesetCriteria\" is-editable=\"true\" is-disabled=\"true\" model=\"vm.rulesetCriteriaExp\">\n                        </material-form-field>\n                        <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.openChargeTypeCriteriaPopup()\">\n                            <i class=\"fa fa-external-link\"></i>\n                        </button>\n                    </div>\n                </div>\n            </form>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListingPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.pageSave()\" data-ng-disabled=\"!vm.enableSave\">Save</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 797 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var detailsController = function($q, $scope, $rootScope, $state, $stateParams, applicationService, pricePipelineRulesetDetails,
	        detailsService, systemConstants, i18nService, cpqAdminConstants, productConstants, $mdDialog, pricePipelineRulesetCommonService, allPicklists, productFamilyPicklist, chargeTypePicklist) {
	
	        var vm = this,
	            isFormSaved = false;
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.selectedPrs = pricePipelineRulesetDetails;
	        vm.productFamilyPicklist = { PicklistValues: productFamilyPicklist[0].PicklistValues };
	        vm.chargeTypePicklist = { PicklistValues: chargeTypePicklist[0].PicklistValues };
	
	        detailsService.setAllPicklists(allPicklists);
	
	        vm.rulesetCriteriaExp = pricePipelineRulesetCommonService.extractExpression(pricePipelineRulesetDetails.rulesetCriteria);
	
	        var metaDataInfo = pricePipelineRulesetCommonService.getMetadata();
	        vm.categoryTypes = {
	            PicklistValues: detailsService.getCategoryPicklists()
	        };
	        vm.applicationLevelType = {
	            PicklistValues: detailsService.getApplicationLevelTypePicklists(),
	            methodToCallInController: updateApplicationMethod
	        };
	        vm.applicationMethodType = {
	            PicklistValues: detailsService.getApplicationMethodTypePicklists()
	        };
	        vm.currencyPicklistEntries = {
	            PicklistValues: detailsService.getPicklistValues('CurrencyIsoCode')
	        };
	
	        function updateApplicationMethod(model) {
	            if (model !== 'Aggregate') {
	                vm.selectedPrs.applicationMethod = '';
	            }
	        }
	        var selectedPrs = pricePipelineRulesetCommonService.getSelectedPRS();
	
	        /* Uncomment the below code once APIs are ready. This code will be used if user refreshes the page*/
	
	        if (Object.keys(selectedPrs).length === 0 || pricePipelineRulesetCommonService.getPriceRulesets().length === 0) {
	            var filter = {
	                SearchString: '',
	                ChunkNumber: 1
	            };
	            pricePipelineRulesetCommonService.loadAllPriceRulesets(filter).then(function() {
	                var allPrs = pricePipelineRulesetCommonService.getPriceRulesets(),
	                    present = false;
	                for (var i = 0; i < allPrs.length; i++) {
	                    if (allPrs[i].id === $stateParams.id) {
	                        present = true;
	                        pricePipelineRulesetCommonService.setSelectedPRS(allPrs[i]);
	                        break;
	                    }
	                }
	            }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	            });
	        } 
	
	        if ($stateParams.id === cpqAdminConstants.NEW) {
	            vm.selectedPrs.category = "All";
	            vm.selectedPrs.applicationLevel = "Line Item";
	            vm.selectedPrs.isActive = true;
	        } else {
	            isFormSaved = false;
	            if (vm.selectedPrs && !vm.selectedPrs.id) {
	                var allPrs = pricePipelineRulesetCommonService.getPriceRulesets();
	                allPrs.splice(0, 1);
	                pricePipelineRulesetCommonService.setPriceRulesets(allPrs);
	            }
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        function getPriceRulesetDetails(prsId) {
	            var defer = $q.defer();
	            pricePipelineRulesetCommonService.getSelectedPricePipelineRulesetDetails(prsId)
	                .then(function(response) {
	                    vm.selectedPrs = response;
	                    defer.resolve(response);
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	
	            return defer.promise;
	        }
	
	        function findIndex(arr, item) {
	            var index = -1;
	            for (var i = 0; i < arr.length; i++) {
	                if (arr[i].id === item.id) {
	                    index = i;
	                    break;
	                }
	            }
	            return index;
	        }
	
	        function savePriceRuleset(toState, toParams) {
	            if (vm.pricePipelineRulesetForm.$valid && vm.pricePipelineRulesetForm.$dirty) {
	                if ($stateParams.id === cpqAdminConstants.NEW) {
	                    pricePipelineRulesetCommonService.createPriceRuleset({
	                            PriceRulesetSO: angular.copy(vm.selectedPrs),
	                            PriceRuleDOs: pricePipelineRulesetCommonService.getSelectedCompletePRS().PriceRuleDOs
	                        })
	                        .then(function(response) {
	                            if (response.PriceRulesetDOs.length > 0) {
	                                isFormSaved = true;
	                                var allPls = pricePipelineRulesetCommonService.getPriceRulesets(),
	                                    firstItem = pricePipelineRulesetCommonService.preparePriceRuleSetDetails(response.PriceRulesetDOs[0]);
	                                allPls[0] = firstItem;
	                                pricePipelineRulesetCommonService.setPriceRulesets(allPls);
	                                pricePipelineRulesetCommonService.setSelectedPRS(firstItem);
	                                if (toState) {
	                                    toParams.id = firstItem.id;
	                                    $state.go(toState, toParams);
	                                } else {
	                                    addAlert('Created successfully', cpqAdminConstants.SUCCESS);
	                                    $state.go('app.pricePipelineRuleset.details', {
	                                        id: firstItem.id
	                                    });
	                                }
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                } else {
	                    pricePipelineRulesetCommonService.updatePriceRuleset({
	                            PriceRulesetSO: angular.copy(vm.selectedPrs),
	                            PriceRuleDOs: pricePipelineRulesetCommonService.getSelectedCompletePRS().PriceRuleDOs
	                        })
	                        .then(function(response) {
	                            isFormSaved = true;
	                            if (toState) {
	                                $state.go(toState, toParams);
	                            } else {
	                                addAlert('Updated successfully', cpqAdminConstants.SUCCESS);
	                                getPriceRulesetDetails(vm.selectedPrs.id)
	                                    .then(function(response) {}, function(reason) {});
	                            }
	                        }, function(reason) {
	                            applicationService.showErrorMessage(reason);
	                        });
	                }
	
	            } else if(vm.pricePipelineRulesetForm.$valid && toState){
	                isFormSaved = true;
	                $state.go(toState, toParams);
	            }else {
	                vm.pricePipelineRulesetForm.$setSubmitted();
	            }
	        }
	
	        vm.pageSave = function(toState, toParams) {
	            if (vm.selectedPrs) {
	                savePriceRuleset(toState, toParams);
	            } else {
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                }
	            }
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.pricePipelineRuleset.list') {
	                return true;
	            } else if (isFormSaved === true) {
	                return true;
	            } else {
	                // TODO: REMOVE THE RETURN TRUE AND ACTUALLY VALIDATE THE FORM AND SAVE THE PAGE
	                return true;
	                e.preventDefault();
	                vm.pageSave(toState, toParams);
	            }
	        });
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	        $scope.$watchGroup(['vm.pricePipelineRulesetForm.$valid', 'vm.pricePipelineRulesetForm.$invalid'], function() {
	            if (vm.pricePipelineRulesetForm && vm.pricePipelineRulesetForm.$valid) {
	                vm.enableSave = true;
	            } else {
	                vm.enableSave = false;
	            }
	        });
	
	        $scope.$on(vm.labels.NewPriceRuleset.split(' ').join('-'), function() {
	            createNewPriceRuleset();
	        });
	
	        function createNewPriceRuleset() {
	            var allPrs = pricePipelineRulesetCommonService.getPriceRulesets(),
	                newPrs = pricePipelineRulesetCommonService.getSampleNewPriceRuleset();
	            pricePipelineRulesetCommonService.setPriceRulesets(angular.copy(allPrs));
	            pricePipelineRulesetCommonService.setSelectedPRS(angular.copy(newPrs));
	            pricePipelineRulesetCommonService.setSelectedCompletePRS(angular.copy(newPrs));
	            $state.go('app.pricePipelineRuleset.details', {
	                id: 'new'
	            });
	        };
	
	        vm.setFilters = function() {
	            var filterObj = {
	                SearchString: vm.searchText || '',
	                ChunkNumber: 1
	            };
	            pricePipelineRulesetCommonService.setFilters(filterObj);
	        };
	
	        function getFilters() {
	            var filter = pricePipelineRulesetCommonService.getFilters();
	            if (filter && filter.SearchString) {
	                vm.searchText = filter.SearchString;
	            }
	        }
	
	        vm.goToListingPage = function() {
	            $state.go('app.pricePipelineRuleset.list');
	        };
	
	        function getField(fieldName) {
	            var fieldObj, name;
	            if (fieldName.indexOf('__c') > -1) {
	                fieldName = getPrefixedAttribute(fieldName);
	            }
	            if (metaDataInfo) {
	                for (var i = 0; i < metaDataInfo.length; i++) {
	                    var name = metaDataInfo[i].FieldName;
	                    if (name === fieldName) {
	                        fieldObj = metaDataInfo[i];
	                        break;
	                    }
	                }
	            }
	            return fieldObj;
	        }
	        vm.getFieldValue = function(fieldName, fieldValueToBeExtracted) {
	            var field = getField(fieldName);
	            if (field) {
	                return field[fieldValueToBeExtracted];
	            } else {
	                return '';
	            }
	            return 25;
	        };
	
	        vm.openChargeTypeCriteriaPopup = function() {
	            $mdDialog.show({
	                controller: __webpack_require__(424),
	                template: __webpack_require__(425),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	                    selectedPli: function() {
	                        var criteria = getPrefixedAttribute('Criteria__c');
	                        var obj = {
	                            PriceListItemSO: {
	
	                            }
	                        };
	                        obj.PriceListItemSO[criteria] = pricePipelineRulesetDetails.rulesetCriteria;
	                        return obj;
	                    }
	                }
	            }).then(function(response) {
	                vm.selectedPrs.rulesetCriteria = response.pli.PriceListItemSO[getPrefixedAttribute('Criteria__c')];
	                vm.rulesetCriteriaExp = pricePipelineRulesetCommonService.extractExpression(response.pli.PriceListItemSO[getPrefixedAttribute('Criteria__c')]);
	                vm.pricePipelineRulesetForm.$setDirty();
	            });
	        };
	    };
	
	    detailsController.$inject = [
	        '$q',
	        '$scope',
	        '$rootScope',
	        '$state',
	        '$stateParams',
	        'applicationService',
	        'pricePipelineRulesetDetails',
	        'detailsService',
	        'systemConstants',
	        'i18nService',
	        'cpqAdminConstants',
	        'productConstants',
	        '$mdDialog',
	        'pricePipelineRulesetCommonService',
	        'allPicklists',
	        'productFamilyPicklist',
	        'chargeTypePicklist'
	
	    ];
	
	    module.exports = detailsController;
	
	})();


/***/ }),
/* 798 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.pricePipelineRuleset.pricePipelineRules', [])
	        .service('pricePipelineRulesService', __webpack_require__(799))
	        .filter('userMessage', __webpack_require__(800))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.pricePipelineRuleset.pricePipelineRules', {
	                parent: 'app.pricePipelineRuleset',
	                url: '/:id/price-pipeline-rules',
	                views: {
	                    'pricePipelineRulesetContainer': {
	                        template: __webpack_require__(801),
	                        controller: __webpack_require__(802),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    selectedPricePipelineRuleDetails: ['pricePipelineRulesetCommonService', '$stateParams', function(pricePipelineRulesetCommonService, $stateParams) {
	                        return pricePipelineRulesetCommonService.getSelectedPricePipelineRulesetDetails($stateParams.id, true);
	                    }],
	                    allPricePipelineRuleEntryPicklists: ['pricePipelineRulesetCommonService', '$stateParams', function(pricePipelineRulesetCommonService, $stateParams) {
	                        return pricePipelineRulesetCommonService.getSObjectPicklistFields('PriceRuleEntry__c', null);
	                    }],
	                    allPricePipelineRulePicklists: ['pricePipelineRulesetCommonService', '$stateParams', function(pricePipelineRulesetCommonService, $stateParams) {
	                        return pricePipelineRulesetCommonService.getSObjectPicklistFields('PriceRule__c', null);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 799 */
721,
/* 800 */
372,
/* 801 */
723,
/* 802 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    var matricesController = function($q, $stateParams, $state, $scope, systemConstants, i18nService, $mdDialog, selectedPricePipelineRuleDetails, applicationService, pricePipelineRulesetConstants, $timeout, pricePipelineRulesService, allPricePipelineRuleEntryPicklists, pricePipelineRulesetCommonService, $templateCache, allPricePipelineRulePicklists, cpqAdminConstants, apiCallsService) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '',
	            isFormSaved = false,
	            newEntryAdded = false;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.selectedPriceRuleSet = selectedPricePipelineRuleDetails;
	
	        var selectedPrs = pricePipelineRulesetCommonService.getSelectedPRS();
	
	        if (Object.keys(selectedPrs).length === 0) {
	            pricePipelineRulesetCommonService.getSelectedPricePipelineRulesetDetails($stateParams.id, true)
	                .then(function(response) {}, function(reason) {});
	        }
	
	        vm.numberOfProductsPerChunk = pricePipelineRulesetConstants.treePanelItemsPerChunk;
	        vm.alertList = [];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        $templateCache.put('volume.html', __webpack_require__(803));
	        $templateCache.put('inclusion.html', __webpack_require__(804));
	        $templateCache.put('dimension.html', __webpack_require__(805));
	        $templateCache.put('condition.html', __webpack_require__(806));
	
	        pricePipelineRulesService.setAllPriceRuleEntryPicklists(allPricePipelineRuleEntryPicklists);
	
	        vm.adjustmentTypePicklistEntries = {
	            PicklistValues: pricePipelineRulesService.getPriceRuleEntryAdjustmentTypes()
	        };
	        vm.inclusionMethodPicklistEntries = {
	            PicklistValues: pricePipelineRulesService.getPriceRuleEntryInclusionMethodTypes()
	        };
	        vm.adjustmentUOMPicklistEntries = {
	            PicklistValues: pricePipelineRulesService.getPriceRuleEntryAdjustmentUOMs()
	        };
	        
	        $scope.$on(vm.labels.NewPriceRule.split(' ').join('-'), function() {
	            vm.openPriceRulePopup('new');
	        });
	
	        function getNextSequence(arr) {
	            var nextSequence,
	                maxSequence,
	                tempSeqArr = [];
	            if (arr && arr.length) {
	                for (var i = 0; i < arr.length; i++) {
	                    if (arr[i].PriceRuleSO[getPrefixedAttribute('Sequence__c')]) {
	                        tempSeqArr.push(+arr[i].PriceRuleSO[getPrefixedAttribute('Sequence__c')]);
	                    }
	                }
	                if (tempSeqArr.length > 0) {
	                    maxSequence = Math.max.apply(Math, tempSeqArr);;
	                    if (maxSequence) {
	                        nextSequence = maxSequence + 1;
	                    }
	                }
	            }
	            return nextSequence || 1;
	        }
	
	        function getNewPriceRuleSample() {
	            var sample = {
	                PriceRuleEntrySOs: [],
	                PriceRuleSO: {
	                    Name: ''
	                }
	            };
	            sample.PriceRuleSO[getPrefixedAttribute('Sequence__c')] = getNextSequence(vm.selectedPriceRuleSet.PriceRuleDOs);
	            sample.PriceRuleSO[getPrefixedAttribute('Description__c')] = '';
	            sample.PriceRuleSO[getPrefixedAttribute('StopProcessingMoreRules__c')] = false;
	            sample.PriceRuleSO[getPrefixedAttribute('Active__c')] = true;
	            sample.PriceRuleSO[getPrefixedAttribute('RuleType__c')] = 'Dimension';
	            sample.PriceRuleSO[getPrefixedAttribute('AllowableAction__c')] = 'Unrestricted';
	            sample.PriceRuleSO[getPrefixedAttribute('AdjustmentAppliesTo__c')] = '';
	            sample.PriceRuleSO[getPrefixedAttribute('AdjustmentChargeType__c')] = '';
	            sample.PriceRuleSO[getPrefixedAttribute('AllowRemovalOfAdjustment__c')] = false;
	
	            return sample;
	        }
	
	        function prepareDimensionEntries() {
	            var temp = vm.matrixTable.values,
	                priceRuleEntrySOs = [],
	                hasError = false;
	
	            if (vm.selectedPriceRuleSet && vm.selectedPriceRule && (selectedRuleIndex !== undefined)) {
	                for (var i = 0; i < temp.length; i++) {
	                    var eachObj = {};
	                    if (temp[i].id) {
	                        eachObj['Id'] = temp[i].id;
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentAmount__c')] = temp[i].adjustmentAmount;
	                    eachObj[getPrefixedAttribute('AdjustmentType__c')] = temp[i].adjustmentType;
	                    eachObj[getPrefixedAttribute('PriceRuleId__c')] = temp[i].priceRuleId;
	                    eachObj[getPrefixedAttribute('Sequence__c')] = temp[i].sequence;
	                    if (temp[i].adjustmentAmountSource.autocomplete && temp[i].adjustmentAmountSource.autocomplete.selectedItem && temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = '';
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentUom__c')] = temp[i].adjustmentUOM;
	                    setPriceRuleEntryEffectiveDates(temp[i], eachObj, true);
	
	                    for (var j = 0; j < 6; j++) {
	                        var field = 'dimension' + (j + 1);
	                        if (temp[i][field]) {
	                            if ((temp[i][field] !== '') || (temp[i][field] !== undefined)) {
	                                eachObj[getPrefixedAttribute('Dimension' + (j + 1) + 'Value__c')] = temp[i][field];
	                                temp[i].hasError = false;
	                            } else {
	                                /*temp[i].hasError = true;
	                                hasError = true;
	                                break;*/
	                            }
	                        } else {
	                            /*temp[i].hasError = true;
	                            hasError = true;
	                            break;*/
	                        }
	                    }
	                    priceRuleEntrySOs.push(eachObj);
	                }
	                vm.selectedPriceRuleSet.PriceRuleDOs[selectedRuleIndex].PriceRuleEntrySOs = priceRuleEntrySOs;
	            }
	            return hasError;
	        }
	
	        function prepareVolumeEntries() {
	            var temp = vm.matrixTable.values,
	                priceRuleEntrySOs = [],
	                hasError = false;
	
	            if (vm.selectedPriceRuleSet && vm.selectedPriceRule && (selectedRuleIndex !== undefined)) {
	                for (var i = 0; i < temp.length; i++) {
	                    var eachObj = {};
	                    if (temp[i].id) {
	                        eachObj['Id'] = temp[i].id;
	                    }
	                    eachObj[getPrefixedAttribute('PriceRuleId__c')] = temp[i].priceRuleId;
	                    eachObj[getPrefixedAttribute('Sequence__c')] = temp[i].sequence;
	                    eachObj[getPrefixedAttribute('MinProducts__c')] = temp[i].minProducts;
	                    eachObj[getPrefixedAttribute('MaxProducts__c')] = temp[i].maxProducts;
	                    eachObj[getPrefixedAttribute('MinQuantity__c')] = temp[i].minQuantity;
	                    eachObj[getPrefixedAttribute('MaxQuantity__c')] = temp[i].maxQuantity;
	                    eachObj[getPrefixedAttribute('AdjustmentAmount__c')] = temp[i].adjustmentAmount;
	                    eachObj[getPrefixedAttribute('AdjustmentType__c')] = temp[i].adjustmentType;
	                    if (temp[i].productCategory.autocomplete && temp[i].productCategory.autocomplete.selectedItem && temp[i].productCategory.autocomplete.selectedItem.Name) {
	                        eachObj[getPrefixedAttribute('ProductCategory__c')] = temp[i].productCategory.autocomplete.selectedItem.Name;
	                    } else {
	                        eachObj[getPrefixedAttribute('ProductCategory__c')] = '';
	                    }
	                    if (temp[i].productFamily.autocomplete && temp[i].productFamily.autocomplete.selectedItem && temp[i].productFamily.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('ProductFamily__c')] = temp[i].productFamily.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('ProductFamily__c')] = '';
	                    }
	                    if (temp[i].productGroup.autocomplete && temp[i].productGroup.autocomplete.selectedItem && temp[i].productGroup.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('ProductGroupId__c')] = temp[i].productGroup.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('ProductGroupId__c')] = '';
	                    }
	                    if (temp[i].adjustmentAmountSource.autocomplete && temp[i].adjustmentAmountSource.autocomplete.selectedItem && temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = '';
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentUom__c')] = temp[i].adjustmentUOM;
	                    setPriceRuleEntryEffectiveDates(temp[i], eachObj, true);
	                    priceRuleEntrySOs.push(eachObj);
	                }
	                vm.selectedPriceRuleSet.PriceRuleDOs[selectedRuleIndex].PriceRuleEntrySOs = priceRuleEntrySOs;
	            }
	            return hasError;
	        }
	
	        function prepareInclusionEntries() {
	            var temp = vm.matrixTable.values,
	                priceRuleEntrySOs = [],
	                hasError = false;
	
	            if (vm.selectedPriceRuleSet && vm.selectedPriceRule && (selectedRuleIndex !== undefined)) {
	                for (var i = 0; i < temp.length; i++) {
	                    var eachObj = {};
	                    if (temp[i].id) {
	                        eachObj['Id'] = temp[i].id;
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentAmount__c')] = temp[i].adjustmentAmount;
	                    eachObj[getPrefixedAttribute('AdjustmentType__c')] = temp[i].adjustmentType;
	                    eachObj[getPrefixedAttribute('PriceRuleId__c')] = temp[i].priceRuleId;
	                    eachObj[getPrefixedAttribute('Sequence__c')] = temp[i].sequence;
	                    eachObj[getPrefixedAttribute('InclusionMethod__c')] = temp[i].inclusionMethod;
	                    if (temp[i].productGroup.autocomplete && temp[i].productGroup.autocomplete.selectedItem && temp[i].productGroup.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('ProductGroupId__c')] = temp[i].productGroup.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('ProductGroupId__c')] = '';
	                    }
	                    if (temp[i].adjustmentAmountSource.autocomplete && temp[i].adjustmentAmountSource.autocomplete.selectedItem && temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = '';
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentUom__c')] = temp[i].adjustmentUOM;
	                    setPriceRuleEntryEffectiveDates(temp[i], eachObj, true);
	                    priceRuleEntrySOs.push(eachObj);
	                }
	                vm.selectedPriceRuleSet.PriceRuleDOs[selectedRuleIndex].PriceRuleEntrySOs = priceRuleEntrySOs;
	            }
	            return hasError;
	        }
	
	        function preparePriceRuleEntries() {
	            var hasError = false;
	            if (vm.selectedPriceRule) {
	                var selectedPriceRule = vm.selectedPriceRule,
	                    priceRuleSO = selectedPriceRule.PriceRuleSO,
	                    ruleType = priceRuleSO[getPrefixedAttribute('RuleType__c')];
	                if (ruleType === 'Dimension') {
	                    hasError = prepareDimensionEntries();
	                } else if (ruleType === 'Volume') {
	                    hasError = prepareVolumeEntries();
	                } else if (ruleType === 'Inclusion') {
	                    hasError = prepareInclusionEntries();
	                } else if (ruleType === 'Condition') {
	                    hasError = prepareConditionEntries();
	                }
	            }
	            return hasError;
	        }
	
	        function updatePriceRuleItem(toState, toParams, updateEntries) {
	            var defer = $q.defer();
	            if (vm.selectedPriceRule) {
	                if (!preparePriceRuleEntries()) {
	                    pricePipelineRulesetCommonService.updatePriceRuleset(angular.copy(vm.selectedPriceRuleSet), true)
	                        .then(function(response) {
	                            isFormSaved = true;
	                            if (toState) {
	                                $state.go(toState, toParams);
	                            } else {
	                                vm.selectedPriceRuleSet = response.PriceRulesetDOs[0]; 
	                                if(updateEntries === true) {
	                                    addAlert({
	                                        msg: 'Updated successfully',
	                                        type: cpqAdminConstants.SUCCESS
	                                    });
	                                }
	                                if (updateEntries && newEntryAdded) {
	                                    /* Check if any new entries were made here . If added then update the view */
	                                    loadPriceRuleDetailsCall(selectedRuleIndex);
	                                    newEntryAdded = false;
	                                }
	                                defer.resolve(response);
	                            }
	                        }, function(reason) {
	                            isFormSaved = false;
	                            applicationService.showErrorMessage(reason);
	                            defer.reject(false);
	                        });
	                } else {
	                    defer.reject(false);
	                }
	            } else {
	                isFormSaved = true;
	                defer.resolve(true);
	            }
	
	            return defer.promise;
	        }
	
	        var priceRuleEntryPageNumber = 0,
	            selectedRuleIndex,
	            noOfMatrixEntriesPerchunk = vm.numberOfProductsPerChunk;
	
	        function resetMatrixTable() {
	            priceRuleEntryPageNumber = 0;
	            vm.selectedPriceRule = null;
	            selectedRuleIndex = undefined;
	            vm.showCenterPanel = false;
	            vm.matrixTable = {
	                headers: [],
	                values: []
	            };
	        }
	        vm.disablePriceRuleEntryLeftBtn = true;
	
	        vm.matrixTable = {
	            headers: [],
	            values: []
	        };
	
	        function createPriceRuleObj(obj) {
	            vm.selectedPriceRuleSet.PriceRuleDOs.push(obj.rule);
	            vm.selectedPriceRule = obj.rule;
	            updatePriceRuleItem()
	                .then(function(response) {
	                    resetMatrixTable();
	                    vm.loadPriceRuleDetails(vm.selectedPriceRuleSet.PriceRuleDOs.length - 1);
	                }, function(reason) {});
	        }
	
	        function updatePriceRuleObj(obj) {
	            vm.selectedPriceRuleSet.PriceRuleDOs[selectedRuleIndex].PriceRuleSO = obj.rule.PriceRuleSO;
	            updatePriceRuleItem()
	                .then(function(response) {
	                    loadPriceRuleDetailsCall(selectedRuleIndex);
	                }, function(reason) {});
	        }
	
	        vm.openPriceRulePopup = function(type) {
	            $mdDialog.show({
	                    controller: __webpack_require__(807),
	                    template: __webpack_require__(808),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    controllerAs: 'vm',
	                    resolve: {
	                        selectedPriceRule: function() {
	                            return type && type == 'new' ? angular.copy(getNewPriceRuleSample()) : vm.selectedPriceRule;
	                        },
	                        type: function() {
	                            return type;
	                        },
	                        allPicklists: function() {
	                            return allPricePipelineRulePicklists;
	                        }
	                    }
	                })
	                .then(function(requestObj) {
	                    if (requestObj.type === 'new') {
	                        createPriceRuleObj(requestObj);
	                    } else {
	                        updatePriceRuleObj(requestObj);
	                    }
	                }, function() {});
	        };
	
	        function highlightCurrentPriceRule(index) {
	            var allRules = vm.selectedPriceRuleSet.PriceRuleDOs;
	            for (var i = 0; i < allRules.length; i++) {
	                if (i === index) {
	                    allRules[i].selected = true;
	                } else {
	                    allRules[i].selected = false;
	                }
	            }
	        }
	
	        var columnLoadedCount = [];
	
	        function reorderMatrixColumns(index) {
	            columnLoadedCount.push(index);
	            if (columnLoadedCount.length === 6) {
	                var finalReorderedColumn = [];
	                for (var i = 0; i < 6; i++) {
	                    for (var j = 0; j < vm.matrixTable.headers.length; j++) {
	                        if (vm.matrixTable.headers[j].valueField === ('dimension' + (i + 1))) {
	                            finalReorderedColumn.push(angular.copy(vm.matrixTable.headers[j]));
	                            break;
	                        }
	                    }
	                }
	
	                finalReorderedColumn.push({
	                    name: vm.labels.AdjustmentAmount,
	                    valueField: 'adjustmentAmount',
	                    fieldType: 'STRING'
	                });
	                finalReorderedColumn.push({
	                    name: vm.labels.AdjustmentType,
	                    valueField: 'adjustmentType',
	                    fieldType: 'PICKLIST',
	                    picklistValues: {
	                        PicklistValues: pricePipelineRulesService.getPriceRuleEntryAdjustmentTypes()
	                    }
	                });
	                finalReorderedColumn.push({
	                    name: vm.labels.AdjustmentAmountSource,
	                    valueField: 'adjustmentAmountSource',
	                    fieldType: 'AUTOCOMPLETE',
	                    'autocomplete': {
	                        'querySearch': apiCallsService.searchSObjectRecords,
	                        'displayName': 'Name',
	                        'selectedItem': null,
	                        'sObjectName': getPrefixedAttribute('FormulaField__c')
	                    }
	                });
	                finalReorderedColumn.push({
	                    name: vm.labels.UOM,
	                    valueField: 'adjustmentUOM',
	                    fieldType: 'PICKLIST',
	                    picklistValues: vm.adjustmentUOMPicklistEntries
	                });
	                if (vm.selectedPriceRuleSet.PriceRulesetSO[getPrefixedAttribute('EnableDateRange__c')]) {
	                    finalReorderedColumn.push({
	                        name: vm.labels.StartDate,
	                        valueField: 'periodStartDate',
	                        fieldType: 'DATETIME'
	                    });
	                    finalReorderedColumn.push({
	                        name: vm.labels.EndDate,
	                        valueField: 'periodEndDate',
	                        fieldType: 'DATETIME'
	                    });
	                }
	                vm.matrixTable.headers = finalReorderedColumn;
	            }
	        }
	
	        function prepareDimensionMatrixHeaders(response) {
	            var selectedPriceMatrix = response.PriceRuleDO,
	                priceRuleSO = selectedPriceMatrix.PriceRuleSO,
	                priceDimensionDOs = selectedPriceMatrix.PriceDimensionDOs;
	            columnLoadedCount = [];
	            for (var i = 0; i < 6; i++) {
	                var objName = getPrefixedAttribute('Dimension' + (i + 1) + 'Id__r');
	                if (priceRuleSO[objName]) {
	                    var fieldType = 'STRING',
	                        picklistValues = [];
	                    for (var j = 0; j < priceDimensionDOs.length; j++) {
	                        if (priceDimensionDOs[j].PriceDimensionSO.Id === priceRuleSO[objName].Id) {
	                            fieldType = priceDimensionDOs[j].FieldDO.Type;
	                            if (fieldType === 'MULTIPICKLIST') {
	                                fieldType = 'PICKLIST';
	                            }
	                            picklistValues = priceDimensionDOs[j].FieldDO.PicklistValues;
	                            break;
	                        }
	                    }
	                    vm.matrixTable.headers.push({
	                        name: priceRuleSO[objName].Name,
	                        valueField: 'dimension' + (i + 1),
	                        fieldType: fieldType,
	                        picklistValues: {
	                            PicklistValues: picklistValues || []
	                        }
	                    });
	                    reorderMatrixColumns(i);
	
	                } else {
	                    reorderMatrixColumns(i);
	                }
	            }
	        }
	
	        function prepareVolumeMatrixHeaders() {
	            vm.matrixTable.headers = [
	                { name: 'Min Products' },
	                { name: 'Max Products' },
	                { name: 'Min Quantity' },
	                { name: 'Max Quantity' },
	                { name: 'Product Family' },
	                { name: 'Product Category' },
	                { name: 'Product Group' },
	                { name: 'Adjustment Amount' },
	                { name: 'Adjustment Type' },
	                { name: vm.labels.AdjustmentAmountSource },
	                { name: vm.labels.UOM }
	            ];
	            addEffectiveDatesColumnHeaders();
	        }
	
	        function prepareInclusionMatrixHeaders() {
	            vm.matrixTable.headers = [
	                { name: 'Inclusion Method' },
	                { name: 'Product Group' },
	                { name: 'Adjustment Amount' },
	                { name: 'Adjustment Type' },
	                { name: vm.labels.AdjustmentAmountSource },
	                { name: vm.labels.UOM }
	            ];
	            addEffectiveDatesColumnHeaders();
	        }
	
	        function prepareConditionMatrixHeaders() {
	            vm.matrixTable.headers = [
	                { name: 'Expression' },
	                { name: vm.labels.ProductGroup },
	                { name: vm.labels.MatchInAsset },
	                { name: 'Adjustment Amount' },
	                { name: 'Adjustment Type' },
	                { name: vm.labels.AdjustmentAmountSource },
	                { name: vm.labels.UOM }
	            ];
	            addEffectiveDatesColumnHeaders();
	        }
	
	        function prepareMatrixTableHeaders(response) {
	
	            var selectedPriceMatrix = response.PriceRuleDO,
	                PriceRuleSO = selectedPriceMatrix.PriceRuleSO,
	                ruleType = PriceRuleSO[getPrefixedAttribute('RuleType__c')];
	            vm.ruleType = ruleType;
	            vm.matrixTable.headers = [];
	            if (ruleType === 'Dimension') {
	                prepareDimensionMatrixHeaders(response);
	            } else if (ruleType === 'Volume') {
	                prepareVolumeMatrixHeaders();
	            } else if (ruleType === 'Inclusion') {
	                prepareInclusionMatrixHeaders();
	            } else if (ruleType === 'Condition') {
	                prepareConditionMatrixHeaders();
	            }
	        }
	
	        function prepareDimensionTableContent(priceRuleEntrySOs) {
	            if (priceRuleEntrySOs.length) {
	                vm.matrixTable.values = []; //Clearing the Array
	                for (var i = 0; i < priceRuleEntrySOs.length; i++) {
	                    var temp = {};
	                    temp['id'] = priceRuleEntrySOs[i].Id;
	                    temp['sequence'] = priceRuleEntrySOs[i][getPrefixedAttribute('Sequence__c')];
	                    temp['adjustmentAmount'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmount__c')] || '';
	                    temp['adjustmentType'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentType__c')] || '';
	                    temp['priceRuleId'] = priceRuleEntrySOs[i][getPrefixedAttribute('PriceRuleId__c')] || '';
	                    const adjustmentAmountSource = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmountSourceId__r')];
	                    if (adjustmentAmountSource) {
	                        temp['adjustmentAmountSource'] = {
	                            'autocomplete': {
	                                'querySearch': apiCallsService.searchSObjectRecords,
	                                'displayName': 'Name',
	                                'selectedItem': {
	                                    Name: adjustmentAmountSource.Name,
	                                    Id: adjustmentAmountSource.Id
	                                },
	                                'sObjectName': getPrefixedAttribute('FormulaField__c')
	                            }
	                        };
	                    } else {
	                        temp['adjustmentAmountSource'] = {
	                            'autocomplete': {
	                                'querySearch': apiCallsService.searchSObjectRecords,
	                                'displayName': 'Name',
	                                'selectedItem': null,
	                                'sObjectName': getPrefixedAttribute('FormulaField__c')
	                            }
	                        };
	                    }
	                    temp['adjustmentUOM'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentUom__c')] || '';
	                    setPriceRuleEntryEffectiveDates(temp, priceRuleEntrySOs[i], false);
	                    for (var j = 0; j < 6; j++) {
	                        var field = getPrefixedAttribute('Dimension' + (j + 1) + 'Value__c');
	                        if (priceRuleEntrySOs[i][field]) {
	                            temp['dimension' + (j + 1)] = priceRuleEntrySOs[i][field];
	                        }
	                    }
	                    vm.matrixTable.values.push(temp);
	                }
	            }
	        }
	
	        function prepareVolumeTableContent(priceRuleEntrySOs) {
	            if (priceRuleEntrySOs.length) {
	                for (var i = 0; i < priceRuleEntrySOs.length; i++) {
	                    var temp = {};
	                    temp['id'] = priceRuleEntrySOs[i].Id;
	                    temp['priceRuleId'] = priceRuleEntrySOs[i][getPrefixedAttribute('PriceRuleId__c')] || '';
	                    temp['sequence'] = priceRuleEntrySOs[i][getPrefixedAttribute('Sequence__c')];
	                    temp['minProducts'] = priceRuleEntrySOs[i][getPrefixedAttribute('MinProducts__c')] || '';
	                    temp['maxProducts'] = priceRuleEntrySOs[i][getPrefixedAttribute('MaxProducts__c')] || '';
	                    temp['minQuantity'] = priceRuleEntrySOs[i][getPrefixedAttribute('MinQuantity__c')] || '';
	                    temp['maxQuantity'] = priceRuleEntrySOs[i][getPrefixedAttribute('MaxQuantity__c')] || '';
	                    temp['adjustmentAmount'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmount__c')] || '';
	                    temp['adjustmentType'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentType__c')] || '';
	
	                    var productFamily = priceRuleEntrySOs[i][getPrefixedAttribute('ProductFamily__c')] || '';
	                    if (productFamily) {
	                        temp['productFamily'] = {
	                            'autocomplete': {
	                                querySearch: pricePipelineRulesetCommonService.searchProductFamily,
	                                displayName: 'Name',
	                                selectedItem: {
	                                    Id: productFamily,
	                                    Name: productFamily
	                                }
	                            }
	                        };
	                    } else {
	                        temp['productFamily'] = {
	                            'autocomplete': {
	                                querySearch: pricePipelineRulesetCommonService.searchProductFamily,
	                                displayName: 'Name'
	                            }
	                        };
	                    }
	
	                    var productCategory = priceRuleEntrySOs[i][getPrefixedAttribute('ProductCategory__c')] || '';
	                    if (productCategory) {
	                        temp['productCategory'] = {
	                            'autocomplete': {
	                                querySearch: pricePipelineRulesetCommonService.searchProductCategory,
	                                displayName: 'Name',
	                                displayLabel: 'Label',
	                                selectedItem: {
	                                    Id: productCategory,
	                                    Name: productCategory
	                                }
	                            }
	                        };
	                    } else {
	                        temp['productCategory'] = {
	                            'autocomplete': {
	                                querySearch: pricePipelineRulesetCommonService.searchProductCategory,
	                                displayName: 'Name',
	                                displayLabel: 'Label'
	                            }
	                        };
	                    }
	
	                    var productGroup = priceRuleEntrySOs[i][getPrefixedAttribute('ProductGroupId__r')] || '';
	                    if (productGroup) {
	                        temp['productGroup'] = {
	                            'autocomplete': {
	                                querySearch: pricePipelineRulesetCommonService.searchProductGroup,
	                                displayName: 'Name',
	                                selectedItem: {
	                                    Id: productGroup.Id,
	                                    Name: productGroup.Name
	                                }
	                            }
	                        };
	                    } else {
	                        temp['productGroup'] = {
	                            'autocomplete': {
	                                querySearch: pricePipelineRulesetCommonService.searchProductGroup,
	                                displayName: 'Name'
	                            }
	                        };
	                    }
	                    const adjustmentAmountSource = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmountSourceId__r')];
	                    if (adjustmentAmountSource) {
	                        temp['adjustmentAmountSource'] = {
	                            'autocomplete': {
	                                'querySearch': apiCallsService.searchSObjectRecords,
	                                'displayName': 'Name',
	                                'selectedItem': {
	                                    Name: adjustmentAmountSource.Name,
	                                    Id: adjustmentAmountSource.Id
	                                },
	                                'sObjectName': getPrefixedAttribute('FormulaField__c')
	                            }
	                        };
	                    } else {
	                        temp['adjustmentAmountSource'] = {
	                            'autocomplete': {
	                                'querySearch': apiCallsService.searchSObjectRecords,
	                                'displayName': 'Name',
	                                'selectedItem': null,
	                                'sObjectName': getPrefixedAttribute('FormulaField__c')
	                            }
	                        };
	                    }
	                    temp['adjustmentUOM'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentUom__c')] || '';
	                    setPriceRuleEntryEffectiveDates(temp, priceRuleEntrySOs[i], false);
	                    vm.matrixTable.values.push(temp);
	                }
	            }
	        }
	
	
	        function prepareInclusionTableContent(priceRuleEntrySOs) {
	            if (priceRuleEntrySOs.length) {
	                for (var i = 0; i < priceRuleEntrySOs.length; i++) {
	                    var temp = {};
	                    temp['id'] = priceRuleEntrySOs[i].Id;
	                    temp['sequence'] = priceRuleEntrySOs[i][getPrefixedAttribute('Sequence__c')];
	                    temp['priceRuleId'] = priceRuleEntrySOs[i][getPrefixedAttribute('PriceRuleId__c')] || '';
	                    temp['inclusionMethod'] = priceRuleEntrySOs[i][getPrefixedAttribute('InclusionMethod__c')] || '';
	                    temp['adjustmentAmount'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmount__c')] || '';
	                    temp['adjustmentType'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentType__c')] || '';
	
	                    var productGroup = priceRuleEntrySOs[i][getPrefixedAttribute('ProductGroupId__r')] || '';
	                    if (productGroup) {
	                        temp['productGroup'] = {
	                            'autocomplete': {
	                                querySearch: pricePipelineRulesetCommonService.searchProductGroup,
	                                displayName: 'Name',
	                                selectedItem: {
	                                    Id: productGroup.Id,
	                                    Name: productGroup.Name
	                                }
	                            }
	                        };
	                    } else {
	                        temp['productGroup'] = {
	                            'autocomplete': {
	                                querySearch: pricePipelineRulesetCommonService.searchProductGroup,
	                                displayName: 'Name'
	                            }
	                        };
	                    }
	                    const adjustmentAmountSource = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmountSourceId__r')];
	                    temp['adjustmentAmountSource'] = {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    };
	                    if (adjustmentAmountSource) {
	                        temp.adjustmentAmountSource.autocomplete.selectedItem = {
	                            Name: adjustmentAmountSource.Name,
	                            Id: adjustmentAmountSource.Id
	                        };
	                    }
	                    temp['adjustmentUOM'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentUom__c')] || '';
	                    setPriceRuleEntryEffectiveDates(temp, priceRuleEntrySOs[i], false);
	                    vm.matrixTable.values.push(temp);
	                }
	            }
	        }
	
	        function prepareMatrixTableContent(response) {
	            var selectedPriceRule = response.PriceRuleDO,
	                priceRuleSO = selectedPriceRule.PriceRuleSO,
	                priceRuleEntrySO = selectedPriceRule.PriceRuleEntrySOs,
	                ruleType = priceRuleSO[getPrefixedAttribute('RuleType__c')];
	                vm.matrixTable.values = [];
	            if (ruleType === 'Dimension') {
	                prepareDimensionTableContent(priceRuleEntrySO);
	            } else if (ruleType === 'Volume') {
	                prepareVolumeTableContent(priceRuleEntrySO);
	            } else if (ruleType === 'Inclusion') {
	                prepareInclusionTableContent(priceRuleEntrySO);
	            } else if (ruleType === 'Condition') {
	                prepareConditionTableContent(priceRuleEntrySO);
	            }
	        }
	
	        function updateRuleEntryPagination(length) {
	            var pageNumber = priceRuleEntryPageNumber,
	                endCount = length;
	
	            if (priceRuleEntryPageNumber === 0) {
	                vm.disablePriceRuleEntryLeftBtn = true;
	            } else {
	                vm.disablePriceRuleEntryLeftBtn = false;
	            }
	            if (endCount < vm.numberOfProductsPerChunk) {
	                vm.disablePriceRuleEntryRightBtn = true;
	            } else {
	                vm.disablePriceRuleEntryRightBtn = false;
	            }
	
	            if (endCount === 0 && priceRuleEntryPageNumber === 0) {
	                vm.MatrixEntryPaginationCenterText = '(0-0)';
	            } else if (endCount < vm.numberOfProductsPerChunk) {
	                vm.MatrixEntryPaginationCenterText = '(' + (priceRuleEntryPageNumber * vm.numberOfProductsPerChunk + 1) + '-' + (priceRuleEntryPageNumber * vm.numberOfProductsPerChunk + endCount) + ')';
	            } else {
	                vm.MatrixEntryPaginationCenterText = '(' + (priceRuleEntryPageNumber * vm.numberOfProductsPerChunk + 1) + '-' + ((priceRuleEntryPageNumber + 1) * vm.numberOfProductsPerChunk) + ')';
	            }
	        }
	
	        function loadPriceRuleEntries(type, pageNumber, previousSelectedRuleIndex) {
	
	            var index = selectedRuleIndex;
	            if (previousSelectedRuleIndex >= 0) {
	                index = previousSelectedRuleIndex;
	                selectedRuleIndex = previousSelectedRuleIndex;
	                vm.selectedPriceRule = vm.selectedPriceRuleSet.PriceRuleDOs[index];
	                vm.showCenterPanel = true;
	                highlightCurrentPriceRule(index);
	            } else {
	                index = selectedRuleIndex;
	            }
	
	            var selectedPriceRule = vm.selectedPriceRuleSet.PriceRuleDOs[index],
	                priceRuleSO = selectedPriceRule.PriceRuleSO,
	                priceRuleId = priceRuleSO.Id,
	                toBeCalledWithPageNumber;
	            if (pageNumber >= 0) {
	                toBeCalledWithPageNumber = (type === 'next' ? (pageNumber + 1) : (pageNumber + 1));
	                priceRuleEntryPageNumber = pageNumber;
	                vm.isRightPanelVisible = true;
	            } else {
	                toBeCalledWithPageNumber = priceRuleEntryPageNumber;
	            }
	
	            pricePipelineRulesService.getPriceRule(priceRuleId, vm.numberOfProductsPerChunk, toBeCalledWithPageNumber)
	                .then(function(response) {
	                    if (angular.isDefined(response.PriceRuleDO.PriceRuleEntrySOs)) {
	                        prepareMatrixTableHeaders(response);
	                        prepareMatrixTableContent(response);
	                        updateRuleEntryPagination(response.PriceRuleDO.PriceRuleEntrySOs.length);
	                    } else {
	                        vm.disablePriceRuleEntryRightBtn = true;
	                        priceRuleEntryPageNumber--;
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        function loadPriceRuleDetailsCall(index) {
	            resetMatrixTable();
	            selectedRuleIndex = index;
	            vm.selectedPriceRule = vm.selectedPriceRuleSet.PriceRuleDOs[index];
	            vm.showCenterPanel = true;
	            highlightCurrentPriceRule(index);
	            loadPriceRuleEntries();
	        }
	
	        vm.loadPriceRuleDetails = function(index) {
	            //loadPriceRuleDetailsCall(index);
	            /* 
	             * TODO : Save if any is opened already. and then load this new one 
	             *  1. get the right pricing matrix from the right side panel. use matrix id for this .
	             *  2. make the header array and value array from the selected pli.
	             *  3. load the data in the center of the panel 
	             */
	
	            if (vm.selectedPriceRule && Object.keys(vm.selectedPriceRule).length > 0) {
	                updatePriceRuleItem()
	                    .then(function(response) {
	                        $timeout(function() {
	                            vm.numberOfProductsPerChunk = pricePipelineRulesetConstants.treePanelItemsPerChunk;
	                            loadPriceRuleDetailsCall(index);
	                        }, 100);
	
	                    }, function(reason) {});
	            } else {
	                loadPriceRuleDetailsCall(index);
	            }
	        };
	        vm.getPriceRuleEntry = function(type) {
	            var selectedMIndex = selectedRuleIndex,
	                matrixEntryPageNumber;
	            if (type === 'next') {
	                priceRuleEntryPageNumber++;
	            } else if (type === 'previous') {
	                priceRuleEntryPageNumber--;
	            }
	            matrixEntryPageNumber = priceRuleEntryPageNumber;
	            /* TODO : Save the current 25 items first and on success load the rest data set */
	            /* Prepare the MatrixDO if any and then call the udpate PLI */
	            updatePriceRuleItem()
	                .then(function(response) {
	                    loadPriceRuleEntries(type, matrixEntryPageNumber, selectedMIndex);
	                }, function(reason) {});
	
	        };
	        var priceRuleEntriesDeregisterFunction = $scope.$watch('vm.numberOfProductsPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                if (vm.selectedPriceRule && Object.keys(vm.selectedPriceRule).length > 0) {
	                    var selectedIndex = selectedRuleIndex;
	                    updatePriceRuleItem()
	                        .then(function(response) {
	                            $timeout(function() {
	                                priceRuleEntryPageNumber = 0;
	                                loadPriceRuleDetailsCall(selectedIndex);
	                            }, 100);
	                        }, function(reason) {});
	                }
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            priceRuleEntriesDeregisterFunction();
	            vm = null;
	        });
	
	        var toBeRemovedId, typeToBeRemoved, toBeRemovedIndex;
	
	        function resetDeleteSetup() {
	            toBeRemovedId = typeToBeRemoved = toBeRemovedIndex = undefined;
	        }
	
	        vm.showRemoveConfirmation = function(id, type, index) {
	            vm.confiramtionPopup = true;
	            toBeRemovedId = id;
	            typeToBeRemoved = type;
	            toBeRemovedIndex = (type === 'PriceRule' ? selectedRuleIndex : index);
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.ConfirmMatrixDelete,
	                messageNote: vm.labels.DeleteMessageNote
	            }
	        };
	
	        function reloadPrDetails() {
	            pricePipelineRulesetCommonService.getSelectedPricePipelineRulesetDetails($stateParams.id, true)
	                .then(function(response) {
	                    vm.selectedPriceRule = response;
	                });
	        }
	
	        function reSequencePrEntries() {
	            for (var item = 0; item < vm.matrixTable.values.length; item++) {
	                vm.matrixTable.values[item].sequence = ((item + 1) + (priceRuleEntryPageNumber * vm.numberOfProductsPerChunk));
	            }
	        }
	
	        function removePriceRuleEntry(priceRuleEntryId, index) {
	            if (priceRuleEntryId) {
	                pricePipelineRulesService.deletePriceRuleEntry(priceRuleEntryId)
	                    .then(function(response) {
	                        vm.matrixTable.values.splice(index, 1);
	                        updateRuleEntryPagination(vm.matrixTable.values.length);
	                        resetDeleteSetup();
	                        reSequencePrEntries();
	                    }, function(reason) {});
	            } else {
	                vm.matrixTable.values.splice(index, 1);
	                updateRuleEntryPagination(vm.matrixTable.values.length);
	                resetDeleteSetup();
	                reSequencePrEntries();
	            }
	        }
	
	        function sequencePriceRules() {
	            var rules = vm.selectedPriceRuleSet.PriceRuleDOs;
	            for (var i = 0; i < rules.length; i++) {
	                rules[i].PriceRuleSO[getPrefixedAttribute('Sequence__c')] = (i + 1);
	            }
	        }
	
	        function removePriceRule(priceRuleId, index) {
	            pricePipelineRulesService.deletePriceRule(priceRuleId)
	                .then(function(response) {
	                    vm.selectedPriceRuleSet.PriceRuleDOs.splice(index, 1);
	                    resetMatrixTable();
	                    resetDeleteSetup();
	                    sequencePriceRules();
	                    updatePriceRuleItem()
	                        .then(function(res) {
	                            //reloadPrDetails();
	                        });
	
	                }, function(reason) {});
	        }
	
	        vm.confirmRemove = function() {
	            vm.confiramtionPopup = false;
	            if (typeToBeRemoved === 'PriceRule') {
	                removePriceRule(toBeRemovedId, toBeRemovedIndex);
	            } else if (typeToBeRemoved === 'PriceRuleEntry') {
	                removePriceRuleEntry(toBeRemovedId, toBeRemovedIndex);
	            }
	
	        };
	
	        vm.cancelRemove = function() {
	            vm.confiramtionPopup = false;
	            resetDeleteSetup();
	        };
	
	        function getNextRuleEntrySequence() {
	            var nextSequence,
	                sequenceArr = [],
	                maxSequence;
	            for (var i = 0; i < vm.matrixTable.values.length; i++) {
	                var sequence = vm.matrixTable.values[i].sequence;
	                if (sequence) {
	                    sequenceArr.push(sequence);
	                }
	            }
	            if (sequenceArr.length > 0) {
	                maxSequence = Math.max.apply(Math, sequenceArr);;
	                if (maxSequence) {
	                    nextSequence = maxSequence + 1;
	                }
	            }
	            return nextSequence || 1;
	        }
	        vm.addRowToEntryTable = function(index) {
	            /*TODO : allow only 25 items to be added per page. show warning message after that */
	                var ruleType = vm.ruleType,
	                    samplePriceRuleEntry,
	                    PriceRuleSO = vm.selectedPriceRule.PriceRuleSO;
	
	                if (ruleType === 'Dimension') {
	                    samplePriceRuleEntry = pricePipelineRulesService.getSampleData('Dimension');
	
	                } else if (ruleType === 'Volume') {
	                    samplePriceRuleEntry = pricePipelineRulesService.getSampleData('Volume');
	
	                } else if (ruleType === 'Inclusion') {
	                    samplePriceRuleEntry = pricePipelineRulesService.getSampleData('Inclusion');
	                } else if (ruleType === 'Condition') {
	                    samplePriceRuleEntry = pricePipelineRulesService.getSampleData('Condition');
	                }
	                samplePriceRuleEntry.priceRuleId = vm.selectedPriceRule.PriceRuleSO.Id;
	                samplePriceRuleEntry.sequence = '';
	
	                if (index >= 0) {
	                    vm.matrixTable.values.splice((index + 1), 0, angular.copy(samplePriceRuleEntry));
	                } else {
	                    vm.matrixTable.values.push(angular.copy(samplePriceRuleEntry));
	                }
	                updateRuleEntryPagination(vm.matrixTable.values.length);
	                reSequencePrEntries();
	                newEntryAdded = true;
	        };
	
	        vm.save = function(e, toState, toParams) {
	            updatePriceRuleItem(toState, toParams, true);
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (isFormSaved) {
	                return true;
	            } else {
	                // TODO: REMOVE THE RETURN TRUE AND ACTUALLY VALIDATE THE FORM AND SAVE THE PAGE
	                return true;
	                e.preventDefault();
	                vm.save(e, toState, toParams);
	            }
	        });
	
	        function addAlert(obj) {
	            vm.alertList = [];
	            vm.alertList.push(obj);
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        function findIndex(arr, obj) {
	            var index;
	            for (var item = 0; item < arr.length; item++) {
	                if (angular.equals(angular.copy(arr[item]), angular.copy(obj))) {
	                    index = item;
	                }
	            }
	            return index;
	        }
	
	        vm.addDroppedPriceRule = function(event, index, item) {
	            var location = findIndex(angular.copy(vm.selectedPriceRuleSet.PriceRuleDOs), item);
	            if (location >= 0) {
	                vm.selectedPriceRuleSet.PriceRuleDOs.splice(parseInt(location), 1);
	            }
	            vm.selectedPriceRuleSet.PriceRuleDOs.splice(parseInt(index), 0, item);
	
	            for (var item = 0; item < vm.selectedPriceRuleSet.PriceRuleDOs.length; item++) {
	                vm.selectedPriceRuleSet.PriceRuleDOs[item].PriceRuleSO[getPrefixedAttribute('Sequence__c')] = (item + 1);
	            }
	
	            if (vm.selectedPriceRule) {
	                for (var item = 0; item < vm.selectedPriceRuleSet.PriceRuleDOs.length; item++) {
	                    if (vm.selectedPriceRuleSet.PriceRuleDOs[item].PriceRuleSO.Id === vm.selectedPriceRule.PriceRuleSO.Id) {
	                        vm.selectedPriceRule.PriceRuleSO[getPrefixedAttribute('Sequence__c')] = vm.selectedPriceRuleSet.PriceRuleDOs[item].PriceRuleSO[getPrefixedAttribute('Sequence__c')];
	                    }
	                }
	            }
	            pricePipelineRulesetCommonService.updatePriceRuleset(angular.copy(vm.selectedPriceRuleSet), true);
	            return true;
	        };
	
	        vm.addDroppedPriceRuleEntries = function(event, index, item) {
	            var location = findIndex(angular.copy(vm.matrixTable.values), item);
	            if (location >= 0) {
	                vm.matrixTable.values.splice(parseInt(location), 1);
	            }
	            vm.matrixTable.values.splice(parseInt(index), 0, item);
	
	            reSequencePrEntries();
	
	            return true;
	        };
	
	        vm.goToListingPage = function() {
	            isFormSaved = true;
	            $state.go('app.pricePipelineRuleset.list');
	        };
	
	        vm.openConditionCriteria = function(condition, index) {
	            $mdDialog.show({
	                    controller: __webpack_require__(620),
	                    template: __webpack_require__(621),
	                    parent: angular.element(document.body),
	                    clickOutsideToClose: false,
	                    controllerAs: 'vm',
	                    resolve: {
	                        selectedCondition: function() {
	                            return condition;
	                        },
	                        selectedMatrixEntryIndex: function() {
	                            return index;
	                        }
	                    }
	                })
	                .then(function(requestObj) {
	                    updateMatrixEntryObj(requestObj);
	                }, function() {});
	        };
	
	        function updateMatrixEntryObj(obj) {
	            var selectedIndex = obj.index,
	                conditionCriteria = removeExtraFieldsFromConditionCriteria(obj.conditionCriteria),
	                matrixEntry = vm.matrixTable.values[selectedIndex];
	
	            matrixEntry.condition = JSON.stringify(conditionCriteria);
	            matrixEntry.expression = conditionCriteria.exprStr;
	
	        }
	
	        function removeExtraFieldsFromConditionCriteria(conditionCriteria) {
	            var filters = conditionCriteria.filter.predicates,
	                childFilters = conditionCriteria.filter.childFilter.predicates;
	            if (filters.length) {
	                for (var i = 0; i < filters.length; i++) {
	                    delete filters[i].picklistValues;
	                    delete filters[i].targetField;
	                }
	            }
	            if (childFilters.length) {
	                for (var i = 0; i < childFilters.length; i++) {
	                    delete childFilters[i].picklistValues;
	                    delete childFilters[i].targetField;
	                }
	            }
	            return conditionCriteria;
	        }
	
	        function prepareConditionEntries() {
	            var temp = vm.matrixTable.values,
	                priceRuleEntrySOs = [],
	                hasError = false;
	            if (vm.selectedPriceRuleSet && vm.selectedPriceRule && (selectedRuleIndex !== undefined)) {
	                for (var i = 0; i < temp.length; i++) {
	                    var eachObj = {};
	                    if (temp[i].id) {
	                        eachObj['Id'] = temp[i].id;
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentAmount__c')] = temp[i].adjustmentAmount;
	                    eachObj[getPrefixedAttribute('AdjustmentType__c')] = temp[i].adjustmentType;
	                    eachObj[getPrefixedAttribute('MatchInAsset__c')] = temp[i].matchInAsset;
	                    eachObj[getPrefixedAttribute('PriceRuleId__c')] = temp[i].priceRuleId;
	                    if (temp[i].productGroup.autocomplete && temp[i].productGroup.autocomplete.selectedItem && temp[i].productGroup.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('ProductGroupId__c')] = temp[i].productGroup.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('ProductGroupId__c')] = '';
	                    }
	                    if (temp[i].adjustmentAmountSource.autocomplete && temp[i].adjustmentAmountSource.autocomplete.selectedItem && temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id) {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = temp[i].adjustmentAmountSource.autocomplete.selectedItem.Id;
	                    } else {
	                        eachObj[getPrefixedAttribute('AdjustmentAmountSourceId__c')] = '';
	                    }
	                    eachObj[getPrefixedAttribute('AdjustmentUom__c')] = temp[i].adjustmentUOM;
	                    setPriceRuleEntryEffectiveDates(temp[i], eachObj, true);
	                    var condition = temp[i].condition,
	                        conditionObj;
	                    if (condition) {
	                        conditionObj = JSON.parse(temp[i].condition);
	                    } else {
	                        conditionObj = '';
	                    }
	                    if (!conditionObj.exprStr) {
	                        hasError = true;
	                        temp[i].hasError = true;
	                        addAlert({
	                            msg: vm.labels.ConditionPriceRuleRequired,
	                            type: cpqAdminConstants.DANGER
	                        });
	                        break;
	                    } else {
	                        delete temp[i].hasError;
	                    }
	                    eachObj[getPrefixedAttribute('Condition__c')] = temp[i].condition ? temp[i].condition : '';
	                    eachObj[getPrefixedAttribute('Sequence__c')] = temp[i].sequence;
	                    priceRuleEntrySOs.push(eachObj);
	                }
	                if (hasError) {
	                    return hasError;
	                } else {
	                    vm.selectedPriceRuleSet.PriceRuleDOs[selectedRuleIndex].PriceRuleEntrySOs = priceRuleEntrySOs;
	                    return hasError;
	                }
	            }
	            return hasError;
	        }
	
	        function prepareConditionTableContent(priceRuleEntrySOs) {
	            if (priceRuleEntrySOs.length) {
	                for (var i = 0; i < priceRuleEntrySOs.length; i++) {
	                    var temp = {};
	                    temp['id'] = priceRuleEntrySOs[i].Id;
	                    temp['sequence'] = priceRuleEntrySOs[i][getPrefixedAttribute('Sequence__c')];
	                    temp['expression'] = getConditionExpression(priceRuleEntrySOs[i][getPrefixedAttribute('Condition__c')])
	                    temp['adjustmentAmount'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmount__c')] || '';
	                    temp['adjustmentType'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentType__c')] || '';
	                    temp['condition'] = priceRuleEntrySOs[i][getPrefixedAttribute('Condition__c')] || '';
	                    temp['matchInAsset'] = priceRuleEntrySOs[i][getPrefixedAttribute('MatchInAsset__c')] || false;
	                    temp['priceRuleId'] = priceRuleEntrySOs[i][getPrefixedAttribute('PriceRuleId__c')] || '';
	                    var productGroup = priceRuleEntrySOs[i][getPrefixedAttribute('ProductGroupId__r')] || '';
	                    temp['productGroup'] = {
	                        'autocomplete': {
	                            querySearch: pricePipelineRulesetCommonService.searchProductGroup,
	                            displayName: 'Name'
	                        }
	                    };
	                    if (productGroup) {
	                        temp['productGroup'].autocomplete.selectedItem = {
	                            Id: productGroup.Id,
	                            Name: productGroup.Name
	                        };
	                    }
	                    const adjustmentAmountSource = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentAmountSourceId__r')];
	                    temp['adjustmentAmountSource'] = {
	                        'autocomplete': {
	                            'querySearch': apiCallsService.searchSObjectRecords,
	                            'displayName': 'Name',
	                            'selectedItem': null,
	                            'sObjectName': getPrefixedAttribute('FormulaField__c')
	                        }
	                    };
	                    if (adjustmentAmountSource) {
	                        temp.adjustmentAmountSource.autocomplete.selectedItem = {
	                            Name: adjustmentAmountSource.Name,
	                            Id: adjustmentAmountSource.Id
	                        };
	                    }
	                    temp['adjustmentUOM'] = priceRuleEntrySOs[i][getPrefixedAttribute('AdjustmentUom__c')] || '';
	                    setPriceRuleEntryEffectiveDates(temp, priceRuleEntrySOs[i], false);
	                    vm.matrixTable.values.push(temp);
	                }
	            }
	        }
	
	        function getConditionExpression(conditionObj) {
	            var obj = JSON.parse(conditionObj);
	            return obj.exprStr;
	        }
	
	        function setPriceRuleEntryEffectiveDates(sourceObj, priceRuleEntrySObject, setOnSObject) {
	            if (vm.selectedPriceRuleSet.PriceRulesetSO[getPrefixedAttribute('EnableDateRange__c')]) {
	                if (setOnSObject) {
	                    priceRuleEntrySObject[getPrefixedAttribute('PeriodStartDate__c')] = sourceObj.periodStartDate;
	                    priceRuleEntrySObject[getPrefixedAttribute('PeriodEndDate__c')] = sourceObj.periodEndDate;
	                } else {
	                    if (priceRuleEntrySObject[getPrefixedAttribute('PeriodStartDate__c')] >= 0) {
	                        sourceObj['periodStartDate'] = priceRuleEntrySObject[getPrefixedAttribute('PeriodStartDate__c')];
	                    }
	                    if (priceRuleEntrySObject[getPrefixedAttribute('PeriodEndDate__c')] >= 0) {
	                        sourceObj['periodEndDate'] = priceRuleEntrySObject[getPrefixedAttribute('PeriodEndDate__c')];
	                    }
	                }
	            }
	        }
	
	        function addEffectiveDatesColumnHeaders() {
	            if (vm.selectedPriceRuleSet.PriceRulesetSO[getPrefixedAttribute('EnableDateRange__c')]) {
	                vm.matrixTable.headers.push({name: vm.labels.StartDate});
	                vm.matrixTable.headers.push({name: vm.labels.EndDate});
	            }
	        }
	    };
	
	    matricesController.$inject = [
	        '$q',
	        '$stateParams',
	        '$state',
	        '$scope',
	        'systemConstants',
	        'i18nService',
	        '$mdDialog',
	        'selectedPricePipelineRuleDetails',
	        'applicationService',
	        'pricePipelineRulesetConstants',
	        '$timeout',
	        'pricePipelineRulesService',
	        'allPricePipelineRuleEntryPicklists',
	        'pricePipelineRulesetCommonService',
	        '$templateCache',
	        'allPricePipelineRulePicklists',
	        'cpqAdminConstants',
	        'apiCallsService'
	    ];
	
	    module.exports = matricesController;
	})();


/***/ }),
/* 803 */
725,
/* 804 */
726,
/* 805 */
727,
/* 806 */
728,
/* 807 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var pricePipelineRuleModalController = function($scope, $mdDialog, i18nService, systemConstants, pricePipelineRulesetConstants, selectedPriceRule, type, allPicklists, pricePipelineRulesService, apiCallsService) {
	        var vm = this,
	            prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = prefix;
	        vm.ruleNameMaxLength = pricePipelineRulesetConstants.maxLength;
	        vm.dimensions = [];
	        /* 
	         * Utility method to add Org specific specific prefixes to keys
	         */
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (attribute.indexOf('__') > -1 ? prefix + attribute : attribute).trim();
	        }
	
	        vm.alertList = [];
	        vm.selectedPriceRule = angular.copy(selectedPriceRule);
	
	        function prepareDimensions() {
	            var priceRuleSO = selectedPriceRule.PriceRuleSO;
	            vm.dimensions = [];
	            for (var i = 0; i < 6; i++) {
	                var objName = getPrefixedAttribute('Dimension' + (i + 1) + 'Id__r'),
	                    objValueType = getPrefixedAttribute('Dimension' + (i + 1) + 'ValueType__c'),
	                    id = objName.Id;
	                if (priceRuleSO[objName]) {
	                    vm.dimensions.push({
	                        id: id,
	                        dimensionValueType: priceRuleSO[objValueType],
	                        dimensionLabel: 'Dimension ' + (i + 1),
	                        autocomplete: {
	                            'querySearch': pricePipelineRulesService.getPriceDimensions,
	                            'displayName': 'Name',
	                            'selectedItem': {
	                                Name: priceRuleSO[objName].Name,
	                                Id: priceRuleSO[objName].Id
	                            }
	                        }
	                    });
	                } else {
	                    vm.dimensions.push({
	                        dimensionValueType: priceRuleSO[objValueType],
	                        dimensionLabel: 'Dimension ' + (i + 1),
	                        autocomplete: {
	                            'querySearch': pricePipelineRulesService.getPriceDimensions,
	                            'displayName': 'Name'
	                        }
	                    });
	                }
	            }
	        }
	
	        /* Uncomment the below code once APIs are ready */
	        prepareDimensions();
	
	        function getPicklistValues(type) {
	            var response = [],
	                noneVar = {
	                    label: vm.labels.NoneAsPickListValue,
	                    value: ''
	                };
	            if (allPicklists.length && type) {
	                for (var i = 0; i < allPicklists.length; i++) {
	                    if (allPicklists[i].FieldName === getPrefixedAttribute(type)) {
	                        response = angular.copy(allPicklists[i].PicklistValues);
	                        break;
	                    }
	                }
	            }
	            response.unshift(noneVar);
	            return response;
	        }
	
	        vm.dimensionPicklistEntries = {
	            PicklistValues: getPicklistValues('Dimension1ValueType__c')
	        };
	        vm.pricePointSourcePicklistEntries = {
	            PicklistValues: getPicklistValues('PricePointSource__c')
	        };
	        vm.targetPricePointsAutocomplete = {
	            autocomplete: {
	                querySearch: apiCallsService.searchSObjectRecords,
	                displayName: 'Name',
	                sObjectName: getPrefixedAttribute('PriceRule__c')
	            }
	        };
	        vm.ruleTypePicklistEntries = {
	            PicklistValues: getPicklistValues('RuleType__c')
	        };
	        vm.allowableActionPicklistEntries = {
	            PicklistValues: getPicklistValues('AllowableAction__c')
	        };
	        vm.adjustmentChargeTypePicklistEntries = {
	            PicklistValues: getPicklistValues('AdjustmentChargeType__c')
	        };
	
	        function addAlert(obj) {
	            vm.alertList.push(obj);
	        }
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	
	        vm.removeDimension = function(index) {
	            var item = vm.dimensions[index];
	            item.dimensionValueType = '';
	            delete item.autocomplete.selectedItem;
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        function addDimensionsToMatrixSo() {
	            var errorFree = true,
	                uniqueEntries = [];
	
	            for (var i = 0; i < vm.dimensions.length; i++) {
	                var dimension = vm.dimensions[i].autocomplete.selectedItem,
	                    objName = getPrefixedAttribute('Dimension' + (i + 1) + 'Id__c'),
	                    relationObjName = getPrefixedAttribute('Dimension' + (i + 1) + 'Id__r'),
	                    objValueType = getPrefixedAttribute('Dimension' + (i + 1) + 'ValueType__c');
	
	                if (dimension && dimension.Id) {
	                    if (uniqueEntries.indexOf(dimension.Id) <= -1) {
	
	                        uniqueEntries.push(dimension.Id);
	
	                        vm.selectedPriceRule.PriceRuleSO[objName] = dimension.Id;
	                        vm.selectedPriceRule.PriceRuleSO[relationObjName] = {
	                            Id: dimension.Id,
	                            Name: dimension.Name
	                        };
	                        vm.selectedPriceRule.PriceRuleSO[objValueType] = vm.dimensions[i].dimensionValueType;
	                    } else {
	                        addAlert({
	                            msg: vm.labels.DuplicateDimensions
	                        });
	                        errorFree = false;
	                        break;
	                    }
	                } else {
	                    vm.selectedPriceRule.PriceRuleSO[objName] = '';
	                    vm.selectedPriceRule.PriceRuleSO[relationObjName] = {
	                        Id: '',
	                        Name: ''
	                    };
	                    vm.selectedPriceRule.PriceRuleSO[objValueType] = '';
	                }
	
	            }
	            return errorFree;
	        }
	        vm.save = function() {
	            vm.priceRuleForm.$setSubmitted();
	            if (vm.priceRuleForm.$valid) {
	                if (addDimensionsToMatrixSo()) {
	                    $mdDialog.hide({
	                        type: type,
	                        rule: angular.copy(vm.selectedPriceRule)
	                    });
	                }
	            }
	
	        };
	
	    };
	
	    pricePipelineRuleModalController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'pricePipelineRulesetConstants',
	        'selectedPriceRule',
	        'type',
	        'allPicklists',
	        'pricePipelineRulesService',
	        'apiCallsService'
	    ];
	
	    module.exports = pricePipelineRuleModalController;
	})();


/***/ }),
/* 808 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"price-rule-dialog\">\n    <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\"><i class=\"material-icons\">clear</i>\n        </i>\n    </button>\n    <md-dialog-content class=\"price-rule-dialog-content\">\n        <md-tabs md-selected=\"vm.selctedTabIndex\" md-dynamic-height md-border-bottom>\n            <md-tab label=\"DETAILS\">\n                <md-content>\n                    <div class=\"error-indicator\">\n                        <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"5000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n                    </div>\n                    <div class=\"md-padding content-wide\">\n                        <form class=\"product-detail-form\" novalidate name=\"vm.priceRuleForm\">\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO.Name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"vm.labels.RuleName\" name=\"ruleName\" is-required=\"true\" max-length=\"{{vm.ruleNameMaxLength}}\">\n                                    </material-form-field>\n                                    <div ng-messages=\"vm.priceRuleForm.ruleName.$error\" ng-if=\"vm.priceRuleForm.ruleName.$touched || vm.priceRuleForm.$submitted\">\n                                        <p ng-message=\"required\" class=\"formError\">\n                                            {{vm.labels.MandatoryField}}\n                                        </p>\n                                    </div>\n                                </div>\n                                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'Sequence__c']\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"vm.labels.Sequence\" name=\"sequence\" is-required=\"true\" is-disabled=\"true\">\n                                    </material-form-field>\n                                    <div ng-messages=\"vm.priceRuleForm.sequence.$error\" ng-if=\"vm.priceRuleForm.sequence.$touched || vm.priceRuleForm.$submitted\">\n                                        <p ng-message=\"required\" class=\"formError\">\n                                            {{vm.labels.MandatoryField}}\n                                        </p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" style=\"height:85px;\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'Description__c']\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.ShortDescription\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+ 'StopProcessingMoreRules__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.StopProcessingMoreRules\" show-inline=\"true\">\n                                    </material-form-field>\n                                </div>\n                                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+ 'Active__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.IsActive\" show-inline=\"true\"></material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'PricePointSource__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.pricePointSourcePicklistEntries\" field-label=\"::vm.labels.PricePointSource\" name=\"pricePointSource\">\n                                    </material-form-field>\n                                </div>\n                                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                    <material-form-field model=\"\" field-type=\"multiselect-autocomplete\" is-editable=\"true\" properties=\"vm.targetPricePointsAutocomplete\" field-label=\"::vm.labels.TargetPricePoints\" name=\"targetPricePoints\"></material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'RuleType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.ruleTypePicklistEntries\" field-label=\"::vm.labels.RuleType\" name=\"ruleType\">\n                                    </material-form-field>\n                                </div>\n                                <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'AllowableAction__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.allowableActionPicklistEntries\" field-label=\"::vm.labels.AllowableAction\" name=\"allowableAction\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'AdjustmentChargeType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.adjustmentChargeTypePicklistEntries\" field-label=\"::vm.labels.AdjustmentChargeType\" name=\"adjustmentChargeType\">\n                                    </material-form-field>\n                                </div>\n                            </div>\n                            <div layout=\"row\">\n                                <div class=\"flex\" flex=\"45\">\n                                    <material-form-field model=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+ 'AllowRemovalOfAdjustment__c']\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.AllowRemovalOfAdjustment\" show-inline=\"true\"></material-form-field>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </md-content>\n            </md-tab>\n            <md-tab label=\"DIMENSIONS\" ng-if=\"vm.selectedPriceRule.PriceRuleSO[vm.prefix+'RuleType__c'] === 'Dimension'\">\n                <md-content>\n                    <div class=\"dimension-container\">\n                        <div data-ng-repeat=\"item in vm.dimensions\" class=\"each-dimension\">\n                            <div class=\"auto-complete-field\">\n                                <material-form-field field-type=\"autocomplete\" properties=\"item\" field-label=\"::item.dimensionLabel\">\n                                </material-form-field>\n                            </div>\n                            <div class=\"auto-complete-field\">\n                                <material-form-field model=\"item.dimensionValueType\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.dimensionPicklistEntries\" field-label=\"::vm.labels.DimensionValueType\" name=\"dimensionValueType\">\n                                </material-form-field>\n                            </div>\n                            <div class=\"action-items\">\n                                <div class=\"btn-group\" role=\"group\">\n                                    <button type=\"button\" class=\"slds-button slds-button--icon\" data-ng-click=\"vm.removeDimension($index)\">\n                                        <i class=\"material-icons\">clear</i>\n                                    </button>\n                                </div>\n                            </div>\n                            <div class=\"clearfix\"></div>\n                        </div>\n                    </div>\n                </md-content>\n            </md-tab>\n        </md-tabs>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>\n"

/***/ }),
/* 809 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var pricePipelineRulesetController = function($state, $scope, $rootScope, i18nService, pricePipelineRulesetCommonService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	
	        function findStateName(stateName) {
	            vm.stateCurrentName = stateName;
	        }
	        findStateName($state.current.name);
	
	        $scope.$on('$stateChangeSuccess', function(e, toState, toParams) {
	            findStateName(toState.name);
	            updateTabMenus();
	        });
	
	        /* Menu for specific Tabs */
	        vm.tabFirstMenu = '';
	        vm.tabMenuItems = [];
	
	        function updateTabMenus() {
	            var currentState = vm.stateCurrentName,
	                currentHash = currentState.split('app.pricePipelineRuleset.')[1];
	            switch (currentHash) {
	                case 'details':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewPricePipelineRuleset;
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                case 'pricePipelineRules':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewPricePipelineRule;
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                default:
	                    {
	                        vm.tabFirstMenu = '';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	            }
	        }
	
	        vm.tabMenuClicked = function(menuName) {
	            var eventName = menuName.split(' ').join('-');
	            $scope.$broadcast(eventName);
	        };
	
	        vm.currentState = $state.current.name;
	
	        $scope.$watch(function() {
	            return pricePipelineRulesetCommonService.getSelectedPRS();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                vm.selectedPRS = newValue;
	            }
	        }, true);
	    };
	
	    pricePipelineRulesetController.$inject = [
	        '$state',
	        '$scope',
	        '$rootScope',
	        'i18nService',
	        'pricePipelineRulesetCommonService'
	    ];
	
	    module.exports = pricePipelineRulesetController;
	})();


/***/ }),
/* 810 */
732,
/* 811 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"price-ruleset\">\n    <div class=\"price-ruleset-main-container\">\n        <div class=\"price-ruleset-header title-bar\">\n            <div class=\"price-ruleset-title-container title\">\n                <div class=\"price-ruleset-info\">\n                    <span class=\"title\">{{vm.selectedPRS.name}}</span>\n                </div>\n            </div>\n            <div id=\"navbar\">\n                <price-pipeline-ruleset-sub-menu></price-pipeline-ruleset-sub-menu>\n                <!-- Product menu bar with its values -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"list-product-btn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabFirstMenu)\" data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                        <div class=\"drop drop-menu\" data-ng-if=\"::vm.tabMenuItems.length > 0\">\n                            <md-menu md-offset=\"50 50\">\n                                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                    <i class=\"material-icons\">more_vert</i>\n                                </button>\n                                <md-menu-content width=\"2\">\n                                    <md-menu-item data-ng-repeat=\"menu in ::vm.tabMenuItems\">\n                                        <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                            <div layout=\"row\" flex>\n                                                <p flex>{{::menu}}</p>\n                                            </div>\n                                        </md-button>\n                                    </md-menu-item>\n                                </md-menu-content>\n                            </md-menu>\n                        </div>\n                    </div>\n                </ul>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"price-ruleset-center-container\">\n            <!-- Content layout starts -->\n            <div ui-view=\"pricePipelineRulesetContainer\" class=\"price-ruleset-container\"></div>\n            <!-- Content layout ends -->\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 812 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    __webpack_require__(813);
	    __webpack_require__(818);
	    __webpack_require__(820);
	    __webpack_require__(824);
	    
	    module.exports = angular.module('cpqAdmin.visibilityRules', [
	
	            'cpqAdmin.visibilityRules.common.services',
	            'cpqAdmin.visibilityRules.common.directives',
	            'cpqAdmin.visibilityRules.list',
	            'cpqAdmin.visibilityRules.details'
	        ])
	        .controller('visibilityRulesController', __webpack_require__(832))
	        .constant('visibilityRulesConstants', __webpack_require__(833))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.visibilityRules', {
	                url: '/visibilityRules',
	                //abstract: true,
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(834),
	                        controller: 'visibilityRulesController',
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 813 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.visibilityRules.common.directives', [])
	        .directive('visibilityRulesSubMenu', __webpack_require__(814))
	        .directive('visibilityRulesListing', __webpack_require__(816));
	})();


/***/ }),
/* 814 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var visibilityRulesSubMenuController = function($stateParams, systemConstants, i18nService) {
	        var vm = this;
	
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	
	    };
	
	    visibilityRulesSubMenuController.$inject = [
	        '$stateParams',
	        'systemConstants',
	        'i18nService'
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: visibilityRulesSubMenuController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(815),
	    };
	};


/***/ }),
/* 815 */
/***/ (function(module, exports) {

	module.exports = "<ul class=\"nav navbar-nav visibility-rules-menu\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.visibilityRules.details({id:vm.$stateParams.id})\">{{::vm.labels.Details}}</a>\n    </li>\n</ul>\n"

/***/ }),
/* 816 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    module.exports = [
	        function() {
	            var visibilityRulesListingController = function($scope, systemConstants, $state, $stateParams,
	                i18nService, visibilityRulesCommonService, visibilityRulesConstants) {
	
	                var vm = this,
	                    prefix = systemConstants.nsPrefix || '',
	                    filter = {
	                        SearchString: '',
	                        ChunkNumber: 1,
	                        NumberOfRecordsPerChunk: visibilityRulesConstants.numberOfRecordsPerChunk || 50
	                    },
	                    pageNumber = 1;
	
	                vm.labels = i18nService.CustomLabel;
	                vm.disableLeftBtn = true;
	                vm.searchedStr = '';
	                vm.isMaxSQLSizeExceed = false;
	                vm.numberOfRecordsPerChunk = visibilityRulesConstants.numberOfRecordsPerChunk || 50;
	
	                vm.searchvisibilityRules = function() {
	                    filter.SearchString = vm.searchText || '';
	                    filter.ChunkNumber = 1;
	                    filter.NumberOfRecordsPerChunk = vm.numberOfRecordsPerChunk;
	                    vm.searchedStr = filter.SearchString;
	                    loadvisibilityRules();
	                };
	
	                vm.prepareFiltersAndvisibilityRules = function() {
	                    filter = visibilityRulesCommonService.filter;
	                    if (Object.keys(filter).length) {
	                        vm.searchText = filter.SearchString;
	                    } else {
	                        filter = {
	                            ChunkNumber: pageNumber || 1,
	                            NumberOfRecordsPerChunk: vm.numberOfRecordsPerChunk,
	                            SearchString: vm.searchString || ''
	                        };
	                    }
	                };
	
	                /* On Page load while there are no filters applied */
	                vm.prepareFiltersAndvisibilityRules();
	
	                vm.getVisibilityRules = function(type) {
	                    if (type === 'next') {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber + 1);
	                        if (filter.ChunkNumber !== 1) {
	                            vm.disableLeftBtn = false;
	                        }
	                        loadvisibilityRules();
	                    } else {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber - 1);
	                        if (filter.ChunkNumber === 1) {
	                            vm.disableLeftBtn = true;
	                        }
	                        loadvisibilityRules();
	                    }
	                };
	
	                var pLDeRegisterFunc = $scope.$watch(function() {
	                    return visibilityRulesCommonService.allVisibilityRules;
	                }, function(newValue, oldValue) {
	                    if (newValue && oldValue) {
	                        processData(newValue);
	                    }
	                }, true);
	
	                function processData(visibilityRules) {
	                    /* Used to bind to table body */
	                    vm.visibilityRules = visibilityRules;
	                    vm.isMaxSQLSizeExceed = false;
	
	                    /**
	                     * - Check if the response size is less than the current chunk size.
	                     * - If less, disable the next button
	                     * - else keep it enabled
	                     */
	
	                    if (visibilityRules.length < filter.NumberOfRecordsPerChunk) {
	                        vm.disableRightBtn = true;
	                        updateCenterBtnText(filter, visibilityRules.length);
	                    } else {
	                        vm.disableRightBtn = false;
	                        updateCenterBtnText(filter, visibilityRules.length);
	                    }
	
	                    /* Hide the loader on success of service call */
	                    vm.showLoader = false;
	                    document.querySelector('.list-table').scrollTop = 0;
	                }
	
	                function loadvisibilityRules() {
	                    vm.showLoader = true;
	                    visibilityRulesCommonService.loadAllVisibilityRules(filter);
	                }
	
	                function updateCenterBtnText(filterObj, endCount) {
	                    /* 
	                     * - Search result might return lesser number of records than current pagination count.
	                     * e.g. current pagination is : 1-150, but search returned only 20 records.
	                     * - Then pagination should be updated to 1-20 instead of 1-150.
	                     * - endCount variable contains the exact number of records and will only be defined, if
	                     * search count is less than current pagination sequence.
	                     */
	                    if (filterObj.ChunkNumber === 1) {
	                        vm.disableLeftBtn = true;
	                    }
	                    if (endCount) {
	                        vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfRecordsPerChunk + 1) + '-' + ((filterObj.ChunkNumber - 1) * vm.numberOfRecordsPerChunk + endCount) + ')';
	                        if (endCount < vm.numberOfRecordsPerChunk) {
	                            vm.disableRightBtn = true;
	                        }
	                    } else {
	                        vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfRecordsPerChunk + 1) + '-' + (filterObj.ChunkNumber * vm.numberOfRecordsPerChunk) + ')';
	                    }
	                }
	
	                vm.getActiveClass = function(id) {
	                    if ($stateParams.id === id) {
	                        return true;
	                    } else {
	                        return false;
	                    }
	                };
	
	                $scope.$on('destroy', function() {
	                    deRegisterFunc();
	                    pLDeRegisterFunc();
	                    vm = null;
	                });
	
	                vm.loadVisibilityRuleDetails = function(toBeLoadedVisibilityRule) {
	                    visibilityRulesCommonService.selectedVisibilityRule = angular.copy(toBeLoadedVisibilityRule)
	                    $state.go('app.visibilityRules.details', {
	                        id: toBeLoadedVisibilityRule.Id
	                    });
	                };
	            };
	
	            visibilityRulesListingController.$inject = [
	                '$scope',
	                'systemConstants',
	                '$state',
	                '$stateParams',
	                'i18nService',
	                'visibilityRulesCommonService',
	                'visibilityRulesConstants'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {},
	                controller: visibilityRulesListingController,
	                controllerAs: 'vm',
	                bindToController: {
	                    searchText: '='
	                },
	                template: __webpack_require__(817),
	            };
	        }
	    ];
	})();


/***/ }),
/* 817 */
/***/ (function(module, exports) {

	module.exports = "<header>\n    <h4>{{::vm.labels.AllVisibilityRules}}</h4>\n    <div class=\"search\">\n        <form ng-submit=\"vm.searchvisibilityRules()\" novalidate>\n            <div class=\"search-input-container\">\n                <div class=\"input-group\">\n                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                    <label class=\"ng-binding\">Search</label>\n                </div>\n            </div>\n        </form>\n    </div>\n</header>\n<div data-ng-if=\"vm.visibilityRules.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n    {{::vm.labels.NoMatchingVisibilityRules}} <span><b>{{vm.searchedStr}}</b></span>\n</div>\n<div data-ng-if=\"vm.visibilityRules.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n    {{::vm.labels.MaxSQLSizeExceedMessage}}\n</div>\n<div class=\"list-table\">\n    <table>\n        <tbody>\n            <tr ng-repeat=\"item in vm.visibilityRules track by item.Id\" ng-click=\"vm.loadVisibilityRuleDetails(item)\" ng-class=\"{active: vm.getActiveClass(item.Id) === true}\">\n                <td>\n                    {{::item.Name}}\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<div class=\"pagination price-dimensions-list-pagination\">\n    <div class=\"place price-dimensions-list-place\">\n        {{vm.paginationCenterText}}\n    </div>\n    <div class=\"next-prev\">\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getVisibilityRules('previous')\">\n            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n        </button>\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getVisibilityRules('next')\">\n            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n        </button>\n    </div>\n</div>\n"

/***/ }),
/* 818 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.visibilityRules.common.services', [])
	        .service('visibilityRulesCommonService', __webpack_require__(819));
	        
	})();


/***/ }),
/* 819 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var visibilityRulesCommonService = function(remoteService, $q, i18nService) {
	
	        var _selectedVisibilityRule = {},
	            _allVisibilityRules = [],
	            _filter = {},
	            labels = i18nService.CustomLabel;
	        
	        // To load all visibility rules for listing
	        function loadAllVisibilityRules(requestObj) {
	            var defer = $q.defer();
	            remoteService.getSearchFilterSOs(requestObj)
	                .then(function(response) {
	                    _allVisibilityRules = response.SearchFilterSOs;
	                    defer.resolve(true);
	                }, function(reason) {
	                    defer.reject(true);
	                });
	            return defer.promise;
	        }
	
	        // To get a particular visibility rule for detail page
	        function getSelectedvisibilityRulesDetails(id) {
	            var defer = $q.defer();
	            if(id === 'new'){
	                _selectedVisibilityRule = {
	                    "Name": labels.NewVisibilityRule
	                };
	                defer.resolve({});
	            } else if (this.selectedVisibilityRule && this.selectedVisibilityRule.Id) {
	                defer.resolve(this.selectedVisibilityRule);
	            } else {
	                remoteService.getSearchFilterDetails(id).then(function(response) {
	                    if(response && response.SearchFilterSO){
	                        _selectedVisibilityRule = angular.copy(response.SearchFilterSO);
	                        defer.resolve(response.SearchFilterSO);
	                    } else {
	                        defer.resolve({});
	                    }
	                }, function(reason) {
	                    defer.reject(reason);
	                });
	            }
	            return defer.promise;
	        }
	
	        // To get businees, value object field lists
	        function getCriteriaFieldItems(businessObject, valueObject) {
	            return remoteService.getCriteriaFieldItems(businessObject, valueObject);
	        }
	
	        var service = {
	            loadAllVisibilityRules: loadAllVisibilityRules,
	            getSelectedvisibilityRulesDetails: getSelectedvisibilityRulesDetails,
	            getCriteriaFieldItems: getCriteriaFieldItems
	        };
	
	        // Setter/Getter for a visibility rule
	        Object.defineProperty(service, 'selectedVisibilityRule', {
	            get: function() { return _selectedVisibilityRule; },
	            set: function(value) {
	                _selectedVisibilityRule = value;
	            }
	        });  
	
	        // Setter/Getter for all visibility rules
	        Object.defineProperty(service, 'allVisibilityRules', {
	            get: function() { return _allVisibilityRules; },
	            set: function(value) {
	                _allVisibilityRules = value;
	            }
	        });
	
	        // Setter/Getter for filter
	        Object.defineProperty(service, 'filter', {
	            get: function() { return _filter; },
	            set: function(value) {
	                _filter = value;
	            }
	        });
	
	        return service;
	    };
	
	    visibilityRulesCommonService.$inject = [
	        'remoteService',
	        '$q',
	        'i18nService'
	    ];
	
	    module.exports = visibilityRulesCommonService;
	})();


/***/ }),
/* 820 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.visibilityRules.list',[])
	        .service('visibilityRulesListService', __webpack_require__(821))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.visibilityRules.list', {
	                parent: 'app.visibilityRules',
	                url: '/list',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(822),
	                        controller: __webpack_require__(823),
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 821 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var visibilityRulesListService = function(remoteService, $q) {
	
	
	        function getAllPriceLists(request) {
	            var defer = $q.defer();
	            /* This API doesnt support sorting by any column */
	            remoteService.getAllPriceLists(request).then(function(response) {
	                defer.resolve(response);
	            }, function(reason) {
	                defer.reject(reason);
	            });
	            return defer.promise;
	        }
	
	        var service = {
	            getAllPriceLists: getAllPriceLists
	        };
	
	        return service;
	    };
	    visibilityRulesListService.$inject = [
	        'remoteService',
	        '$q'
	    ];
	
	    module.exports = visibilityRulesListService;
	})();


/***/ }),
/* 822 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"visibility-rules-list-container\">\n    <div class=\"two-col-layout auto-height\">\n        <div class=\"auto-height col-lg-12 noPadding list-table-container\">\n            <div class=\"list-header\">\n                <!-- Search Bar starts -->\n                <div class=\"row noMargin search-container title-bar\">\n                    <div class=\"visibility-rules-search\">\n                        <div class=\"col-xs-5\">\n                            <div class=\"search-box-container\">\n                                <span class=\"fa fa-filter pointerEventsNone\" disabled data-ng-click=\"vm.resetPagination();\"></span>\n                                <i class=\"search-icon material-icons\" data-ng-click=\"vm.resetPagination()\">search</i>\n                                <form ng-submit=\"vm.resetPagination()\">\n                                    <input type=\"text\" placeholder=\"{{vm.labels.SearchVisibilityRules}}\" class=\"search-box\" data-ng-model=\"vm.searchString\">\n                                    <i class=\"clear-icon material-icons\" data-ng-if=\"vm.searchString\" data-ng-click=\"vm.clearSearchInput()\">clear</i>\n                                </form>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-3\"></div>\n                        <div class=\"col-xs-4 text-right visibility-rules-btn-group\">\n                            <div class=\"listBtn\">\n                                <button type=\"button\" class=\"slds-button slds-button_brand\" data-ng-click=\"vm.createNewVisibilityRule()\">{{vm.labels.NewVisibilityRule}}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div preloader add-to-element=\"true\" loading-text=\"vm.loadingText\" data-ng-if=\"vm.showLoader === true\"></div>\n            <div data-ng-if=\"vm.visibilityRules.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{::vm.labels.NoMatchingVisibilityRules}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.visibilityRules.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{::vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"list-table\">\n                <table ng-table=\"vm.tableParams\" class=\"table ng-table-resizable-columns\">\n                    <thead>\n                        <tr>\n                            <th ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                                <span ng-click=\"vm.tableHeaderClick(column);\">\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-descent'\">arrow_downward</i>\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-ascent'\">arrow_upward</i> \n                                    {{column.FieldLabel}}\n                                </span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"visibilityRule in vm.visibilityRules track by visibilityRule.Id\">\n                            <td data-ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                                <span data-ng-if=\"::column.FieldName === 'Name'\">\n                                    <a data-ng-click=\"vm.loadVisibilityRuleDetails(visibilityRule, $event)\" ng-bind-html=\"::visibilityRule[column.FieldName]\" class=\"clickable-item\"></a>\n                                </span>\n                                <span data-ng-if=\"::column.FieldName !== 'Name'\" ng-bind-html=\"::vm.getFormattedContent(visibilityRule,column)\"></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"pagination-container text-center\" data-ng-if=\"vm.showPagination === true\">\n                <div class=\"btn-group dropup text-right\" role=\"group\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        {{vm.labels.RecordsPerPage | userMessage:vm.numberOfRecordsPerChunk}}\n                        <span class=\"caret\"></span>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li data-ng-repeat=\"chunk in vm.chunkArray\"><a data-ng-click=\"vm.numberOfRecordsPerChunk = chunk\">{{::chunk}}</a></li>\n                    </ul>\n                </div>\n                <div class=\"navigation-control\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProduct('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                    <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProduct('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 823 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var visibilityRulesListController = function($scope, $state, $filter, NgTableParams, $timeout, i18nService, systemConstants, visibilityRulesConstants, cpqAdminConstants,
	        visibilityRulesCommonService, $location, applicationService) {
	        var vm = this;
	
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.tableColumnConfig = [{
	            "FieldLabel": vm.labels.Name,
	            "FieldName": "Name",
	            "Type": "STRING",
	            "showSortIcon": true,
	            "sortIconCls": 'st-sort-ascent'
	
	        }, {
	            "FieldLabel": vm.labels.Active,
	            "FieldName": vm.prefix + 'Active__c',
	            "Type": "BOOLEAN",
	        }, {
	            "FieldLabel": vm.labels.BusinessObject,
	            "FieldName": vm.prefix + 'BusinessObject__c',
	            "Type": "STRING",
	
	        }, {
	            "FieldLabel": vm.labels.ValueObject,
	            "FieldName": vm.prefix + 'UseType__c',
	            "Type": "STRING"
	        }, {
	            "FieldLabel": vm.labels.Description,
	            "FieldName": vm.prefix + 'Description__c',
	            "Type": "TEXTAREA",
	        }];
	
	        //Chunk numbers array
	        vm.chunkArray = [50, 100, 150, 200];
	
	        /* 
	         * - vm.searchString : is the value present in the search field at any point of time.
	         * - vm.searchedStr : is the value user has entered and either clicked on search icon or hit
	         * enter / return  key.
	         */
	        vm.searchedStr = '';
	        vm.numberOfRecordsPerChunk = visibilityRulesConstants.numberOfRecordsPerChunk;
	
	        vm.pageNumber = 0;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = false;
	        vm.showLoader = false;
	        vm.loadingText = vm.labels.LoadingText;
	        vm.isMaxSQLSizeExceed = false;
	        vm.showPagination = true;
	        updateCenterBtnText();
	        var sortField, sortDirection, pageNumber = 1,
	            configType = '';
	
	        vm.getProduct = function(type) {
	            if (type === 'next') {
	                pageNumber = pageNumber + 1;
	                vm.pageNumber++;
	                if (vm.pageNumber !== 0) {
	                    vm.disableLeftBtn = false;
	                }
	                loadVisibilityRule();
	            } else {
	                pageNumber = pageNumber - 1;
	                vm.pageNumber--;
	                if (vm.pageNumber === 0) {
	                    vm.disableLeftBtn = true;
	                }
	                loadVisibilityRule();
	            }
	        };
	
	        function updateCenterBtnText(endCount) {
	            /* 
	             * - Search result might return lesser number of records than current pagination count.
	             * e.g. current pagination is : 1-150, but search returned only 20 records.
	             * - Then pagination should be updated to 1-20 instead of 1-150.
	             * - endCount variable contains the exact number of records and will only be defined, if
	             * search count is lesser than current pagination sequence.
	             */
	            if (endCount) {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfRecordsPerChunk + 1) + '-' + (vm.pageNumber * vm.numberOfRecordsPerChunk + endCount) + ')';
	            } else {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfRecordsPerChunk + 1) + '-' + ((vm.pageNumber + 1) * vm.numberOfRecordsPerChunk) + ')';
	            }
	        };
	
	        vm.resetPagination = function(resetPageNumber) {
	            vm.showPanel = false;
	            if (resetPageNumber) {
	                vm.pageNumber = 0;
	                pageNumber = 1;
	            }
	            vm.pageNumber = 0;
	            pageNumber = 1;
	            vm.disableLeftBtn = true;
	            if (vm.visibilityRules.length < vm.numberOfRecordsPerChunk) {
	                updateCenterBtnText(vm.visibilityRules.length);
	            }
	            loadVisibilityRule();
	        };
	
	        var deRegisterFunc = $scope.$watch('vm.numberOfRecordsPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                vm.resetPagination(false);
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            priceDimensionDeRegisterFunc();
	            vm = null;
	        });
	
	
	        vm.getFormattedContent = function(visibilityRule, column) {
	            var modifiedValue, precision,
	                fieldType = column.Type,
	                value = visibilityRule[column.FieldName];
	
	            if (vm.systemProperties && vm.systemProperties.PercentageFieldPrecision) {
	                precision = vm.systemProperties.PercentageFieldPrecision;
	            } else if (vm.properties && vm.properties.Precision) {
	                precision = vm.properties.Precision;
	            } else {
	                precision = 5;
	            }
	
	            switch (fieldType) {
	                case cpqAdminConstants.datetime:
	                case cpqAdminConstants.date:
	                    {
	                        modifiedValue = $filter('aptDateToString')(value);
	                        break;
	                    }
	
	                case cpqAdminConstants.boolean:
	                    {
	                        if (value) {
	                            modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	                        } else {
	                            modifiedValue = "<i class='material-icons show'>check_circle</i>";
	                        }
	                        break;
	                    }
	                case cpqAdminConstants.string:
	                case cpqAdminConstants.textarea:
	                case cpqAdminConstants.url:
	                case cpqAdminConstants.multipicklist:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	                default:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	            }
	            return modifiedValue;
	        };
	
	        function createNgTable(data, numberOfRecordsPerChunk) {
	            var initialParams = {
	                count: numberOfRecordsPerChunk
	            };
	            var initialSettings = {
	                counts: [],
	                paginationMaxBlocks: 0,
	                paginationMinBlocks: 0,
	                dataset: data
	            };
	            return new NgTableParams(initialParams, initialSettings);
	        }
	
	        var priceDimensionDeRegisterFunc = $scope.$watch(function() {
	            return visibilityRulesCommonService.allVisibilityRules;
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                processData(newValue);
	            }
	        }, true);
	
	        function processData(visibilityRules) {
	
	            /* Used to bind to table body */
	            vm.visibilityRules = visibilityRules;
	            vm.isMaxSQLSizeExceed = false;
	
	            if (!vm.tableParams) {
	                vm.tableParams = createNgTable(visibilityRules, vm.numberOfRecordsPerChunk);
	            }
	
	            /* 
	             * - Show 'No matching products are found for the search entry XXX', when no return
	             * return result set is empty.
	             * - Keep the user messages, until user makes a fresh search which has atleast more
	             * than 1 result item.
	             */
	            vm.showPagination = true;
	            if (visibilityRules.length === 0 && vm.searchString !== '') {
	                vm.searchedStr = vm.searchString;
	                if (vm.pageNumber === 0) {
	                    vm.showPagination = false;
	                }
	            }
	            if (visibilityRules.length < vm.numberOfRecordsPerChunk) {
	                vm.disableRightBtn = true;
	                updateCenterBtnText(visibilityRules.length);
	            } else {
	                vm.disableRightBtn = false;
	                updateCenterBtnText();
	            }
	
	            /* Hide the loader on success of service call */
	            vm.showLoader = false;
	
	            $timeout(function() {
	                angular.element(window).resize();
	            }, 1000);
	            document.querySelector('.list-table').scrollTop = 0;
	        }
	
	        /**
	         * - When user enters search string and hits enter, this method gets called
	         * - Updates the smart-table pagination object.
	         * - Table header click
	         */
	        function loadVisibilityRule() {
	            /* Show the loader on start of service call */
	            vm.showLoader = true;
	            vm.searchedStr = vm.searchString;
	            
	            var requestObj = {
	                "SortField": sortField || 'Name',
	                "SortDirection": sortDirection || cpqAdminConstants.ASCENDING,
	                "SearchString": vm.searchString || '',
	                "NumberOfRecordsPerChunk": vm.numberOfRecordsPerChunk,
	                "ChunkNumber": pageNumber
	            };
	
	            visibilityRulesCommonService.loadAllVisibilityRules(requestObj)
	                .then(function(response) {
	                    if (response) {
	                        vm.showLoader = false;
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	        }
	
	        loadVisibilityRule();
	        /**
	         * - Clears searc input box
	         * - Makes a service call to reload the table
	         */
	        vm.clearSearchInput = function() {
	            vm.searchString = '';
	            vm.currentPage = 1;
	            vm.showPanel = false;
	            loadVisibilityRule();
	        };
	
	
	        /**
	         * - Show / Hide ascending or descending icon next to the column header when user clicks on header.
	         * - We are not using the default feature of the ngTable. It's doing local sorting and to
	         * bind to its server side sorting, configs are not available as of now.
	         */
	        vm.tableHeaderClick = function(column) {
	            sortField = column.FieldName;
	            if (!column.sortIconCls) {
	                column.sortIconCls = 'st-sort-ascent';
	            }
	            sortDirection = (column.sortIconCls === 'st-sort-ascent' ? cpqAdminConstants.DESCENDING : cpqAdminConstants.ASCENDING);
	            var columnsList = vm.tableColumnConfig;
	            for (var item in columnsList) {
	                if (column.FieldName === columnsList[item].FieldName) {
	                    columnsList[item].showSortIcon = true;
	                    columnsList[item].sortIconCls = column.sortIconCls ? (column.sortIconCls === 'st-sort-ascent' ? 'st-sort-descent' : 'st-sort-ascent') : 'st-sort-descent';
	                } else {
	                    columnsList[item].showSortIcon = false;
	                    columnsList[item].sortIconCls = false;
	                }
	            }
	            vm.resetPagination();
	        };
	
	        vm.loadVisibilityRuleDetails = function(visibilityRule, event) {
	            visibilityRulesCommonService.selectedVisibilityRule = angular.copy(visibilityRule);
	            $state.go('app.visibilityRules.details', {
	                id: visibilityRule.Id
	            });
	            event.preventDefault();
	        };
	
	        vm.getDetailsPageUrl = function(id) {
	            var absUrl = $location.absUrl();
	            return absUrl.replace('/visibilityRule/list', '/visibilityRule/' + id + '/details');
	        };
	
	        vm.createNewVisibilityRule = function() {
	            visibilityRulesCommonService.allVisibilityRules = angular.copy(visibilityRulesCommonService.allVisibilityRules);
	            $state.go('app.visibilityRules.details', {
	                id: 'new'
	            });
	        };
	    };
	
	    visibilityRulesListController.$inject = [
	        '$scope',
	        '$state',
	        '$filter',
	        'NgTableParams',
	        '$timeout',
	        'i18nService',
	        'systemConstants',
	        'visibilityRulesConstants',
	        'cpqAdminConstants',
	        'visibilityRulesCommonService',
	        '$location',
	        'applicationService'
	    ];
	
	    module.exports = visibilityRulesListController;
	
	})();


/***/ }),
/* 824 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.visibilityRules.details', [])
	        .service('visibilityRulesDetailsService', __webpack_require__(825))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.visibilityRules.details', {
	                parent: 'app.visibilityRules',
	                url: '/:id/details',
	                views: {
	                    'visibilityRulesContainer': {
	                        template: __webpack_require__(826),
	                        controller: __webpack_require__(827),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    visibilityRulesDetails: ['visibilityRulesCommonService', '$stateParams', function(visibilityRulesCommonService, $stateParams) {
	                        return visibilityRulesCommonService.getSelectedvisibilityRulesDetails($stateParams.id);
	                    }],
	                    allPicklists: ['visibilityRulesDetailsService',function(visibilityRulesDetailsService) {
	                       return visibilityRulesDetailsService.getSearchFilterItems(); 
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 825 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var visibilityRulesDetailsService = function(remoteService, _, i18nService) {
	        var _allPicklists = [],
	            labels = i18nService.CustomLabel;
	
	        // To get related business/value objects    
	        function getSearchFilterItems() {
	            return remoteService.getSearchFilterItems();
	        }    
	
	        // To process business/value object picklists
	        function getPicklistValues(value) {
	            var response = [], picklist = this.allPicklists, picklistsLength = picklist.length;
	                for (var i = 0; i < picklistsLength; i++) {
	                    if (value && picklist[i].FilterType.Value === value) {
	                        response.businessObject = preparePickList(picklist[i].BusinessObjectDO);
	                        response.valueObject = preparePickList(picklist[i].ValueObjectDO);
	                    } else if (!value){
	                        response.push(picklist[i].FilterType);
	                    }
	                }
	            return (value) ? response : preparePickList(response);
	        }
	
	        // Create/Update visibility rule
	        function createVisibilityRule(requestObject) {
	            return remoteService.upsertSearchFilter(requestObject);
	        }
	
	        // Delete visibility rule
	        function deleteVisibilityRule(requestObject) {
	            return remoteService.deleteSearchFilter(requestObject);
	        }
	
	        // To prepare picklist for input fields
	        function preparePickList(data) {
	            var picklistValues = [],
	                noneVar = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                };
	            if (!_.isEmpty(data)) {
	                var index, fieldsLength = data.length;
	                for (index = 0; index < fieldsLength; index++) {
	                    picklistValues.push({
	                        label: data[index].Label || data[index].FieldLabel,
	                        value: data[index].Value || data[index].FieldName
	                    });
	                }
	                picklistValues.unshift(noneVar);
	            }
	            return {
	                'PicklistValues': picklistValues
	            };
	        }
	
	        // To prepare picklist for all available fields for businees, value objects
	        function preparePickListDO(data) {
	            var noneVar = {
	                    label: labels.NoneAsPickListValue,
	                    value: ''
	                };
	            if (!_.isEmpty(data)) {
	                var index, fieldsLength = data.length;
	                for (index = 0; index < fieldsLength; index++) {
	                    data[index].label = data[index].Label || data[index].FieldLabel;
	                    data[index].value = data[index].Value || data[index].FieldName;
	                }
	                data.unshift(noneVar);
	            }
	            return {
	                'PicklistValues': data
	            };
	        }
	
	        var service = {
	            getSearchFilterItems: getSearchFilterItems,
	            getPicklistValues: getPicklistValues,
	            createVisibilityRule: createVisibilityRule,
	            deleteVisibilityRule: deleteVisibilityRule,
	            preparePickListDO: preparePickListDO
	        };
	
	        // Setter/Getter for picklist values
	        Object.defineProperty(service, 'allPicklists', {
	            get: function() { return _allPicklists; },
	            set: function(value) {
	                _allPicklists = value;
	            }
	        });
	
	        return service;
	    };
	
	    visibilityRulesDetailsService.$inject = [
	        'remoteService',
	        'lodash',
	        'i18nService'
	    ];
	
	    module.exports = visibilityRulesDetailsService;
	})();

/***/ }),
/* 826 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"visibility-rules-detail-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <visibility-rules-listing search-text=\"vm.searchText\"></visibility-rules-listing>\n        </div>\n        <div class=\"visibility-rules-detail-block\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <!-- Create / Update details form -->\n            <form class=\"visibility-rules-detail-form\" novalidate name=\"vm.visibilityRuleForm\">\n                <div layout=\"row\" layout-wrap>\n                    <div flex-offset=\"5\" flex=\"5\" ng-if=\"!vm.isFormNew\">\n                        <button type=\"button\" class=\"slds-button slds-button--icon delete-btn\" data-ng-click=\"vm.showRemoveConfirmation()\">\n                        <i class=\"material-icons\">clear</i>\n                        </button>\n                    </div>\n                    <div flex-offset=\"{{(vm.isFormNew) ? '5' : '0'}}\" flex=\"{{(vm.isFormNew) ? '95' : '90'}}\">\n                        <material-form-field model=\"vm.selectedVisibilityRule.Name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.Name\" is-required=\"true\" name=\"name\" max-length=\"80\"></material-form-field>\n                        <div ng-messages=\"vm.visibilityRuleForm.name.$error\" ng-if=\"vm.visibilityRuleForm.name.$touched || vm.visibilityRuleForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                 </div>   \n                <div layout=\"row\" layout-wrap>\n                    <div flex-offset=\"5\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedVisibilityRule[vm.prefix+'UseType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.filterTypes\" field-label=\"::vm.labels.FilterType\" name=\"FilterType\" is-required=\"true\" is-disabled=\"{{!vm.isFormNew}}\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.visibilityRuleForm.FilterType.$error\" ng-if=\"vm.visibilityRuleForm.FilterType.$touched || vm.visibilityRuleForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedVisibilityRule[vm.prefix+'BusinessObject__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.businessObject\" field-label=\"::vm.labels.BusinessObject\" name=\"BusinessObject\" is-required=\"true\"  is-disabled=\"{{!vm.isFormNew}}\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\" layout-wrap>\n                    <div flex-offset=\"5\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedVisibilityRule[vm.prefix+'ValueObject__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.valueObject\" field-label=\"::vm.labels.ValueObject\" name=\"ValueObject\" is-disabled=\"{{!vm.isFormNew}}\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.visibilityRuleForm.ValueObject.$error\" ng-if=\"vm.visibilityRuleForm.ValueObject.$touched || vm.visibilityRuleForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedVisibilityRule[vm.prefix+'Sequence__c']\" field-type=\"QUANTITY\" is-editable=\"true\" field-label=\"vm.labels.Sequence\" name=\"sequence\" is-required=\"true\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.visibilityRuleForm.sequence.$error\" ng-if=\"vm.visibilityRuleForm.sequence.$touched || vm.visibilityRuleForm.$submitted\">\n                            <p ng-message=\"required\" class=\"formError\">\n                                {{vm.labels.MandatoryField}}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\" layout-wrap>\n                    <div flex-offset=\"5\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedVisibilityRule[vm.prefix + 'Description__c']\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"vm.labels.Description\" name=\"Description\">\n                    </div>\n                    <div flex-offset=\"5\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedVisibilityRule[vm.prefix+'Active__c']\" field-type=\"BOOLEAN\" is-editable=\"true\" element-id=\"active\" field-label=\"::vm.labels.Active\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\" layout-wrap ng-if=\"vm.selectedVisibilityRule[vm.prefix + 'ValueObject__c']\">\n                    <div flex-offset=\"5\" flex=\"90\">\n                        <material-form-field model=\"vm.selectedVisibilityRule.inclusionCriteriaExpStr\" field-type=\"string\" is-editable=\"true\" flex=\"75\" is-disabled=\"true\" is-required=\"true\" field-label=\"vm.labels.InclusionCriteria\">\n                        </material-form-field>\n                    </div>\n                    <div flex=\"5\">\n                        <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.openInclusionCriteriaPopup()\">\n                            <i class=\"fa fa-external-link\"></i>\n                        </button>\n                    </div>\n                </div>\n                <div layout=\"row\" layout-wrap>\n                    <div flex-offset=\"5\" flex=\"90\">\n                        <material-form-field model=\"vm.selectedVisibilityRule.filterCriteriaExpStr\" field-type=\"string\" is-editable=\"true\" flex=\"75\" is-disabled=\"true\" is-required=\"true\" field-label=\"vm.labels.FilterCriteria\">\n                        </material-form-field>\n                    </div>    \n                    <div flex=\"5\">    \n                        <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.openFilterCriteriaPopup()\">\n                            <i class=\"fa fa-external-link\"></i>\n                        </button>\n                    </div>\n                </div>\n            </form>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListingPage()\">{{::vm.labels.Cancel}}</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"!vm.enableSave || vm.pageSave()\" data-ng-disabled=\"!vm.enableSave\">{{::vm.labels.SaveButton}}</a>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div id=\"overlay\" class=\"add-to-body\" ng-show=\"vm.confiramtionPopup\">\n    </div>\n    <div class=\"modalBody\" ng-show=\"vm.confiramtionPopup\">\n        <div class=\"modalOverlay\">\n            <div class=\"modalHeaderBody\">\n                <i class=\"fa fa-times\" aria-hidden=\"true\" data-ng-click=\"vm.cancelRemove()\"></i>\n                <span class=\"modal-Title\">{{vm.confirmationDetails.messageTitle}}</span>\n                <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageBody}}</span>\n                <span class=\"modal-BodyText\">{{vm.confirmationDetails.messageNote}}</span>\n            </div>\n            <div class=\"modal-Footer text-right\">\n                <button class=\"slds-button slds-button--icon-more\" ng-click=\"vm.cancelRemove()\">\n                    <span class=\"modal-TextColor\">{{vm.labels.Cancel}}</span>\n                </button>\n                <button class=\"slds-button slds-button_brand\" ng-click=\"vm.confirmRemove()\">\n                    <span class=\"modal-TextColor\">{{vm.labels.Ok}}</span>\n                </button>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 827 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    var detailsController = function($q, $scope, $rootScope, $state, $stateParams, applicationService, visibilityRulesDetails,
	        visibilityRulesDetailsService, systemConstants, i18nService, cpqAdminConstants, visibilityRulesCommonService,
	        allPicklists, apiCallsService, attributesService, visibilityRulesConstants, $mdDialog, _, rulesService) {
	
	        var vm = this,
	            isFormSaved = false,
	            selectedImageIndex = 0,
	            currentlySelectedProduct;
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.isFormNew = false;
	        
	        vm.selectedVisibilityRule = visibilityRulesDetails;
	        visibilityRulesDetailsService.allPicklists = allPicklists;
	
	        if ($stateParams.id === cpqAdminConstants.NEW) {
	            vm.isFormNew = true;
	        }
	
	        var filterTypes = [];
	        filterTypes = visibilityRulesDetailsService.getPicklistValues();
	        filterTypes["methodToCallInController"] = renderObject;
	        vm.filterTypes = filterTypes;
	
	        // On chage filter type trigger
	        function renderObject(model) {
	            if (vm.isFormNew) { 
	                setFilterCriteriaValues('', '', '');        
	            }
	            var getBusinessValueObject = visibilityRulesDetailsService.getPicklistValues(model);
	            vm.businessObject =  getBusinessValueObject.businessObject;
	            if(model === 'Product') {
	                vm.selectedVisibilityRule[vm.prefix+'BusinessObject__c'] = 'Product2';
	            } else if (model === 'Category') {
	                vm.selectedVisibilityRule[vm.prefix+'BusinessObject__c'] = vm.prefix + 'ClassificationHierarchy__c';
	            }
	            getCriteriaFieldItems(vm.selectedVisibilityRule[vm.prefix+'BusinessObject__c'], '', vm.labels.BusinessObject);
	            vm.valueObject =  getBusinessValueObject.valueObject;
	            vm.valueObject["methodToCallInController"] = onChangeValueObject;
	        }
	
	        // On chage value object field trigger
	        function onChangeValueObject(selected) {
	            if (vm.isFormNew) {
	                setFilterCriteriaValues('', '', '');
	                setInclusionCriteriaValues('', '');            
	            }
	            getCriteriaFieldItems('', selected, vm.labels.ValueObject);
	        }
	
	        if($stateParams.id === cpqAdminConstants.NEW) {
	           vm.selectedVisibilityRule[vm.prefix +'FilterType__c'] = '';
	           vm.selectedVisibilityRule[vm.prefix +'BusinessObject__c'] = '';
	           vm.selectedVisibilityRule[vm.prefix +'ValueObject__c'] = '';
	        } else {
	            renderObject(vm.selectedVisibilityRule[vm.prefix+'UseType__c']);   
	            isFormSaved = false;
	            if (vm.selectedVisibilityRule && !vm.selectedVisibilityRule.Id) {
	                visibilityRulesCommonService.allVisibilityRules = angular.copy(allVisibilityRules);
	            }
	            if(vm.selectedVisibilityRule[vm.prefix + 'ValueObject__c']) {
	                onChangeValueObject(vm.selectedVisibilityRule[vm.prefix + 'ValueObject__c']);    
	            }
	            vm.selectedVisibilityRule.inclusionCriteriaExpStr = (vm.selectedVisibilityRule[vm.prefix + 'InclusionCriteria__c']) ? JSON.parse(vm.selectedVisibilityRule[vm.prefix + 'InclusionCriteria__c']).exprStr : [];
	            vm.selectedVisibilityRule.filterCriteriaExpStr = JSON.parse(vm.selectedVisibilityRule[vm.prefix + 'Criteria__c']).exprStr;
	        }
	
	        // To get all visibility rules for listing
	        function getAllVisibilityRules() {
	            var filter = {
	                "SearchString": '',
	                "NumberOfRecordsPerChunk": visibilityRulesConstants.numberOfRecordsPerChunk,
	                "ChunkNumber": 1
	
	            };
	            visibilityRulesCommonService.loadAllVisibilityRules(filter);
	        }
	        
	        if (_.isEmpty(visibilityRulesCommonService.allVisibilityRules)) {
	            getAllVisibilityRules();
	        }
	
	        //To get all field items for business and value object
	        function getCriteriaFieldItems(businessObject, valueObject, objectType) {
	            visibilityRulesCommonService.getCriteriaFieldItems(businessObject, valueObject).then(function(response) {
	                if(objectType === vm.labels.BusinessObject) {
	                    vm.criteriaDO = visibilityRulesDetailsService.preparePickListDO(response.FilterDO);
	                } else {
	                    vm.inclusionCriteriaDO = visibilityRulesDetailsService.preparePickListDO(response.InclusionDO); 
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        }
	
	        vm.pageSave = function(toState, toParams) {
	            if (vm.selectedVisibilityRule) {
	                saveVisibilityRule(toState, toParams);
	            } else {
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                }
	            }
	        };
	
	        //To save or update the form
	        function saveVisibilityRule(toState, toParams) {
	            if (vm.visibilityRuleForm.$valid && vm.visibilityRuleForm.$dirty) {
	                visibilityRulesDetailsService.createVisibilityRule(prepareVisibilityRuleObject()).then(function(response) {
	                    isFormSaved = true;
	                    getAllVisibilityRules();
	                    visibilityRulesCommonService.selectedVisibilityRule = response.SearchFilterSO;
	                    if (vm.isFormNew) {
	                        addAlert(vm.labels.SavedSuccessfully, cpqAdminConstants.SUCCESS);
	                        if(!toState) {
	                            $state.go('app.visibilityRules.details', {
	                                id: response.SearchFilterSO.Id
	                            });
	                        }
	                    } else {
	                        vm.visibilityRuleForm.$setPristine();
	                        addAlert(vm.labels.ProductSaveSuccess, cpqAdminConstants.SUCCESS);
	                    }
	                    if (toState) {
	                        toParams.id = response.SearchFilterSO.Id;
	                        $state.go(toState, toParams);
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });    
	            } else {
	                vm.visibilityRuleForm.$setSubmitted();
	                if (!vm.visibilityRuleForm.$dirty) {
	                    if(toState) {
	                        isFormSaved = true;
	                        $state.go(toState, toParams);    
	                    } else {
	                        addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	                    }
	                }
	            }
	        }
	
	        //To prepare visibility rules create request object
	        function prepareVisibilityRuleObject() {
	            var requestObject = {};
	            requestObject = {
	                "FilterSO": {
	                    "Name": vm.selectedVisibilityRule.Name
	                },
	                "AdvOptions": vm.selectedVisibilityRule.filterCriteriaCondExpr,
	                "InclusionCriteriaDO": (vm.selectedVisibilityRule[vm.prefix + 'InclusionCriteria__c']) ? prepareRequestConditions(vm.selectedVisibilityRule[vm.prefix + 'InclusionCriteria__c']) : [],
	                "FilterCriteriaDO": prepareRequestConditions(vm.selectedVisibilityRule[vm.prefix + 'Criteria__c']),
	            };
	            requestObject.FilterSO[vm.prefix + "Description__c"] = vm.selectedVisibilityRule[vm.prefix + 'Description__c'];
	            requestObject.FilterSO[vm.prefix + "UseType__c"] = vm.selectedVisibilityRule[vm.prefix + 'UseType__c'];
	            requestObject.FilterSO[vm.prefix + "Active__c"] = vm.selectedVisibilityRule[vm.prefix + 'Active__c'];
	            requestObject.FilterSO[vm.prefix + "Sequence__c"] = vm.selectedVisibilityRule[vm.prefix + 'Sequence__c'];
	            requestObject.FilterSO[vm.prefix + "BusinessObject__c"] = vm.selectedVisibilityRule[vm.prefix + 'BusinessObject__c'];
	            requestObject.FilterSO[vm.prefix + "ValueObject__c"] = vm.selectedVisibilityRule[vm.prefix + 'ValueObject__c'];
	            if(!vm.isFormNew) requestObject.FilterSO.Id = vm.selectedVisibilityRule.Id;
	            return requestObject;    
	        } 
	
	        function prepareRequestConditions(conditions) {
	            conditions = (typeof conditions === 'string') ? JSON.parse(conditions) : conditions;
	            var index, data = conditions.filter.predicates, fieldsLength = data.length, requestConditions = [];
	            if(!_.isEmpty(data)) {
	                for (index = 0; index < fieldsLength; index++) {
	                    if (data[index].FieldType === cpqAdminConstants.date || data[index].FieldType === cpqAdminConstants.datetime) {
	                        data[index].FieldValue = new Date(data[index].FieldValue);
	                    }
	                    requestConditions.push({
	                        "RowNum": data[index].RowNum,
	                        "FieldName": data[index].FieldName,
	                        "FieldType": data[index].FieldType,
	                        "FieldValue": (data[index].FieldType === cpqAdminConstants.multipicklist && typeof data[index].FieldValue === 'object') ? data[index].FieldValue.join(';') : data[index].FieldValue,
	                        "IsMultiPicklist": (data[index].FieldType === cpqAdminConstants.multipicklist) ? true : false,
	                        "IsPicklist": (data[index].FieldType === cpqAdminConstants.multipicklist || data[index].FieldType === cpqAdminConstants.picklist) ? true : false,
	                        "CompOper": data[index].CompOper
	                    });
	                }
	                return requestConditions;
	            }
	        }
	
	        // To Delete Confirmation
	        vm.showRemoveConfirmation = function() {
	            vm.confiramtionPopup = true;
	            vm.confirmationDetails = {
	                messageTitle: vm.labels.DeleteMessageTitle,
	                messageBody: vm.labels.DeleteMessageBody,
	                messageNote: vm.labels.DeleteMessageNote
	            }
	        };
	
	        // To Delete Visibility Rule
	        vm.confirmRemove = function() {
	            vm.confiramtionPopup = false;
	            var deleteObject = angular.copy(vm.selectedVisibilityRule);
	            delete deleteObject.filterCriteriaExpStr;
	            delete deleteObject.inclusionCriteriaExpStr;
	            visibilityRulesDetailsService.deleteVisibilityRule(deleteObject).then(function(response) {
	                if(response) {
	                    addAlert(vm.labels.DeleteSuccessful, cpqAdminConstants.SUCCESS);
	                    $state.go('app.visibilityRules.list');
	                }
	            }, function(reason) {
	                applicationService.showErrorMessage(reason);
	            });
	        };
	
	        vm.cancelRemove = function() {
	            vm.confiramtionPopup = false;
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.visibilityRules.list') {
	                return true;
	            } else if (isFormSaved === true) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.pageSave(toState, toParams);
	            }
	        });
	
	        // For Filter Criteria Popup
	        vm.openFilterCriteriaPopup = function(field) {
	            if (vm.selectedVisibilityRule[vm.prefix + 'BusinessObject__c']) {
	                $mdDialog.show({
	                    controller: __webpack_require__(828),
	                    template: __webpack_require__(829),
	                    parent: angular.element(document.body),
	                    controllerAs: 'vm',
	                    clickOutsideToClose: false,
	                    resolve: {
	                        filterCriteria: function() {
	                            return vm.selectedVisibilityRule[vm.prefix + 'Criteria__c'];
	                        },
	                        fieldNameObjectReference: function() {
	                            return vm.criteriaDO;
	                        },
	                        mapToPicklistValues: function() {
	                            return getMapToPicklistValues();
	                        },
	                        picklistEntries: function() {
	                            return rulesService.getPicklistMetaData();
	                        }
	                    }
	                }).then(function(response) {
	                    var criteriaResponse = response.criteria;
	                    setFilterCriteriaValues(criteriaResponse, criteriaResponse.exprStr, criteriaResponse.filter.condExpr);
	                    vm.visibilityRuleForm.$setDirty();
	                });
	            } else {
	                addAlert(vm.labels.SelectBusinessObject, cpqAdminConstants.DANGER);
	            }
	        };
	
	        // For Inclusion Criteria Popup
	        vm.openInclusionCriteriaPopup = function() {
	            if (vm.selectedVisibilityRule[vm.prefix + 'ValueObject__c']) {
	                $mdDialog.show({
	                    controller: __webpack_require__(830),
	                    template: __webpack_require__(831),
	                    parent: angular.element(document.body),
	                    controllerAs: 'vm',
	                    clickOutsideToClose: false,
	                    resolve: {
	                        criteria: function() {
	                            return vm.selectedVisibilityRule[vm.prefix + 'InclusionCriteria__c'];
	                        },
	                        fieldPicklist: function() {
	                            return vm.inclusionCriteriaDO;
	                        },
	                        picklistEntries: function() {
	                            return rulesService.getPicklistMetaData();
	                        },
	                        isAdvOptnReadOnly: function() {
	                            return true;
	                        }
	                    }
	                }).then(function(response) {
	                    var criteriaResponse = response.criteria;
	                    setInclusionCriteriaValues(criteriaResponse, criteriaResponse.exprStr);
	                    vm.visibilityRuleForm.$setDirty();
	                });
	            }
	        };
	
	        function getMapToPicklistValues() {
	            var valueObjectName = vm.selectedVisibilityRule[vm.prefix + 'ValueObject__c'],
	                picklistValues = [];
	            if(valueObjectName) {
	                picklistValues.push({
	                    'label': '--None--',
	                    'value': ''
	                });
	                vm.valueObject.PicklistValues.forEach(function(item) {
	                    if(item.value === valueObjectName) {
	                        picklistValues.push({
	                            'label': item.label,
	                            'value': item.value,
	                            'picklistValues': vm.inclusionCriteriaDO.PicklistValues
	                        });
	                    }
	                });
	            }
	            return picklistValues;
	        }
	
	        // To set filter criteria values
	        function setFilterCriteriaValues(criteriaObject, exprStr, condExpr) {
	            vm.selectedVisibilityRule[vm.prefix + 'Criteria__c'] = criteriaObject;
	            vm.selectedVisibilityRule.filterCriteriaExpStr = exprStr;
	            vm.selectedVisibilityRule.filterCriteriaCondExpr = condExpr;       
	        }
	
	        // To set inclusion criteria values
	        function setInclusionCriteriaValues(criteriaObject, exprStr) {
	            vm.selectedVisibilityRule[vm.prefix + 'InclusionCriteria__c'] = criteriaObject;
	            vm.selectedVisibilityRule.inclusionCriteriaExpStr = exprStr;        
	        }
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        $scope.$watchGroup(['vm.visibilityRuleForm.$valid', 'vm.visibilityRuleForm.$invalid'], function() {
	            if (vm.visibilityRuleForm && vm.visibilityRuleForm.$valid) {
	                vm.enableSave = true;
	            } else {
	                vm.enableSave = false;
	            }
	        });
	
	        if (vm.labels.NewVisibilityRule) {
	            $scope.$on(vm.labels.NewVisibilityRule.split(' ').join('-'), function() {
	                createNewVisibilityRule();
	            });
	        }
	
	        function createNewVisibilityRule() {
	            visibilityRulesCommonService.allVisibilityRules = angular.copy(visibilityRulesCommonService.allVisibilityRules);
	            $state.go('app.visibilityRules.details', {
	                id: 'new'
	            });
	        };
	
	        vm.goToListingPage = function() {
	            $state.go('app.visibilityRules.list');
	        };
	
	    };
	
	    detailsController.$inject = [
	        '$q',
	        '$scope',
	        '$rootScope',
	        '$state',
	        '$stateParams',
	        'applicationService',
	        'visibilityRulesDetails',
	        'visibilityRulesDetailsService',
	        'systemConstants',
	        'i18nService',
	        'cpqAdminConstants',
	        'visibilityRulesCommonService',
	        'allPicklists',
	        'apiCallsService',
	        'attributesService',
	        'visibilityRulesConstants',
	        '$mdDialog',
	        'lodash',
	        'rulesService'
	    ];
	    module.exports = detailsController;
	
	})();

/***/ }),
/* 828 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var filterCriteriaController = function($scope, $mdDialog, i18nService, systemConstants, cpqAdminConstants, searchService, filterCriteria, fieldNameObjectReference, mapToPicklistValues, picklistEntries) {
	        var vm = this,
	            selectedRowIndex,
	            prefix = systemConstants.nsPrefix || '',
	            criteria = filterCriteria,
	            fieldNamePicklistValues = fieldNameObjectReference.PicklistValues;
	
	        vm.labels = i18nService.CustomLabel;
	        vm.fieldNamePicklistEntries = {
	            PicklistValues: fieldNamePicklistValues,
	            methodToCallInController: updateFieldTypeAndValues
	        };
	        vm.conditionAssociationPicklistEntries = {
	            PicklistValues: picklistEntries.csRuleConditionCriteria
	        };
	
	        vm.mapToPicklistEntries = {
	            PicklistValues: mapToPicklistValues,
	            methodToCallInController: onChangeMapToPicklist
	        }
	
	        vm.trackSelectEvent = function(index) {
	            selectedRowIndex = index;
	        };
	
	        function onChangeMapToPicklist(value) {
	            var predicate = vm.criteria.filter.predicates[selectedRowIndex];
	            if (value) {
	                predicate['mapToPicklistValues'] = { PicklistValues: mapToPicklistValues[1].picklistValues };
	                predicate['FieldValue'] = mapToPicklistValues[1].picklistValues[0].value;
	            } else {
	                predicate['mapToPicklistValues'] = [];
	                var fieldType = predicate['FieldType'],
	                    fieldValue = '';
	                predicate['FieldValue'] = getDefaultValue(fieldType, fieldValue);
	            }
	        }
	
	        function updateFieldTypeAndValues(value) {
	            var selectedItem = getFieldTypePicklistByValue(value);
	            var predicate = vm.criteria.filter.predicates[selectedRowIndex];
	            predicate['FieldType'] = selectedItem.fieldType || selectedItem.Type;
	            predicate['FieldLabel'] = selectedItem.label;
	            predicate['LHSSObjectName'] = fieldNameObjectReference.sObjectName;
	            predicate['picklistValues'] = { PicklistValues: selectedItem.PicklistValues || [] };
	            if (!predicate['MapTo']) {
	                var fieldType = predicate['FieldType'],
	                    fieldValue = predicate['FieldValue'];
	                predicate['FieldValue'] = getDefaultValue(fieldType, fieldValue);
	            }
	            if(predicate['FieldType'] === cpqAdminConstants.boolean && !predicate['FieldValue']) {
	                predicate['FieldValue'] = false;
	            }
	        }
	
	        function getFieldTypePicklistByValue(value) {
	            var selectedItem, items = fieldNamePicklistValues;
	            for (var item = 0; item < items.length; item++) {
	                if (items[item].value === value) {
	                    selectedItem = items[item];
	                    return selectedItem;
	                }
	            }
	        }
	
	        var criteriaObj = '';
	        if (criteria) {
	            if (angular.isString(criteria)) {
	                criteriaObj = JSON.parse(criteria);
	            } else {
	                criteriaObj = criteria;
	            }
	        }
	
	        if (criteriaObj) {
	            vm.criteria = getActionCriterias(criteriaObj);
	        } else {
	            vm.criteria = {
	                'sObjectName': (mapToPicklistValues.length > 0) ? mapToPicklistValues[1].value : '',
	                'sObjectLabel': (mapToPicklistValues.length > 0) ? mapToPicklistValues[1].label : '',
	                searchText: null,
	                filter: {
	                    predicates: [],
	                    hasRHSFields: false,
	                    childFilter: null
	                }
	            }
	        }
	
	        if (vm.criteria.filter.condExpr !== '') {
	            vm.showFCAdvancedPanel = true;
	        } else {
	            vm.showFCAdvancedPanel = false;
	        }
	
	        function getActionCriterias(obj) {
	            if (obj && obj.filter && obj.filter.predicates) {
	                var temp = obj.filter.predicates,
	                    index;
	                for (index = 0; index < temp.length; index++) {
	                    var fieldType = temp[index].FieldType,
	                        fieldValue = temp[index].FieldValue,
	                        fieldName = temp[index].FieldName;
	
	                    if (fieldType === cpqAdminConstants.picklist || fieldType === cpqAdminConstants.multipicklist) {
	                        temp[index].picklistValues = {
	                            'PicklistValues': getFieldTypePicklistByValue(fieldName).PicklistValues
	                        };
	                    } else {
	                        temp[index]['picklistValues'] = { PicklistValues: [] };
	                    }
	
	                    if (typeof fieldValue !== 'undefined') {
	                        if (typeof fieldValue === 'string' && fieldValue.charAt(0) === ':') {
	                            temp[index]['mapToPicklistValues'] = { PicklistValues: mapToPicklistValues[1].picklistValues };
	                            temp[index].FieldValue = fieldValue.substr(1);
	                            temp[index].MapTo = mapToPicklistValues[1].value;
	                        } else {
	                            temp[index].MapTo = "";
	                            if (fieldType === cpqAdminConstants.multipicklist) {
	                                if (angular.isString(temp[index].FieldValue)) {
	                                    temp[index].FieldValue = temp[index].FieldValue.split(';');
	                                }
	                            } else {
	                                temp[index].FieldValue = getDefaultValue(fieldType, fieldValue);
	                            }
	                        }
	                    }
	                }
	            }
	            return obj;
	        }
	
	        function getDefaultValue(fieldType, fieldValue) {
	            if (fieldType === cpqAdminConstants.double || fieldType === cpqAdminConstants.currency || fieldType === cpqAdminConstants.percent) {
	                return fieldValue ? fieldValue : 0;
	            } else if (fieldType === cpqAdminConstants.datetime || fieldType === cpqAdminConstants.date) {
	                return fieldValue ? new Date(fieldValue).getTime() : undefined;
	            } else {
	                return fieldValue;
	            }
	        }
	
	        vm.addFilter = function() {
	            var targetField, nextRowNumber;
	            nextRowNumber = getNextRowNumber();
	            vm.criteria.filter.predicates.push({
	                'RowNum': nextRowNumber,
	                'RHSSObjectName': null,
	                'RHSFieldType': null,
	                'RHSFieldName': null,
	                'RHSFieldLabel': null,
	                'LHSSObjectName': null,
	                'FieldValue': '',
	                'FieldType': '',
	                'FieldName': '',
	                'FieldLabel': '',
	                'CompOper': '',
	                'MapTo': '',
	                'BoolOper': 'AND'
	            });
	            updateAdvancedCondition(nextRowNumber);
	        };
	
	        vm.removeFilter = function(index) {
	            vm.criteria.filter.predicates.splice(index, 1);
	            updateRowNumValue();
	            vm.prepareConditionExpression();
	        };
	
	        function getNextRowNumber() {
	            return (vm.criteria.filter.predicates.length + 1);
	        }
	
	        function updateAdvancedCondition(nextRowNumber) {
	            var expr = vm.criteria.filter.condExpr,
	                finalExpression = '';
	            if (expr) {
	                finalExpression = expr + ' AND ' + nextRowNumber;
	            } else {
	                finalExpression = nextRowNumber;
	            }
	            vm.criteria.filter.condExpr = finalExpression;
	
	        }
	
	        function updateRowNumValue() {
	            var filters = vm.criteria.filter.predicates;
	            for (var i = 0; i < filters.length; i++) {
	                filters[i].RowNum = (i + 1);
	            }
	        }
	
	        vm.prepareConditionExpression = function() {
	            var expr = '';
	            var predicates = vm.criteria.filter.predicates;
	
	            for (var i = 0; i < predicates.length; i++) {
	                if (i === (predicates.length - 1)) {
	                    expr += predicates[i].RowNum;
	                } else {
	                    expr += predicates[i].RowNum + ' AND ';
	                }
	            }
	            vm.criteria.filter.condExpr = expr;
	        };
	
	        function filterListContainsError() {
	            var containsError = false;
	            if (vm.criteria.filter.predicates.length > 0) {
	                var predicates = vm.criteria.filter.predicates;
	                for (var i = 0; i < predicates.length; i++) {
	
	                    var fieldName = predicates[i].FieldName,
	                        operator = predicates[i].CompOper,
	                        value = predicates[i].FieldValue;
	                    if (angular.isDefined(fieldName) && fieldName !== '' && fieldName !== null && (operator !== undefined && operator !== '') && 
	                        (angular.isDefined(value) && value !== '' && value !== null)) {
	                        containsError = false;
	                        predicates[i].hasError = false;
	                    } else {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    }
	                }
	            }
	            return containsError;
	        }
	
	        function updateCriteriaContent() {
	            if (vm.criteria.filter.predicates.length > 0) {
	                var predicates = vm.criteria.filter.predicates,
	                    exprStr = '',
	                    hasRHSFields = 0;
	                vm.criteria.fields = [];
	                var condExpr = vm.criteria.filter.condExpr;
	                if (!condExpr) {
	                    vm.prepareConditionExpression();
	                }
	                for (var index = 0; index < predicates.length; index++) {
	                    delete predicates[index].hasError;
	                    delete predicates[index].picklistValues;
	
	                    vm.criteria.fields.push(fieldNameObjectReference.fieldName + '.' + predicates[index].FieldName);
	
	                    var mapTo = predicates[index].MapTo;
	                    if (mapTo) {
	                        hasRHSFields++;
	                        vm.criteria.fields.push(predicates[index].FieldValue);
	                        predicates[index] = addMapToObject(predicates[index]);
	                    } else {
	                        predicates[index] = removeMapToObject(predicates[index]);
	                    }
	
	                    if (predicates[index].mapToPicklistValues)
	                        delete predicates[index].mapToPicklistValues;
	
	                }
	
	                vm.criteria.exprStr = prepareCriteriaExpression(vm.criteria.filter.condExpr);
	                vm.criteria.filter.hasRHSFields = (hasRHSFields > 0) ? true : false;
	
	            } else {
	                vm.criteria.filter.predicates = [];
	                vm.criteria.exprStr = null;
	                vm.criteria.fields = null;
	            }
	        }
	
	        function addMapToObject(predicate) {
	            var picklist = predicate.mapToPicklistValues.PicklistValues;
	            var index, picklistLength = picklist.length;
	            for (index = 0; index < picklistLength; index++) {
	                if (picklist[index].value === predicate.FieldValue) {
	                    predicate.RHSSObjectName = mapToPicklistValues[1].value;
	                    predicate.RHSFieldType = picklist[index].fieldType;
	                    predicate.RHSFieldName = picklist[index].fieldName;
	                    predicate.RHSFieldLabel = picklist[index].label;
	                    predicate.FieldValue = ':' + predicate.FieldValue;
	                }
	            }
	            return predicate;
	        }
	
	        function removeMapToObject(predicate) {
	            predicate.RHSFieldType = null;
	            predicate.RHSFieldName = null;
	            predicate.RHSFieldLabel = null;
	            return predicate;
	        }
	
	        function prepareCriteriaExpression(condExpr) {
	
	            var str = '';
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.criteria.filter.predicates.length > 0) {
	                    var predicates = vm.criteria.filter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < condExprArr.length; i++) {
	                    if (!isNaN(+condExprArr[i])) {
	                        var value = +condExprArr[i];
	                        if (value !== 0) {
	                            if (rowNumArr.indexOf(value) <= -1) {
	                                str += '{' + (value - 1) + '}';
	                            } else {
	                                var predicates = vm.criteria.filter.predicates;
	                                var fieldLabel = predicates[(value - 1)].FieldLabel,
	                                    fieldValue = predicates[(value - 1)].FieldValue,
	                                    fieldType = predicates[(value - 1)].FieldType,
	                                    operator = predicates[(value - 1)].CompOper,
	                                    fieldName = predicates[(value - 1)].FieldName;
	                                if (angular.isString(fieldLabel)) {
	                                    fieldLabel = fieldLabel.trim();
	                                }
	                                if (angular.isString(fieldValue)) {
	                                    fieldValue = fieldValue.trim();
	                                }
	                                if(fieldNameObjectReference.fieldName)
	                                    str += searchService.prepareExpressionString((fieldNameObjectReference.fieldName + '.' + fieldName), fieldValue, operator);
	                                else 
	                                    str += searchService.prepareExpressionString(fieldLabel, fieldValue, operator);
	                            }
	                        }
	
	                    } else {
	                        str += condExprArr[i] + ' ';
	                    }
	                }
	            }
	
	            return str !== '' ? str.trim() : str;
	        }
	
	        vm.save = function() {
	            /* TODO : Check here if the half-filled rows are proper or not .else ask user to remove them 
	             * check for target field and operator values only.
	             */
	            if (!filterListContainsError()) {
	                updateCriteriaContent();
	                $mdDialog.hide({
	                    criteria: angular.copy(vm.criteria)
	                });
	            } else {
	                vm.alertList = [];
	                vm.alertList.push({
	                    msg: 'Filter list contains error. Fix them before saving.'
	                })
	            }
	
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	    };
	
	    filterCriteriaController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'cpqAdminConstants',
	        'searchService',
	        'filterCriteria',
	        'fieldNameObjectReference',
	        'mapToPicklistValues',
	        'picklistEntries'
	    ];
	
	    module.exports = filterCriteriaController;
	})();

/***/ }),
/* 829 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"filter-criteria-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>{{::vm.labels.FilterCriteria}}</h2>\n            <span flex></span>\n            <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\">\n                <i class=\"material-icons\">clear</i>\n            </button>\n        </div>\n        <div class=\"error-indicator\">\n            <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"2000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"filter-criteria-dialog-content\">\n        <button class=\"slds-button slds-button_brand\" ng-click=\"vm.addFilter()\">{{::vm.labels.AddNewCriteria}}</button>\n        <div class=\"filter-container\">\n            <div class=\"each-row\" data-ng-repeat=\"item in vm.criteria.filter.predicates\" data-ng-class=\"item.hasError === true ? 'error' :''\">\n                <div class=\"each-row-container\">\n                    <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                        <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                            <i class=\"material-icons\">more_vert</i>\n                        </button>\n                        <ul class=\"dropdown-menu\">\n                            <li data-ng-click=\"vm.removeFilter($index)\" class=\"action-Menu\">\n                                <i class=\"material-icons\">clear</i>\n                                <span class=\"remove-label\">{{::vm.labels.Remove}}</span>\n                            </li>\n                            <li class=\"action-Menu\" data-ng-click=\"vm.addFilter()\">\n                                <i class=\"material-icons\">add</i>\n                                <span class=\"add-label\">Add</span>\n                            </li>\n                        </ul>\n                    </div>\n                    <div class=\"rowNum\">\n                        <material-form-field model=\"item.RowNum\" field-type=\"string\" is-editable=\"false\" field-label=\"::vm.labels.RowNum\" name=\"rowNum\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"picklist\">\n                        <material-form-field model=\"item.FieldName\" field-type=\"picklist\" field-label=\"::vm.labels.Field\" name=\"field\" properties=\"vm.fieldNamePicklistEntries\" is-required=\"true\" is-editable=\"true\" data-ng-click=\"vm.trackSelectEvent($index)\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"operator\">\n                        <material-form-field model=\"item.CompOper\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.conditionAssociationPicklistEntries\" field-label=\"::vm.labels.Operator\" name=\"operator\" is-required=\"true\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"map-to\" data-ng-if=\"vm.mapToPicklistEntries.PicklistValues.length > 0\">\n                        <material-form-field model=\"item.MapTo\" field-type=\"picklist\" field-label=\"::vm.labels.MapTo\" name=\"field\" properties=\"vm.mapToPicklistEntries\" is-editable=\"true\" data-ng-click=\"vm.trackSelectEvent($index)\">\n                        </material-form-field>\n                    </div>\n                    <div ng-class=\"{'value': item.FieldType != 'PICKLIST' && item.FieldType != 'MULTIPICKLIST' && item.FieldType != 'DATETIME' && item.FieldType != 'DATE', 'operator': item.FieldType === 'PICKLIST' || item.FieldType === 'MULTIPICKLIST', 'datetime-field': item.FieldType === 'DATETIME' || item.FieldType === 'DATE'}\">\n                        <material-form-field model=\"item.FieldValue\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.Value\" data-ng-if=\"(item.FieldType === 'STRING' && item.MapTo === NULL) || (item.FieldType !== 'PICKLIST' && item.FieldType !== 'MULTIPICKLIST' && item.FieldType !== 'DATE' && item.FieldType !== 'DATETIME' && item.FieldType !== 'DOUBLE' && item.FieldType !== 'CURRENCY' && item.FieldType !== 'PERCENT' && item.FieldType !== 'BOOLEAN' && item.MapTo === '')\"></material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"DOUBLE\" is-editable=\"true\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.FieldType === 'DOUBLE' && item.MapTo === ''\"></material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.FieldType === 'CURRENCY' && item.MapTo === ''\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"PERCENT\" is-editable=\"true\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.FieldType === 'PERCENT' && item.MapTo === ''\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.FieldType === 'PICKLIST' && item.MapTo === ''\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"item.mapToPicklistValues\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.MapTo !== ''\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.FieldType === 'MULTIPICKLIST' && item.MapTo === ''\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.Value\" show-inline=\"true\" data-ng-if=\"item.FieldType === 'BOOLEAN' && item.MapTo === ''\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.Value\" data-ng-if=\"(item.FieldType === 'DATETIME' && item.MapTo === '') || (item.FieldType === 'DATE' && item.MapTo === '')\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div class=\"clearfix\"></div>\n            </div>\n        </div>\n        <div class=\"advance-filter-container\">\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showFCAdvancedPanel = true;vm.prepareConditionExpression();\" data-ng-if=\"vm.showFCAdvancedPanel !== true;\">{{::vm.labels.AdvancedOptions}}</button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showFCAdvancedPanel = false;\" data-ng-if=\"vm.showFCAdvancedPanel === true\">{{::vm.labels.ClearAdvancedOptions}}</button>\n            <div class=\"value\" data-ng-if=\"vm.showFCAdvancedPanel === true\">\n                <material-form-field model=\"vm.criteria.filter.condExpr\" field-type=\"string\" is-editable=\"true\" field-label=\"::vm.labels.AdvancedFilterCondition\" name=\"value\">\n                </material-form-field>\n            </div>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>"

/***/ }),
/* 830 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var visibilityRuleInclusionCriteriaController = function($scope, $mdDialog, i18nService, cpqAdminConstants, searchService, criteria, fieldPicklist, picklistEntries, isAdvOptnReadOnly) {
	        var vm = this,
	            selectedRowIndex,
	            criteria = criteria;
	
	        vm.labels = i18nService.CustomLabel;
	        vm.alertList = [];
	        vm.isAdvOptnReadOnly = isAdvOptnReadOnly;
	
	        vm.valueObjectPicklist = {
	            'PicklistValues': fieldPicklist.PicklistValues,
	            'methodToCallInController': updateFieldTypeAndValues
	        };
	
	        vm.conditionAssociationPicklistEntries = {
	            PicklistValues: picklistEntries.csRuleConditionCriteria
	        };
	
	        function updateFieldTypeAndValues(value) {
	            var selectedItem = getFieldTypePicklistByValue(value);
	            vm.criteria.filter.predicates[selectedRowIndex]['FieldType'] = selectedItem.Type;
	            vm.criteria.filter.predicates[selectedRowIndex]['FieldLabel'] = selectedItem.label;
	            vm.criteria.filter.predicates[selectedRowIndex]['picklistValues'] = { PicklistValues: selectedItem.PicklistValues || [] };
	            if(selectedItem.Type === cpqAdminConstants.boolean && !vm.criteria.filter.predicates[selectedRowIndex]['FieldValue']) {
	                vm.criteria.filter.predicates[selectedRowIndex]['FieldValue'] = false;
	            }
	        }
	
	        var criteriaObj = '';
	        if (criteria) {
	            if (angular.isString(criteria)) {
	                criteriaObj = JSON.parse(criteria);
	            } else {
	                criteriaObj = criteria;
	            }
	        }
	
	        if (criteriaObj) {
	            vm.criteria = getActionCriterias(criteriaObj);
	        } else {
	            vm.criteria = {
	                'sObjectName': null,
	                'sObjectLabel': null,
	                'searchText': null,
	                'filter': {
	                    'predicates': [],
	                    'hasRHSFields': false,
	                    'childFilter': null
	                }
	            }
	        }
	
	        if (vm.criteria.filter.condExpr !== '') {
	            vm.showAdvancedPanel = true;
	        } else {
	            vm.showAdvancedPanel = false;
	        }
	
	        function getActionCriterias(obj) {
	            if (obj && obj.filter && obj.filter.predicates) {
	                var temp = obj.filter.predicates,
	                    index;
	                for (index = 0; index < temp.length; index++) {
	                    var fieldType = temp[index].FieldType || temp[index].Type,
	                        fieldValue = temp[index].FieldValue,
	                        fieldName = temp[index].FieldName;
	                    if (fieldType === cpqAdminConstants.picklist || fieldType === cpqAdminConstants.multipicklist) {
	                        temp[index].picklistValues = {
	                            'PicklistValues': getFieldTypePicklistByValue(fieldName).PicklistValues
	                        };
	                        if (fieldType === cpqAdminConstants.multipicklist) {
	                            if (angular.isString(temp[index].FieldValue)) {
	                                temp[index].FieldValue = temp[index].FieldValue.split(';');
	                            }
	                        }
	                    } else {
	                        if (fieldType === cpqAdminConstants.double || fieldType === cpqAdminConstants.currency || fieldType === cpqAdminConstants.percent) {
	                            temp[index].FieldValue = temp[index].FieldValue ? Number(temp[index].FieldValue) : 0;
	                        }
	                        temp[index]['picklistValues'] = { PicklistValues: [] };
	                    }
	                }
	            }
	            return obj;
	        }
	
	        function getFieldTypePicklistByValue(value) {
	            var selectedItem, items = vm.valueObjectPicklist.PicklistValues;
	            for (var item = 0; item < items.length; item++) {
	                if (items[item].value === value) {
	                    selectedItem = items[item];
	                    return selectedItem;
	                }
	            }
	        }
	
	        vm.addInclusion = function() {
	            var targetField, nextRowNumber;
	            nextRowNumber = getNextRowNumber();
	            vm.criteria.filter.predicates.push({
	                'RowNum': nextRowNumber,
	                'RHSSObjectName': null,
	                'RHSFieldType': null,
	                'RHSFieldName': null,
	                'RHSFieldLabel': null,
	                'RHSChildFilterName': null,
	                'RefFieldName': null,
	                'OffsetValue': null,
	                'LHSSObjectName': null,
	                'LHSChildFilterName': null,
	                'FieldValue': '',
	                'FieldType': '',
	                'FieldName': '',
	                'FieldLabel': '',
	                'CompOper': '',
	                'BoolOper': 'AND'
	            });
	            updateAdvancedCondition(nextRowNumber);
	        };
	
	        vm.removeInclusion = function(index) {
	            vm.criteria.filter.predicates.splice(index, 1);
	            updateRowNumValue();
	            vm.prepareConditionExpression();
	        };
	
	        function getNextRowNumber() {
	            return (vm.criteria.filter.predicates.length + 1);
	        }
	
	        function updateAdvancedCondition(nextRowNumber) {
	            var expr = vm.criteria.filter.condExpr,
	                finalExpression = '';
	            if (expr) {
	                finalExpression = expr + ' AND ' + nextRowNumber;
	            } else {
	                finalExpression = nextRowNumber;
	            }
	            vm.criteria.filter.condExpr = finalExpression;
	
	        }
	
	        function updateRowNumValue() {
	            var filters = vm.criteria.filter.predicates;
	            for (var i = 0; i < filters.length; i++) {
	                filters[i].RowNum = (i + 1);
	            }
	        }
	
	        vm.prepareConditionExpression = function() {
	            var expr = '';
	            var predicates = vm.criteria.filter.predicates;
	
	            for (var i = 0; i < predicates.length; i++) {
	                if (i === (predicates.length - 1)) {
	                    expr += predicates[i].RowNum;
	                } else {
	                    expr += predicates[i].RowNum + ' AND ';
	                }
	            }
	            vm.criteria.filter.condExpr = expr;
	        };
	
	        function filterListContainsError() {
	            var containsError = false;
	            if (vm.criteria.filter.predicates.length > 0) {
	                var predicates = vm.criteria.filter.predicates;
	                for (var i = 0; i < predicates.length; i++) {
	
	                    var fieldName = predicates[i].FieldName,
	                        operator = predicates[i].CompOper;
	                    if (angular.isDefined(fieldName) && fieldName !== '' && fieldName !== null && (operator !== undefined && operator !== '')) {
	                        containsError = false;
	                        predicates[i].hasError = false;
	                    } else {
	                        containsError = true;
	                        predicates[i].hasError = true;
	                    }
	                }
	            }
	            return containsError;
	        }
	
	        function updateCriteriaContent() {
	            if (vm.criteria.filter.predicates.length > 0) {
	                var predicates = vm.criteria.filter.predicates,
	                    exprStr = '';
	                vm.criteria.fields = [];
	                var condExpr = vm.criteria.filter.condExpr;
	                if (!condExpr) {
	                    vm.prepareConditionExpression();
	                }
	                for (var index = 0; index < predicates.length; index++) {
	                    delete predicates[index].hasError;
	                    delete predicates[index].picklistValues;
	                    vm.criteria.fields.push(predicates[index].FieldName);
	                }
	
	                vm.criteria.exprStr = prepareCriteriaExpression(vm.criteria.filter.condExpr);
	
	            } else {
	                vm.criteria.filter.predicates = [];
	                vm.criteria.exprStr = null;
	                vm.criteria.fields = null;
	            }
	        }
	
	        function prepareCriteriaExpression(condExpr) {
	
	            var str = '';
	            if (condExpr) {
	                var rowNumArr = [];
	                if (vm.criteria.filter.predicates.length > 0) {
	                    var predicates = vm.criteria.filter.predicates;
	                    for (var i = 0; i < predicates.length; i++) {
	                        rowNumArr.push(predicates[i].RowNum);
	                    }
	                }
	
	                var condExprArr = condExpr.toString().split(' ');
	                for (var i = 0; i < condExprArr.length; i++) {
	                    if (!isNaN(+condExprArr[i])) {
	                        var value = +condExprArr[i];
	                        if (value !== 0) {
	                            if (rowNumArr.indexOf(value) <= -1) {
	                                str += '{' + (value - 1) + '}';
	                            } else {
	                                var predicates = vm.criteria.filter.predicates;
	                                var fieldLabel = predicates[(value - 1)].FieldLabel,
	                                    fieldValue = predicates[(value - 1)].FieldValue,
	                                    fieldType = predicates[(value - 1)].FieldType,
	                                    operator = predicates[(value - 1)].CompOper;
	                                if (angular.isString(fieldLabel)) {
	                                    fieldLabel = fieldLabel.trim();
	                                }
	                                if (angular.isString(fieldValue)) {
	                                    fieldValue = fieldValue.trim();
	                                }
	                                str += searchService.prepareExpressionString(fieldLabel, fieldValue, operator);
	                            }
	                        }
	
	                    } else {
	                        str += condExprArr[i] + ' ';
	                    }
	                }
	            }
	
	            return str !== '' ? str.trim() : str;
	        }
	
	        vm.trackSelectEvent = function(index) {
	            selectedRowIndex = index;
	        };
	
	        vm.save = function() {
	            /* TODO : Check here if the half-filled rows are proper or not .else ask user to remove them 
	             * check for target field and operator values only.
	             */
	            if (!filterListContainsError()) {
	                updateCriteriaContent();
	                $mdDialog.hide({
	                    criteria: angular.copy(vm.criteria)
	                });
	            } else {
	                vm.alertList = [];
	                vm.alertList.push({
	                    msg: 'Filter list contains error. Fix them before saving.'
	                })
	            }
	
	        };
	
	        vm.cancel = function() {
	            $mdDialog.cancel();
	        };
	
	        vm.closeAlert = function(index) {
	            vm.alertList.splice(index, 1);
	        };
	    };
	
	    visibilityRuleInclusionCriteriaController.$inject = [
	        '$scope',
	        '$mdDialog',
	        'i18nService',
	        'cpqAdminConstants',
	        'searchService',
	        'criteria',
	        'fieldPicklist',
	        'picklistEntries',
	        'isAdvOptnReadOnly'
	    ];
	
	    module.exports = visibilityRuleInclusionCriteriaController;
	})();

/***/ }),
/* 831 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog class=\"visibility-rule-inclusion-criteria-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>{{::vm.labels.InclusionCriteria}}</h2>\n            <span flex></span>\n            <button class=\"dialog-close-button slds-button slds-button--icon\" ng-click=\"vm.cancel()\">\n                <i class=\"material-icons\">clear</i>\n            </button>\n        </div>\n        <div class=\"error-indicator\">\n            <uib-alert type=\"danger\" data-ng-repeat=\"alert in vm.alertList\" dismiss-on-timeout=\"2000\" close=\"vm.closeAlert($index)\">{{alert.msg}}</uib-alert>\n        </div>\n    </md-toolbar>\n    <md-dialog-content class=\"inclusion-criteria-dialog-content\">\n        <button class=\"slds-button slds-button_brand\" ng-click=\"vm.addInclusion()\" ng-disabled=\"vm.criteria.filter.predicates.length > 2\">{{::vm.labels.AddNewCriteria}}</button>\n        <div class=\"inclusion-container\">\n            <div class=\"each-row\" data-ng-repeat=\"item in vm.criteria.filter.predicates\" data-ng-class=\"item.hasError === true ? 'error' :''\">\n                <div class=\"each-row-container\">\n                    <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                        <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                            <i class=\"material-icons\">more_vert</i>\n                        </button>\n                        <ul class=\"dropdown-menu\">\n                            <li data-ng-click=\"vm.removeInclusion($index)\" class=\"action-Menu\">\n                                <i class=\"material-icons\">clear</i>\n                                <span class=\"remove-label\">{{::vm.labels.Remove}}</span>\n                            </li>\n                            <li class=\"action-Menu\" data-ng-click=\"vm.addInclusion()\" data-ng-if=\"item.RowNum <= 2\">\n                                <i class=\"material-icons\">add</i>\n                                <span class=\"add-label\">Add</span>\n                            </li>\n                        </ul>\n                    </div>\n                    <div class=\"rowNum\">\n                        <material-form-field model=\"item.RowNum\" field-type=\"string\" is-editable=\"false\" field-label=\"::vm.labels.RowNum\" name=\"rowNum\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"picklist\">\n                        <material-form-field model=\"item.FieldName\" field-type=\"picklist\" field-label=\"::vm.labels.Field\" name=\"field\" properties=\"vm.valueObjectPicklist\" is-required=\"true\" is-editable=\"true\" data-ng-click=\"vm.trackSelectEvent($index)\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"operator\">\n                        <material-form-field model=\"item.CompOper\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.conditionAssociationPicklistEntries\" field-label=\"::vm.labels.Operator\" name=\"operator\" is-required=\"true\">\n                        </material-form-field>\n                    </div>\n                    <div ng-class=\"{'value': item.FieldType != 'PICKLIST' && item.FieldType != 'MULTIPICKLIST' && item.FieldType != 'DATETIME' && item.FieldType != 'DATE', 'operator': item.FieldType === 'PICKLIST' || item.FieldType === 'MULTIPICKLIST', 'datetime-field': item.FieldType === 'DATETIME' || item.FieldType === 'DATE'}\">\n                        <material-form-field model=\"item.FieldValue\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.FieldType === 'STRING' || (item.FieldType !== 'PICKLIST' && item.FieldType !== 'MULTIPICKLIST' && item.FieldType !== 'DATE' && item.FieldType !== 'DATETIME' && item.FieldType !== 'DOUBLE' && item.FieldType !== 'CURRENCY' && item.FieldType !== 'PERCENT' && item.FieldType !== 'BOOLEAN')\"></material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"DOUBLE\" is-editable=\"true\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.FieldType === 'DOUBLE'\"></material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"CURRENCY\" is-editable=\"true\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.FieldType === 'CURRENCY'\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"PERCENT\" is-editable=\"true\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.FieldType === 'PERCENT'\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.FieldType === 'PICKLIST'\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"MULTIPICKLIST\" is-editable=\"true\" properties=\"item.picklistValues\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.FieldType === 'MULTIPICKLIST'\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"CHECKBOX\" is-editable=\"true\" field-label=\"::vm.labels.Value\" show-inline=\"true\" data-ng-if=\"item.FieldType === 'BOOLEAN'\">\n                        </material-form-field>\n                        <material-form-field model=\"item.FieldValue\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.Value\" data-ng-if=\"item.FieldType === 'DATETIME' || item.FieldType === 'DATE'\">\n                        </material-form-field>\n                    </div>\n                </div>\n                <div class=\"clearfix\"></div>\n            </div>\n        </div>\n        <div class=\"advance-filter-container\">\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showICAdvancedPanel = true;vm.prepareConditionExpression();\" data-ng-if=\"vm.showICAdvancedPanel !== true;\">{{::vm.labels.AdvancedOptions}}</button>\n            <button class=\"slds-button slds-button_brand\" ng-click=\"vm.showICAdvancedPanel = false;\" data-ng-if=\"vm.showICAdvancedPanel === true\">{{::vm.labels.ClearAdvancedOptions}}</button>\n            <div class=\"value\" data-ng-if=\"vm.showICAdvancedPanel === true\">\n                <material-form-field model=\"vm.criteria.filter.condExpr\" field-type=\"string\" is-editable=\"true\" field-label=\"::vm.labels.AdvancedFilterCondition\" name=\"value\" is-disabled=\"{{vm.isAdvOptnReadOnly}}\">\n                </material-form-field>\n            </div>\n        </div>\n    </md-dialog-content>\n    <md-dialog-actions layout=\"row\" class=\"dialog-footer\">\n        <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.cancel()\">{{::vm.labels.CancelButton}}</a>\n        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.save()\">{{::vm.labels.SaveButton}}</a>\n    </md-dialog-actions>\n</md-dialog>"

/***/ }),
/* 832 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var visibilityRulesController = function($state, $scope, i18nService, visibilityRulesCommonService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	
	        function findStateName(stateName) {
	            vm.stateCurrentName = stateName;
	        }
	        findStateName($state.current.name);
	
	        $scope.$on('$stateChangeSuccess', function(e, toState, toParams) {
	            findStateName(toState.name);
	            updateTabMenus();
	        });
	
	        /* Menu for specific Tabs */
	        vm.tabFirstMenu = '';
	        vm.tabMenuItems = [];
	
	        function updateTabMenus() {
	            var currentState = vm.stateCurrentName,
	                currentHash = currentState.split('app.visibilityRules.')[1];
	            switch (currentHash) {
	                case 'details':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewVisibilityRule;
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                default:
	                    {
	                        vm.tabFirstMenu = '';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	            }
	        }
	
	        vm.tabMenuClicked = function(menuName) {
	            var eventName = menuName.split(' ').join('-');
	            $scope.$broadcast(eventName);
	        };
	
	        vm.currentState = $state.current.name;
	
	        $scope.$watch(function() {
	            return visibilityRulesCommonService.selectedVisibilityRule;
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                vm.selectedVisibilityRule = newValue;
	            }
	        }, true);
	    };
	
	    visibilityRulesController.$inject = [
	        '$state',
	        '$scope',
	        'i18nService',
	        'visibilityRulesCommonService'
	    ];
	
	    module.exports = visibilityRulesController;
	})();


/***/ }),
/* 833 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		var constants = {
			/*
			 * This object can be any level nested depending on modularity we want to achieve 
			 * - Either per page
			 * - Per standalone functionality
			 */
			'new': 'new',
			'update': 'update',
			'numberOfRecordsPerChunk': 50,
			'treePanelItemsPerChunk': 25
		};
	
		module.exports = constants;
	
	})();

/***/ }),
/* 834 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"visibility-rules\">\n    <div class=\"visibility-rules-main-container\">\n        <div class=\"visibility-rules-header title-bar\">\n            <div class=\"visibility-rules-title-container title\">\n                <div class=\"visibility-rules-info\">\n                    <span class=\"title\">{{vm.selectedVisibilityRule.Name}}</span>\n                </div>\n            </div>\n            <div id=\"navbar\">\n                <visibility-rules-sub-menu></visibility-rules-sub-menu>\n                <!-- Product menu bar with its values -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"list-product-btn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabFirstMenu)\" data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                        <div class=\"drop drop-menu\" data-ng-if=\"::vm.tabMenuItems.length > 0\">\n                            <md-menu md-offset=\"50 50\">\n                                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                    <i class=\"material-icons\">more_vert</i>\n                                </button>\n                                <md-menu-content width=\"2\">\n                                    <md-menu-item data-ng-repeat=\"menu in ::vm.tabMenuItems\">\n                                        <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                            <div layout=\"row\" flex>\n                                                <p flex>{{::menu}}</p>\n                                            </div>\n                                        </md-button>\n                                    </md-menu-item>\n                                </md-menu-content>\n                            </md-menu>\n                        </div>\n                    </div>\n                </ul>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"visibility-rules-center-container\">\n            <!-- Content layout starts -->\n            <div ui-view=\"visibilityRulesContainer\" class=\"visibility-rules-container\"></div>\n            <!-- Content layout ends -->\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 835 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    __webpack_require__(836);
	    __webpack_require__(841);
	    __webpack_require__(843);
	    __webpack_require__(846);
	    
	    module.exports = angular.module('cpqAdmin.promotionsExclusionList', [
	
	            'cpqAdmin.promotionsExclusionList.common.services',
	            'cpqAdmin.promotionsExclusionList.common.directives',
	            'cpqAdmin.promotionsExclusionList.list',
	            'cpqAdmin.promotionsExclusionList.details'
	        ])
	        .controller('promotionsExclusionListController', __webpack_require__(849))
	        .constant('promotionsExclusionListConstants', __webpack_require__(850))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.promotionsExclusionList', {
	                url: '/promotionsExclusionList',
	                //abstract: true,
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(851),
	                        controller: 'promotionsExclusionListController',
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 836 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.promotionsExclusionList.common.directives', ['cpqAdmin.promotionsExclusionList.common.services'])
	        .directive('promotionsExclusionListSubMenu', __webpack_require__(837))
	        .directive('promotionsExclusionListsListing', __webpack_require__(839));
	})();


/***/ }),
/* 837 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var promotionsExclusionListSubMenuController = function($stateParams, systemConstants, i18nService) {
	        var vm = this;
	
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	
	    };
	
	    promotionsExclusionListSubMenuController.$inject = [
	        '$stateParams',
	        'systemConstants',
	        'i18nService'
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: promotionsExclusionListSubMenuController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(838),
	    };
	};


/***/ }),
/* 838 */
/***/ (function(module, exports) {

	module.exports = "<ul class=\"nav navbar-nav promotions-exclusion-list-menu\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.promotionsExclusionList.details({id:vm.$stateParams.id})\">{{vm.labels.Details}}</a>\n    </li>\n</ul>\n"

/***/ }),
/* 839 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    module.exports = [
	        function() {
	            var promotionsExclusionListsListingController = function($scope, applicationService, systemConstants, $state, $stateParams,
	                i18nService, remoteService, promotionsExclusionListCommonService, promotionsExclusionListConstants) {
	
	                var vm = this,
	                    prefix = systemConstants.nsPrefix || '',
	                    filter = {
	                        SearchString: '',
	                        ChunkNumber: 1,
	                        NumberOfRecordsPerChunk: promotionsExclusionListConstants.numberOfExclusionListsPerChunk || 50
	                    },
	                    pageNumber = 1;
	
	                vm.labels = i18nService.CustomLabel;
	                vm.disableLeftBtn = true;
	                vm.searchedStr = '';
	                vm.isMaxSQLSizeExceed = false;
	                vm.numberOfProductsPerChunk = promotionsExclusionListConstants.numberOfExclusionListsPerChunk || 50;
	
	                vm.searchPromotionsExclusionLists = function() {
	                    filter.SearchString = vm.searchText || '';
	                    filter.ChunkNumber = 1;
	                    filter.NumberOfRecordsPerChunk = vm.numberOfProductsPerChunk;
	                    loadPromotionsExclusionLists();
	                };
	
	                vm.prepareFiltersAndPromotionsExclusionLists = function() {
	                    filter = promotionsExclusionListCommonService.getFilter();
	                    if (Object.keys(filter).length) {
	                        vm.searchText = filter.SearchString;
	                    } else {
	                        filter = {
	                            ChunkNumber: pageNumber || 1,
	                            NumberOfRecordsPerChunk: vm.numberOfProductsPerChunk,
	                            SearchString: vm.searchString || ''
	                        };
	                    }
	                };
	
	                /* On Page load while there are no filters applied */
	                vm.prepareFiltersAndPromotionsExclusionLists();
	
	                vm.getPromotionsExclusionLists = function(type) {
	                    if (type === 'next') {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber + 1);
	                        if (filter.ChunkNumber !== 1) {
	                            vm.disableLeftBtn = false;
	                        }
	                        loadPromotionsExclusionLists();
	                    } else {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber - 1);
	                        if (filter.ChunkNumber === 1) {
	                            vm.disableLeftBtn = true;
	                        }
	                        loadPromotionsExclusionLists();
	                    }
	                };
	
	                var pLDeRegisterFunc = $scope.$watch(function() {
	                    return promotionsExclusionListCommonService.getPromotionsExclusionLists();
	                }, function(newValue, oldValue) {
	                    if (newValue && oldValue) {
	                        processData(newValue);
	                    }
	                }, true);
	
	                function processData(promotionsExclusionLists) {
	                    /* Used to bind to table body */
	                    vm.promotionsExclusionLists = promotionsExclusionLists;
	                    vm.isMaxSQLSizeExceed = false;
	
	                    if (promotionsExclusionLists.length === 0) {
	                        vm.searchedStr = vm.searchString;
	                    }
	                    /**
	                     * - Check if the response size is less than the current chunk size.
	                     * - If less, disable the next button
	                     * - else keep it enabled
	                     */
	
	                    if (promotionsExclusionLists.length < filter.NumberOfRecordsPerChunk) {
	                        vm.disableRightBtn = true;
	                        updateCenterBtnText(filter, promotionsExclusionLists.length);
	                    } else {
	                        vm.disableRightBtn = false;
	                        updateCenterBtnText(filter, promotionsExclusionLists.length);
	                    }
	
	                    /* Hide the loader on success of service call */
	                    vm.showLoader = false;
	                    document.querySelector('.list-table').scrollTop = 0;
	                }
	
	                function loadPromotionsExclusionLists() {
	                    vm.showLoader = true;
	                    promotionsExclusionListCommonService.loadAllPromotionsExclusionLists(filter);
	                }
	
	                function updateCenterBtnText(filterObj, endCount) {
	                    /* 
	                     * - Search result might return lesser number of records than current pagination count.
	                     * e.g. current pagination is : 1-150, but search returned only 20 records.
	                     * - Then pagination should be updated to 1-20 instead of 1-150.
	                     * - endCount variable contains the exact number of records and will only be defined, if
	                     * search count is lesser than current pagination sequence.
	                     */
	                    if (filterObj.ChunkNumber === 1) {
	                        vm.disableLeftBtn = true;
	                    }
	                    if (endCount) {
	                        vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfProductsPerChunk + 1) + '-' + ((filterObj.ChunkNumber - 1) * vm.numberOfProductsPerChunk + endCount) + ')';
	                        if (endCount < vm.numberOfProductsPerChunk) {
	                            vm.disableRightBtn = true;
	                        }
	                    } else {
	                        vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfProductsPerChunk + 1) + '-' + (filterObj.ChunkNumber * vm.numberOfProductsPerChunk) + ')';
	                    }
	                }
	
	                vm.getActiveClass = function(id) {
	                    if ($stateParams.id === id) {
	                        return true;
	                    } else {
	                        return false;
	                    }
	                };
	
	                $scope.$on('destroy', function() {
	                    deRegisterFunc();
	                    pLDeRegisterFunc();
	                    vm = null;
	                });
	
	                vm.loadPromotionsExclusionListDetails = function(toBeLoadedPrs) {
	                    $state.go('app.promotionsExclusionList.details', {
	                        id: toBeLoadedPrs.Id
	                    });
	                };
	            };
	
	            promotionsExclusionListsListingController.$inject = [
	                '$scope',
	                'applicationService',
	                'systemConstants',
	                '$state',
	                '$stateParams',
	                'i18nService',
	                'remoteService',
	                'promotionsExclusionListCommonService',
	                'promotionsExclusionListConstants'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {},
	                controller: promotionsExclusionListsListingController,
	                controllerAs: 'vm',
	                bindToController: {
	                    searchText: '='
	                },
	                template: __webpack_require__(840),
	            };
	        }
	    ];
	})();


/***/ }),
/* 840 */
/***/ (function(module, exports) {

	module.exports = "<header>\n    <h4>{{::vm.labels.AllPromotionExclusionLists}}</h4>\n    <div class=\"search\">\n        <form ng-submit=\"vm.searchPromotionsExclusionLists()\" novalidate>\n            <div class=\"search-input-container\">\n                <div class=\"input-group\">\n                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                    <label class=\"ng-binding\">Search</label>\n                </div>\n            </div>\n        </form>\n    </div>\n</header>\n<div data-ng-if=\"vm.promotionsExclusionLists.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n    {{::vm.labels.NoMatchingPromotionsExclusionList}} <span><b>{{vm.searchedStr}}</b></span>\n</div>\n<div data-ng-if=\"vm.promotionsExclusionLists.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n    {{::vm.labels.MaxSQLSizeExceedMessage}}\n</div>\n<div class=\"list-table\">\n    <table>\n        <tbody>\n            <tr ng-repeat=\"item in vm.promotionsExclusionLists track by item.Id\" ng-click=\"vm.loadPromotionsExclusionListDetails(item)\" ng-class=\"{active: vm.getActiveClass(item.Id) === true}\">\n                <td title=\"{{item.Name}}\">\n                    {{::item.Name }}\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<div class=\"pagination promotions-exclusion-lists-list-pagination\">\n    <div class=\"place promotions-exclusion-lists-list-place\">\n        {{vm.paginationCenterText}}\n    </div>\n    <div class=\"next-prev\">\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getPromotionsExclusionLists('previous')\">\n            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n        </button>\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getPromotionsExclusionLists('next')\">\n            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n        </button>\n    </div>\n</div>\n"

/***/ }),
/* 841 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.promotionsExclusionList.common.services', [])
	        .service('promotionsExclusionListCommonService', __webpack_require__(842));
	        
	})();


/***/ }),
/* 842 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var promotionsExclusionListCommonServices = function(systemConstants, remoteService, $q, apiCallsService) {
	
	        var filter = {},
	            selectedExclusionList = {},
	            exclusionLists = [],
	            metadata = [];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            /* trim() might notbe needed. Lets just be sure not to have empty spaces. */
	            return (prefix + attribute).trim();
	        }
	
	        function setSelectedExclusionList(obj) {
	            selectedExclusionList = obj;
	        }
	
	        function getSelectedExclusionList() {
	            return selectedExclusionList;
	        }
	
	        function processAllPromotionsExclusionListsResponse(list) {
	            var response = [];
	            if (list && list.length > 0) {
	                for (var i = 0; i < list.length; i++) {
	                    response.push(list[i].IncentiveExclusionSO);
	                }
	            }
	            return response;
	        }
	
	        function loadAllPromotionsExclusionLists(requestObj) {
	            var deferQ = $q.defer();
	            remoteService.getIncentiveExclusions(requestObj).then((response) => {
	                var processedData = processAllPromotionsExclusionListsResponse(response.IncentiveExclusionDOs);
	                setPromotionsExclusionLists(processedData);
	                deferQ.resolve(true);
	            }, function (reason) {
	                applicationService.showErrorMessage(reason);
	                deferQ.reject(false);
	            });
	            return deferQ.promise;
	        }
	
	        function setPromotionsExclusionLists(arr) {
	            exclusionLists = [];
	            exclusionLists = angular.copy(arr);
	        }
	
	        function getPromotionsExclusionLists() {
	            return exclusionLists;
	        }
	
	        function getSampleNewPromotionsExclusionList() {
	            return {
	                product: {
	                    model: [{
	                        Name: 'All',
	                        Id: 'All'
	                    }],
	                    autocomplete: {
	                        querySearch: apiCallsService.searchSObjectRecords,
	                        displayName: 'Name',
	                        sObjectName: 'Product2'
	                    }
	                },
	                productGroup: {
	                    model: [{
	                        Name: 'All',
	                        Id: 'All'
	                    }],
	                    autocomplete: {
	                        querySearch: apiCallsService.searchSObjectRecords,
	                        displayName: 'Name',
	                        sObjectName: getPrefixedAttribute('ProductGroup__c')
	                    }
	                }
	            };
	        }
	
	        function setFilter(obj) {
	            filter = obj;
	        }
	
	        function getFilter() {
	            return filter;
	        }
	
	        function prepareExclusionListDetails(exclusionList) {
	            var obj = exclusionList;
	            return obj;
	        }
	
	        function getIncentiveExclusionDetails(id, returnEntireObj) {
	            var defer = $q.defer(),
	                requestObj = {
	                    IncentiveExclusionId: id === 'new' ? null : id,
	                    IncludeMetadata: true
	                },
	                response = {};
	
	            remoteService.getIncentiveExclusionDetails(requestObj).then(function(response) {
	                setMetadata(response.FieldMetadata);
	                if (id !== 'new') {
	                    var extractedDetails = prepareExclusionListDetails(response.IncentiveExclusionDO.IncentiveExclusionSO);
	                    extractedDetails.productGroup = {
	                        model: [{
	                            Name: 'All',
	                            Id: 'All'
	                        }],
	                        autocomplete: {
	                            querySearch: apiCallsService.searchSObjectRecords,
	                            displayName: 'Name',
	                            sObjectName: getPrefixedAttribute('ProductGroup__c')
	                        }
	                    };
	                    extractedDetails.product = {
	                        model: [{
	                            Name: 'All',
	                            Id: 'All'
	                        }],
	                        autocomplete: {
	                            querySearch: apiCallsService.searchSObjectRecords,
	                            displayName: 'Name',
	                            sObjectName: 'Product2'
	                        }
	                    };
	                    if (response.IncentiveExclusionDO.ProductGroupScope && response.IncentiveExclusionDO.ProductGroupScope.length > 0) {
	                        extractedDetails.productGroup.model = response.IncentiveExclusionDO.ProductGroupScope;
	                    }
	                    if (response.IncentiveExclusionDO.ProductScope && response.IncentiveExclusionDO.ProductScope.length > 0) {
	                        extractedDetails.product.model = response.IncentiveExclusionDO.ProductScope;
	                    }
	                    setSelectedExclusionList(extractedDetails);
	                    defer.resolve(extractedDetails);
	                } else {
	                    defer.resolve(getSampleNewPromotionsExclusionList());
	                }
	            }, function(reason) {
	                defer.reject(reason);
	            });
	
	            return defer.promise;
	        }
	
	        function setMetadata(items) {
	            metadata = items;
	        }
	
	        function getMetadata() {
	            return metadata;
	        }
	
	        function prepareSaveRequestObj(exclusionList) {
	            exclusionList[getPrefixedAttribute('ProductScope__c')] = exclusionList.product.model.map((product) => { return product.Id; }).join(';');
	            exclusionList[getPrefixedAttribute('ProductGroupScope__c')] = exclusionList.productGroup.model.map((productGroup) => { return productGroup.Id; }).join(';');
	            delete exclusionList.product;
	            delete exclusionList.productGroup;
	
	            return { IncentiveExclusionSOs: [exclusionList] };
	        }
	
	        function savePromotionsExclusionList(exclusionList) {
	            const requestObj = prepareSaveRequestObj(exclusionList);
	            if (exclusionList.Id) {
	                return remoteService.updateIncentiveExclusions(requestObj);
	            } else {
	                return remoteService.createIncentiveExclusions(requestObj);
	            }
	        }
	
	        var service = {
	            setMetadata: setMetadata,
	            getMetadata: getMetadata,
	            setFilter: setFilter,
	            getFilter: getFilter,
	            getPromotionsExclusionLists: getPromotionsExclusionLists,
	            setPromotionsExclusionLists: setPromotionsExclusionLists,
	            setSelectedExclusionList: setSelectedExclusionList,
	            getSelectedExclusionList: getSelectedExclusionList,
	            loadAllPromotionsExclusionLists: loadAllPromotionsExclusionLists,
	            getSampleNewPromotionsExclusionList: getSampleNewPromotionsExclusionList,
	            getIncentiveExclusionDetails: getIncentiveExclusionDetails,
	            prepareExclusionListDetails: prepareExclusionListDetails,
	            savePromotionsExclusionList: savePromotionsExclusionList
	        };
	        return service;
	    };
	
	    promotionsExclusionListCommonServices.$inject = [
	        'systemConstants',
	        'remoteService',
	        '$q',
	        'apiCallsService'
	    ];
	
	    module.exports = promotionsExclusionListCommonServices;
	})();


/***/ }),
/* 843 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.promotionsExclusionList.list',[])
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.promotionsExclusionList.list', {
	                parent: 'app.promotionsExclusionList',
	                url: '/list',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(844),
	                        controller: __webpack_require__(845),
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 844 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"promotions-exclusion-list-list-container\">\n    <div class=\"two-col-layout auto-height\">\n        <div class=\"auto-height col-lg-12 noPadding list-table-container\">\n            <div class=\"list-header\">\n                <!-- Search Bar starts -->\n                <div class=\"row noMargin search-container title-bar\">\n                    <div class=\"promotions-exclusion-list-search\">\n                        <div class=\"col-xs-5\">\n                            <div class=\"search-box-container\">\n                                <span class=\"fa fa-filter pointerEventsNone\" disabled data-ng-click=\"vm.resetPagination();\"></span>\n                                <i class=\"search-icon material-icons\" data-ng-click=\"vm.resetPagination()\">search</i>\n                                <form ng-submit=\"vm.resetPagination()\">\n                                    <input type=\"text\" placeholder=\"Search Exclusion List\" class=\"search-box\" data-ng-model=\"vm.searchString\">\n                                    <i class=\"clear-icon material-icons\" data-ng-if=\"vm.searchString\" data-ng-click=\"vm.clearSearchInput()\">clear</i>\n                                </form>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-3\"></div>\n                        <div class=\"col-xs-4 text-right promotions-exclusion-list-btn-group\">\n                            <div class=\"listBtn\">\n                                <button type=\"button\" class=\"slds-button slds-button_brand\" data-ng-click=\"vm.createNewPromotionsExclusionList()\">{{vm.labels.NewExclusionList}}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div preloader add-to-element=\"true\" loading-text=\"vm.loadingText\" data-ng-if=\"vm.showLoader === true\"></div>\n            <div data-ng-if=\"vm.promotionsExclusionLists.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{::vm.labels.NoMatchingPromotionsExclusionList}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.promotionsExclusionLists.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{::vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"list-table\">\n                <table ng-table=\"vm.tableParams\" class=\"table ng-table-resizable-columns\">\n                    <thead>\n                        <tr>\n                            <th ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                                <span ng-click=\"vm.tableHeaderClick(column);\">\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-descent'\">arrow_downward</i>\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-ascent'\">arrow_upward</i> \n                                    {{column.FieldLabel}}\n                                </span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"promotionsExclusionList in vm.promotionsExclusionLists track by promotionsExclusionList.Id\">\n                            <td data-ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                                <span data-ng-if=\"::column.FieldName === 'Name'\">\n                                    <a data-ng-click=\"vm.loadPromotionsExclusionListDetails(promotionsExclusionList, $event)\" ng-bind-html=\"::promotionsExclusionList[column.FieldName]\" class=\"clickable-item\"></a>\n                                </span>\n                                <span data-ng-if=\"::column.FieldName !== 'Name'\" ng-bind-html=\"::vm.getFormattedContent(promotionsExclusionList,column)\"></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"pagination-container text-center\" data-ng-if=\"vm.showPagination === true\">\n                <div class=\"btn-group dropup text-right\" role=\"group\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        {{vm.labels.RecordsPerPage | userMessage:vm.numberOfProductsPerChunk}}\n                        <span class=\"caret\"></span>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 50\">50</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 100\">100</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 150\">150</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 200\">200</a></li>\n                    </ul>\n                </div>\n                <div class=\"navigation-control\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProduct('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                    <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProduct('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 845 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var promotionsExclusionListController = function($scope, $state, $filter, NgTableParams, $timeout, i18nService, systemConstants, promotionsExclusionListConstants, cpqAdminConstants,
	        promotionsExclusionListCommonService, $location) {
	        var vm = this;
	
	        vm.labels = i18nService.CustomLabel;
	        var prefix = systemConstants.nsPrefix || '';
	        vm.tableColumnConfig = [{
	            "FieldLabel": vm.labels.Name,
	            "FieldName": "Name",
	            "Type": "STRING",
	            "showSortIcon": true,
	            "sortIconCls": 'st-sort-ascent'
	        }, {
	            "FieldLabel": vm.labels.Description,
	            "FieldName": prefix + 'Description__c',
	            "Type": "STRING",
	        }, {
	            "FieldLabel": vm.labels.IsActive,
	            "FieldName": (prefix + 'Active__c'),
	            "Type": "BOOLEAN",
	
	        }, {
	            "FieldLabel": vm.labels.ApplicationType,
	            "FieldName": (prefix + 'UseType__c'),
	            "Type": "STRING"
	        }, {
	            "FieldLabel": vm.labels.EffectiveDate,
	            "FieldName": (prefix + 'EffectiveDate__c'),
	            "Type": "DATETIME"
	        }, {
	            "FieldLabel": vm.labels.ExpirationDate,
	            "FieldName": (prefix + 'ExpirationDate__c'),
	            "Type": "DATETIME",
	
	        }];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	        /* 
	         * - vm.searchString : is the value present in the search field at any point of time.
	         * - vm.searchedStr : is the value user has entered and either clicked on search icon or hit
	         * enter / return  key.
	         */
	        vm.searchedStr = '';
	        vm.numberOfProductsPerChunk = promotionsExclusionListConstants.numberOfExclusionListsPerChunk;
	
	        vm.pageNumber = 0;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = false;
	        vm.showLoader = false;
	        vm.loadingText = vm.labels.LoadingText;
	        vm.isMaxSQLSizeExceed = false;
	        vm.showPagination = true;
	        updateCenterBtnText();
	        var sortField, sortDirection, pageNumber = 1,
	            configType = '';
	
	        vm.getProduct = function(type) {
	            if (type === 'next') {
	                pageNumber = pageNumber + 1;
	                vm.pageNumber++;
	                if (vm.pageNumber !== 0) {
	                    vm.disableLeftBtn = false;
	                }
	                loadPromotionsExclusionList();
	            } else {
	                pageNumber = pageNumber - 1;
	                vm.pageNumber--;
	                if (vm.pageNumber === 0) {
	                    vm.disableLeftBtn = true;
	                }
	                loadPromotionsExclusionList();
	            }
	        };
	
	        function updateCenterBtnText(endCount) {
	            /* 
	             * - Search result might return lesser number of records than current pagination count.
	             * e.g. current pagination is : 1-150, but search returned only 20 records.
	             * - Then pagination should be updated to 1-20 instead of 1-150.
	             * - endCount variable contains the exact number of records and will only be defined, if
	             * search count is lesser than current pagination sequence.
	             */
	            if (endCount) {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfProductsPerChunk + 1) + '-' + (vm.pageNumber * vm.numberOfProductsPerChunk + endCount) + ')';
	            } else {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfProductsPerChunk + 1) + '-' + ((vm.pageNumber + 1) * vm.numberOfProductsPerChunk) + ')';
	            }
	        };
	
	        vm.resetPagination = function(resetPageNumber) {
	            vm.showPanel = false;
	            if (resetPageNumber) {
	                vm.pageNumber = 0;
	                pageNumber = 1;
	            }
	            vm.pageNumber = 0;
	            pageNumber = 1;
	            vm.disableLeftBtn = true;
	            updateCenterBtnText();
	            loadPromotionsExclusionList();
	        };
	
	        var deRegisterFunc = $scope.$watch('vm.numberOfProductsPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                vm.resetPagination(false);
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            exclusionListDeRegisterFunc();
	            vm = null;
	        });
	
	
	        vm.getFormattedContent = function(priceList, column) {
	            var modifiedValue, precision,
	                fieldType = column.Type,
	                value = priceList[column.FieldName];
	
	            if (vm.systemProperties && vm.systemProperties.PercentageFieldPrecision) {
	                precision = vm.systemProperties.PercentageFieldPrecision;
	            } else if (vm.properties && vm.properties.Precision) {
	                precision = vm.properties.Precision;
	            } else {
	                precision = 5;
	            }
	
	            switch (fieldType) {
	                case cpqAdminConstants.datetime:
	                case cpqAdminConstants.date:
	                    {
	                        modifiedValue = $filter('aptDateToString')(value);
	                        break;
	                    }
	
	                case cpqAdminConstants.boolean:
	                    {
	                        if (value) {
	                            modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	                        } else {
	                            modifiedValue = "<i class='material-icons show'>check_circle</i>";
	                        }
	                        break;
	                    }
	                case cpqAdminConstants.string:
	                case cpqAdminConstants.textarea:
	                case cpqAdminConstants.url:
	                case cpqAdminConstants.multipicklist:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	                default:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	            }
	            return modifiedValue;
	        };
	
	        function createNgTable(data, numberOfProductsPerChunk) {
	            var initialParams = {
	                count: numberOfProductsPerChunk
	            };
	            var initialSettings = {
	                counts: [],
	                paginationMaxBlocks: 0,
	                paginationMinBlocks: 0,
	                dataset: data
	            };
	            return new NgTableParams(initialParams, initialSettings);
	        }
	
	        var exclusionListDeRegisterFunc = $scope.$watch(function() {
	            return promotionsExclusionListCommonService.getPromotionsExclusionLists();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                processData(newValue);
	            }
	        }, true);
	
	        function processData(promotionsExclusionLists) {
	
	            /* Used to bind to table body */
	            vm.promotionsExclusionLists = promotionsExclusionLists;
	            vm.isMaxSQLSizeExceed = false;
	
	            if (!vm.tableParams) {
	                vm.tableParams = createNgTable(promotionsExclusionLists, vm.numberOfProductsPerChunk);
	            }
	
	            /* 
	             * - Show 'No matching products are found for the search entry XXX', when no return
	             * return result set is empty.
	             * - Keep the user messages, until user makes a fresh search which has atleast more
	             * than 1 result item.
	             */
	            vm.showPagination = true;
	            if (promotionsExclusionLists.length === 0 && vm.searchString !== '') {
	                vm.searchedStr = vm.searchString;
	                if (vm.pageNumber === 0) {
	                    vm.showPagination = false;
	                }
	            }
	            if (promotionsExclusionLists.length < vm.numberOfProductsPerChunk) {
	                vm.disableRightBtn = true;
	                updateCenterBtnText(promotionsExclusionLists.length);
	            } else {
	                vm.disableRightBtn = false;
	                updateCenterBtnText();
	            }
	
	            /* Hide the loader on success of service call */
	            vm.showLoader = false;
	
	            $timeout(function() {
	                angular.element(window).resize();
	            }, 1000);
	            document.querySelector('.list-table').scrollTop = 0;
	        }
	
	        /**
	         * - When user enters search string and hits enter, this method gets called
	         * - Updates the smart-table pagination object.
	         * - Table header click
	         */
	        function loadPromotionsExclusionList() {
	            /* Show the loader on start of service call */
	            vm.showLoader = true;
	
	            const requestObj = {
	                ChunkNumber: pageNumber,
	                NumberOfRecordsPerChunk: vm.numberOfProductsPerChunk || 20,
	                SearchString: vm.searchString || ''
	            };
	
	            promotionsExclusionListCommonService.loadAllPromotionsExclusionLists(requestObj)
	                .then(function(response) {
	                    if (response) {
	                        vm.showLoader = false;
	                    }
	                }, function(reason) {});
	        }
	
	        loadPromotionsExclusionList();
	        /**
	         * - Clears searc input box
	         * - Makes a service call to reload the table
	         */
	        vm.clearSearchInput = function() {
	            vm.searchString = '';
	            vm.currentPage = 1;
	            vm.showPanel = false;
	            loadPromotionsExclusionList();
	        };
	
	
	        /**
	         * - Show / Hide ascending or descending icon next to the column header when user clicks on header.
	         * - We are not using the default feature of the ngTable. It's doing local sorting and to
	         * bind to its server side sorting, configs are not available as of now.
	         */
	        vm.tableHeaderClick = function(column) {
	            sortField = column.fieldName;
	            if (!column.sortIconCls) {
	                column.sortIconCls = 'st-sort-ascent';
	            }
	            sortDirection = (column.sortIconCls === 'st-sort-ascent' ? cpqAdminConstants.DESCENDING : cpqAdminConstants.ASCENDING);
	            var columnsList = vm.tableColumnConfig;
	            for (var item in columnsList) {
	                if (column.FieldName === columnsList[item].FieldName) {
	                    columnsList[item].showSortIcon = true;
	                    columnsList[item].sortIconCls = column.sortIconCls ? (column.sortIconCls === 'st-sort-ascent' ? 'st-sort-descent' : 'st-sort-ascent') : 'st-sort-descent';
	                } else {
	                    columnsList[item].showSortIcon = false;
	                    columnsList[item].sortIconCls = false;
	                }
	            }
	            vm.resetPagination();
	        };
	
	        vm.loadPromotionsExclusionListDetails = function(promotionsExclusionList, event) {
	            promotionsExclusionListCommonService.setSelectedExclusionList(angular.copy(promotionsExclusionList));
	            $state.go('app.promotionsExclusionList.details', {
	                id: promotionsExclusionList.Id
	            });
	            event.preventDefault();
	        };
	
	        vm.getDetailsPageUrl = function(id) {
	            var absUrl = $location.absUrl();
	            return absUrl.replace('/promotionsExclusionList/list', '/promotionsExclusionList/' + id + '/details');
	        };
	
	        vm.createNewPromotionsExclusionList = function() {
	            var allExclusionLists = promotionsExclusionListCommonService.getPromotionsExclusionLists(),
	                newExclusionList = promotionsExclusionListCommonService.getSampleNewPromotionsExclusionList();
	            promotionsExclusionListCommonService.setPromotionsExclusionLists(angular.copy(allExclusionLists));
	            promotionsExclusionListCommonService.setSelectedExclusionList(angular.copy(newExclusionList));
	            $state.go('app.promotionsExclusionList.details', {
	                id: 'new'
	            });
	        };
	
	    };
	
	    promotionsExclusionListController.$inject = [
	        '$scope',
	        '$state',
	        '$filter',
	        'NgTableParams',
	        '$timeout',
	        'i18nService',
	        'systemConstants',
	        'promotionsExclusionListConstants',
	        'cpqAdminConstants',
	        'promotionsExclusionListCommonService',
	        '$location'
	    ];
	
	    module.exports = promotionsExclusionListController;
	
	})();


/***/ }),
/* 846 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.promotionsExclusionList.details', [])
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.promotionsExclusionList.details', {
	                parent: 'app.promotionsExclusionList',
	                url: '/:id/details',
	                views: {
	                    'promotionsExclusionListContainer': {
	                        template: __webpack_require__(847),
	                        controller: __webpack_require__(848),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    promotionsExclusionListDetails: ['promotionsExclusionListCommonService', '$stateParams', function(promotionsExclusionListCommonService, $stateParams) {
	                        return promotionsExclusionListCommonService.getIncentiveExclusionDetails($stateParams.id);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 847 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"promotions-exclusion-lists-detail-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <promotions-exclusion-lists-listing search-text=\"vm.searchText\"></promotions-exclusion-lists-listing>\n        </div>\n        <div class=\"promotions-exclusion-lists-detail-block\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <!-- Create / Update product details form -->\n            <form class=\"promotions-exclusion-lists-detail-form\" novalidate name=\"vm.promotionsExclusionListForm\">\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedExclusionList.Name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.Name\" is-required=\"true\" name=\"name\" max-length=\"{{vm.getFieldValue('Name','Length')}}\"></material-form-field>\n                        <div ng-messages=\"vm.promotionsExclusionListForm.name.$error\" ng-if=\"vm.promotionsExclusionListForm.name.$touched || vm.promotionsExclusionListForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                    <div class=\"flex\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedExclusionList[vm.prefix + 'Active__c']\" field-type=\"BOOLEAN\" is-editable=\"true\" field-label=\"::vm.labels.IsActive\" element-id=\"isActive\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\">\n                        <material-form-field model=\"vm.selectedExclusionList[vm.prefix + 'Description__c']\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"::vm.labels.Description\" max-length=\"{{vm.getFieldValue('Description__c','Length')}}\" name=\"ShortDescription\" id=\"short_description\"></material-form-field>\n                        <div ng-messages=\"vm.promotionsExclusionListForm.ShortDescription.$error\">\n                            <p ng-message=\"maxlength\" class=\"formError\">\n                                {{vm.labels.FormDescriptionMaxCharError | userMessage:vm.labels.Description}}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedExclusionList[vm.prefix + 'EffectiveDate__c']\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.EffectiveDate\"></material-form-field>\n                    </div>\n                    <div class=\"flex\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedExclusionList[vm.prefix + 'ExpirationDate__c']\" field-type=\"DATETIME\" is-editable=\"true\" field-label=\"::vm.labels.ExpirationDate\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\">\n                        <material-form-field model=\"vm.selectedExclusionList.product.model\" field-type=\"multiselect-autocomplete\" field-label=\"::vm.labels.ProductScope\" properties=\"vm.selectedExclusionList.product\" drop-disable></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\">\n                        <material-form-field model=\"vm.selectedExclusionList.productGroup.model\" field-type=\"multiselect-autocomplete\" field-label=\"::vm.labels.ProductGroupScope\" properties=\"vm.selectedExclusionList.productGroup\" drop-disable></material-form-field>\n                    </div>\n                </div>\n            </form>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListingPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.pageSave()\" data-ng-disabled=\"!vm.enableSave\">Save</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 848 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	    var detailsController = function($q, $scope, $state, $stateParams, applicationService, promotionsExclusionListDetails,
	        systemConstants, i18nService, cpqAdminConstants, promotionsExclusionListCommonService) {
	
	        var vm = this,
	            isFormSaved = false,
	            selectedImageIndex = 0;
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.selectedExclusionList = promotionsExclusionListDetails;
	        
	        var metaDataInfo = promotionsExclusionListCommonService.getMetadata();
	        var selectedExclusionList = promotionsExclusionListCommonService.getSelectedExclusionList();
	
	        /* Uncomment the below code once APIs are ready. This code will be used if user refreshes the page*/
	
	        if (Object.keys(selectedExclusionList).length === 0 || promotionsExclusionListCommonService.getPromotionsExclusionLists().length === 0) {
	            var filter = {
	                SearchString: '',
	                ChunkNumber: 1
	            };
	            promotionsExclusionListCommonService.loadAllPromotionsExclusionLists(filter).then(function() {
	                var allExclusionLists = promotionsExclusionListCommonService.getPromotionsExclusionLists(),
	                    present = false;
	                for (var i = 0; i < allExclusionLists.length; i++) {
	                    if (allExclusionLists[i].Id === $stateParams.id) {
	                        present = true;
	                        promotionsExclusionListCommonService.setSelectedExclusionList(allExclusionLists[i]);
	                        break;
	                    }
	                }
	            }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	            });
	        } 
	
	        if ($stateParams.id !== cpqAdminConstants.NEW) {
	            isFormSaved = false;
	            if (vm.selectedExclusionList && !vm.selectedExclusionList.Id) {
	                var allExclusionLists = promotionsExclusionListCommonService.getPromotionsExclusionLists();
	                allExclusionLists.splice(0, 1);
	                promotionsExclusionListCommonService.setPromotionsExclusionLists(allExclusionLists);
	            }
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        function savePromotionsExclusionList(toState, toParams) {
	            if (vm.promotionsExclusionListForm.$valid && vm.promotionsExclusionListForm.$dirty) {
	                promotionsExclusionListCommonService.savePromotionsExclusionList(angular.copy(vm.selectedExclusionList)).then(function(response) {
	                    if (response.IncentiveExclusionSOs.length > 0) {
	                        isFormSaved = true;
	                        if ($stateParams.id === cpqAdminConstants.NEW) {
	                            var allPls = promotionsExclusionListCommonService.getPromotionsExclusionLists(),
	                                firstItem = promotionsExclusionListCommonService.prepareExclusionListDetails(response.IncentiveExclusionSOs[0]);
	                            allPls.unshift(firstItem);
	                            promotionsExclusionListCommonService.setPromotionsExclusionLists(allPls);
	                            promotionsExclusionListCommonService.setSelectedExclusionList(firstItem);
	                            if (toState) {
	                                toParams.id = firstItem.Id;
	                                $state.go(toState, toParams);
	                            } else {
	                                addAlert(vm.labels.SavedSuccessfully, cpqAdminConstants.SUCCESS);
	                                $state.go('app.promotionsExclusionList.details', {
	                                    id: firstItem.Id
	                                });
	                            }
	                        } else {
	                            if (toState) {
	                                $state.go(toState, toParams);
	                            } else {
	                                addAlert(vm.labels.SavedSuccessfully, cpqAdminConstants.SUCCESS);
	                            }
	                        }
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else if (vm.promotionsExclusionListForm.$valid && toState){
	                isFormSaved = true;
	                $state.go(toState, toParams);
	            }else {
	                vm.promotionsExclusionListForm.$setSubmitted();
	            }
	        }
	
	        vm.pageSave = function(toState, toParams) {
	            if (vm.selectedExclusionList) {
	                savePromotionsExclusionList(toState, toParams);
	            } else {
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                }
	            }
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.promotionsExclusionList.list') {
	                return true;
	            } else if (isFormSaved === true) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.pageSave(toState, toParams);
	            }
	        });
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        $scope.$watchGroup(['vm.promotionsExclusionListForm.$valid', 'vm.promotionsExclusionListForm.$invalid'], function() {
	            if (vm.promotionsExclusionListForm && vm.promotionsExclusionListForm.$valid) {
	                vm.enableSave = true;
	            } else {
	                vm.enableSave = false;
	            }
	        });
	
	        $scope.$on(vm.labels.NewExclusionList.split(' ').join('-'), function() {
	            createNewPromotionsExclusionList();
	        });
	
	        function createNewPromotionsExclusionList() {
	            var allExclusionLists = promotionsExclusionListCommonService.getPromotionsExclusionLists(),
	                newExclusionList = promotionsExclusionListCommonService.getSampleNewPromotionsExclusionList();
	            promotionsExclusionListCommonService.setPromotionsExclusionLists(angular.copy(allExclusionLists));
	            promotionsExclusionListCommonService.setSelectedExclusionList(angular.copy(newExclusionList));
	            $state.go('app.promotionsExclusionList.details', {
	                id: 'new'
	            });
	        };
	
	        vm.setFilters = function() {
	            var filterObj = {
	                SearchString: vm.searchText || '',
	                ChunkNumber: 1
	            };
	            promotionsExclusionListCommonService.setFilters(filterObj);
	        };
	
	        function getFilters() {
	            var filter = promotionsExclusionListCommonService.getFilters();
	            if (filter && filter.SearchString) {
	                vm.searchText = filter.SearchString;
	            }
	        }
	
	        vm.goToListingPage = function() {
	            $state.go('app.promotionsExclusionList.list');
	        };
	
	        function getField(fieldName) {
	            var fieldObj, name;
	            if (fieldName.indexOf('__c') > -1) {
	                fieldName = getPrefixedAttribute(fieldName);
	            }
	            if (metaDataInfo) {
	                for (var i = 0; i < metaDataInfo.length; i++) {
	                    var name = metaDataInfo[i].FieldName;
	                    if (name === fieldName) {
	                        fieldObj = metaDataInfo[i];
	                        break;
	                    }
	                }
	            }
	            return fieldObj;
	        }
	        vm.getFieldValue = function(fieldName, fieldValueToBeExtracted) {
	            var field = getField(fieldName);
	            if (field) {
	                return field[fieldValueToBeExtracted];
	            } else {
	                return '';
	            }
	            return 25;
	        };
	    };
	
	    detailsController.$inject = [
	        '$q',
	        '$scope',
	        '$state',
	        '$stateParams',
	        'applicationService',
	        'promotionsExclusionListDetails',
	        'systemConstants',
	        'i18nService',
	        'cpqAdminConstants',
	        'promotionsExclusionListCommonService'
	
	    ];
	
	    module.exports = detailsController;
	
	})();


/***/ }),
/* 849 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    var promotionsExclusionListController = function($state, $scope, $rootScope, i18nService, promotionsExclusionListCommonService) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	
	        function findStateName(stateName) {
	            vm.stateCurrentName = stateName;
	        }
	        findStateName($state.current.name);
	
	        $scope.$on('$stateChangeSuccess', function(e, toState, toParams) {
	            findStateName(toState.name);
	            updateTabMenus();
	        });
	
	        /* Menu for specific Tabs */
	        vm.tabFirstMenu = '';
	        vm.tabMenuItems = [];
	
	        function updateTabMenus() {
	            var currentState = vm.stateCurrentName,
	                currentHash = currentState.split('app.promotionsExclusionList.')[1];
	            switch (currentHash) {
	                case 'details':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewExclusionList;
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                default:
	                    {
	                        vm.tabFirstMenu = '';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	            }
	        }
	
	        vm.tabMenuClicked = function(menuName) {
	            var eventName = menuName.split(' ').join('-');
	            $scope.$broadcast(eventName);
	        };
	
	        vm.currentState = $state.current.name;
	
	        $scope.$watch(function() {
	            return promotionsExclusionListCommonService.getSelectedExclusionList();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                vm.selectedExclusionList = newValue;
	            }
	        }, true);
	    };
	
	    promotionsExclusionListController.$inject = [
	        '$state',
	        '$scope',
	        '$rootScope',
	        'i18nService',
	        'promotionsExclusionListCommonService'
	    ];
	
	    module.exports = promotionsExclusionListController;
	})();


/***/ }),
/* 850 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		var constants = {
			/*
			 * This object can be any level nested depending on modularity we want to achieve 
			 * - Either per page
			 * - Per standalone functionality
			 */
			'new': 'new',
			'update': 'update',
			'numberOfExclusionListsPerChunk': 50,
			'treePanelItemsPerChunk': 25,
			'maxLength': 80
			
		};
	
		module.exports = constants;
	
	})();

/***/ }),
/* 851 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"promotions-exclusion-list\">\n    <div class=\"promotions-exclusion-list-main-container\">\n        <div class=\"promotions-exclusion-list-header title-bar\">\n            <div class=\"promotions-exclusion-list-title-container title\">\n                <div class=\"promotions-exclusion-list-info\">\n                    <span class=\"title\">{{vm.selectedExclusionList.Name}}</span>\n                </div>\n            </div>\n            <div id=\"navbar\">\n                <promotions-exclusion-list-sub-menu></promotions-exclusion-list-sub-menu>\n                <!-- Product menu bar with its values -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"list-product-btn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabFirstMenu)\" data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                        <div class=\"drop drop-menu\" data-ng-if=\"::vm.tabMenuItems.length > 0\">\n                            <md-menu md-offset=\"50 50\">\n                                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                    <i class=\"material-icons\">more_vert</i>\n                                </button>\n                                <md-menu-content width=\"2\">\n                                    <md-menu-item data-ng-repeat=\"menu in ::vm.tabMenuItems\">\n                                        <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                            <div layout=\"row\" flex>\n                                                <p flex>{{::menu}}</p>\n                                            </div>\n                                        </md-button>\n                                    </md-menu-item>\n                                </md-menu-content>\n                            </md-menu>\n                        </div>\n                    </div>\n                </ul>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"promotions-exclusion-list-center-container\">\n            <!-- Content layout starts -->\n            <div ui-view=\"promotionsExclusionListContainer\" class=\"promotions-exclusion-list-container\"></div>\n            <!-- Content layout ends -->\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 852 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    __webpack_require__(853);
	    __webpack_require__(858);
	    __webpack_require__(860);
	    __webpack_require__(863);
	    
	    module.exports = angular.module('cpqAdmin.formulaField', [
	
	            'cpqAdmin.formulaField.common.services',
	            'cpqAdmin.formulaField.common.directives',
	            'cpqAdmin.formulaField.list',
	            'cpqAdmin.formulaField.details'
	        ])
	        .controller('formulaFieldController', __webpack_require__(866))
	        .constant('formulaFieldConstants', __webpack_require__(867))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.formulaField', {
	                url: '/formulaField',
	                //abstract: true,
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(868),
	                        controller: 'formulaFieldController',
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 853 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.formulaField.common.directives', ['cpqAdmin.formulaField.common.services'])
	        .directive('formulaFieldSubMenu', __webpack_require__(854))
	        .directive('formulaFieldsListing', __webpack_require__(856));
	})();


/***/ }),
/* 854 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	    'use strict';
	
	    var formulaFieldSubMenuController = function($stateParams, systemConstants, i18nService) {
	        var vm = this;
	
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	
	    };
	
	    formulaFieldSubMenuController.$inject = [
	        '$stateParams',
	        'systemConstants',
	        'i18nService'
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: formulaFieldSubMenuController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(855),
	    };
	};


/***/ }),
/* 855 */
/***/ (function(module, exports) {

	module.exports = "<ul class=\"nav navbar-nav formula-field-menu\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"app.formulaField.details({id:vm.$stateParams.id})\">{{vm.labels.Details}}</a>\n    </li>\n</ul>\n"

/***/ }),
/* 856 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	    module.exports = [
	        function() {
	            var formulaFieldsListingController = function($scope, applicationService, systemConstants, $state, $stateParams,
	                i18nService, remoteService, formulaFieldCommonService, formulaFieldConstants) {
	
	                var vm = this,
	                    prefix = systemConstants.nsPrefix || '',
	                    filter = {
	                        SearchString: '',
	                        ChunkNumber: 1,
	                        NumberOfRecordsPerChunk: formulaFieldConstants.numberOfFormulaFieldsPerChunk || 50
	                    },
	                    pageNumber = 1;
	
	                vm.labels = i18nService.CustomLabel;
	                vm.disableLeftBtn = true;
	                vm.searchedStr = '';
	                vm.isMaxSQLSizeExceed = false;
	                vm.numberOfRecordsPerChunk = formulaFieldConstants.numberOfFormulaFieldsPerChunk || 50;
	
	                vm.searchFormulaFields = function() {
	                    filter.SearchString = vm.searchText || '';
	                    filter.ChunkNumber = 1;
	                    filter.NumberOfRecordsPerChunk = vm.numberOfRecordsPerChunk;
	                    loadFormulaFields();
	                };
	
	                vm.prepareFiltersAndFormulaFields = function() {
	                    filter = formulaFieldCommonService.getFilter();
	                    if (Object.keys(filter).length) {
	                        vm.searchText = filter.SearchString;
	                    } else {
	                        filter = {
	                            ChunkNumber: pageNumber || 1,
	                            NumberOfRecordsPerChunk: vm.numberOfRecordsPerChunk,
	                            SearchString: vm.searchString || ''
	                        };
	                    }
	                };
	
	                /* On Page load while there are no filters applied */
	                vm.prepareFiltersAndFormulaFields();
	
	                vm.getFormulaFields = function(type) {
	                    if (type === 'next') {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber + 1);
	                        if (filter.ChunkNumber !== 1) {
	                            vm.disableLeftBtn = false;
	                        }
	                        loadFormulaFields();
	                    } else {
	                        var chunkNumber = filter.ChunkNumber;
	                        filter.ChunkNumber = (chunkNumber - 1);
	                        if (filter.ChunkNumber === 1) {
	                            vm.disableLeftBtn = true;
	                        }
	                        loadFormulaFields();
	                    }
	                };
	
	                var pLDeRegisterFunc = $scope.$watch(function() {
	                    return formulaFieldCommonService.getFormulaFields();
	                }, function(newValue, oldValue) {
	                    if (newValue && oldValue) {
	                        processData(newValue);
	                    }
	                }, true);
	
	                function processData(formulaFields) {
	                    /* Used to bind to table body */
	                    vm.formulaFields = formulaFields;
	                    vm.isMaxSQLSizeExceed = false;
	
	                    if (formulaFields.length === 0) {
	                        vm.searchedStr = vm.searchString;
	                    }
	                    /**
	                     * - Check if the response size is less than the current chunk size.
	                     * - If less, disable the next button
	                     * - else keep it enabled
	                     */
	
	                    if (formulaFields.length < filter.NumberOfRecordsPerChunk) {
	                        vm.disableRightBtn = true;
	                        updateCenterBtnText(filter, formulaFields.length);
	                    } else {
	                        vm.disableRightBtn = false;
	                        updateCenterBtnText(filter, formulaFields.length);
	                    }
	
	                    /* Hide the loader on success of service call */
	                    vm.showLoader = false;
	                    document.querySelector('.list-table').scrollTop = 0;
	                }
	
	                function loadFormulaFields() {
	                    vm.showLoader = true;
	                    formulaFieldCommonService.loadAllFormulaFields(filter);
	                }
	
	                function updateCenterBtnText(filterObj, endCount) {
	                    /* 
	                     * - Search result might return lesser number of records than current pagination count.
	                     * e.g. current pagination is : 1-150, but search returned only 20 records.
	                     * - Then pagination should be updated to 1-20 instead of 1-150.
	                     * - endCount variable contains the exact number of records and will only be defined, if
	                     * search count is lesser than current pagination sequence.
	                     */
	                    if (filterObj.ChunkNumber === 1) {
	                        vm.disableLeftBtn = true;
	                    }
	                    if (endCount) {
	                        vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfRecordsPerChunk + 1) + '-' + ((filterObj.ChunkNumber - 1) * vm.numberOfRecordsPerChunk + endCount) + ')';
	                        if (endCount < vm.numberOfRecordsPerChunk) {
	                            vm.disableRightBtn = true;
	                        }
	                    } else {
	                        vm.paginationCenterText = '(' + ((filterObj.ChunkNumber - 1) * vm.numberOfRecordsPerChunk + 1) + '-' + (filterObj.ChunkNumber * vm.numberOfRecordsPerChunk) + ')';
	                    }
	                }
	
	                vm.getActiveClass = function(id) {
	                    if ($stateParams.id === id) {
	                        return true;
	                    } else {
	                        return false;
	                    }
	                };
	
	                $scope.$on('destroy', function() {
	                    deRegisterFunc();
	                    pLDeRegisterFunc();
	                    vm = null;
	                });
	
	                vm.loadFormulaFieldDetails = function(toBeLoadedFormulaField) {
	                    formulaFieldCommonService.setSelectedFormulaField(angular.copy(toBeLoadedFormulaField));
	                    $state.go('app.formulaField.details', {
	                        id: toBeLoadedFormulaField.Id
	                    });
	                };
	            };
	
	            formulaFieldsListingController.$inject = [
	                '$scope',
	                'applicationService',
	                'systemConstants',
	                '$state',
	                '$stateParams',
	                'i18nService',
	                'remoteService',
	                'formulaFieldCommonService',
	                'formulaFieldConstants'
	            ];
	
	            return {
	                restrict: 'E',
	                scope: {},
	                controller: formulaFieldsListingController,
	                controllerAs: 'vm',
	                bindToController: {
	                    searchText: '='
	                },
	                template: __webpack_require__(857),
	            };
	        }
	    ];
	})();


/***/ }),
/* 857 */
/***/ (function(module, exports) {

	module.exports = "<header>\n    <h4>{{::vm.labels.AllFormulaFields}}</h4>\n    <div class=\"search\">\n        <form ng-submit=\"vm.searchFormulaFields()\" novalidate>\n            <div class=\"search-input-container\">\n                <div class=\"input-group\">\n                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                    <label class=\"ng-binding\">Search</label>\n                </div>\n            </div>\n        </form>\n    </div>\n</header>\n<div data-ng-if=\"vm.formulaFields.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n    {{::vm.labels.NoMatchingFormulaField}} <span><b>{{vm.searchedStr}}</b></span>\n</div>\n<div data-ng-if=\"vm.formulaFields.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n    {{::vm.labels.MaxSQLSizeExceedMessage}}\n</div>\n<div class=\"list-table\">\n    <table>\n        <tbody>\n            <tr ng-repeat=\"item in vm.formulaFields track by item.Id\" ng-click=\"vm.loadFormulaFieldDetails(item)\" ng-class=\"{active: vm.getActiveClass(item.Id) === true}\">\n                <td title=\"{{item.Name}}\">\n                    {{::item.Name }}\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<div class=\"pagination formula-fields-list-pagination\">\n    <div class=\"place formula-fields-list-place\">\n        {{vm.paginationCenterText}}\n    </div>\n    <div class=\"next-prev\">\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getFormulaFields('previous')\">\n            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n        </button>\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getFormulaFields('next')\">\n            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n        </button>\n    </div>\n</div>\n"

/***/ }),
/* 858 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.formulaField.common.services', [])
	        .service('formulaFieldCommonService', __webpack_require__(859));
	        
	})();


/***/ }),
/* 859 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    formulaFieldCommonServices.$inject = [
	        '$q',
	        'systemConstants',
	        'remoteService',
	        'applicationService'
	    ];
	
	    function formulaFieldCommonServices(
	        $q,
	        systemConstants,
	        remoteService,
	        applicationService
	    ) {
	
	        var filter = {},
	            selectedFormulaField = {},
	            formulaFields = [],
	            metadata = [];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            // trim() might notbe needed. Lets just be sure not to have empty spaces.
	            return (prefix + attribute).trim();
	        }
	
	        function setSelectedFormulaField(obj) {
	            selectedFormulaField = obj;
	        }
	
	        function getSelectedFormulaField() {
	            if (selectedFormulaField[getPrefixedAttribute('Expression__c')]) {
	                selectedFormulaField[getPrefixedAttribute('Expression__c')] = applicationService.updateExpression(true, selectedFormulaField[getPrefixedAttribute('Expression__c')]);
	            }
	            return selectedFormulaField;
	        }
	
	        function processAllFormulaFieldsResponse(list) {
	            var response = [];
	            if (list && list.length > 0) {
	                for (var i = 0; i < list.length; i++) {
	                    response.push(list[i].IncentiveExclusionSO);
	                }
	            }
	            return response;
	        }
	
	        function loadAllFormulaFields(requestObj) {
	            var deferQ = $q.defer();
	            remoteService.getAllFormulaFields(requestObj).then((response) => {
	                setFormulaFields(response.FormulaFieldSOs);
	                deferQ.resolve(true);
	            }, function (reason) {
	                applicationService.showErrorMessage(reason);
	                deferQ.reject(false);
	            });
	            return deferQ.promise;
	        }
	
	        function setFormulaFields(arr) {
	            formulaFields = [];
	            formulaFields = angular.copy(arr);
	        }
	
	        function getFormulaFields() {
	            return formulaFields;
	        }
	
	        function setFilter(obj) {
	            filter = obj;
	        }
	
	        function getFilter() {
	            return filter;
	        }
	
	        function prepareFormulaFieldDetails(formulaField) {
	            var obj = formulaField;
	            return obj;
	        }
	
	        function setMetadata(items) {
	            metadata = items;
	        }
	
	        function getMetadata() {
	            return metadata;
	        }
	
	        function prepareSaveRequestObj(formulaField) {
	            if (!isNaN(new Date(formulaField[getPrefixedAttribute('ExpirationDate__c')]).getTime())) {
	                formulaField[getPrefixedAttribute('EffectiveDate__c')] = new Date(formulaField[getPrefixedAttribute('EffectiveDate__c')]).getTime();
	            }
	            if (!isNaN(new Date(formulaField[getPrefixedAttribute('ExpirationDate__c')]).getTime())) {
	                formulaField[getPrefixedAttribute('ExpirationDate__c')] = new Date(formulaField[getPrefixedAttribute('ExpirationDate__c')]).getTime();
	            }
	            formulaField[getPrefixedAttribute('ProductScope__c')] = formulaField.product.model.map((product) => { return product.Id; }).join(';');
	            formulaField[getPrefixedAttribute('ProductGroupScope__c')] = formulaField.productGroup.model.map((productGroup) => { return productGroup.Id; }).join(';');
	            delete formulaField.product;
	            delete formulaField.productGroup;
	
	            return { IncentiveExclusionSOs: [formulaField] };
	        }
	
	        function saveFormulaField(formulaField) {
	            if (formulaField[getPrefixedAttribute('Expression__c')]) {
	                formulaField[getPrefixedAttribute('Expression__c')] = applicationService.updateExpression(false, formulaField[getPrefixedAttribute('Expression__c')]);
	            }
	            const requestObj = [ formulaField ];
	            if (formulaField.Id) {
	                return remoteService.updateFormulaFields(requestObj);
	            } else {
	                return remoteService.createFormulaFields(requestObj);
	            }
	        }
	
	        var service = {
	            setMetadata: setMetadata,
	            getMetadata: getMetadata,
	            setFilter: setFilter,
	            getFilter: getFilter,
	            getFormulaFields: getFormulaFields,
	            setFormulaFields: setFormulaFields,
	            setSelectedFormulaField: setSelectedFormulaField,
	            getSelectedFormulaField: getSelectedFormulaField,
	            loadAllFormulaFields: loadAllFormulaFields,
	            prepareFormulaFieldDetails: prepareFormulaFieldDetails,
	            saveFormulaField: saveFormulaField
	        };
	        return service;
	    }
	
	    module.exports = formulaFieldCommonServices;
	})();


/***/ }),
/* 860 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.formulaField.list',[])
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.formulaField.list', {
	                parent: 'app.formulaField',
	                url: '/list',
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(861),
	                        controller: __webpack_require__(862),
	                        controllerAs: 'vm'
	                    }
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 861 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"formula-field-list-container\">\n    <div class=\"two-col-layout auto-height\">\n        <div class=\"auto-height col-lg-12 noPadding list-table-container\">\n            <div class=\"list-header\">\n                <!-- Search Bar starts -->\n                <div class=\"row noMargin search-container title-bar\">\n                    <div class=\"formula-field-search\">\n                        <div class=\"col-xs-5\">\n                            <div class=\"search-box-container\">\n                                <span class=\"fa fa-filter pointerEventsNone\" disabled data-ng-click=\"vm.resetPagination();\"></span>\n                                <i class=\"search-icon material-icons\" data-ng-click=\"vm.resetPagination()\">search</i>\n                                <form ng-submit=\"vm.resetPagination()\">\n                                    <input type=\"text\" placeholder=\"Search Formula Field\" class=\"search-box\" data-ng-model=\"vm.searchString\">\n                                    <i class=\"clear-icon material-icons\" data-ng-if=\"vm.searchString\" data-ng-click=\"vm.clearSearchInput()\">clear</i>\n                                </form>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-3\"></div>\n                        <div class=\"col-xs-4 text-right formula-field-btn-group\">\n                            <div class=\"listBtn\">\n                                <button type=\"button\" class=\"slds-button slds-button_brand\" data-ng-click=\"vm.createNewFormulaField()\">{{vm.labels.NewFormulaField}}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div preloader add-to-element=\"true\" loading-text=\"vm.loadingText\" data-ng-if=\"vm.showLoader === true\"></div>\n            <div data-ng-if=\"vm.formulaFields.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{::vm.labels.NoMatchingFormulaField}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.formulaFields.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{::vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"list-table\">\n                <table ng-table=\"vm.tableParams\" class=\"table ng-table-resizable-columns\">\n                    <thead>\n                        <tr>\n                            <th ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                                <span ng-click=\"vm.tableHeaderClick(column);\">\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-descent'\">arrow_downward</i>\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-ascent'\">arrow_upward</i> \n                                    {{column.FieldLabel}}\n                                </span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"formulaField in vm.formulaFields track by formulaField.Id\">\n                            <td data-ng-repeat=\"column in ::vm.tableColumnConfig\" class=\"column--{{::column.Type}}\">\n                                <span data-ng-if=\"::column.FieldName === 'Name'\">\n                                    <a data-ng-click=\"vm.loadFormulaFieldDetails(formulaField, $event)\" ng-bind-html=\"::formulaField[column.FieldName]\" class=\"clickable-item\"></a>\n                                </span>\n                                <span data-ng-if=\"::column.FieldName !== 'Name'\" ng-bind-html=\"::vm.getFormattedContent(formulaField,column)\"></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"pagination-container text-center\" data-ng-if=\"vm.showPagination === true\">\n                <div class=\"btn-group dropup text-right\" role=\"group\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        {{vm.labels.RecordsPerPage | userMessage:vm.numberOfProductsPerChunk}}\n                        <span class=\"caret\"></span>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 50\">50</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 100\">100</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 150\">150</a></li>\n                        <li><a data-ng-click=\"vm.numberOfProductsPerChunk = 200\">200</a></li>\n                    </ul>\n                </div>\n                <div class=\"navigation-control\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getProduct('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                    <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getProduct('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 862 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    formulaFieldController.$inject = [
	        '$scope',
	        '$state',
	        '$filter',
	        '$timeout',
	        '$location',
	        'NgTableParams',
	        'i18nService',
	        'systemConstants',
	        'formulaFieldConstants',
	        'cpqAdminConstants',
	        'formulaFieldCommonService'
	    ];
	
	    function formulaFieldController(
	        $scope,
	        $state,
	        $filter,
	        $timeout,
	        $location,
	        NgTableParams,
	        i18nService,
	        systemConstants,
	        formulaFieldConstants,
	        cpqAdminConstants,
	        formulaFieldCommonService
	    ) {
	        var vm = this;
	
	        vm.labels = i18nService.CustomLabel;
	        var prefix = systemConstants.nsPrefix || '';
	        vm.tableColumnConfig = [{
	            "FieldLabel": vm.labels.Name,
	            "FieldName": "Name",
	            "Type": "STRING",
	            "showSortIcon": true,
	            "sortIconCls": 'st-sort-ascent'
	        }, {
	            "FieldLabel": vm.labels.UseType,
	            "FieldName": (prefix + 'UseType__c'),
	            "Type": "STRING"
	        }, {
	            "FieldLabel": vm.labels.BusinessObject,
	            "FieldName": (prefix + 'BusinessObject__c'),
	            "Type": "STRING",
	
	        }, {
	            "FieldLabel": vm.labels.Formula,
	            "FieldName": (prefix + 'Formula__c'),
	            "Type": "STRING"
	        }, {
	            "FieldLabel": vm.labels.Expression,
	            "FieldName": (prefix + 'Expression__c'),
	            "Type": "STRING"
	        }, {
	            "FieldLabel": vm.labels.Description,
	            "FieldName": prefix + 'Description__c',
	            "Type": "STRING",
	        }];
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	        /* 
	         * - vm.searchString : is the value present in the search field at any point of time.
	         * - vm.searchedStr : is the value user has entered and either clicked on search icon or hit
	         * enter / return  key.
	         */
	        vm.searchedStr = '';
	        vm.numberOfProductsPerChunk = formulaFieldConstants.numberOfFormulaFieldsPerChunk;
	
	        vm.pageNumber = 0;
	        vm.disableLeftBtn = true;
	        vm.disableRightBtn = false;
	        vm.showLoader = false;
	        vm.loadingText = vm.labels.LoadingText;
	        vm.isMaxSQLSizeExceed = false;
	        vm.showPagination = true;
	        updateCenterBtnText();
	        var sortField, sortDirection, pageNumber = 1,
	            configType = '';
	
	        vm.getProduct = function(type) {
	            if (type === 'next') {
	                pageNumber = pageNumber + 1;
	                vm.pageNumber++;
	                if (vm.pageNumber !== 0) {
	                    vm.disableLeftBtn = false;
	                }
	                loadFormulaField();
	            } else {
	                pageNumber = pageNumber - 1;
	                vm.pageNumber--;
	                if (vm.pageNumber === 0) {
	                    vm.disableLeftBtn = true;
	                }
	                loadFormulaField();
	            }
	        };
	
	        function updateCenterBtnText(endCount) {
	            /* 
	             * - Search result might return lesser number of records than current pagination count.
	             * e.g. current pagination is : 1-150, but search returned only 20 records.
	             * - Then pagination should be updated to 1-20 instead of 1-150.
	             * - endCount variable contains the exact number of records and will only be defined, if
	             * search count is lesser than current pagination sequence.
	             */
	            if (endCount) {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfProductsPerChunk + 1) + '-' + (vm.pageNumber * vm.numberOfProductsPerChunk + endCount) + ')';
	            } else {
	                vm.paginationCenterText = '(' + (vm.pageNumber * vm.numberOfProductsPerChunk + 1) + '-' + ((vm.pageNumber + 1) * vm.numberOfProductsPerChunk) + ')';
	            }
	        };
	
	        vm.resetPagination = function(resetPageNumber) {
	            vm.showPanel = false;
	            if (resetPageNumber) {
	                vm.pageNumber = 0;
	                pageNumber = 1;
	            }
	            vm.pageNumber = 0;
	            pageNumber = 1;
	            vm.disableLeftBtn = true;
	            updateCenterBtnText();
	            loadFormulaField();
	        };
	
	        var deRegisterFunc = $scope.$watch('vm.numberOfProductsPerChunk', function(newValue, oldValue) {
	            if (newValue && oldValue && newValue !== oldValue) {
	                vm.resetPagination(false);
	            }
	        });
	
	        $scope.$on('destroy', function() {
	            deRegisterFunc();
	            formulaFieldDeRegisterFunc();
	            vm = null;
	        });
	
	
	        vm.getFormattedContent = function(priceList, column) {
	            var modifiedValue, precision,
	                fieldType = column.Type,
	                value = priceList[column.FieldName];
	
	            if (vm.systemProperties && vm.systemProperties.PercentageFieldPrecision) {
	                precision = vm.systemProperties.PercentageFieldPrecision;
	            } else if (vm.properties && vm.properties.Precision) {
	                precision = vm.properties.Precision;
	            } else {
	                precision = 5;
	            }
	
	            switch (fieldType) {
	                case cpqAdminConstants.datetime:
	                case cpqAdminConstants.date:
	                    {
	                        modifiedValue = $filter('aptDateToString')(value);
	                        break;
	                    }
	
	                case cpqAdminConstants.boolean:
	                    {
	                        if (value) {
	                            modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	                        } else {
	                            modifiedValue = "<i class='material-icons show'>check_circle</i>";
	                        }
	                        break;
	                    }
	                case cpqAdminConstants.string:
	                case cpqAdminConstants.textarea:
	                case cpqAdminConstants.url:
	                case cpqAdminConstants.multipicklist:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	                default:
	                    {
	                        modifiedValue = value;
	                        break;
	                    }
	
	            }
	            return modifiedValue;
	        };
	
	        function createNgTable(data, numberOfProductsPerChunk) {
	            var initialParams = {
	                count: numberOfProductsPerChunk
	            };
	            var initialSettings = {
	                counts: [],
	                paginationMaxBlocks: 0,
	                paginationMinBlocks: 0,
	                dataset: data
	            };
	            return new NgTableParams(initialParams, initialSettings);
	        }
	
	        var formulaFieldDeRegisterFunc = $scope.$watch(function() {
	            return formulaFieldCommonService.getFormulaFields();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                processData(newValue);
	            }
	        }, true);
	
	        function processData(formulaFields) {
	
	            /* Used to bind to table body */
	            vm.formulaFields = formulaFields;
	            vm.isMaxSQLSizeExceed = false;
	
	            if (!vm.tableParams) {
	                vm.tableParams = createNgTable(formulaFields, vm.numberOfProductsPerChunk);
	            }
	
	            /* 
	             * - Show 'No matching products are found for the search entry XXX', when no return
	             * return result set is empty.
	             * - Keep the user messages, until user makes a fresh search which has atleast more
	             * than 1 result item.
	             */
	            vm.showPagination = true;
	            if (formulaFields.length === 0 && vm.searchString !== '') {
	                vm.searchedStr = vm.searchString;
	                if (vm.pageNumber === 0) {
	                    vm.showPagination = false;
	                }
	            }
	            if (formulaFields.length < vm.numberOfProductsPerChunk) {
	                vm.disableRightBtn = true;
	                updateCenterBtnText(formulaFields.length);
	            } else {
	                vm.disableRightBtn = false;
	                updateCenterBtnText();
	            }
	
	            /* Hide the loader on success of service call */
	            vm.showLoader = false;
	
	            $timeout(function() {
	                angular.element(window).resize();
	            }, 1000);
	            document.querySelector('.list-table').scrollTop = 0;
	        }
	
	        /**
	         * - When user enters search string and hits enter, this method gets called
	         * - Updates the smart-table pagination object.
	         * - Table header click
	         */
	        function loadFormulaField() {
	            /* Show the loader on start of service call */
	            vm.showLoader = true;
	
	            const requestObj = {
	                ChunkNumber: pageNumber,
	                NumberOfRecordsPerChunk: vm.numberOfProductsPerChunk || 20,
	                SearchString: vm.searchString || ''
	            };
	
	            formulaFieldCommonService.loadAllFormulaFields(requestObj)
	                .then(function(response) {
	                    if (response) {
	                        vm.showLoader = false;
	                    }
	                }, function(reason) {});
	        }
	
	        loadFormulaField();
	        /**
	         * - Clears searc input box
	         * - Makes a service call to reload the table
	         */
	        vm.clearSearchInput = function() {
	            vm.searchString = '';
	            vm.currentPage = 1;
	            vm.showPanel = false;
	            loadFormulaField();
	        };
	
	
	        /**
	         * - Show / Hide ascending or descending icon next to the column header when user clicks on header.
	         * - We are not using the default feature of the ngTable. It's doing local sorting and to
	         * bind to its server side sorting, configs are not available as of now.
	         */
	        vm.tableHeaderClick = function(column) {
	            sortField = column.fieldName;
	            if (!column.sortIconCls) {
	                column.sortIconCls = 'st-sort-ascent';
	            }
	            sortDirection = (column.sortIconCls === 'st-sort-ascent' ? cpqAdminConstants.DESCENDING : cpqAdminConstants.ASCENDING);
	            var columnsList = vm.tableColumnConfig;
	            for (var item in columnsList) {
	                if (column.FieldName === columnsList[item].FieldName) {
	                    columnsList[item].showSortIcon = true;
	                    columnsList[item].sortIconCls = column.sortIconCls ? (column.sortIconCls === 'st-sort-ascent' ? 'st-sort-descent' : 'st-sort-ascent') : 'st-sort-descent';
	                } else {
	                    columnsList[item].showSortIcon = false;
	                    columnsList[item].sortIconCls = false;
	                }
	            }
	            vm.resetPagination();
	        };
	
	        vm.loadFormulaFieldDetails = function(formulaField, event) {
	            formulaFieldCommonService.setSelectedFormulaField(angular.copy(formulaField));
	            $state.go('app.formulaField.details', {
	                id: formulaField.Id
	            });
	            event.preventDefault();
	        };
	
	        vm.getDetailsPageUrl = function(id) {
	            var absUrl = $location.absUrl();
	            return absUrl.replace('/formulaField/list', '/formulaField/' + id + '/details');
	        };
	
	        vm.createNewFormulaField = function() {
	            var allFormulaFields = formulaFieldCommonService.getFormulaFields();
	            formulaFieldCommonService.setFormulaFields(angular.copy(allFormulaFields));
	            formulaFieldCommonService.setSelectedFormulaField({});
	            $state.go('app.formulaField.details', {
	                id: 'new'
	            });
	        };
	
	    };
	
	    module.exports = formulaFieldController;
	
	})();


/***/ }),
/* 863 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.formulaField.details', [])
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.formulaField.details', {
	                parent: 'app.formulaField',
	                url: '/:id/details',
	                views: {
	                    'formulaFieldContainer': {
	                        template: __webpack_require__(864),
	                        controller: __webpack_require__(865),
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    allPicklists: ['apiCallsService', function(apiCallsService) {
	                        return apiCallsService.getSObjectPicklistFields('FormulaField__c', null);
	                    }]
	                }
	            })
	        }]);
	})();


/***/ }),
/* 864 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"formula-fields-detail-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <formula-fields-listing search-text=\"vm.searchText\"></formula-fields-listing>\n        </div>\n        <div class=\"formula-fields-detail-block\">\n            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n            <!-- Create / Update product details form -->\n            <form class=\"formula-fields-detail-form\" novalidate name=\"vm.formulaFieldForm\">\n                <div layout=\"row\">\n                    <div class=\"flex\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedFormulaField.Name\" field-type=\"STRING\" is-editable=\"true\" field-label=\"::vm.labels.Name\" is-required=\"true\" name=\"name\" max-length=\"80\"></material-form-field>\n                        <div ng-messages=\"vm.formulaFieldForm.name.$error\" ng-if=\"vm.formulaFieldForm.name.$touched || vm.formulaFieldForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                    <div flex-offset=\"10\" flex=\"45\">\n                        <material-form-field model=\"vm.selectedFormulaField[vm.prefix+'UseType__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.useTypes\" field-label=\"::vm.labels.UseType\" name=\"useType\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.formulaFieldForm.useType.$error\" ng-if=\"vm.formulaFieldForm.useType.$touched || vm.formulaFieldForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField }}</p>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div flex=\"45\">\n                        <material-form-field model=\"vm.selectedFormulaField[vm.prefix+'BusinessObject__c']\" field-type=\"picklist\" is-editable=\"true\" properties=\"vm.businessObjects\" field-label=\"::vm.labels.BusinessObject\">\n                        </material-form-field>\n                    </div>\n                    <div ng-if=\"vm.selectedFormulaField[vm.prefix+'UseType__c'] !== vm.formulaFieldConstants.useTypeExpression\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedFormulaField[vm.prefix + 'Formula__c']\" field-type=\"string\" is-editable=\"true\" field-label=\"::vm.labels.Formula\">\n                        </material-form-field>\n                    </div>\n                    <div class=\"expression-field\" ng-if=\"vm.selectedFormulaField[vm.prefix+'UseType__c'] === vm.formulaFieldConstants.useTypeExpression\" flex=\"45\" flex-offset=\"10\">\n                        <material-form-field model=\"vm.selectedFormulaField[vm.prefix + 'Expression__c']\" field-type=\"string\" is-editable=\"true\" field-label=\"::vm.labels.Expression\">\n                        </material-form-field>\n                        <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.openExpressionDialog(vm.prefix + 'Expression__c')\">\n                            <i class=\"fa fa-external-link\"></i>\n                        </button>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"flex\">\n                        <material-form-field model=\"vm.selectedFormulaField[vm.prefix + 'Description__c']\" field-type=\"TEXTAREA\" is-editable=\"true\" field-label=\"::vm.labels.Description\" max-length=\"255\" name=\"ShortDescription\" id=\"short_description\"></material-form-field>\n                        <div ng-messages=\"vm.formulaFieldForm.ShortDescription.$error\">\n                            <p ng-message=\"maxlength\" class=\"formError\">\n                                {{vm.labels.FormDescriptionMaxCharError | userMessage:vm.labels.Description}}\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </form>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListingPage()\">Cancel</a>\n                    <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.pageSave()\" data-ng-disabled=\"!vm.enableSave\">Save</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 865 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    detailsController.$inject = [
	        '$scope',
	        '$state',
	        '$stateParams',
	        '$mdDialog',
	        'applicationService',
	        'systemConstants',
	        'i18nService',
	        'cpqAdminConstants',
	        'formulaFieldConstants',
	        'formulaFieldCommonService',
	        'allPicklists',
	        'lodash'
	    ];
	
	    function detailsController(
	        $scope,
	        $state,
	        $stateParams,
	        $mdDialog,
	        applicationService,
	        systemConstants,
	        i18nService,
	        cpqAdminConstants,
	        formulaFieldConstants,
	        formulaFieldCommonService,
	        allPicklists,
	        _
	    ) {
	
	        var vm = this,
	            isFormSaved = false;
	
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.labels = i18nService.CustomLabel;
	        vm.selectedFormulaField = formulaFieldCommonService.getSelectedFormulaField();
	        vm.formulaFieldConstants = formulaFieldConstants;
	
	        const useTypePicklist = _.find(allPicklists, (field) => { return field.FieldName === vm.prefix + 'UseType__c' });
	        vm.useTypes = { PicklistValues: useTypePicklist.PicklistValues || [] };
	
	        const businessObjectPicklist = _.find(allPicklists, (field) => { return field.FieldName === vm.prefix + 'BusinessObject__c' });
	        vm.businessObjects = { PicklistValues: businessObjectPicklist.PicklistValues || [] };
	
	        var metaDataInfo = formulaFieldCommonService.getMetadata();
	
	        /* Uncomment the below code once APIs are ready. This code will be used if user refreshes the page*/
	
	        if (Object.keys(vm.selectedFormulaField).length === 0 || formulaFieldCommonService.getFormulaFields().length === 0) {
	            var filter = {
	                SearchString: '',
	                ChunkNumber: 1
	            };
	            formulaFieldCommonService.loadAllFormulaFields(filter).then(function() {
	                var allFormulaFields = formulaFieldCommonService.getFormulaFields(),
	                    present = false;
	                for (var i = 0; i < allFormulaFields.length; i++) {
	                    if (allFormulaFields[i].Id === $stateParams.id) {
	                        present = true;
	                        formulaFieldCommonService.setSelectedFormulaField(allFormulaFields[i]);
	                        break;
	                    }
	                }
	            }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	            });
	        } 
	
	        if ($stateParams.id !== cpqAdminConstants.NEW) {
	            isFormSaved = false;
	            if (vm.selectedFormulaField && !vm.selectedFormulaField.Id) {
	                var allFormulaFields = formulaFieldCommonService.getFormulaFields();
	                allFormulaFields.splice(0, 1);
	                formulaFieldCommonService.setFormulaFields(allFormulaFields);
	            }
	        }
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            return (prefix + attribute).trim();
	        }
	
	        function saveFormulaField(toState, toParams) {
	            if (vm.formulaFieldForm.$valid && vm.formulaFieldForm.$dirty) {
	                formulaFieldCommonService.saveFormulaField(angular.copy(vm.selectedFormulaField)).then(function(response) {
	                    if (response) {
	                        isFormSaved = true;
	                        if ($stateParams.id === cpqAdminConstants.NEW) {
	                            var allFormulaFields = formulaFieldCommonService.getFormulaFields();
	                            var firstItem = response[0];
	                            allFormulaFields.unshift(firstItem);
	                            formulaFieldCommonService.setFormulaFields(allFormulaFields);
	                            formulaFieldCommonService.setSelectedFormulaField(firstItem);
	                            if (toState) {
	                                toParams.id = firstItem.Id;
	                                $state.go(toState, toParams);
	                            } else {
	                                addAlert(vm.labels.SavedSuccessfully, cpqAdminConstants.SUCCESS);
	                                $state.go('app.formulaField.details', {
	                                    id: firstItem.Id
	                                });
	                            }
	                        } else {
	                            const allFormulaFields = formulaFieldCommonService.getFormulaFields();
	                            const selectedIndex = _.findIndex(allFormulaFields, (formulaField) => { return formulaField.Id === vm.selectedFormulaField.Id });
	                            if (selectedIndex > -1) {
	                                allFormulaFields[selectedIndex] = angular.copy(vm.selectedFormulaField);
	                                formulaFieldCommonService.setFormulaFields(allFormulaFields);
	                            }
	                            if (toState) {
	                                $state.go(toState, toParams);
	                            } else {
	                                addAlert(vm.labels.SavedSuccessfully, cpqAdminConstants.SUCCESS);
	                            }
	                        }
	                    }
	                }, function(reason) {
	                    applicationService.showErrorMessage(reason);
	                });
	            } else if (vm.formulaFieldForm.$valid && toState){
	                isFormSaved = true;
	                $state.go(toState, toParams);
	            }else {
	                vm.formulaFieldForm.$setSubmitted();
	            }
	        }
	
	        vm.pageSave = function(toState, toParams) {
	            if (vm.selectedFormulaField) {
	                saveFormulaField(toState, toParams);
	            } else {
	                isFormSaved = true;
	                if (toState) {
	                    $state.go(toState, toParams);
	                }
	            }
	        };
	
	        $scope.$on('$stateChangeStart', function(e, toState, toParams) {
	            if (toState.name === 'app.formulaField.list') {
	                return true;
	            } else if (isFormSaved === true) {
	                return true;
	            } else {
	                e.preventDefault();
	                vm.pageSave(toState, toParams);
	            }
	        });
	
	        /**
	         * - User message management section
	         */
	        vm.alerts = [];
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        $scope.$watchGroup(['vm.formulaFieldForm.$valid', 'vm.formulaFieldForm.$invalid'], function() {
	            if (vm.formulaFieldForm && vm.formulaFieldForm.$valid) {
	                vm.enableSave = true;
	            } else {
	                vm.enableSave = false;
	            }
	        });
	
	        $scope.$on(vm.labels.NewFormulaField.split(' ').join('-'), function() {
	            createNewFormulaField();
	        });
	
	        function createNewFormulaField() {
	            var allFormulaFields = formulaFieldCommonService.getFormulaFields();
	            formulaFieldCommonService.setFormulaFields(angular.copy(allFormulaFields));
	            formulaFieldCommonService.setSelectedFormulaField({});
	            $state.go('app.formulaField.details', {
	                id: 'new'
	            });
	        };
	
	        vm.setFilters = function() {
	            var filterObj = {
	                SearchString: vm.searchText || '',
	                ChunkNumber: 1
	            };
	            formulaFieldCommonService.setFilters(filterObj);
	        };
	
	        function getFilters() {
	            var filter = formulaFieldCommonService.getFilters();
	            if (filter && filter.SearchString) {
	                vm.searchText = filter.SearchString;
	            }
	        }
	
	        vm.goToListingPage = function() {
	            $state.go('app.formulaField.list');
	        };
	
	        vm.openExpressionDialog = function(field, index) {
	            $mdDialog.show({
	                controller: __webpack_require__(413),
	                controllerAs: 'vm',
	                template: __webpack_require__(414),
	                parent: angular.element(document.body),
	                clickOutsideToClose: false,
	                resolve: {
	                    expression: function() {
	                        var expression = vm.selectedFormulaField[field] || '';
	                        return expression;
	                    }
	                }
	            }).then(function(response) {
	                vm.selectedFormulaField[field] = response;
	                if (vm.formulaFieldForm) {
	                    vm.formulaFieldForm.$dirty = true;
	                }
	            });
	        };
	    };
	
	    module.exports = detailsController;
	
	})();


/***/ }),
/* 866 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    formulaFieldController.$inject = [
	        '$state',
	        '$scope',
	        '$rootScope',
	        'i18nService',
	        'formulaFieldCommonService'
	    ];
	
	    function formulaFieldController(
	        $state,
	        $scope,
	        $rootScope,
	        i18nService,
	        formulaFieldCommonService
	    ) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	
	        function findStateName(stateName) {
	            vm.stateCurrentName = stateName;
	        }
	        findStateName($state.current.name);
	
	        $scope.$on('$stateChangeSuccess', function(e, toState, toParams) {
	            findStateName(toState.name);
	            updateTabMenus();
	        });
	
	        // Menu for specific Tabs
	        vm.tabFirstMenu = '';
	        vm.tabMenuItems = [];
	
	        function updateTabMenus() {
	            var currentState = vm.stateCurrentName,
	                currentHash = currentState.split('app.formulaField.')[1];
	            switch (currentHash) {
	                case 'details':
	                    {
	                        vm.tabFirstMenu = vm.labels.NewFormulaField;
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	                default:
	                    {
	                        vm.tabFirstMenu = '';
	                        vm.tabMenuItems = [];
	                        break;
	                    }
	            }
	        }
	
	        vm.tabMenuClicked = function(menuName) {
	            var eventName = menuName.split(' ').join('-');
	            $scope.$broadcast(eventName);
	        };
	
	        vm.currentState = $state.current.name;
	
	        $scope.$watch(function() {
	            return formulaFieldCommonService.getSelectedFormulaField();
	        }, function(newValue, oldValue) {
	            if (newValue && oldValue) {
	                vm.selectedFormulaField = newValue;
	            }
	        }, true);
	    }
	
	    module.exports = formulaFieldController;
	})();


/***/ }),
/* 867 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		var constants = {
			/*
			 * This object can be any level nested depending on modularity we want to achieve 
			 * - Either per page
			 * - Per standalone functionality
			 */
			'new': 'new',
			'update': 'update',
			'numberOfFormulaFieldsPerChunk': 50,
			'treePanelItemsPerChunk': 25,
			'maxLength': 80,
			'useTypeExpression': 'Expression'
		};
	
		module.exports = constants;
	
	})();

/***/ }),
/* 868 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"formula-field\">\n    <div class=\"formula-field-main-container\">\n        <div class=\"formula-field-header title-bar\">\n            <div class=\"formula-field-title-container title\">\n                <div class=\"formula-field-info\">\n                    <span class=\"title\">{{vm.selectedFormulaField.Name}}</span>\n                </div>\n            </div>\n            <div id=\"navbar\">\n                <formula-field-sub-menu></formula-field-sub-menu>\n                <!-- Product menu bar with its values -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"list-product-btn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabFirstMenu)\" data-ng-if=\"vm.tabFirstMenu !== '' \">{{vm.tabFirstMenu}}</button>\n                        <div class=\"drop drop-menu\" data-ng-if=\"::vm.tabMenuItems.length > 0\">\n                            <md-menu md-offset=\"50 50\">\n                                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                    <i class=\"material-icons\">more_vert</i>\n                                </button>\n                                <md-menu-content width=\"2\">\n                                    <md-menu-item data-ng-repeat=\"menu in ::vm.tabMenuItems\">\n                                        <md-button data-ng-click=\"vm.tabMenuClicked(menu)\">\n                                            <div layout=\"row\" flex>\n                                                <p flex>{{::menu}}</p>\n                                            </div>\n                                        </md-button>\n                                    </md-menu-item>\n                                </md-menu-content>\n                            </md-menu>\n                        </div>\n                    </div>\n                </ul>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"formula-field-center-container\">\n            <!-- Content layout starts -->\n            <div ui-view=\"formulaFieldContainer\" class=\"formula-field-container\"></div>\n            <!-- Content layout ends -->\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 869 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(870);
	__webpack_require__(872);
	__webpack_require__(875);
	__webpack_require__(880);
	
	module.exports = angular.module('cpqAdmin.expression', [
	    'cpqAdmin.expression.common.services',
	    'cpqAdmin.fieldExpression.list',
	    'cpqAdmin.expression.common.directives',
	    'cpqAdmin.fieldExpression.details'
	])
	    .controller('fieldExpressionController', __webpack_require__(886))
	    .constant('fieldExpressionConstants', __webpack_require__(887))
	    .config(['$stateProvider', ($stateProvider) => {
	        $stateProvider.state('app.expression', {
	            url: '/expression',
	            views: {
	                'pageContent@': {
	                    template: __webpack_require__(888),
	                    controller: 'fieldExpressionController',
	                    controllerAs: 'vm'
	                }
	            }
	        });
	    }]);


/***/ }),
/* 870 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = angular.module('cpqAdmin.expression.common.services', [])
	    .service('fieldExpressionCommonService', __webpack_require__(871));

/***/ }),
/* 871 */
/***/ (function(module, exports) {

	
	expressionCommonServices.$inject = [
	    'remoteService',
	    'cpqAdminConstants'
	];
	
	function expressionCommonServices(remoteService, cpqAdminConstants) {
	    let selectedFieldExpression = {};
	    let expression = [];
	
	    /**
	     * @param  {} fieldExpression
	     */
	    function setSelectedFieldExpression(fieldExpression) {
	        selectedFieldExpression = fieldExpression;
	    }
	
	    function getSelectedFieldExpression() {
	        return selectedFieldExpression;
	    }
	    /**
	     * @param  {} requestObj
	     */
	    function loadAllFieldExpressions(requestObj) {
	        return remoteService.getAllFieldExpressions(requestObj)
	            .then((response) => {
	                setFieldExpressions(response.fieldExpressions);
	            });
	    }
	    /**
	     * @param  {} fieldExpressions
	     */
	    function setFieldExpressions(fieldExpressions) {
	        expression = angular.copy(fieldExpressions);
	    }
	
	    function getFieldExpressions() {
	        return expression;
	    }
	
	    /**
	     * @param  {} id
	     */
	    function getSelectedFieldExpressionDetails(id) {
	        if (id === cpqAdminConstants.NEW) {
	            return {};
	        } else {
	            return remoteService.getFieldExpressionDetails(id).then((response) => {
	                if (response && response.fieldExpression) {
	                    setSelectedFieldExpression(response.fieldExpression);
	                    return response.fieldExpression;
	                } else {
	                    return {};
	                }
	            });
	        }
	    }
	
	    const service = {
	        getFieldExpressions,
	        setFieldExpressions,
	        setSelectedFieldExpression,
	        getSelectedFieldExpression,
	        loadAllFieldExpressions,
	        getSelectedFieldExpressionDetails
	    };
	    return service;
	};
	
	module.exports = expressionCommonServices;

/***/ }),
/* 872 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = angular.module('cpqAdmin.fieldExpression.list', [])
	    .config(['$stateProvider', ($stateProvider) => {
	        $stateProvider.state('app.expression.field-list', {
	            parent: 'app.expression',
	            url: '/field/list',
	            views: {
	                'pageContent@': {
	                    template: __webpack_require__(873),
	                    controller: __webpack_require__(874),
	                    controllerAs: 'vm'
	                }
	            }
	        }).state('app.expression.rollup-list', {
	            parent: 'app.expression',
	            url: '/rollup/list',
	            views: {
	                'pageContent@': {
	                    template: __webpack_require__(873),
	                    controller: __webpack_require__(874),
	                    controllerAs: 'vm'
	                }
	            }
	        });
	    }]);


/***/ }),
/* 873 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"field-expressions-list-container\">\n    <div class=\"two-col-layout auto-height\">\n        <div class=\"auto-height col-lg-12 noPadding list-table-container\">\n            <div class=\"list-header\">\n                <!-- Search Bar starts -->\n                <div class=\"row noMargin search-container title-bar\">\n                    <div class=\"field-expressions-search\">\n                        <div class=\"col-xs-5\">\n                            <div class=\"searchbox\">\n                                <span class=\"fa fa-filter pointerEventsNone\" disabled data-ng-click=\"vm.resetPagination();\"></span>\n                                <i class=\"search-icon material-icons\" data-ng-click=\"vm.resetPagination()\">search</i>\n                                <form ng-submit=\"vm.resetPagination()\">\n                                    <input type=\"text\" placeholder=\"{{::vm.searchLabel}}\" class=\"search-box\" data-ng-model=\"vm.searchString\">\n                                    <i class=\"clear-icon material-icons\" data-ng-if=\"vm.searchString\" data-ng-click=\"vm.clearSearchInput()\">clear</i>\n                                </form>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-3\"></div>\n                        <div class=\"col-xs-4 text-right field-expressions-btn-group\">\n                            <div class=\"listBtn\">\n                                <button type=\"button\" class=\"slds-button slds-button_brand\" data-ng-click=\"vm.createNewFieldExpression()\">{{vm.newButtonLabel}}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div preloader add-to-element=\"true\" loading-text=\"vm.loadingText\" data-ng-if=\"vm.showLoader === true\"></div>\n            <div data-ng-if=\"vm.fieldExpressions.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n                {{vm.noMatchingRecords}} <span><b>{{vm.searchedStr}}</b></span>\n            </div>\n            <div data-ng-if=\"vm.fieldExpressions.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n                {{::vm.labels.MaxSQLSizeExceedMessage}}\n            </div>\n            <div class=\"list-table\">\n                <table ng-table=\"vm.tableParams\" class=\"table ng-table-resizable-columns\">\n                    <thead>\n                        <tr>\n                            <th ng-repeat=\"column in ::vm.listTableHeader\" class=\"column--{{::column.Type}}\">\n                                <span ng-click=\"vm.tableHeaderClick(column);\">\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-descent'\">arrow_downward</i>\n                                    <i class=\"material-icons show\" ng-if=\"column.showSortIcon && column.sortIconCls === 'st-sort-ascent'\">arrow_upward</i> \n                                    {{column.FieldLabel}}\n                                </span>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr ng-repeat=\"fieldExpression in vm.fieldExpressions track by fieldExpression.Id\">\n                            <td data-ng-repeat=\"column in ::vm.listTableHeader\" class=\"column--{{::column.Type}}\">\n                                <span data-ng-if=\"::column.FieldName === 'Name'\">\n                                    <a data-ng-click=\"vm.loadFieldExpressionDetails(fieldExpression)\" ng-bind-html=\"::fieldExpression[column.FieldName]\" class=\"clickable-item\" href=\"{{::vm.getDetailsPageUrl(fieldExpression.Id)}}\"></a>\n                                </span>\n                                <span data-ng-if=\"::column.FieldName !== 'Name'\" ng-bind-html=\"::vm.getFormattedContent(fieldExpression,column)\"></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div class=\"pagination-container text-center\" data-ng-if=\"vm.showPagination === true\">\n                <div class=\"btn-group dropup text-right\" role=\"group\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        {{vm.labels.RecordsPerPage | userMessage:vm.numberOfRecordsPerChunk}}\n                        <span class=\"caret\"></span>\n                    </button>\n                    <ul class=\"dropdown-menu\">\n                        <li data-ng-repeat=\"chunk in vm.pageSize\"><a data-ng-click=\"vm.numberOfRecordsPerChunk = chunk\">{{::chunk}}</a></li>\n                    </ul>\n                </div>\n                <div class=\"navigation-control\">\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getFieldExpressions('previous')\">\n                        <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                    <span class=\"disabled\">{{vm.paginationCenterText}}</span>\n                    <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getFieldExpressions('next')\">\n                        <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span></button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 874 */
/***/ (function(module, exports) {

	expressionListController.$inject = [
	    '$scope',
	    '$state',
	    '$filter',
	    'NgTableParams',
	    '$timeout',
	    'i18nService',
	    'systemConstants',
	    'fieldExpressionConstants',
	    'cpqAdminConstants',
	    'fieldExpressionCommonService',
	    '$location',
	    'applicationService'
	];
	
	function expressionListController($scope, $state, $filter, NgTableParams, $timeout, i18nService, systemConstants, fieldExpressionConstants, cpqAdminConstants,
	    fieldExpressionCommonService, $location, applicationService) {
	    const vm = this;
	    const prefix = systemConstants.nsPrefix || '';
	    let stateName = undefined;
	    let expressionType = undefined;
	    let sortField, sortDirection, pageNumber = 1;
	    vm.labels = i18nService.CustomLabel;
	    vm.pageSize = [50, 100, 150, 200];
	    vm.showLoader = false;
	    vm.updateLabelName = updateLabelName;
	    vm.loadFieldExpression = loadFieldExpression;
	
	 
	    function updateLabelName() {
	        let name = null;
	        if ($state.current.name.indexOf(fieldExpressionConstants.FIELD_PATH) !== -1) {
	            vm.searchLabel = vm.labels.SearchFieldExpressions;
	            vm.newButtonLabel = vm.labels.NewFieldExpression;
	            stateName = fieldExpressionConstants.FIELD_DETAILS_STATE;
	            expressionType = fieldExpressionConstants.FIELD_UPDATE;
	            name = vm.labels.Name;
	            vm.noMatchingRecords = vm.labels.NoMatchingFieldExpressions;
	        } else {
	            vm.searchLabel = vm.labels.SearchRollups;
	            vm.newButtonLabel = vm.labels.NewRollup;
	            stateName = fieldExpressionConstants.ROLLUP_DETAILS_STATE;
	            expressionType = fieldExpressionConstants.ROLLUP;
	            name = vm.labels.RollupName;
	            vm.noMatchingRecords = vm.labels.NoMatchingRollupExpressions;
	        }
	
	        vm.listTableHeader = [
	            {
	                'FieldLabel': name,
	                'FieldName': 'Name',
	                'Type': 'STRING',
	                'showSortIcon': true,
	                'sortIconCls': 'st-sort-ascent'
	            },
	            {
	                'FieldLabel': vm.labels.Active,
	                'FieldName': prefix + 'Active__c',
	                'Type': 'BOOLEAN'
	            },
	            {
	                'FieldLabel': vm.labels.UpdateField,
	                'FieldName': prefix + 'UpdateField__c',
	                'Type': 'STRING'
	            },
	            {
	                'FieldLabel': vm.labels.IsModifiable,
	                'FieldName': prefix + 'IsModifiable__c',
	                'Type': "BOOLEAN"
	            }
	        ];
	        vm.loadFieldExpression();
	    }
	
	    vm.searchedStr = '';
	    vm.numberOfRecordsPerChunk = fieldExpressionConstants.NUMBER_OF_RECORDS_PER_CHUNK;
	    vm.pageNumber = 0;
	    vm.disableLeftBtn = true;
	    vm.disableRightBtn = false;
	    vm.loadingText = vm.labels.LoadingText;
	    vm.isMaxSQLSizeExceed = false;
	    vm.showPagination = true;
	
	    vm.updateLabelName();
	    updateCenterBtnText();
	
	    vm.getFieldExpressions = (type) => {
	        if (type === fieldExpressionConstants.NEXT) {
	            pageNumber += 1;
	            vm.pageNumber += 1;
	            if (vm.pageNumber !== 0) {
	                vm.disableLeftBtn = false;
	            }
	            vm.loadFieldExpression();
	        } else {
	            pageNumber -= 1;
	            vm.pageNumber -= 1;
	            if (vm.pageNumber === 0) {
	                vm.disableLeftBtn = true;
	            }
	            vm.loadFieldExpression();
	        }
	    };
	    
	    /**
	     * @param  {} endCount
	     */
	    function updateCenterBtnText(endCount) {
	        if (endCount) {
	            vm.paginationCenterText = `(${(vm.pageNumber * vm.numberOfRecordsPerChunk + 1)}-${(vm.pageNumber * vm.numberOfRecordsPerChunk + endCount)})`;
	        } else {
	            vm.paginationCenterText = `(${(vm.pageNumber * vm.numberOfRecordsPerChunk + 1)}-${((vm.pageNumber + 1) * vm.numberOfRecordsPerChunk)})`;
	        }
	    };
	
	    vm.resetPagination = (resetPageNumber) => {
	        vm.showPanel = false;
	        if (resetPageNumber) {
	            vm.pageNumber = 0;
	            pageNumber = 1;
	        }
	        vm.pageNumber = 0;
	        pageNumber = 1;
	        vm.disableLeftBtn = true;
	        if (vm.fieldExpressions.length < vm.numberOfRecordsPerChunk) {
	            updateCenterBtnText(vm.fieldExpressions.length);
	        }
	        vm.loadFieldExpression();
	    };
	
	    const deRegisterFunc = $scope.$watch('vm.numberOfRecordsPerChunk', (newValue, oldValue) => {
	        if (newValue && oldValue && newValue !== oldValue) {
	            vm.resetPagination(false);
	        }
	    });
	
	    $scope.$on('destroy', () => {
	        deRegisterFunc();
	        expressionDeRegisterFunc();
	    });
	
	
	    vm.getFormattedContent = (expression, column) => {
	        let modifiedValue,
	            fieldType = column.Type,
	            value = expression[column.FieldName];
	
	        switch (fieldType) {
	            case cpqAdminConstants.datetime:
	            case cpqAdminConstants.date: {
	                modifiedValue = $filter('aptDateToString')(value);
	                break;
	            }
	            case cpqAdminConstants.boolean: {
	                if (value) {
	                    modifiedValue = "<i class='material-icons active show'>check_circle</i>";
	                } else {
	                    modifiedValue = "<i class='material-icons show'>check_circle</i>";
	                }
	                break;
	            }
	            case cpqAdminConstants.string:
	            case cpqAdminConstants.textarea:
	            case cpqAdminConstants.url:
	            case cpqAdminConstants.multipicklist: {
	                modifiedValue = value;
	                break;
	            }
	            default: {
	                modifiedValue = value;
	                break;
	            }
	        }
	        return modifiedValue;
	    };
	    /**
	     * @param  {} data
	     * @param  {} numberOfRecordsPerChunk
	     */
	    function createNgTable(data, numberOfRecordsPerChunk) {
	        const initialParams = {
	            count: numberOfRecordsPerChunk
	        };
	        const initialSettings = {
	            counts: [],
	            paginationMaxBlocks: 0,
	            paginationMinBlocks: 0,
	            dataset: data
	        };
	        return new NgTableParams(initialParams, initialSettings);
	    }
	
	    /**
	     * @param  {} expressions
	     */
	    function processData(expressions) {
	        /* Used to bind to table body */
	        vm.fieldExpressions = expressions;
	        vm.isMaxSQLSizeExceed = false;
	
	        if (!vm.tableParams) {
	            vm.tableParams = createNgTable(expressions, vm.numberOfRecordsPerChunk);
	        }
	
	        /* 
	         * - Show 'No matching products are found for the search entry XXX', when no return
	         * return result set is empty.
	         * - Keep the user messages, until user makes a fresh search which has atleast more
	         * than 1 result item.
	         */
	        vm.showPagination = true;
	        if (expressions.length === 0 && vm.searchString !== '') {
	            vm.searchedStr = vm.searchString;
	            if (vm.pageNumber === 0) {
	                vm.showPagination = false;
	            }
	        }
	        if (expressions.length < vm.numberOfRecordsPerChunk) {
	            vm.disableRightBtn = true;
	            updateCenterBtnText(expressions.length);
	        } else {
	            vm.disableRightBtn = false;
	            updateCenterBtnText();
	        }
	
	        document.querySelector('.list-table').scrollTop = 0;
	    }
	
	    /**
	     * - When user enters search string and hits enter, this method gets called
	     * - Updates the smart-table pagination object.
	     * - Table header click
	     */
	    function loadFieldExpression() {
	        /* Show the loader on start of service call */
	        vm.showLoader = true;
	
	        const requestObj = {
	            'sortField': sortField || 'Name',
	            'sortDirection': sortDirection || cpqAdminConstants.ASCENDING,
	            'searchString': vm.searchString || '',
	            'numberOfRecordsPerChunk': vm.numberOfRecordsPerChunk,
	            'chunkNumber': pageNumber,
	            'expressionType': expressionType
	        };
	        fieldExpressionCommonService.loadAllFieldExpressions(requestObj)
	            .then(() => {
	                processData(fieldExpressionCommonService.getFieldExpressions());
	                vm.showLoader = false;
	            }, (reason) => {
	                applicationService.showErrorMessage(reason);
	            });
	    }
	
	    /**
	     * - Clears searc input box
	     * - Makes a service call to reload the table
	     */
	    vm.clearSearchInput = () => {
	        vm.searchString = '';
	        vm.currentPage = 1;
	        vm.showPanel = false;
	        vm.loadFieldExpression();
	    };
	
	    /**
	     * - Show / Hide ascending or descending icon next to the column header when user clicks on header.
	     * - We are not using the default feature of the ngTable. It's doing local sorting and to
	     * bind to its server side sorting, configs are not available as of now.
	     */
	    vm.tableHeaderClick = (column) => {
	        sortField = column.FieldName;
	        if (!column.sortIconCls) {
	            column.sortIconCls = 'st-sort-ascent';
	        }
	        sortDirection = (column.sortIconCls === 'st-sort-ascent' ? cpqAdminConstants.DESCENDING : cpqAdminConstants.ASCENDING);
	        const columnsList = vm.listTableHeader;
	        for (let item in columnsList) {
	            if (column.FieldName === columnsList[item].FieldName) {
	                columnsList[item].showSortIcon = true;
	                columnsList[item].sortIconCls = column.sortIconCls ? (column.sortIconCls === 'st-sort-ascent' ? 'st-sort-descent' : 'st-sort-ascent') : 'st-sort-descent';
	            } else {
	                columnsList[item].showSortIcon = false;
	                columnsList[item].sortIconCls = false;
	            }
	        }
	        vm.resetPagination();
	    };
	
	    vm.loadFieldExpressionDetails = (expression) => {
	        fieldExpressionCommonService.setSelectedFieldExpression(angular.copy(expression));
	    };
	
	    vm.getDetailsPageUrl = (id) => {
	        const absUrl = $location.absUrl();
	        return absUrl.replace('/list', '/' + id + '/details');
	    };
	
	    vm.createNewFieldExpression = () => {
	        const allExpressions = fieldExpressionCommonService.getFieldExpressions();
	        fieldExpressionCommonService.setSelectedFieldExpression(angular.copy(allExpressions));
	        $state.go(stateName, {
	            id: 'new'
	        });
	    };
	}
	
	module.exports = expressionListController;

/***/ }),
/* 875 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = angular.module('cpqAdmin.expression.common.directives', [])
	        .directive('expressionSubMenu', __webpack_require__(876))
	        .directive('expressionListing', __webpack_require__(878));
	;

/***/ }),
/* 876 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = function() {
	
	    expressionSubMenuController.$inject = [
	        '$stateParams',
	        'systemConstants',
	        'i18nService'
	    ];
	    
	    function expressionSubMenuController($stateParams, systemConstants, i18nService) {
	        var vm = this;
	
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	    };
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: expressionSubMenuController,
	        controllerAs: 'vm',
	        bindToController: {
	            stateName: '='
	        },
	        template: __webpack_require__(877),
	    };
	};

/***/ }),
/* 877 */
/***/ (function(module, exports) {

	module.exports = "<ul class=\"nav navbar-nav expression-menu\">\n    <li data-ui-sref-active=\"active\" class=\"menu-item\">\n        <a data-ui-sref=\"{{vm.stateName}}({id:vm.$stateParams.id})\">{{::vm.labels.Details}}</a>\n    </li>\n</ul>"

/***/ }),
/* 878 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	    function () {
	        expressionListingController.$inject = [
	            '$scope',
	            'systemConstants',
	            'cpqAdminConstants',
	            '$state',
	            '$stateParams',
	            'i18nService',
	            'fieldExpressionCommonService',
	            'fieldExpressionConstants',
	            'fieldExpressionDetailsService',
	            '$location'
	        ];
	
	        function expressionListingController($scope, systemConstants, cpqAdminConstants, $state, $stateParams,
	            i18nService, fieldExpressionCommonService, fieldExpressionConstants,
	            fieldExpressionDetailsService, $location) {
	
	            let vm = this;
	            let prefix = systemConstants.nsPrefix || '';
	            let filter = {
	                searchString: '',
	                chunkNumber: 1,
	                numberOfRecordsPerChunk: fieldExpressionConstants.NUMBER_OF_RECORDS_PER_CHUNK || 50
	            };
	            let pageNumber = 1;
	
	            vm.labels = i18nService.CustomLabel;
	            vm.disableLeftBtn = true;
	            vm.searchedStr = '';
	            vm.isMaxSQLSizeExceed = false;
	            vm.numberOfRecordsPerChunk = fieldExpressionConstants.NUMBER_OF_RECORDS_PER_CHUNK || 50;
	            vm.loadExpressions = loadExpressions;
	            vm.prepareFiltersAndExpression = prepareFiltersAndExpression;
	            vm.processData = processData;
	            vm.headerText = vm.toState.indexOf(fieldExpressionConstants.FIELD_DETAILS_SUBSTATE) !== -1? vm.labels.AllFieldExpressions: vm.labels.AllRollups;
	
	            vm.searchExpressions = function () {
	                filter.searchString = vm.searchText || '';
	                filter.chunkNumber = 1;
	                filter.numberOfRecordsPerChunk = vm.numberOfRecordsPerChunk;
	                vm.searchedStr = filter.searchString;
	                fieldExpressionDetailsService.setFilter(filter);
	                vm.loadExpressions();
	            };
	
	            function prepareFiltersAndExpression() {
	                filter = fieldExpressionDetailsService.getFilter();
	                if (Object.keys(filter).length) {
	                    vm.searchText = filter.searchString;
	                } else {
	                    filter = {
	                        chunkNumber: pageNumber || 1,
	                        numberOfRecordsPerChunk: vm.numberOfRecordsPerChunk,
	                        searchString: vm.searchText || ''
	                    };
	                }
	            };
	
	            /* On Page load while there are no filters applied */
	            vm.prepareFiltersAndExpression();
	
	            vm.getExpressions = function (type) {
	                if (type === fieldExpressionConstants.NEXT) {
	                    let chunkNumber = filter.chunkNumber;
	                    filter.chunkNumber = (chunkNumber + 1);
	                    if (filter.chunkNumber !== 1) {
	                        vm.disableLeftBtn = false;
	                    }
	                } else {
	                    let chunkNumber = filter.chunkNumber;
	                    filter.chunkNumber = (chunkNumber - 1);
	                    if (filter.chunkNumber === 1) {
	                        vm.disableLeftBtn = true;
	                    }
	                }
	                vm.loadExpressions();
	            };
	
	            const vRDeRegisterFunc = $scope.$watch(fieldExpressionCommonService.getFieldExpressions, (newValue, oldValue) => {
	                if (newValue && oldValue) {
	                    vm.processData(newValue);
	                }
	            }, true);
	            /**
	             * @param  {} expressions
	             */
	            function processData(expressions) {
	                /* Used to bind to table body */
	                vm.expressions = expressions;
	                vm.isMaxSQLSizeExceed = false;
	
	                if (expressions.length === 0) {
	                    vm.searchedStr = vm.searchText;
	
	                }
	                /**
	                 * - Check if the response size is less than the current chunk size.
	                 * - If less, disable the next button
	                 * - else keep it enabled
	                 */
	
	                if (expressions.length < filter.numberOfRecordsPerChunk) {
	                    vm.disableRightBtn = true;
	                    updateCenterBtnText(filter, expressions.length);
	                } else {
	                    vm.disableRightBtn = false;
	                    updateCenterBtnText(filter, expressions.length);
	                }
	
	                /* Hide the loader on success of service call */
	                vm.showLoader = false;
	                document.querySelector('.list-table').scrollTop = 0;
	            }
	
	            function loadExpressions() {
	                vm.showLoader = true;
	                var path = $location.url();
	                if (path.indexOf('app/expression/field') !== -1){
	                    filter.expressionType = fieldExpressionConstants.FIELD_UPDATE;
	                } else {
	                    filter.expressionType = fieldExpressionConstants.ROLLUP;
	                }
	                fieldExpressionCommonService.loadAllFieldExpressions(filter)
	                    .then(() => { }, () => { });
	            }
	
	            /**
	             * @param  {} filterObj
	             * @param  {} endCount
	             */
	            function updateCenterBtnText(filterObj, endCount) {
	                /* 
	                 * - Search result might return lesser number of records than current pagination count.
	                 * e.g. current pagination is : 1-150, but search returned only 20 records.
	                 * - Then pagination should be updated to 1-20 instead of 1-150.
	                 * - endCount variable contains the exact number of records and will only be defined, if
	                 * search count is lesser than current pagination sequence.
	                 */
	                if (filterObj.chunkNumber === 1) {
	                    vm.disableLeftBtn = true;
	                }
	                if (endCount) {
	                    vm.paginationCenterText = `(${((filterObj.chunkNumber - 1) * vm.numberOfRecordsPerChunk + 1)}-${((filterObj.chunkNumber - 1) * vm.numberOfRecordsPerChunk + endCount)})`;
	                    if (endCount < vm.numberOfRecordsPerChunk) {
	                        vm.disableRightBtn = true;
	                    }
	                } else {
	                    vm.paginationCenterText = `(${((filterObj.chunkNumber - 1) * vm.numberOfRecordsPerChunk + 1)}-${(filterObj.chunkNumber * vm.numberOfRecordsPerChunk)})`;
	                }
	            }
	
	            vm.getActiveClass = (id) => {
	                if ($stateParams.id === id) {
	                    return true;
	                } else {
	                    return false;
	                }
	            };
	
	            $scope.$on('destroy', () => {
	                vRDeRegisterFunc();
	            });
	
	            vm.loadExpressionDetails = (toBeLoadedExpression) => {
	                if (toBeLoadedExpression && $state.params.id !== cpqAdminConstants.NEW) {
	                    fieldExpressionCommonService.setSelectedFieldExpression(angular.copy(toBeLoadedExpression));
	                    $state.go(vm.toState, {
	                        id: toBeLoadedExpression.Id
	                    });
	                }
	            };
	        }
	
	        return {
	            restrict: 'E',
	            scope: {},
	            controller: expressionListingController,
	            controllerAs: 'vm',
	            bindToController: {
	                searchText: '=',
	                noMatchingRecords: '=',
	                toState: '@'
	            },
	            template: __webpack_require__(879),
	        };
	    }
	];

/***/ }),
/* 879 */
/***/ (function(module, exports) {

	module.exports = "<header>\n    <h4>{{vm.headerText}}</h4>\n    <div class=\"search\">\n        <form ng-submit=\"vm.searchExpressions()\" novalidate>\n            <div class=\"search-input-container\">\n                <div class=\"input-group\">\n                    <input class=\"slds-input\" type=\"text\" data-ng-model=\"vm.searchText\" name=\"searchText\" required>\n                    <label class=\"ng-binding\">{{::vm.labels.Search}}</label>\n                </div>\n            </div>\n        </form>\n    </div>\n</header>\n<div class=\"list-table\">\n    <div data-ng-if=\"vm.expressions.length === 0 && vm.isMaxSQLSizeExceed !== true\" class=\"search-result\">\n        {{vm.noMatchingRecords}} <span><b>{{vm.searchedStr}}</b></span>\n    </div>\n    <div data-ng-if=\"vm.expressions.length === 0 && vm.isMaxSQLSizeExceed === true\" class=\"search-result\">\n        {{::vm.labels.MaxSQLSizeExceedMessage}}\n    </div>\n    <table>\n        <tbody>\n            <tr ng-repeat=\"item in vm.expressions track by item.Id\" ng-click=\"vm.loadExpressionDetails(item)\" ng-class=\"{active: vm.getActiveClass(item.Id) === true}\">\n                <td>{{::item.Name }}</td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<div class=\"pagination expression-list-pagination\">\n    <div class=\"place expression-place\">\n        {{vm.paginationCenterText}}\n    </div>\n    <div class=\"next-prev\">\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableLeftBtn\" data-ng-click=\"vm.getExpressions('previous')\">\n            <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span>\n        </button>\n        <button class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableRightBtn\" data-ng-click=\"vm.getExpressions('next')\">\n            <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n        </button>\n    </div>\n</div>"

/***/ }),
/* 880 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = angular.module('cpqAdmin.fieldExpression.details', [])
	    .service('fieldExpressionDetailsService', __webpack_require__(881))
	    .config(['$stateProvider', function ($stateProvider) {
	        $stateProvider.state('app.expression.field-details', {
	            parent: 'app.expression',
	            url: '/field/:id/details',
	            views: {
	                'fieldExpressionsContainer': {
	                    template: __webpack_require__(882),
	                    controller: __webpack_require__(883),
	                    controllerAs: 'vm'
	                }
	            },
	            resolve: {
	                expressionDetails: ['$stateParams', 'fieldExpressionCommonService', function ($stateParams, fieldExpressionCommonService) {
	                    return fieldExpressionCommonService.getSelectedFieldExpressionDetails($stateParams.id);
	                }],
	                lineItemData: ['fieldExpressionDetailsService', function (fieldExpressionDetailsService) {
	                    return fieldExpressionDetailsService.getSObjectFields('LineItem__c');
	                }],
	                pavData: ['fieldExpressionDetailsService', function (fieldExpressionDetailsService) {
	                    return fieldExpressionDetailsService.getSObjectFields('ProductAttributeValue__c');
	                }]
	            }
	        }).state('app.expression.rollup-details', {
	            parent: 'app.expression',
	            url: '/rollup/:id/details',
	            views: {
	                'fieldExpressionsContainer': {
	                    template: __webpack_require__(882),
	                    controller: __webpack_require__(883),
	                    controllerAs: 'vm'
	                }
	            },
	            resolve: {
	                expressionDetails: ['$stateParams', 'fieldExpressionCommonService', function ($stateParams, fieldExpressionCommonService) {
	                    return fieldExpressionCommonService.getSelectedFieldExpressionDetails($stateParams.id);
	                }],
	                lineItemData: ['fieldExpressionDetailsService', function (fieldExpressionDetailsService) {
	                    return fieldExpressionDetailsService.getSObjectFields('LineItemRollup__c');
	                }],
	                pavData: [function () {
	                    return [];
	                }]
	            }
	        });
	    }]);

/***/ }),
/* 881 */
/***/ (function(module, exports) {

	expressionDetailsService.$inject = [
	    '$q',
	    'systemConstants',
	    'remoteService',
	    'i18nService',
	    'apiCallsService',
	    'fieldExpressionConstants'
	];
	function expressionDetailsService($q, systemConstants, remoteService, i18nService, apiCallsService, fieldExpressionConstants) {
	    let prefix = systemConstants.nsPrefix || '';
	    let labels = i18nService.CustomLabel;
	    let filter = {};
	
	    function getExpressionTypes() {
	        return [{
	            label: labels.FieldUpdate,
	            value: fieldExpressionConstants.FIELD_UPDATE
	        }, {
	            label: labels.Rollup,
	            value: fieldExpressionConstants.ROLLUP
	        }];
	    }
	
	    function getUpdateObject(expressionType) {
	        let updateObject;
	        switch (expressionType) {
	            case fieldExpressionConstants.FIELD_UPDATE:
	                updateObject = [{
	                    label: labels.LineItem,
	                    value: prefix + 'LineItem__c'
	                }, {
	                    label: labels.ProductAttribute,
	                    value: prefix + 'ProductAttributeValue__c'
	                }];
	                break;
	            case fieldExpressionConstants.ROLLUP:
	                updateObject = [{
	                    label: labels.LineItemRollup,
	                    value: prefix + 'LineItemRollup__c'
	                }];
	                break;
	            default:
	                updateObject = [];
	        }
	        return updateObject;
	    }
	
	    function getExpressionContext(expressionType) {
	        let context;
	        switch (expressionType){
	            case fieldExpressionConstants.FIELD_UPDATE:
	                context = [{
	                    label: labels.RecordUpdate,
	                    value: fieldExpressionConstants.RECORD_UPDATE
	                }];
	                break;
	            case fieldExpressionConstants.ROLLUP:
	                context = [{
	                    label: labels.Rollup,
	                    value: fieldExpressionConstants.ROLLUP
	                }];
	                break;
	            default:
	                context = [];
	        }
	        return context;
	    }
	
	    function getSourceObject() {
	        return [{
	            label: labels.LineItem,
	            value: prefix + 'LineItem__c'
	        }];
	    }
	
	    function getScopeTypes() {
	        return [{
	            label: labels.NoneAsPickListValue,
	            value: ''
	        }, {
	            label: labels.Product,
	            value: fieldExpressionConstants.PRODUCT
	        }, {
	            label: labels.ProductGroup,
	            value: fieldExpressionConstants.PRODUCTGROUP
	        }, {
	            label: labels.HeaderLevel,
	            value: fieldExpressionConstants.HEADER_LEVEL
	        }];
	    }
	
	    /**
	     * @param  {} obj
	     */
	
	    function setFilter(obj) {
	        filter = obj;
	    }
	
	    function getFilter() {
	        return filter;
	    }
	
	    function createExpression(expression) {
	        return remoteService.createFieldExpressions([expression]);
	    }
	
	    function updateExpression(expression) {
	        return remoteService.updateFieldExpressions([expression]);
	    }
	
	    function getSObjectFields(objName) {
	        const deferQ = $q.defer();
	        apiCallsService.getFieldsForSObjectName(objName, false, true).then((response) => {
	            if (response) {
	                deferQ.resolve(prepareSObjectFields(response, objName));
	            }
	        }, (reason) => {
	            deferQ.reject(reason);
	        });
	        return deferQ.promise;
	    }
	
	    function prepareSObjectFields(data, objName) {
	        let response = [];
	        let fields = data.FieldItems;
	
	        if (fields) {
	            let index;
	            let range = fields.length;
	            if (range) {
	                for (index = 0; index < range; index++) {
	                    let fieldName = fields[index].fieldName;
	                    let displayName = fields[index].fieldName;
	                    let duplicates = response.filter(function (field, key) {
	                        return field.fieldName === fieldName;
	                    });
	                    if (!displayName.startsWith('[') && duplicates.length === 0) {
	                        if (objName === prefix + 'ProductAttributeValue__c' || objName === 'ProductAttributeValue__c') {
	                            displayName = prefix + 'AttributeValueId__r' + "." + fieldName;
	                        }
	                        fields[index].value = displayName;
	                        response.push(fields[index]);
	                    }
	                }
	            }
	        }
	        return response;
	    }
	
	    function runExpressionCriteriaJob(data) {
	        return remoteService.updateExpressionCriteriaFields(data);
	    }
	
	    function getOperator() {
	        return [{
	            label: labels.SUM,
	            value: fieldExpressionConstants.SUM
	        }, {
	            label: labels.MIN,
	            value: fieldExpressionConstants.MIN
	        }, {
	            label: labels.MAX,
	            value: fieldExpressionConstants.MAX
	        }, {
	            label: labels.AVG,
	            value: fieldExpressionConstants.AVG
	        }, {
	            label: labels.And,
	            value: fieldExpressionConstants.AND
	        }, {
	            label: labels.Or,
	            value: fieldExpressionConstants.OR
	        }];
	    }
	
	    const service = {
	        createExpression,
	        updateExpression,
	        getScopeTypes,
	        getExpressionTypes,
	        getUpdateObject,
	        getExpressionContext,
	        getSourceObject,
	        getSObjectFields,
	        runExpressionCriteriaJob,
	        setFilter,
	        getFilter,
	        getOperator
	    };
	    return service;
	};
	
	module.exports = expressionDetailsService;

/***/ }),
/* 882 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"sub-page-container\">\n    <div class=\"expression-detail-container\">\n        <div class=\"left-tree tree-view setWithCent\" resizable r-directions=\"['right']\" r-flex=\"true\">\n            <expression-listing search-text=\"vm.searchText\" to-state=\"{{vm.stateName}}\" no-matching-records=\"vm.noMatchingRecords\"></expression-listing>\n        </div>\n        <div class=\"expression-detail-block\">\n            <form class=\"expression-detail-form\" novalidate name=\"vm.expressionForm\">\n                <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n                <div layout=\"row\">\n                    <div class=\"col-xs-12 col-lg-4\">\n                        <div class=\"form-group\">\n                            <material-form-field model=\"vm.expression.Name\" field-label=\"::vm.labels.Name\" field-type=\"STRING\" is-editable=\"true\" name=\"Name\" is-required=\"true\"></material-form-field>\n                            <div ng-messages=\"vm.expressionForm.Name.$error\" ng-if=\"vm.expressionForm.Name.$touched || vm.expressionForm.$submitted \">\n                                <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField}}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"col-xs-12 col-lg-4\">\n                        <div class=\"form-group active\">\n                            <material-form-field model=\"vm.expression[vm.prefix + 'Active__c']\" field-label=\"::vm.labels.Active\" field-type=\"BOOLEAN\" is-editable=\"true\" name=\"active\" element-id=\"active\"></material-form-field>\n                        </div>\n                    </div>\n                    <div class=\"col-xs-12 col-lg-4\">\n                        <material-form-field model=\"vm.expression[vm.prefix + 'IsModifiable__c']\" field-label=\"::vm.labels.IsModifiable\" field-type=\"BOOLEAN\" is-editable=\"true\" name=\"modifiable\" element-id=\"modifiable\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"col-xs-12 col-lg-4\">\n                        <div class=\"form-group filter-type\">\n                            <material-form-field model=\"vm.expression[vm.prefix + 'ExpressionType__c']\" field-label=\"::vm.labels.ExpressionType\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"vm.expressionType\" is-required=\"true\" name=\"type\" is-disabled=\"true\"></material-form-field>\n                        </div>\n                    </div>\n                    <div class=\"col-xs-12 col-lg-4\">\n                        <div class=\"form-group business-object\">\n                            <material-form-field model=\"vm.expression[vm.prefix + 'EvaluationContext__c']\" field-label=\"::vm.labels.ExpressionContext\" field-type=\"PICKLIST\" properties=\"vm.expressionContext\" is-editable=\"true\" is-required=\"true\" name=\"context\"></material-form-field>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"col-xs-12 col-lg-4\">\n                        <material-form-field model=\"vm.expression[vm.prefix + 'SourceObject__c']\" field-label=\"::vm.labels.SourceObject\" field-type=\"PICKLIST\" properties=\"vm.sourceObject\" is-editable=\"true\" is-required=\"true\" name=\"sourceObject\"></material-form-field>\n                    </div>\n                    <div class=\"col-xs-12 col-lg-4\">\n                        <material-form-field model=\"vm.expression[vm.prefix + 'ConditionScope__c']\" field-label=\"::vm.labels.Scope\" field-type=\"PICKLIST\" properties=\"vm.scope\" is-editable=\"true\" name=\"scope\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\" class=\"field-scope\">\n                    <div class=\"col-xs-12 col-lg-4 field-product\" ng-if=\"vm.expression[vm.prefix + 'ConditionScope__c'] === vm.fieldExpressionConstants.PRODUCT\">\n                        <material-form-field field-type=\"autocomplete\" field-label=\"::vm.labels.Product\" name=\"product\" properties=\"vm.productScope\" is-required=\"true\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.expressionForm.product.$error\" ng-if=\"vm.expressionForm.product.$touched || vm.expressionForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField}}</p>\n                        </div>\n                    </div>\n                    <div class=\"col-xs-12 col-lg-4 field-product-group\" ng-if=\"vm.expression[vm.prefix + 'ConditionScope__c'] === vm.fieldExpressionConstants.PRODUCTGROUP\">\n                        <material-form-field field-type=\"autocomplete\" field-label=\"::vm.labels.ProductGroup\" name=\"productGroup\" properties=\"vm.productGroupScope\" is-required=\"true\">\n                        </material-form-field>\n                        <div ng-messages=\"vm.expressionForm.productGroup.$error\" ng-if=\"vm.expressionForm.productGroup.$touched || vm.expressionForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField}}</p>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"col-xs-12 col-lg-8\">\n                        <div class=\"form-group expression-field\">\n                            <material-form-field model=\"vm.expression[vm.prefix + 'ConditionExpression__c']\" field-label=\"::vm.labels.FilterExpression\" field-type=\"STRING\" is-editable=\"true\" is-disabled=\"true\" name=\"filterExpression\"></material-form-field>\n                            <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.openExpressionPopup('ConditionExpression__c')\">\n                                <i class=\"fa fa-external-link\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"col-xs-12 col-lg-4\">\n                        <material-form-field model=\"vm.expression[vm.prefix + 'UpdateObject__c']\" field-label=\"::vm.labels.UpdateObject\" field-type=\"PICKLIST\" properties=\"vm.updateObject\" is-editable=\"true\" is-required=\"true\" name=\"updateObject\"></material-form-field>\n                    </div>\n                    <div class=\"col-xs-12 col-lg-4 field-update-field\">\n                        <material-form-field model=\"vm.expression[vm.prefix + 'UpdateField__c']\" field-label=\"::vm.labels.UpdateField\" field-type=\"PICKLIST\" properties=\"vm.updateField\" is-editable=\"true\" is-required=\"true\" name=\"updateField\"></material-form-field>\n                        <div ng-messages=\"vm.expressionForm.updateField.$error\" ng-if=\"vm.expressionForm.updateField.$touched || vm.expressionForm.$submitted\">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField}}</p>\n                        </div>\n                    </div>\n                </div>\n                <div layout=\"row\" ng-if=\"vm.expression[vm.prefix + 'ExpressionType__c'] === vm.fieldExpressionConstants.ROLLUP\">\n                    <div class=\"col-xs-12 col-lg-4\">\n                        <material-form-field model=\"vm.expression[vm.prefix + 'Operation__c']\" field-label=\"::vm.labels.Operator\" field-type=\"PICKLIST\" properties=\"vm.operator\" is-editable=\"true\" is-required=\"true\" name=\"operator\"></material-form-field>\n                    </div>\n                </div>\n                <div layout=\"row\">\n                    <div class=\"col-xs-12 col-lg-8\">\n                        <div class=\"form-group expression-field\">\n                            <material-form-field model=\"vm.expression[vm.prefix + 'Expression__c']\" field-label=\"::vm.labels.ValueExpression\" field-type=\"STRING\" is-editable=\"true\" is-disabled=\"true\" is-required=\"true\" name=\"valueExpression\"></material-form-field>\n                            <button type=\"button\" class=\"slds-button\" data-ng-click=\"vm.openExpressionPopup('Expression__c')\">\n                                <i class=\"fa fa-external-link\"></i>\n                            </button>\n                        </div>\n                        <div ng-messages=\"vm.expressionForm.valueExpression.$error\" ng-if=\"vm.expressionForm.valueExpression.$touched || vm.expressionForm.$submitted \">\n                            <p ng-message=\"required\" class=\"formError\">{{::vm.labels.MandatoryField}}</p>\n                        </div>\n                        <div ng-messages=\"vm.expressionForm.valueExpression.$error\" ng-if=\"vm.expression[vm.prefix + 'Expression__c'].length > 255\">\n                            <p class=\"formError\">{{::vm.labels.ValueExpressionMaxLength}}</p>\n                        </div>\n                    </div>\n                </div>\n            </form>\n            <div class=\"details-footer\">\n                <div class=\"container-fluid\">\n                    <a class=\"slds-button slds-button--icon-more\" data-ng-click=\"vm.goToListingPage()\">{{::vm.labels.Cancel}}</a>\n                    <button class=\"slds-button slds-button_brand\" data-ng-click=\"vm.pageSave()\" data-ng-disabled=\"!vm.expressionForm.$valid\">{{::vm.labels.DialogSaveButton}}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"

/***/ }),
/* 883 */
/***/ (function(module, exports, __webpack_require__) {

	detailsController.$inject = [
	    '$scope',
	    '$state',
	    '$stateParams',
	    '$mdDialog',
	    'systemConstants',
	    'cpqAdminConstants',
	    'fieldExpressionConstants',
	    'i18nService',
	    'applicationService',
	    'rulesService',
	    'fieldExpressionCommonService',
	    'fieldExpressionDetailsService',
	    'expressionDetails',
	    'lineItemData',
	    'pavData'
	];
	
	function detailsController($scope, $state, $stateParams, $mdDialog, systemConstants, cpqAdminConstants, fieldExpressionConstants, i18nService, applicationService, rulesService, fieldExpressionCommonService, fieldExpressionDetailsService, expressionDetails, lineItemData, pavData) {
	    let vm = this;
	    let isFormSaved = false;
	    let expressionType = null;
	    let expressionId = null;
	    let listPage = null;
	
	    vm.prefix = systemConstants.nsPrefix || '';
	    vm.labels = i18nService.CustomLabel;
	    vm.stateName = null;
	    vm.fieldExpressionConstants = fieldExpressionConstants;
	    vm.gotoDetailsPage = gotoDetailsPage;
	    vm.searchText = '';
	
	    vm.expressionType = {
	        'PicklistValues': fieldExpressionDetailsService.getExpressionTypes()
	    };
	
	    vm.scope = {
	        'PicklistValues': fieldExpressionDetailsService.getScopeTypes(),
	        'methodToCallInController': onChangeScope
	    };
	
	    vm.sourceObject = {
	        'PicklistValues': fieldExpressionDetailsService.getSourceObject()
	    };
	
	    vm.productScope = {
	        scope: 'Product',
	        autocomplete: {
	            'querySearch': rulesService.productSearch,
	            'displayName': 'Name',
	        }
	    };
	
	    vm.productGroupScope = {
	        autocomplete: {
	            'querySearch': rulesService.productGroupSearch,
	            'displayName': 'Name'
	        }
	    };
	
	    vm.updateField = {
	        PicklistValues: []
	    }
	
	    vm.operator = {
	        'PicklistValues': fieldExpressionDetailsService.getOperator()
	    };
	
	    vm.expression = prepareExpresssionDetails(expressionDetails);
	    vm.init = init;
	    vm.loadExpression = loadExpression;
	    vm.createExpression = createExpression;
	    vm.updateExpression = updateExpression;
	    vm.init();
	
	    function init() {
	        updateLabelName();
	        vm.updateObject = {
	            'PicklistValues': fieldExpressionDetailsService.getUpdateObject(expressionType),
	            'methodToCallInController': onChangeUpdateObject
	        };
	
	        vm.expressionContext = {
	            'PicklistValues': fieldExpressionDetailsService.getExpressionContext(expressionType)
	        };
	
	        if (expressionId == vm.fieldExpressionConstants.NEW) {
	            vm.expression[vm.prefix + 'ExpressionType__c'] = expressionType;
	            vm.expression[vm.prefix + 'UpdateObject__c'] = vm.updateObject.PicklistValues[0].value;
	            vm.updateField['PicklistValues'] = lineItemData;
	        }
	
	        vm.loadExpression();
	    }
	
	    /**
	     * Method for load the expression
	     */
	    function loadExpression() {
	        let filters = fieldExpressionDetailsService.getFilter();
	        if (Object.keys(filters).length) {
	            vm.searchText = filters.searchString;
	        }
	        let filter = {
	            'searchString': vm.searchText,
	            'chunkNumber': 1,
	            'numberOfRecordsPerChunk': vm.fieldExpressionConstants.NUMBER_OF_RECORDS_PER_CHUNK || 50,
	            'expressionType': expressionType
	
	        };
	        fieldExpressionCommonService.loadAllFieldExpressions(filter).then(() => { }, (reason) => {
	            applicationService.showErrorMessage(reason);
	        });
	    }
	
	    /**
	     * Set the Update Object value based on update field value
	     * Update object value is ProductAttributeValue__c when update field text contains 'AttributeValueId__r'
	     */
	    function setUpdateObject(expression) {
	        let updateField = expression[vm.prefix + 'UpdateField__c'];
	        if (updateField) {
	            let temp = updateField.split(".");
	            if (temp[0] === (vm.prefix + 'AttributeValueId__r')) {
	                expression[vm.prefix + 'UpdateObject__c'] = vm.prefix + 'ProductAttributeValue__c';
	                vm.updateField = {
	                    'PicklistValues': pavData
	                };
	            } else {
	                vm.updateField = {
	                    'PicklistValues': lineItemData
	                };
	            }
	        }
	        return expression;
	    }
	
	    /**
	     * Call the method on change of update object
	     */
	    function onChangeUpdateObject(updateObject) {
	        vm.expression[vm.prefix + 'UpdateField__c'] = null;
	        if (updateObject === vm.prefix + 'LineItem__c' || updateObject === vm.prefix + 'LineItemRollup__c') {
	            vm.updateField['PicklistValues'] = lineItemData;
	        } else {
	            vm.updateField['PicklistValues'] = pavData;
	        }
	    }
	
	    /**
	     * Call the method on change of scope
	     */
	    function onChangeScope(scope) {
	        vm.expression[vm.prefix + 'ProductId__c'] = null;
	        vm.productScope.autocomplete.selectedItem = null;
	        vm.expression[vm.prefix + 'ProductGroup__c'] = null;
	        vm.productGroupScope.autocomplete.selectedItem = null;
	    }
	
	    /**
	     * Call the method create the expression
	     */
	    vm.openExpressionPopup = function (fieldName) {
	        const expression = vm.expression[vm.prefix + fieldName];
	        $mdDialog.show({
	            controller: __webpack_require__(413),
	            controllerAs: 'vm',
	            template: __webpack_require__(414),
	            parent: angular.element(document.body),
	            clickOutsideToClose: false,
	            multiple: true,
	            targetEvent: event,
	            hasBackdrop: false,
	            resolve: {
	                expression: () => {
	                    return expression;
	                },
	                isAPINameRequired: () => {
	                    const isAPINameRequired = true;
	                    return isAPINameRequired;
	                }
	            }
	        }).then((response) => {
	            vm.expression[vm.prefix + fieldName] = response;
	            vm.expressionForm.$setDirty();
	        });
	    };
	
	    function updateLabelName() {
	        expressionId = $state.params.id;
	        if ($state.current.name.indexOf(vm.fieldExpressionConstants.FIELD_DETAILS_STATE) !== -1) {
	            vm.stateName = vm.fieldExpressionConstants.FIELD_DETAILS_STATE;
	            listPage = vm.fieldExpressionConstants.FIELD_LIST_STATE;
	            vm.noMatchingRecords = vm.labels.NoMatchingFieldExpressions;
	            expressionType = vm.fieldExpressionConstants.FIELD_UPDATE;
	        } else {
	            vm.stateName = vm.fieldExpressionConstants.ROLLUP_DETAILS_STATE;
	            listPage = vm.fieldExpressionConstants.ROLLUP_LIST_STATE;
	            vm.noMatchingRecords = vm.labels.NoMatchingRollupExpressions;
	            expressionType = vm.fieldExpressionConstants.ROLLUP;
	        }
	    }
	
	    vm.pageSave = (toState, toParams) => {
	        if (vm.expression) {
	            save(toState, toParams);
	        } else {
	            isFormSaved = true;
	            if (toState) {
	                $state.go(toState, toParams);
	            }
	        }
	    };
	
	    function save(toState, toParams) {
	        if (vm.expressionForm.$dirty) {
	            if (vm.expressionForm.$valid) {
	                if ($stateParams.id === cpqAdminConstants.NEW) {
	                    vm.createExpression(toState, toParams);
	                } else {
	                    vm.updateExpression(toState, toParams);
	                }
	            } else {
	                vm.expressionForm.$setSubmitted();
	            }
	        } else {
	            vm.expressionForm.$setSubmitted();
	            addAlert(vm.labels.FieldsNotChanged, cpqAdminConstants.DANGER);
	        }
	    }
	
	    function createExpression(toState, toParams) {
	        var payload = prepareExpresssion(angular.copy(vm.expression));
	        fieldExpressionDetailsService.createExpression(payload)
	            .then((response) => {
	                if (response && response.length) {
	                    const expressions = fieldExpressionCommonService.getFieldExpressions();
	                    let selectedExpression = payload;
	                    selectedExpression.Id = response[0].Id;
	                    expressions.unshift(selectedExpression);
	                    //const selectedExp = fieldExpressionCommonService.getSelectedFieldExpressionDetails(response[0].Id);
	                    fieldExpressionCommonService.setSelectedFieldExpression(angular.copy(selectedExpression));
	                    vm.expressionForm.$setPristine();
	                    if (toState) {
	                        toParams.id = selectedExpression.Id;
	                        $state.go(toState, toParams);
	                    } else {
	                        addAlert(vm.labels.SavedSuccessfully, cpqAdminConstants.SUCCESS);
	                        $state.go(vm.stateName, {
	                            id: selectedExpression.Id
	                        });
	                    }
	                }
	            }, (reason) => {
	                applicationService.showErrorMessage(reason);
	            });
	    }
	
	    function updateExpression(toState, toParams) {
	        let payload = prepareExpresssion(angular.copy(vm.expression));
	        fieldExpressionDetailsService.updateExpression(payload)
	            .then(() => {
	                const selectedExpression = fieldExpressionCommonService.getSelectedFieldExpressionDetails(payload.Id);
	                fieldExpressionCommonService.setSelectedFieldExpression(angular.copy(selectedExpression));
	                let expressions = fieldExpressionCommonService.getFieldExpressions(),
	                    index = getExpressionIndex(payload.Id);
	                expressions[index] = payload;
	                fieldExpressionCommonService.setFieldExpressions(expressions);
	                vm.expressionForm.$setPristine();
	                if (toState) {
	                    $state.go(toState, toParams);
	                } else {
	                    addAlert(vm.labels.SavedSuccessfully, cpqAdminConstants.SUCCESS);
	                }
	            }, (reason) => {
	                applicationService.showErrorMessage(reason);
	            });
	    }
	
	    function getExpressionIndex(id) {
	        let expressions = fieldExpressionCommonService.getFieldExpressions(),
	            index, range = expressions.length,
	            key = -1;
	        for (index = 0; index < range; index++) {
	            if (expressions[index].Id === id)
	                key = index;
	        }
	        return key;
	    }
	
	    function prepareExpresssion(expression) {
	        var product = vm.productScope.autocomplete.selectedItem;
	        var productGroup = vm.productGroupScope.autocomplete.selectedItem;
	
	        if (product) {
	            expression[vm.prefix + 'ProductId__c'] = product.Id;
	        }
	        if (productGroup) {
	            expression[vm.prefix + 'ProductGroup__c'] = productGroup.Id;
	        }
	
	        if (expressionType === vm.fieldExpressionConstants.FIELD_UPDATE) {
	            expression[vm.prefix + 'UpdateObject__c'] = vm.prefix + 'LineItem__c';
	        }
	
	        expression[vm.prefix + 'ConditionExpression__c'] = applicationService.updateExpression(false, expression[vm.prefix + 'ConditionExpression__c']);
	        expression[vm.prefix + 'Expression__c'] = applicationService.updateExpression(false, expression[vm.prefix + 'Expression__c']);
	
	        return expression;
	    }
	
	    function prepareExpresssionDetails(expression) {
	
	        /** Set product and product group */
	        if (expression[vm.prefix + 'ProductId__c']) {
	            expression[vm.prefix + 'ConditionScope__c'] = vm.fieldExpressionConstants.PRODUCT;
	            if (expression[vm.prefix + 'ProductId__r']) {
	                vm.productScope.autocomplete.selectedItem = expression[vm.prefix + 'ProductId__r'];
	            }
	        }
	
	        if (expression[vm.prefix + 'ProductGroup__c']) {
	            expression[vm.prefix + 'ConditionScope__c'] = vm.fieldExpressionConstants.PRODUCTGROUP;
	            if (expression[vm.prefix + 'ProductGroup__r']) {
	                vm.productGroupScope.autocomplete.selectedItem = expression[vm.prefix + 'ProductGroup__r'];
	            }
	        }
	
	        if (expression[vm.prefix + 'ExpressionType__c'] === vm.fieldExpressionConstants.Rollup) {
	            expression[vm.prefix + 'ParentField__c'] = vm.prefix + 'LineItemId__c';
	        }
	        /** Set expression value */
	        expression[vm.prefix + 'ConditionExpression__c'] = applicationService.updateExpression(true, expression[vm.prefix + 'ConditionExpression__c']);
	        expression[vm.prefix + 'Expression__c'] = applicationService.updateExpression(true, expression[vm.prefix + 'Expression__c']);
	        expression = setUpdateObject(expression);
	
	        return expression;
	    }
	
	    /**
	     * - User message management section
	     */
	    vm.alerts = [];
	
	    function addAlert(message, type) {
	        vm.alerts = [];
	        vm.alerts.push({
	            msg: message,
	            type: type
	        });
	    }
	
	    vm.closeAlert = (index) => {
	        vm.alerts.splice(index, 1);
	    };
	
	    $scope.$on('$stateChangeStart', (e, toState, toParams) => {
	        if (toState.name === 'app.expression.field-list' || toState.name === 'app.expression.rollup-list' || !vm.expressionForm.$dirty) {
	            return true;
	        } else {
	            e.preventDefault();
	            if (vm.expressionForm.$valid)
	                vm.pageSave(toState, toParams);
	            else
	                vm.expressionForm.$setSubmitted();
	        }
	    });
	
	    /**
	     * Create New Field Expression
	     */
	    $scope.$on(fieldExpressionConstants.NEW_FIELD_EXPRESSION, () => {
	        vm.gotoDetailsPage(cpqAdminConstants.NEW);
	    });
	
	    /**
	     * Create New Rollup
	     */
	    $scope.$on(fieldExpressionConstants.NEW_ROLLUP, () => {
	        vm.gotoDetailsPage(cpqAdminConstants.NEW);
	    });
	
	    $scope.$on(fieldExpressionConstants.UPDATE_FIELD_EXPRESSION_CRITERIA_FIELDS, () => {
	        let fieldExpressionId = [vm.expression.Id];
	        if (fieldExpressionId.length) {
	            $mdDialog.show({
	                controller: __webpack_require__(884),
	                template: __webpack_require__(885),
	                parent: angular.element(document.body),
	                controllerAs: 'vm',
	                clickOutsideToClose: false,
	                resolve: {
	                    requestData: () => {
	                        return {
	                            modalTitle: vm.labels.UpdateFieldExpressionCriteriaFields,
	                            subTitle: vm.labels.UpdateFieldExpressionCriteriaFields,
	                            data: fieldExpressionId
	                        }
	                    }
	                }
	            });
	        }
	    });
	
	    function gotoDetailsPage(id) {
	        $state.go(vm.stateName, {
	            id: id
	        });
	    }
	
	    vm.goToListingPage = () => {
	        $state.go(listPage);
	    };
	
	};
	
	module.exports = detailsController;

/***/ }),
/* 884 */
/***/ (function(module, exports) {

	batchJobsController.$inject = [
	    '$q',
	    '$mdDialog',
	    'i18nService',
	    'fieldExpressionDetailsService',
	    'requestData'
	];
	
	function batchJobsController($q, $mdDialog, i18nService, fieldExpressionDetailsService, requestData) {
	    let vm = this;
	    let reqData = requestData.data;
	    vm.modalTitle = requestData.modalTitle;
	    vm.subTitle = requestData.subTitle;
	    vm.jobStatus = '';
	    vm.labels = i18nService.CustomLabel;
	    vm.init = init;
	
	    vm.cancel = function () {
	        $mdDialog.hide();
	    };
	
	    vm.runJob = function (data) {
	        const defer = $q.defer();
	        fieldExpressionDetailsService.runExpressionCriteriaJob(data).then(() => {
	            vm.jobStatus = vm.labels.Completed;
	            defer.resolve(true);
	        });
	        return defer.promise;
	    }
	
	    function init() {
	        vm.runJob(reqData);
	    }
	
	    vm.init();
	};
	
	module.exports = batchJobsController;

/***/ }),
/* 885 */
/***/ (function(module, exports) {

	module.exports = "<md-dialog layout-padding class=\"jobs-dialog\">\n    <md-toolbar>\n        <div class=\"md-toolbar-tools\">\n            <h2>{{vm.modalTitle}}</h2>\n            <span flex></span>\n            <button class=\"slds-button slds-button--icon\" ng-click=\"vm.cancel()\">\n                <i class=\"material-icons\">clear</i>\n            </button>\n        </div>\n    </md-toolbar>\n    <div>\n        <div class=\"title\">\n            <h3 class=\"text-center\">{{vm.subTitle}}</h3>\n        </div>\n        <br />\n        <div id=\"jobstatus\" class=\"subtitle\">\n            <div>\n                <center>\n                    <img class=\"progressbar\" ng-hide=\"vm.jobStatus === vm.labels.Completed\"/>\n                    <div ng-hide=\"vm.jobStatus === vm.labels.Completed\">{{vm.labels.Processing}}</div>\n                    <div>{{vm.jobStatus}}</div>\n                </center>\n            </div>\n        </div>\n    </div>\n    <div preloader add-to-element=\"true\" loading-text=\"{{vm.labels.LoadingText}}\" data-ng-if=\"vm.showLoader\"></div>\n</md-dialog>"

/***/ }),
/* 886 */
/***/ (function(module, exports) {

	fieldExpressionController.$inject = [
	    '$state',
	    '$scope',
	    'i18nService',
	    'fieldExpressionCommonService',
	    'fieldExpressionConstants'
	];
	
	function fieldExpressionController($state, $scope, i18nService, fieldExpressionCommonService, fieldExpressionConstants) {
	    const vm = this;
	    vm.labels = i18nService.CustomLabel;
	    vm.stateParams = $state.params;
	    vm.setNewState = setNewState;
	    vm.updateTabMenus = updateTabMenus;
	
	    /**
	     * @param  {} stateName
	     */
	    function setNewState(stateName) {
	        vm.currentState = stateName;
	    }
	    setNewState($state.current.name);
	
	    $scope.$on('$stateChangeSuccess', (e, toState, toParams) => {
	        setNewState(toState.name);
	        updateTabMenus();
	    });
	
	    /* Menu for specific Tabs */
	    vm.firstTabMenu = '';
	    vm.tabMenuItems = [];
	    vm.tabMenuLabel = '';
	
	    function updateTabMenus() {
	        const currentState = vm.currentState,
	            currentHash = currentState.split('app.expression.')[1];
	        switch (currentHash) {
	            case fieldExpressionConstants.FIELD_DETAILS_SUBSTATE: {
	                vm.firstTabMenu = vm.labels.NewFieldExpression;
	                vm.tabMenuLabel = fieldExpressionConstants.NEW_FIELD_EXPRESSION;
	                vm.tabMenuItems = [{ 'label': vm.labels.UpdateFieldExpressionCriteriaFields, 'eventName': fieldExpressionConstants.UPDATE_FIELD_EXPRESSION_CRITERIA_FIELDS }];
	                break;
	            }
	            case fieldExpressionConstants.ROLLUP_DETAILS_SUBSTATE: {
	                vm.firstTabMenu = vm.labels.NewRollup;
	                vm.tabMenuLabel = fieldExpressionConstants.NEW_ROLLUP;
	                vm.tabMenuItems = [{ 'label': vm.labels.UpdateFieldExpressionCriteriaFields, 'eventName': fieldExpressionConstants.UPDATE_FIELD_EXPRESSION_CRITERIA_FIELDS }];
	                break;
	            }
	            default: {
	                vm.tabFirstMenu = '';
	                vm.tabMenuItems = [{ 'label': vm.labels.UpdateFieldExpressionCriteriaFields, 'eventName': fieldExpressionConstants.UPDATE_FIELD_EXPRESSION_CRITERIA_FIELDS }];
	                break;
	            }
	        }
	    }
	
	    vm.tabMenuClicked = (menuName) => {
	        $scope.$broadcast(menuName);
	    };
	
	    $scope.$watch(fieldExpressionCommonService.getSelectedFieldExpression, (newValue, oldValue) => {
	        if (newValue && oldValue) {
	            vm.selectedExpression = newValue;
	        }
	    }, true);
	}
	
	module.exports = fieldExpressionController;


/***/ }),
/* 887 */
/***/ (function(module, exports) {

	
		const constants = {
			/*
			 * This object can be any level nested depending on modularity we want to achieve 
			 * - Either per page
			 * - Per standalone functionality
			 */
			'NEW': 'new',
			'NUMBER_OF_RECORDS_PER_CHUNK': 50,
			'NEXT': 'next',
			'PRODUCT': 'Product',
			'PRODUCTGROUP': 'Product Group',
			'HEADER_LEVEL': 'Header Level',
			'FIELD_UPDATE': 'Field Update',
			'NEW_FIELD_EXPRESSION': 'New Field Expression',
			'UPDATE_FIELD_EXPRESSION_CRITERIA_FIELDS': 'UpdateFieldExpressionCriteriaFields',
			'FIELD_LIST_STATE': 'app.expression.field-list',
			'FIELD_DETAILS_STATE': 'app.expression.field-details',
			'RECORD_UPDATE': 'Record Update',
			'ROLLUP': 'Rollup',
			'ROLLUP_LIST_STATE': 'app.expression.rollup-list',
			'ROLLUP_DETAILS_STATE': 'app.expression.rollup-details',
			'NEW_ROLLUP': 'New Rollup',
			'SUM': 'SUM',
			'AVG': 'AVG',
			'MIN': 'MIN',
			'MAX': 'MAX',
			'OR': 'OR',
			'AND': 'AND',
			'FIELD_DETAILS_SUBSTATE': 'field-details',
			'ROLLUP_DETAILS_SUBSTATE': 'rollup-details',
			'FIELD_PATH': 'app.expression.field'
		};
	
		module.exports = constants;

/***/ }),
/* 888 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"field-expressions\">\n    <div class=\"field-expressions-main-container\">\n        <div class=\"field-expressions-header title-bar\">\n            <div class=\"field-expressions-title-container title\">\n                <div class=\"field-expressions-info\">\n                    <span class=\"title\">{{vm.selectedExpression.Name}}</span>\n                </div>\n            </div>\n            <div id=\"navbar\">\n                <expression-sub-menu state-name=\"vm.currentState\"></expression-sub-menu>\n                <!-- Product menu bar with its values -->\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"listProductBtn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.tabMenuClicked(vm.tabMenuLabel)\" data-ng-if=\"vm.firstTabMenu !== '' \">{{vm.firstTabMenu}}</button>\n                        <div class=\"drop drop-menu\" data-ng-if=\"::vm.tabMenuItems.length > 0\">\n                            <md-menu md-offset=\"50 50\">\n                                <button aria-label=\"Open demo menu\" class=\"slds-button slds-button--icon\" ng-click=\"$mdOpenMenu($event)\">\n                                    <i class=\"material-icons\">more_vert</i>\n                                </button>\n                                <md-menu-content width=\"2\">\n                                    <md-menu-item data-ng-repeat=\"menu in ::vm.tabMenuItems\">\n                                        <md-button data-ng-click=\"vm.tabMenuClicked(menu.eventName)\">\n                                            <div layout=\"row\" flex>\n                                                <p flex>{{::menu.label}}</p>\n                                            </div>\n                                        </md-button>\n                                    </md-menu-item>\n                                </md-menu-content>\n                            </md-menu>\n                        </div>\n                    </div>\n                </ul>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"field-expressions-center-container\">\n            <!-- Content layout starts -->\n            <div ui-view=\"fieldExpressionsContainer\" class=\"field-expressions-container\"></div>\n            <!-- Content layout ends -->\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 889 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    __webpack_require__(890);
	    
	    module.exports = angular.module('cpqAdmin.currencyExchangeRate', [
	
	            'cpqAdmin.currencyExchangeRate.common.services'
	        ])
	        .controller('currencyExchangeRateController', __webpack_require__(892))
	        .constant('currencyExchangeRateConstants', __webpack_require__(893))
	        .config(['$stateProvider', function($stateProvider) {
	            $stateProvider.state('app.currencyExchangeRate', {
	                url: '/currencyExchangeRate',
	                //abstract: true,
	                views: {
	                    'pageContent@': {
	                        template: __webpack_require__(894),
	                        controller: 'currencyExchangeRateController',
	                        controllerAs: 'vm'
	                    }
	                },
	                resolve: {
	                    allPicklists: ['apiCallsService', function(apiCallsService) {
	                        return apiCallsService.getSObjectPicklistFields('DatedExchangeRate__c', null);
	                    }]
	                }
	            });
	        }]);
	
	})();


/***/ }),
/* 890 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    module.exports = angular.module('cpqAdmin.currencyExchangeRate.common.services', [])
	        .service('currencyExchangeRateCommonService', __webpack_require__(891));
	        
	})();


/***/ }),
/* 891 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    formulaFieldCommonServices.$inject = [
	        '$q',
	        'systemConstants',
	        'remoteService'
	    ];
	
	    function formulaFieldCommonServices(
	        $q,
	        systemConstants,
	        remoteService
	    ) {
	
	        function getPrefixedAttribute(attribute) {
	            var prefix = systemConstants.nsPrefix || '';
	            // trim() might notbe needed. Lets just be sure not to have empty spaces.
	            return (prefix + attribute).trim();
	        }
	
	        function saveDatedExchangeRates(exchangeRates) {
	            if (exchangeRates && exchangeRates.length > 0) {
	                exchangeRates.forEach((rate) => {
	                    delete rate.attributes;
	                    delete rate.hasError;
	                    delete rate[getPrefixedAttribute('NextStartDate__c')];
	                });
	                return remoteService.updateDatedExchangeRates(exchangeRates);
	            } else {
	                var deferQ = $q.defer();
	                deferQ.resolve(true);
	                return deferQ.promise;
	            }
	        }
	
	        function deleteDatedExchangeRates(exchangeRateId) {
	            var request = [exchangeRateId];
	            return remoteService.deleteDatedExchangeRates(request);
	        }
	
	        var service = {
	            saveDatedExchangeRates: saveDatedExchangeRates,
	            deleteDatedExchangeRates: deleteDatedExchangeRates
	        };
	        return service;
	    }
	
	    module.exports = formulaFieldCommonServices;
	})();


/***/ }),
/* 892 */
/***/ (function(module, exports) {

	(function() {
	    'use strict';
	
	    formulaFieldController.$inject = [
	        '$mdDialog',
	        'i18nService',
	        'systemConstants',
	        'cpqAdminConstants',
	        'currencyExchangeRateConstants',
	        'apiCallsService',
	        'allPicklists',
	        'lodash',
	        'currencyExchangeRateCommonService',
	        'moment'
	    ];
	
	    function formulaFieldController(
	        $mdDialog,
	        i18nService,
	        systemConstants,
	        cpqAdminConstants,
	        currencyExchangeRateConstants,
	        apiCallsService,
	        allPicklists,
	        _,
	        currencyExchangeRateCommonService,
	        moment
	    ) {
	        var vm = this;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	        vm.exchangeRates = [];
	        let centerPageNumber = 1;
	        vm.disableCenterLeftBtn = true;
	        vm.disableCenterRightBtn = true;
	        vm.alerts = [];
	
	        function onLoad() {
	            const currencyPicklist = _.find(allPicklists, (field) => { return field.FieldName === 'CurrencyIsoCode' });
	            vm.currencies = { PicklistValues: currencyPicklist.PicklistValues || [] };
	            const rateTypePicklist = _.find(allPicklists, (field) => { return field.FieldName === vm.prefix + 'RateType__c' });
	            vm.rateTypes = { PicklistValues: rateTypePicklist.PicklistValues || [] };
	            vm.orgCurrency = _.find(vm.currencies.PicklistValues, (currency) => {
	                return currency.defaultValue;
	            }).value;
	            loadExchangeRates();
	        }
	
	        vm.getExchangeRates = function(type) {
	            /* Save and then load the next / previous items */
	            
	            if (vm.currencyExchangeRateForm.$valid && validateData()) {
	                currencyExchangeRateCommonService.saveDatedExchangeRates(angular.copy(vm.exchangeRates)).then((response) => {
	                    if (response) {
	                        addAlert(vm.labels.SavedSuccessfully, cpqAdminConstants.SUCCESS);
	                        if (type === 'next') {
	                            centerPageNumber++;
	                        } else {
	                            centerPageNumber--;
	                        }
	                        loadExchangeRates();
	                    }
	                }, (error) => {
	                    addAlert(error.message, cpqAdminConstants.DANGER);
	                });
	            }
	        };
	
	        function updateCenterPaginationcomponent() {
	            if (centerPageNumber > 1) {
	                vm.disableCenterLeftBtn = false;
	            }
	            if (vm.exchangeRates.length < currencyExchangeRateConstants.numberOfExchangeRatesPerChunk) {
	                vm.disableCenterRightBtn = true;
	            } else {
	                if (centerPageNumber > 1) {
	                    vm.disableCenterRightBtn = false;
	                } else {
	                    vm.disableCenterRightBtn = false;
	                    vm.disableCenterLeftBtn = true;
	                }
	            }
	        }
	
	        function loadExchangeRates() {
	            const request = {
	                autocomplete: {
	                    sObjectName: vm.prefix + 'DatedExchangeRate__c'
	                },
	                numberOfRecordsPerChunk: currencyExchangeRateConstants.numberOfExchangeRatesPerChunk,
	                otherFields: [
	                    'CurrencyIsoCode',
	                    vm.prefix + 'ConversionRate__c',
	                    vm.prefix + 'NextStartDate__c',
	                    vm.prefix + 'RateType__c',
	                    vm.prefix + 'StartDate__c',
	                ],
	                chunkNumber: centerPageNumber,
	                sortDirection: 'DESC',
	                sortField: vm.prefix + 'StartDate__c'
	            };
	            apiCallsService.searchSObjectRecords('', request).then((data) => {
	                if (data && data.length > 0) {
	                    vm.exchangeRates = data;
	                    convertDates(true);
	                    updateCenterPaginationcomponent();
	                } else {
	                    vm.disableCenterRightBtn = true;
	                    centerPageNumber--;
	                }
	            });
	        }
	
	        function convertDates(isGet) {
	            vm.exchangeRates.forEach((rate, index) => {
	                if (isGet) {
	                    if (rate[vm.prefix + 'NextStartDate__c']) {
	                        let endDate = new Date(rate[vm.prefix + 'NextStartDate__c']);
	                        if (index > 0) {
	                            endDate.setDate(endDate.getDate() - 1); //we are showing as end date on UI
	                        }
	                        rate[vm.prefix + 'NextStartDate__c'] = moment(endDate).format("YYYY-MM-DD");
	                    }
	                }
	            });
	        }
	
	        vm.pageSave = function() {
	            if (vm.currencyExchangeRateForm.$valid && vm.currencyExchangeRateForm.$dirty && validateData()) {
	                currencyExchangeRateCommonService.saveDatedExchangeRates(angular.copy(vm.exchangeRates)).then((response) => {
	                    if (response) {
	                        addAlert(vm.labels.SavedSuccessfully, cpqAdminConstants.SUCCESS);
	                        loadExchangeRates();
	                    }
	                }, (error) => {
	                    addAlert(error.message, cpqAdminConstants.DANGER);
	                });
	            }
	        };
	
	        vm.addNewConversion = function(index) {
	            const newConversion = {
	                CurrencyIsoCode: ''
	            };
	            if (index >= 0) {
	                vm.exchangeRates.splice(index+1, 0, newConversion);
	            } else {
	                vm.exchangeRates.push(newConversion);
	            }
	            vm.currencyExchangeRateForm.$setDirty();
	        };
	
	        function validateData() {
	            const errorIndex = _.findIndex(vm.exchangeRates, (rate) => {
	                return (angular.isUndefined(rate.CurrencyIsoCode)
	                            || angular.isUndefined(rate[vm.prefix + 'RateType__c'])
	                            || angular.isUndefined(rate[vm.prefix + 'StartDate__c'])
	                            || angular.isUndefined(rate[vm.prefix + 'ConversionRate__c']));
	            });
	            const isValid = errorIndex > -1 ? false : true;
	            if (!isValid) {
	                vm.exchangeRates[errorIndex].hasError = !isValid;
	                if (!isValid) {
	                    addAlert(vm.labels.RowRequiredFieldsMessage, cpqAdminConstants.DANGER);
	                }
	            }
	            return isValid;
	        }
	
	        function addAlert(message, type) {
	            vm.alerts = [];
	            vm.alerts.push({
	                msg: message,
	                type: type
	            });
	            document.querySelector('.exchange-rates-detail-block').scrollTop = 0;
	        }
	
	        vm.closeAlert = function(index) {
	            vm.alerts.splice(index, 1);
	        };
	
	        vm.showRemoveConfirmation = function(ev, id, index) {
	            var confirm = $mdDialog.confirm()
	                            .title(vm.labels.DeleteMessageTitle)
	                            .textContent(vm.labels.DeleteMessageBody)
	                            .targetEvent(ev)
	                            .ok(vm.labels.Ok)
	                            .cancel(vm.labels.Cancel);
	            $mdDialog.show(confirm).then(function() {
	                if (!id) {
	                    vm.exchangeRates.splice(index, 1);
	                } else {
	                    currencyExchangeRateCommonService.deleteDatedExchangeRates(id).then((response) => {
	                        if (response) {
	                            vm.exchangeRates.splice(index, 1);
	                        }
	                    });
	                }
	            });
	            
	        };
	
	        onLoad();
	    }
	
	    module.exports = formulaFieldController;
	})();


/***/ }),
/* 893 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		var constants = {
			/*
			 * This object can be any level nested depending on modularity we want to achieve 
			 * - Either per page
			 * - Per standalone functionality
			 */
			'new': 'new',
			'update': 'update',
			'numberOfExchangeRatesPerChunk': 25,
			'maxLength': 80
		};
	
		module.exports = constants;
	
	})();

/***/ }),
/* 894 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"exchange-rate\">\n    <div class=\"exchange-rate-main-container\">\n        <div class=\"exchange-rate-header title-bar\">\n            <div class=\"exchange-rate-title-container title\">\n                {{vm.labels.DatedCurrencyExchangeRates}}\n            </div>\n            <div id=\"navbar\">\n                <ul class=\"nav navbar-nav navbar-right\">\n                    <div class=\"list-product-btn\">\n                        <button type=\"button\" class=\"slds-button slds-button_brand pull-left\" data-ng-click=\"vm.addNewConversion()\">{{vm.labels.AddNewConversion}}</button>\n                    </div>\n                </ul>\n            </div>\n            <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"exchange-rate-center-container\">\n            <!-- Content layout starts -->\n            <div class=\"exchange-rate-container\">\n                <div class=\"sub-page-container\">\n                    <div class=\"exchange-rates-detail-container\">\n                        <div class=\"exchange-rates-detail-block\">\n                            <uib-alert ng-repeat=\"alert in vm.alerts\" type=\"{{alert.type}}\" class=\"text-center\" close=\"vm.closeAlert($index)\" dismiss-on-timeout=\"4000\">{{alert.msg}}</uib-alert>\n                            <form class=\"exchange-rates-detail-form\" novalidate name=\"vm.currencyExchangeRateForm\">\n                                <div class=\"price-rule-table-header\" layout=\"row\">\n                                    <div flex=\"5\">{{vm.labels.Action}}</div>\n                                    <div flex=\"15\">{{vm.labels.CurrencyFrom}}</div>\n                                    <div flex=\"15\">{{vm.labels.CurrencyTo}}</div>\n                                    <div flex=\"15\">{{vm.labels.ExchangeRate}}</div>\n                                    <div flex=\"15\">{{vm.labels.RateType}}</div>\n                                    <div flex=\"15\">{{vm.labels.StartDate}}</div>\n                                    <div flex=\"15\">{{vm.labels.EndDate}}</div>\n                                </div>\n                                <div class=\"price-rule-table-body\">\n                                    <ul class=\"price-rule-entry-list\">\n                                        <li ng-repeat=\"item in vm.exchangeRates\" class=\"individual-row\" ng-class=\"{'error': item.hasError}\" layout=\"row\">\n                                            <div class=\"btn-group\" role=\"group\" aria-label=\"...\" flex=\"5\">\n                                                <button class=\"slds-button slds-button--icon dropdown-toggle\" data-toggle=\"dropdown\">\n                                                    <i class=\"material-icons\">more_vert</i>\n                                                </button>\n                                                <ul class=\"dropdown-menu\">\n                                                    <li data-ng-click=\"vm.showRemoveConfirmation($event, item.Id, $index)\" class=\"action-Menu\">\n                                                        <i class=\"material-icons\">clear</i>\n                                                        <span class=\"remove-label\">{{vm.labels.Remove}}</span>\n                                                    </li>\n                                                    <li class=\"action-Menu\" data-ng-click=\"vm.addNewConversion($index)\">\n                                                        <i class=\"material-icons\">add</i>\n                                                        <span class=\"add-label\">{{vm.labels.Add}}</span>\n                                                    </li>\n                                                </ul>\n                                            </div>\n                                            <div class=\"item\" flex=\"15\">\n                                                <material-form-field \n                                                    model=\"vm.orgCurrency\"\n                                                    field-type=\"PICKLIST\"\n                                                    is-editable=\"true\"\n                                                    properties=\"vm.currencies\"\n                                                    field-label=\"''\"\n                                                    is-disabled=\"true\">\n                                                </material-form-field>\n                                            </div>\n                                            <div class=\"item\" flex=\"15\">\n                                                <material-form-field\n                                                    model=\"item.CurrencyIsoCode\"\n                                                    field-type=\"PICKLIST\"\n                                                    is-editable=\"true\"\n                                                    properties=\"vm.currencies\"\n                                                    field-label=\"''\">\n                                                </material-form-field>\n                                            </div>\n                                            <div class=\"item\" flex=\"15\">\n                                                <material-form-field model=\"item[vm.prefix + 'ConversionRate__c']\" field-type=\"double\" is-editable=\"true\" field-label=\"''\">\n                                                </material-form-field>\n                                            </div>\n                                            <div class=\"item\" flex=\"15\">\n                                                <material-form-field model=\"item[vm.prefix + 'RateType__c']\" field-type=\"PICKLIST\" is-editable=\"true\" properties=\"vm.rateTypes\" field-label=\"''\">\n                                                </material-form-field>\n                                            </div>\n                                            <div class=\"item dimension-date-range-field\" flex=\"15\">\n                                                <material-form-field model=\"item[vm.prefix + 'StartDate__c']\"\n                                                    field-type=\"DATETIME\"\n                                                    is-editable=\"true\"\n                                                    field-label=\"''\">\n                                                </material-form-field>\n                                            </div>\n                                            <div class=\"item dimension-date-range-field\" flex=\"15\">\n                                                <material-form-field model=\"item[vm.prefix + 'NextStartDate__c']\"\n                                                    field-type=\"DATETIME\"\n                                                    is-editable=\"true\"\n                                                    field-label=\"''\"\n                                                    is-disabled=\"true\">\n                                                </material-form-field>\n                                            </div>\n                                        </li>\n                                    </ul>\n                                </div>\n                            </form>\n                            <div class=\"details-footer\">\n                                <div layout=\"row\" class=\"container-fluid\">\n                                    <div flex=\"55\">\n                                        <div class=\"btn-group\" role=\"group\" aria-label=\"...\">\n                                            <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableCenterLeftBtn\" data-ng-click=\"vm.getExchangeRates('previous')\">\n                                                <span class=\"fa fa-chevron-left\" aria-hidden=\"true\"></span></button>\n                                            <button type=\"button\" class=\"slds-button slds-button_neutral\" data-ng-disabled=\"vm.disableCenterRightBtn\" data-ng-click=\"vm.getExchangeRates('next')\">\n                                                <span class=\"fa fa-chevron-right\" aria-hidden=\"true\"></span>\n                                            </button>\n                                        </div>\n                                    </div>\n                                    <div flex=\"45\">\n                                        <a class=\"slds-button slds-button_brand\" data-ng-click=\"vm.pageSave()\">Save</a>                                       \n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<modal-dialog data-ng-if=\"showModalPop\" config=\"showIdleError\"></modal-dialog>\n"

/***/ }),
/* 895 */
/***/ (function(module, exports, __webpack_require__) {

	(function() {
	    'use strict';
	
	    var appConfig = function(moment, $mdDateLocaleProvider, $mdIconProvider, $stateProvider, $urlRouterProvider, KeepaliveProvider, IdleProvider, $mdThemingProvider) {
	
	        // Defaults to product listing page with selected view
	        $urlRouterProvider.otherwise('/app/list');
	
	        $mdIconProvider.defaultFontSet('fa');
	
	        var dateFormat = 'MM/DD/YYYY';
	        $mdDateLocaleProvider.formatDate = function(date) {
	            return date ? moment(date).format(dateFormat) : '';
	        };
	
	        $mdDateLocaleProvider.parseDate = function(dateString) {
	            var m = moment(dateString, dateFormat, true);
	            return m.isValid() ? m.toDate() : new Date(NaN);
	        };
	
	        $stateProvider.state('app', {
	                url: '/app',
	                abstract: true
	            })
	            .state('404', {
	                url: '/file-not-found',
	                template: __webpack_require__(896)
	            });
	
	        /* TODO : Usage of this below code is higly unlikey to happen . So we might have to refactor */
	        var blueTheme = $mdThemingProvider.theme('blueTheme', 'default');
	        var bluePalette = $mdThemingProvider.extendPalette('blue', {
	            '500': '#03A9F4'
	        });
	
	        $mdThemingProvider.definePalette('bluePalette', bluePalette);
	        blueTheme.primaryPalette('bluePalette');
	    };
	
	    appConfig.$inject = [
	        'moment',
	        '$mdDateLocaleProvider',
	        '$mdIconProvider',
	        '$stateProvider',
	        '$urlRouterProvider',
	        'KeepaliveProvider',
	        'IdleProvider',
	        '$mdThemingProvider'
	    ];
	
	    module.exports = appConfig;
	})();

/***/ }),
/* 896 */
/***/ (function(module, exports) {

	module.exports = "<div class=\"error-container\">\n    <div class=\"error-body\">\n        <p class=\"error-tagline\"> OOPS! COULD NOT FIND IT</p>\n        <div class=\"error-code\">\n            <span>4</span>\n            <span class=\"green\">0</span>\n            <span>4</span>\n        </div>\n        <br>\n        <div class=\"redirection\">\n            <a ui-sref=\"app.\" class=\"slds-button slds-button_brand\">Back to List</a>\n        </div>\n    </div>\n</div>\n"

/***/ }),
/* 897 */
/***/ (function(module, exports, __webpack_require__) {

	var moment = module.exports = __webpack_require__(898);
	moment.tz.load(__webpack_require__(899));


/***/ }),
/* 898 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//! moment-timezone.js
	//! version : 0.5.27
	//! Copyright (c) JS Foundation and other contributors
	//! license : MIT
	//! github.com/moment/moment-timezone
	
	(function (root, factory) {
		"use strict";
	
		/*global define*/
		if (typeof module === 'object' && module.exports) {
			module.exports = factory(__webpack_require__(162)); // Node
		} else if (true) {
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(162)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));                 // AMD
		} else {
			factory(root.moment);                        // Browser
		}
	}(this, function (moment) {
		"use strict";
	
		// Do not load moment-timezone a second time.
		// if (moment.tz !== undefined) {
		// 	logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
		// 	return moment;
		// }
	
		var VERSION = "0.5.27",
			zones = {},
			links = {},
			names = {},
			guesses = {},
			cachedGuess;
	
		if (!moment || typeof moment.version !== 'string') {
			logError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');
		}
	
		var momentVersion = moment.version.split('.'),
			major = +momentVersion[0],
			minor = +momentVersion[1];
	
		// Moment.js version check
		if (major < 2 || (major === 2 && minor < 6)) {
			logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
		}
	
		/************************************
			Unpacking
		************************************/
	
		function charCodeToInt(charCode) {
			if (charCode > 96) {
				return charCode - 87;
			} else if (charCode > 64) {
				return charCode - 29;
			}
			return charCode - 48;
		}
	
		function unpackBase60(string) {
			var i = 0,
				parts = string.split('.'),
				whole = parts[0],
				fractional = parts[1] || '',
				multiplier = 1,
				num,
				out = 0,
				sign = 1;
	
			// handle negative numbers
			if (string.charCodeAt(0) === 45) {
				i = 1;
				sign = -1;
			}
	
			// handle digits before the decimal
			for (i; i < whole.length; i++) {
				num = charCodeToInt(whole.charCodeAt(i));
				out = 60 * out + num;
			}
	
			// handle digits after the decimal
			for (i = 0; i < fractional.length; i++) {
				multiplier = multiplier / 60;
				num = charCodeToInt(fractional.charCodeAt(i));
				out += num * multiplier;
			}
	
			return out * sign;
		}
	
		function arrayToInt (array) {
			for (var i = 0; i < array.length; i++) {
				array[i] = unpackBase60(array[i]);
			}
		}
	
		function intToUntil (array, length) {
			for (var i = 0; i < length; i++) {
				array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
			}
	
			array[length - 1] = Infinity;
		}
	
		function mapIndices (source, indices) {
			var out = [], i;
	
			for (i = 0; i < indices.length; i++) {
				out[i] = source[indices[i]];
			}
	
			return out;
		}
	
		function unpack (string) {
			var data = string.split('|'),
				offsets = data[2].split(' '),
				indices = data[3].split(''),
				untils  = data[4].split(' ');
	
			arrayToInt(offsets);
			arrayToInt(indices);
			arrayToInt(untils);
	
			intToUntil(untils, indices.length);
	
			return {
				name       : data[0],
				abbrs      : mapIndices(data[1].split(' '), indices),
				offsets    : mapIndices(offsets, indices),
				untils     : untils,
				population : data[5] | 0
			};
		}
	
		/************************************
			Zone object
		************************************/
	
		function Zone (packedString) {
			if (packedString) {
				this._set(unpack(packedString));
			}
		}
	
		Zone.prototype = {
			_set : function (unpacked) {
				this.name       = unpacked.name;
				this.abbrs      = unpacked.abbrs;
				this.untils     = unpacked.untils;
				this.offsets    = unpacked.offsets;
				this.population = unpacked.population;
			},
	
			_index : function (timestamp) {
				var target = +timestamp,
					untils = this.untils,
					i;
	
				for (i = 0; i < untils.length; i++) {
					if (target < untils[i]) {
						return i;
					}
				}
			},
	
			parse : function (timestamp) {
				var target  = +timestamp,
					offsets = this.offsets,
					untils  = this.untils,
					max     = untils.length - 1,
					offset, offsetNext, offsetPrev, i;
	
				for (i = 0; i < max; i++) {
					offset     = offsets[i];
					offsetNext = offsets[i + 1];
					offsetPrev = offsets[i ? i - 1 : i];
	
					if (offset < offsetNext && tz.moveAmbiguousForward) {
						offset = offsetNext;
					} else if (offset > offsetPrev && tz.moveInvalidForward) {
						offset = offsetPrev;
					}
	
					if (target < untils[i] - (offset * 60000)) {
						return offsets[i];
					}
				}
	
				return offsets[max];
			},
	
			abbr : function (mom) {
				return this.abbrs[this._index(mom)];
			},
	
			offset : function (mom) {
				logError("zone.offset has been deprecated in favor of zone.utcOffset");
				return this.offsets[this._index(mom)];
			},
	
			utcOffset : function (mom) {
				return this.offsets[this._index(mom)];
			}
		};
	
		/************************************
			Current Timezone
		************************************/
	
		function OffsetAt(at) {
			var timeString = at.toTimeString();
			var abbr = timeString.match(/\([a-z ]+\)/i);
			if (abbr && abbr[0]) {
				// 17:56:31 GMT-0600 (CST)
				// 17:56:31 GMT-0600 (Central Standard Time)
				abbr = abbr[0].match(/[A-Z]/g);
				abbr = abbr ? abbr.join('') : undefined;
			} else {
				// 17:56:31 CST
				// 17:56:31 GMT+0800 (台北標準時間)
				abbr = timeString.match(/[A-Z]{3,5}/g);
				abbr = abbr ? abbr[0] : undefined;
			}
	
			if (abbr === 'GMT') {
				abbr = undefined;
			}
	
			this.at = +at;
			this.abbr = abbr;
			this.offset = at.getTimezoneOffset();
		}
	
		function ZoneScore(zone) {
			this.zone = zone;
			this.offsetScore = 0;
			this.abbrScore = 0;
		}
	
		ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {
			this.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);
			if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
				this.abbrScore++;
			}
		};
	
		function findChange(low, high) {
			var mid, diff;
	
			while ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {
				mid = new OffsetAt(new Date(low.at + diff));
				if (mid.offset === low.offset) {
					low = mid;
				} else {
					high = mid;
				}
			}
	
			return low;
		}
	
		function userOffsets() {
			var startYear = new Date().getFullYear() - 2,
				last = new OffsetAt(new Date(startYear, 0, 1)),
				offsets = [last],
				change, next, i;
	
			for (i = 1; i < 48; i++) {
				next = new OffsetAt(new Date(startYear, i, 1));
				if (next.offset !== last.offset) {
					change = findChange(last, next);
					offsets.push(change);
					offsets.push(new OffsetAt(new Date(change.at + 6e4)));
				}
				last = next;
			}
	
			for (i = 0; i < 4; i++) {
				offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
				offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
			}
	
			return offsets;
		}
	
		function sortZoneScores (a, b) {
			if (a.offsetScore !== b.offsetScore) {
				return a.offsetScore - b.offsetScore;
			}
			if (a.abbrScore !== b.abbrScore) {
				return a.abbrScore - b.abbrScore;
			}
			if (a.zone.population !== b.zone.population) {
				return b.zone.population - a.zone.population;
			}
			return b.zone.name.localeCompare(a.zone.name);
		}
	
		function addToGuesses (name, offsets) {
			var i, offset;
			arrayToInt(offsets);
			for (i = 0; i < offsets.length; i++) {
				offset = offsets[i];
				guesses[offset] = guesses[offset] || {};
				guesses[offset][name] = true;
			}
		}
	
		function guessesForUserOffsets (offsets) {
			var offsetsLength = offsets.length,
				filteredGuesses = {},
				out = [],
				i, j, guessesOffset;
	
			for (i = 0; i < offsetsLength; i++) {
				guessesOffset = guesses[offsets[i].offset] || {};
				for (j in guessesOffset) {
					if (guessesOffset.hasOwnProperty(j)) {
						filteredGuesses[j] = true;
					}
				}
			}
	
			for (i in filteredGuesses) {
				if (filteredGuesses.hasOwnProperty(i)) {
					out.push(names[i]);
				}
			}
	
			return out;
		}
	
		function rebuildGuess () {
	
			// use Intl API when available and returning valid time zone
			try {
				var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
				if (intlName && intlName.length > 3) {
					var name = names[normalizeName(intlName)];
					if (name) {
						return name;
					}
					logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");
				}
			} catch (e) {
				// Intl unavailable, fall back to manual guessing.
			}
	
			var offsets = userOffsets(),
				offsetsLength = offsets.length,
				guesses = guessesForUserOffsets(offsets),
				zoneScores = [],
				zoneScore, i, j;
	
			for (i = 0; i < guesses.length; i++) {
				zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
				for (j = 0; j < offsetsLength; j++) {
					zoneScore.scoreOffsetAt(offsets[j]);
				}
				zoneScores.push(zoneScore);
			}
	
			zoneScores.sort(sortZoneScores);
	
			return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
		}
	
		function guess (ignoreCache) {
			if (!cachedGuess || ignoreCache) {
				cachedGuess = rebuildGuess();
			}
			return cachedGuess;
		}
	
		/************************************
			Global Methods
		************************************/
	
		function normalizeName (name) {
			return (name || '').toLowerCase().replace(/\//g, '_');
		}
	
		function addZone (packed) {
			var i, name, split, normalized;
	
			if (typeof packed === "string") {
				packed = [packed];
			}
	
			for (i = 0; i < packed.length; i++) {
				split = packed[i].split('|');
				name = split[0];
				normalized = normalizeName(name);
				zones[normalized] = packed[i];
				names[normalized] = name;
				addToGuesses(normalized, split[2].split(' '));
			}
		}
	
		function getZone (name, caller) {
	
			name = normalizeName(name);
	
			var zone = zones[name];
			var link;
	
			if (zone instanceof Zone) {
				return zone;
			}
	
			if (typeof zone === 'string') {
				zone = new Zone(zone);
				zones[name] = zone;
				return zone;
			}
	
			// Pass getZone to prevent recursion more than 1 level deep
			if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
				zone = zones[name] = new Zone();
				zone._set(link);
				zone.name = names[name];
				return zone;
			}
	
			return null;
		}
	
		function getNames () {
			var i, out = [];
	
			for (i in names) {
				if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
					out.push(names[i]);
				}
			}
	
			return out.sort();
		}
	
		function addLink (aliases) {
			var i, alias, normal0, normal1;
	
			if (typeof aliases === "string") {
				aliases = [aliases];
			}
	
			for (i = 0; i < aliases.length; i++) {
				alias = aliases[i].split('|');
	
				normal0 = normalizeName(alias[0]);
				normal1 = normalizeName(alias[1]);
	
				links[normal0] = normal1;
				names[normal0] = alias[0];
	
				links[normal1] = normal0;
				names[normal1] = alias[1];
			}
		}
	
		function loadData (data) {
			addZone(data.zones);
			addLink(data.links);
			tz.dataVersion = data.version;
		}
	
		function zoneExists (name) {
			if (!zoneExists.didShowError) {
				zoneExists.didShowError = true;
					logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
			}
			return !!getZone(name);
		}
	
		function needsOffset (m) {
			var isUnixTimestamp = (m._f === 'X' || m._f === 'x');
			return !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);
		}
	
		function logError (message) {
			if (typeof console !== 'undefined' && typeof console.error === 'function') {
				console.error(message);
			}
		}
	
		/************************************
			moment.tz namespace
		************************************/
	
		function tz (input) {
			var args = Array.prototype.slice.call(arguments, 0, -1),
				name = arguments[arguments.length - 1],
				zone = getZone(name),
				out  = moment.utc.apply(null, args);
	
			if (zone && !moment.isMoment(input) && needsOffset(out)) {
				out.add(zone.parse(out), 'minutes');
			}
	
			out.tz(name);
	
			return out;
		}
	
		tz.version      = VERSION;
		tz.dataVersion  = '';
		tz._zones       = zones;
		tz._links       = links;
		tz._names       = names;
		tz.add          = addZone;
		tz.link         = addLink;
		tz.load         = loadData;
		tz.zone         = getZone;
		tz.zoneExists   = zoneExists; // deprecated in 0.1.0
		tz.guess        = guess;
		tz.names        = getNames;
		tz.Zone         = Zone;
		tz.unpack       = unpack;
		tz.unpackBase60 = unpackBase60;
		tz.needsOffset  = needsOffset;
		tz.moveInvalidForward   = true;
		tz.moveAmbiguousForward = false;
	
		/************************************
			Interface with Moment.js
		************************************/
	
		var fn = moment.fn;
	
		moment.tz = tz;
	
		moment.defaultZone = null;
	
		moment.updateOffset = function (mom, keepTime) {
			var zone = moment.defaultZone,
				offset;
	
			if (mom._z === undefined) {
				if (zone && needsOffset(mom) && !mom._isUTC) {
					mom._d = moment.utc(mom._a)._d;
					mom.utc().add(zone.parse(mom), 'minutes');
				}
				mom._z = zone;
			}
			if (mom._z) {
				offset = mom._z.utcOffset(mom);
				if (Math.abs(offset) < 16) {
					offset = offset / 60;
				}
				if (mom.utcOffset !== undefined) {
					var z = mom._z;
					mom.utcOffset(-offset, keepTime);
					mom._z = z;
				} else {
					mom.zone(offset, keepTime);
				}
			}
		};
	
		fn.tz = function (name, keepTime) {
			if (name) {
				if (typeof name !== 'string') {
					throw new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');
				}
				this._z = getZone(name);
				if (this._z) {
					moment.updateOffset(this, keepTime);
				} else {
					logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
				}
				return this;
			}
			if (this._z) { return this._z.name; }
		};
	
		function abbrWrap (old) {
			return function () {
				if (this._z) { return this._z.abbr(this); }
				return old.call(this);
			};
		}
	
		function resetZoneWrap (old) {
			return function () {
				this._z = null;
				return old.apply(this, arguments);
			};
		}
	
		function resetZoneWrap2 (old) {
			return function () {
				if (arguments.length > 0) this._z = null;
				return old.apply(this, arguments);
			};
		}
	
		fn.zoneName  = abbrWrap(fn.zoneName);
		fn.zoneAbbr  = abbrWrap(fn.zoneAbbr);
		fn.utc       = resetZoneWrap(fn.utc);
		fn.local     = resetZoneWrap(fn.local);
		fn.utcOffset = resetZoneWrap2(fn.utcOffset);
	
		moment.tz.setDefault = function(name) {
			if (major < 2 || (major === 2 && minor < 9)) {
				logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
			}
			moment.defaultZone = name ? getZone(name) : null;
			return moment;
		};
	
		// Cloning a moment should include the _z property.
		var momentProperties = moment.momentProperties;
		if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
			// moment 2.8.1+
			momentProperties.push('_z');
			momentProperties.push('_a');
		} else if (momentProperties) {
			// moment 2.7.0
			momentProperties._z = null;
		}
	
		// INJECT DATA
	
		return moment;
	}));


/***/ }),
/* 899 */
/***/ (function(module, exports) {

	module.exports = {"version":"2019c","zones":["Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q|48e5","Africa/Accra|LMT GMT +0020|.Q 0 -k|012121212121212121212121212121212121212121212121|-26BbX.8 6tzX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE|41e5","Africa/Nairobi|LMT EAT +0230 +0245|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ|47e5","Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0|26e5","Africa/Lagos|LMT WAT|-d.A -10|01|-22y0d.A|17e6","Africa/Bissau|LMT -01 GMT|12.k 10 0|012|-2ldX0 2xoo0|39e4","Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k|26e5","Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6","Africa/Casablanca|LMT +00 +01|u.k 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 e00 28M0 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 28M0 e00 2600 e00 28M0 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0|32e5","Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1y7o0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|85e3","Africa/El_Aaiun|LMT -01 +00 +01|Q.M 10 0 -10|012323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 e00 28M0 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 28M0 e00 2600 e00 28M0 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0|20e4","Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0|84e5","Africa/Juba|LMT CAT CAST EAT|-26.s -20 -30 -30|01212121212121212121212121212121213|-1yW26.s 1zK06.s 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0","Africa/Khartoum|LMT CAT CAST EAT|-2a.8 -20 -30 -30|012121212121212121212121212121212131|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0 HjL0|51e5","Africa/Monrovia|MMT MMT GMT|H.8 I.u 0|012|-23Lzg.Q 28G01.m|11e5","Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0|13e5","Africa/Sao_Tome|LMT GMT WAT|A.J 0 -10|0121|-2le00 4i6N0 2q00","Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00|11e5","Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00|20e5","Africa/Windhoek|+0130 SAST SAST CAT WAT|-1u -20 -30 -20 -10|01213434343434343434343434343434343434343434343434343|-2GJdu 1Ajdu 1cL0 1SqL0 9Io0 16P0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|32e4","America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326","America/Anchorage|AST AWT APT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4","America/Port_of_Spain|LMT AST|46.4 40|01|-2kNvR.U|43e3","America/Araguaina|LMT -03 -02|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0|14e4","America/Argentina/Buenos_Aires|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 A4p0 uL0 1qN0 WL0","America/Argentina/Catamarca|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 7B0 8zb0 uL0","America/Argentina/Cordoba|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0 1qN0 WL0","America/Argentina/Jujuy|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 A4p0 uL0","America/Argentina/La_Rioja|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0","America/Argentina/Mendoza|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232312121321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 ri10 Op0 7TX0 uL0","America/Argentina/Rio_Gallegos|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0","America/Argentina/Salta|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0","America/Argentina/San_Juan|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rld0 m10 8lb0 uL0","America/Argentina/San_Luis|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121212321212|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 vDb0 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0","America/Argentina/Tucuman|CMT -04 -03 -02|4g.M 40 30 20|0121212121212121212121212121212121212121212323232313232123232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 4N0 8BX0 uL0 1qN0 WL0","America/Argentina/Ushuaia|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rkN0 8p0 8zb0 uL0","America/Curacao|LMT -0430 AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d|15e4","America/Asuncion|AMT -04 -03|3O.E 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5","America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0|28e2","America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3","America/Bahia|LMT -03 -02|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0|27e5","America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0|28e4","America/Belem|LMT -03 -02|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|20e5","America/Belize|LMT CST -0530 CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0|57e3","America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0|11e2","America/Boa_Vista|LMT -04 -03|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0|62e2","America/Bogota|BMT -05 -04|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0|90e5","America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e4","America/Cambridge_Bay|-00 MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e2","America/Campo_Grande|LMT -04 -03|3C.s 40 30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|77e4","America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4","America/Caracas|CMT -0430 -04|4r.E 4u 40|01212|-2kV7w.k 28KM2.k 1IwOu kqo0|29e5","America/Cayenne|LMT -04 -03|3t.k 40 30|012|-2mrwu.E 2gWou.E|58e3","America/Panama|CMT EST|5j.A 50|01|-2uduE.o|15e5","America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5","America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4","America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0|12e5","America/Creston|MST PST|70 80|010|-29DR0 43B0|53e2","America/Cuiaba|LMT -04 -03|3I.k 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|54e4","America/Danmarkshavn|LMT -03 -02 GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0|8","America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0|12e3","America/Dawson|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|13e2","America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5","America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|0123425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 JxX1 SMX 1cN0 1cL0 aW10 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e5","America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|0121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 XQp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|10e5","America/Eirunepe|LMT -05 -04|4D.s 50 40|0121212121212121212121212121212121|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0|31e3","America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0|11e5","America/Tijuana|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOO0 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|20e5","America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2","America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Fortaleza|LMT -03 -02|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0|34e5","America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3","America/Godthab|LMT -03 -02|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3","America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2","America/Grand_Turk|KMT EST EDT AST|57.a 50 40 40|01212121212121212121212121212121212121212121212121212121212121212121212121232121212121212121212121212121212121212121|-2l1uQ.O 2HHBQ.O 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 5Ip0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2","America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0|13e5","America/Guayaquil|QMT -05 -04|5e 50 40|0121|-1yVSK 2uILK rz0|27e5","America/Guyana|LMT -0345 -03 -04|3Q.E 3J 30 40|0123|-2dvU7.k 2r6LQ.k Bxbf|80e4","America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4","America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5","America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0|64e4","America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010401054541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 8wn0 1cN0 1cL0 1cN0 1cK0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Inuvik|-00 PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|35e2","America/Iqaluit|-00 EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|67e2","America/Jamaica|KMT EST EDT|57.a 50 40|0121212121212121212121|-2l1uQ.O 2uM1Q.O 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0|94e4","America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|33e3","America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 1nX1 e0X 9vd0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/La_Paz|CMT BST -04|4w.A 3w.A 40|012|-1x37r.o 13b0|19e5","America/Lima|LMT -05 -04|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0|11e6","America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp1 1VaX 3dA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6","America/Maceio|LMT -03 -02|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0|93e4","America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0|22e5","America/Manaus|LMT -04 -03|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0|19e5","America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0|39e4","America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|45e4","America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|44e4","America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|85e2","America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|11e5","America/Metlakatla|PST PWT PPT PDT AKST AKDT|80 70 70 70 90 80|01203030303030303030303030303030304545450454545454545454545454545454545454545454|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1hU10 Rd0 1zb0 Op0 1zb0 Op0 1zb0 uM0 jB0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2","America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6","America/Miquelon|LMT AST -03 -02|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2","America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|64e3","America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|41e5","America/Montevideo|LMT MMT -04 -03 -0330 -0230 -02 -0130|3I.P 3I.P 40 30 3u 2u 20 1u|012343434343434343434343435353636353636375363636363636363636363636363636363636363636363|-2tRUf.9 sVc0 8jcf.9 1db0 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1fAu 1cLu 1o0u 11zu NAu 3jXu zXu Dq0u 19Xu pcu jz0 cm10 19X0 6tB0 1fbu 3o0u jX0 4vB0 xz0 3Cp0 mmu 1a10 IMu Db0 4c10 uL0 1Nd0 An0 1SN0 uL0 mp0 28L0 iPB0 un0 1SN0 xz0 1zd0 Lz0 1zd0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5","America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e5","America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|24e4","America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6","America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|16e2","America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|38e2","America/Noronha|LMT -02 -01|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|30e2","America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3","America/Pangnirtung|-00 AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2","America/Paramaribo|LMT PMT PMT -0330 -03|3E.E 3E.Q 3E.A 3u 30|01234|-2nDUj.k Wqo0.c qanX.I 1yVXN.o|24e4","America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0|42e5","America/Port-au-Prince|PPMT EST EDT|4N 50 40|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5","America/Rio_Branco|LMT -05 -04|4v.c 50 40|01212121212121212121212121212121|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0|31e4","America/Porto_Velho|LMT -04 -03|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|37e4","America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0|24e5","America/Punta_Arenas|SMT -05 -04 -03|4G.K 50 40 30|0102021212121212121232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 blz0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0","America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|842","America/Rankin_Inlet|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e2","America/Recife|LMT -03 -02|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|33e5","America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0|19e4","America/Resolute|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|229","America/Santarem|LMT -04 -03|3C.M 40 30|0121212121212121212121212121212|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0|21e4","America/Santiago|SMT -05 -04 -03|4G.K 50 40 30|010202121212121212321232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0|62e5","America/Santo_Domingo|SDMT EST EDT -0430 AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00|29e5","America/Sao_Paulo|LMT -03 -02|36.s 30 20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|20e6","America/Scoresbysund|LMT -02 -01 +00|1r.Q 20 10 0|0121323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452","America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|90e2","America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4","America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0|16e3","America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0|11e5","America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|656","America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4","America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5","America/Whitehorse|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3","America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|66e4","America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|642","America/Yellowknife|-00 MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3","Antarctica/Casey|-00 +08 +11|0 -80 -b0|01212121|-2q00 1DjS0 T90 40P0 KL0 blz0 3m10|10","Antarctica/Davis|-00 +07 +05|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0|70","Antarctica/DumontDUrville|-00 +10|0 -a0|0101|-U0o0 cfq0 bFm0|80","Antarctica/Macquarie|AEST AEDT -00 +11|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0|1","Antarctica/Mawson|-00 +06 +05|0 -60 -50|012|-CEo0 2fyk0|60","Pacific/Auckland|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5","Antarctica/Palmer|-00 -03 -04 -02|0 30 40 20|0121212121213121212121212121212121212121212121212121212121212121212121212121212121|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|40","Antarctica/Rothera|-00 -03|0 30|01|gOo0|130","Antarctica/Syowa|-00 +03|0 -30|01|-vs00|20","Antarctica/Troll|-00 +00 +02|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40","Antarctica/Vostok|-00 +06|0 -60|01|-tjA0|25","Europe/Oslo|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e4","Asia/Riyadh|LMT +03|-36.Q -30|01|-TvD6.Q|57e5","Asia/Almaty|LMT +05 +06 +07|-57.M -50 -60 -70|012323232323232323232321232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|15e5","Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e5","Asia/Anadyr|LMT +12 +13 +14 +11|-bN.U -c0 -d0 -e0 -b0|01232121212121212121214121212121212121212121212121212121212141|-1PcbN.U eUnN.U 23CL0 1db0 2q10 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|13e3","Asia/Aqtau|LMT +04 +05 +06|-3l.4 -40 -50 -60|012323232323232323232123232312121212121212121212|-1Pc3l.4 eUnl.4 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|15e4","Asia/Aqtobe|LMT +04 +05 +06|-3M.E -40 -50 -60|0123232323232323232321232323232323232323232323232|-1Pc3M.E eUnM.E 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|27e4","Asia/Ashgabat|LMT +04 +05 +06|-3R.w -40 -50 -60|0123232323232323232323212|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0|41e4","Asia/Atyrau|LMT +03 +05 +06 +04|-3r.I -30 -50 -60 -40|01232323232323232323242323232323232324242424242|-1Pc3r.I eUor.I 24PW0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 2sp0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0","Asia/Baghdad|BMT +03 +04|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0|66e5","Asia/Qatar|LMT +04 +03|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8|96e4","Asia/Baku|LMT +03 +04 +05|-3j.o -30 -40 -50|01232323232323232323232123232323232323232323232323232323232323232|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 9Je0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5","Asia/Bangkok|BMT +07|-6G.4 -70|01|-218SG.4|15e6","Asia/Barnaul|LMT +06 +07 +08|-5z -60 -70 -80|0123232323232323232323212323232321212121212121212121212121212121212|-21S5z pCnz 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 p90 LE0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0","Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5","Asia/Bishkek|LMT +05 +06 +07|-4W.o -50 -60 -70|012323232323232323232321212121212121212121212121212|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2e00 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0|87e4","Asia/Brunei|LMT +0730 +08|-7D.E -7u -80|012|-1KITD.E gDc9.E|42e4","Asia/Kolkata|MMT IST +0630|-5l.a -5u -6u|012121|-2zOtl.a 1r2LP.a 1un0 HB0 7zX0|15e6","Asia/Chita|LMT +08 +09 +10|-7x.Q -80 -90 -a0|012323232323232323232321232323232323232323232323232323232323232312|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3re0|33e4","Asia/Choibalsan|LMT +07 +08 +10 +09|-7C -70 -80 -a0 -90|0123434343434343434343434343434343434343434343424242|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0|38e3","Asia/Shanghai|CST CDT|-80 -90|010101010101010101010101010|-1c2w0 Rz0 11d0 1wL0 A10 8HX0 1G10 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 aL0 1tU30 Rb0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0|23e6","Asia/Colombo|MMT +0530 +06 +0630|-5j.w -5u -60 -6u|01231321|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu|22e5","Asia/Dhaka|HMT +0630 +0530 +06 +07|-5R.k -6u -5u -60 -70|0121343|-18LFR.k 1unn.k HB0 m6n0 2kxbu 1i00|16e6","Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|26e5","Asia/Dili|LMT +08 +09|-8m.k -80 -90|01212|-2le8m.k 1dnXm.k 1nfA0 Xld0|19e4","Asia/Dubai|LMT +04|-3F.c -40|01|-21JfF.c|39e5","Asia/Dushanbe|LMT +05 +06 +07|-4z.c -50 -60 -70|012323232323232323232321|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2hB0|76e4","Asia/Famagusta|LMT EET EEST +03|-2f.M -20 -30 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212312121212121212121212121212121212121212121|-1Vc2f.M 2a3cf.M 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0 2Ks0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Asia/Gaza|EET EEST IST IDT|-20 -30 -20 -30|0101010101010101010101010101010123232323232323232323232323232320101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 bXd0 gM0 8Q00 IM0 1wM0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0|18e5","Asia/Hebron|EET EEST IST IDT|-20 -30 -20 -30|010101010101010101010101010101012323232323232323232323232323232010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 bXd0 gM0 8Q00 IM0 1wM0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0|25e4","Asia/Ho_Chi_Minh|LMT PLMT +07 +08 +09|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0|90e5","Asia/Hong_Kong|LMT HKT HKST HKWT JST|-7A.G -80 -90 -8u -90|0123412121212121212121212121212121212121212121212121212121212121212121|-2CFH0 1taO0 Hc0 xUu 9tBu 11z0 1tDu Rc0 1wo0 11A0 1cM0 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|73e5","Asia/Hovd|LMT +06 +07 +08|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|81e3","Asia/Irkutsk|IMT +07 +08 +09|-6V.5 -70 -80 -90|01232323232323232323232123232323232323232323232323232323232323232|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4","Europe/Istanbul|IMT EET EEST +03 +04|-1U.U -20 -30 -30 -40|0121212121212121212121212121212121212121212121234312121212121212121212121212121212121212121212121212121212121212123|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSN0 CL0 mp0 1Vz0 1gN0 8yn0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1ip0 19X0 1ip0 17b0 qdB0 38L0 1jd0 Tz0 l6O0 11A0 WN0 1qL0 TB0 1tX0 U10 1tz0 11B0 1in0 17d0 z90 cne0 pb0 2Cp0 1800 14o0 1dc0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1a00 1fA0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6","Asia/Jakarta|BMT +0720 +0730 +09 +08 WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu|31e6","Asia/Jayapura|LMT +09 +0930 WIT|-9m.M -90 -9u -90|0123|-1uu9m.M sMMm.M L4nu|26e4","Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|012121212121321212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 bXd0 gM0 8Q00 IM0 1wM0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4","Asia/Kabul|+04 +0430|-40 -4u|01|-10Qs0|46e5","Asia/Kamchatka|LMT +11 +12 +13|-ay.A -b0 -c0 -d0|012323232323232323232321232323232323232323232323232323232323212|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|18e4","Asia/Karachi|LMT +0530 +0630 +05 PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy00 1cL0 dK10 11b0 1610 1jX0|24e6","Asia/Urumqi|LMT +06|-5O.k -60|01|-1GgtO.k|32e5","Asia/Kathmandu|LMT +0530 +0545|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g|12e5","Asia/Khandyga|LMT +08 +09 +10 +11|-92.d -80 -90 -a0 -b0|0123232323232323232323212323232323232323232323232343434343434343432|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|66e2","Asia/Krasnoyarsk|LMT +06 +07 +08|-6b.q -60 -70 -80|01232323232323232323232123232323232323232323232323232323232323232|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5","Asia/Kuala_Lumpur|SMT +07 +0720 +0730 +09 +08|-6T.p -70 -7k -7u -90 -80|0123435|-2Bg6T.p 17anT.p l5XE 17bO 8Fyu 1so1u|71e5","Asia/Kuching|LMT +0730 +08 +0820 +09|-7l.k -7u -80 -8k -90|0123232323232323242|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0|13e4","Asia/Macau|LMT CST +09 +10 CDT|-7y.a -80 -90 -a0 -90|012323214141414141414141414141414141414141414141414141414141414141414141|-2CFHy.a 1uqKy.a PX0 1kn0 15B0 11b0 4Qq0 1oM0 11c0 1ko0 1u00 11A0 1cM0 11c0 1o00 11A0 1o00 11A0 1oo0 1400 1o00 11A0 1o00 U00 1tA0 U00 1wo0 Rc0 1wru U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cK0 1cO0 1cK0 1cO0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|57e4","Asia/Magadan|LMT +10 +11 +12|-a3.c -a0 -b0 -c0|012323232323232323232321232323232323232323232323232323232323232312|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Cq0|95e3","Asia/Makassar|LMT MMT +08 +09 WITA|-7V.A -7V.A -80 -90 -80|01234|-21JjV.A vfc0 myLV.A 8ML0|15e5","Asia/Manila|PST PDT JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0|24e6","Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|32e4","Asia/Novokuznetsk|LMT +06 +07 +08|-5M.M -60 -70 -80|012323232323232323232321232323232323232323232323232323232323212|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|55e4","Asia/Novosibirsk|LMT +06 +07 +08|-5v.E -60 -70 -80|0123232323232323232323212323212121212121212121212121212121212121212|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 4eN0|15e5","Asia/Omsk|LMT +05 +06 +07|-4R.u -50 -60 -70|01232323232323232323232123232323232323232323232323232323232323232|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|12e5","Asia/Oral|LMT +03 +05 +06 +04|-3p.o -30 -50 -60 -40|01232323232323232424242424242424242424242424242|-1Pc3p.o eUop.o 23CK0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 1cM0 IM0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|27e4","Asia/Pontianak|LMT PMT +0730 +09 +08 WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu|23e4","Asia/Pyongyang|LMT KST JST KST|-8n -8u -90 -90|012313|-2um8n 97XR 1lTzu 2Onc0 6BA0|29e5","Asia/Qostanay|LMT +04 +05 +06|-4e.s -40 -50 -60|012323232323232323232123232323232323232323232323|-1Pc4e.s eUoe.s 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0","Asia/Qyzylorda|LMT +04 +05 +06|-4l.Q -40 -50 -60|01232323232323232323232323232323232323232323232|-1Pc4l.Q eUol.Q 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3ao0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 zQl0|73e4","Asia/Rangoon|RMT +0630 +09|-6o.L -6u -90|0121|-21Jio.L SmnS.L 7j9u|48e5","Asia/Sakhalin|LMT +09 +11 +12 +10|-9u.M -90 -b0 -c0 -a0|01232323232323232323232423232323232424242424242424242424242424242|-2AGVu.M 1BoMu.M 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 2pB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|58e4","Asia/Samarkand|LMT +04 +05 +06|-4r.R -40 -50 -60|01232323232323232323232|-1Pc4r.R eUor.R 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0|36e4","Asia/Seoul|LMT KST JST KST KDT KDT|-8r.Q -8u -90 -90 -a0 -9u|012343434343151515151515134343|-2um8r.Q 97XV.Q 1m1zu 6CM0 Fz0 1kN0 14n0 1kN0 14L0 1zd0 On0 69B0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0|23e6","Asia/Srednekolymsk|LMT +10 +11 +12|-ae.Q -a0 -b0 -c0|01232323232323232323232123232323232323232323232323232323232323232|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|35e2","Asia/Taipei|CST JST CDT|-80 -90 -90|01020202020202020202020202020202020202020|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0|74e5","Asia/Tashkent|LMT +05 +06 +07|-4B.b -50 -60 -70|012323232323232323232321|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0|23e5","Asia/Tbilisi|TBMT +03 +04 +05|-2X.b -30 -40 -50|0123232323232323232323212121232323232323232323212|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cK0 1cL0 1cN0 1cL0 1cN0 2pz0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0|11e5","Asia/Tehran|LMT TMT +0330 +04 +05 +0430|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6","Asia/Thimphu|LMT +0530 +06|-5W.A -5u -60|012|-Su5W.A 1BGMs.A|79e3","Asia/Tokyo|JST JDT|-90 -a0|010101010|-QJJ0 Rc0 1lc0 14o0 1zc0 Oo0 1zc0 Oo0|38e6","Asia/Tomsk|LMT +06 +07 +08|-5D.P -60 -70 -80|0123232323232323232323212323232323232323232323212121212121212121212|-21NhD.P pxzD.P 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 co0 1bB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Qp0|10e5","Asia/Ulaanbaatar|LMT +07 +08 +09|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|12e5","Asia/Ust-Nera|LMT +08 +09 +12 +11 +10|-9w.S -80 -90 -c0 -b0 -a0|012343434343434343434345434343434343434343434343434343434343434345|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|65e2","Asia/Vladivostok|LMT +09 +10 +11|-8L.v -90 -a0 -b0|01232323232323232323232123232323232323232323232323232323232323232|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4","Asia/Yakutsk|LMT +08 +09 +10|-8C.W -80 -90 -a0|01232323232323232323232123232323232323232323232323232323232323232|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|28e4","Asia/Yekaterinburg|LMT PMT +04 +05 +06|-42.x -3J.5 -40 -50 -60|012343434343434343434343234343434343434343434343434343434343434343|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|14e5","Asia/Yerevan|LMT +03 +04 +05|-2W -30 -40 -50|0123232323232323232323212121212323232323232323232323232323232|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 4RX0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|13e5","Atlantic/Azores|HMT -02 -01 +00 WET|1S.w 20 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121232323232323232323232323232323234323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2ldW0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4","Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e3","Atlantic/Canary|LMT -01 WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4","Atlantic/Cape_Verde|LMT -02 -01|1y.4 20 10|01212|-2ldW0 1eEo0 7zX0 1djf0|50e4","Atlantic/Faroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|49e3","Atlantic/Madeira|FMT -01 +00 +01 WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldX0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e4","Atlantic/Reykjavik|LMT -01 +00 GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0|12e4","Atlantic/South_Georgia|-02|20|0||30","Atlantic/Stanley|SMT -04 -03 -02|3P.o 40 30 20|012121212121212323212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 2mN0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10|21e2","Australia/Sydney|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5","Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5","Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0|20e5","Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|18e3","Australia/Currie|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|746","Australia/Darwin|ACST ACDT|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0|12e4","Australia/Eucla|+0845 +0945|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|368","Australia/Hobart|AEST AEDT|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|21e4","Australia/Lord_Howe|AEST +1030 +1130 +11|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347","Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0|10","Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|39e5","Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|18e5","CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Pacific/Easter|EMT -07 -06 -05|7h.s 70 60 50|012121212121212121212121212123232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 2pA0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0|30e2","CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Europe/Dublin|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g600 14o0 1wo0 17c0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","EST|EST|50|0|","EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","Etc/GMT-0|GMT|0|0|","Etc/GMT-1|+01|-10|0|","Pacific/Port_Moresby|+10|-a0|0||25e4","Etc/GMT-11|+11|-b0|0|","Pacific/Tarawa|+12|-c0|0||29e3","Etc/GMT-13|+13|-d0|0|","Etc/GMT-14|+14|-e0|0|","Etc/GMT-2|+02|-20|0|","Etc/GMT-3|+03|-30|0|","Etc/GMT-4|+04|-40|0|","Etc/GMT-5|+05|-50|0|","Etc/GMT-6|+06|-60|0|","Indian/Christmas|+07|-70|0||21e2","Etc/GMT-8|+08|-80|0|","Pacific/Palau|+09|-90|0||21e3","Etc/GMT+1|-01|10|0|","Etc/GMT+10|-10|a0|0|","Etc/GMT+11|-11|b0|0|","Etc/GMT+12|-12|c0|0|","Etc/GMT+3|-03|30|0|","Etc/GMT+4|-04|40|0|","Etc/GMT+5|-05|50|0|","Etc/GMT+6|-06|60|0|","Etc/GMT+7|-07|70|0|","Etc/GMT+8|-08|80|0|","Etc/GMT+9|-09|90|0|","Etc/UTC|UTC|0|0|","Europe/Amsterdam|AMT NST +0120 +0020 CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|16e5","Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|79e3","Europe/Astrakhan|LMT +03 +04 +05|-3c.c -30 -40 -50|012323232323232323212121212121212121212121212121212121212121212|-1Pcrc.c eUMc.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|10e5","Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5","Europe/London|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6","Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e5","Europe/Prague|CET CEST GMT|-10 -20 0|01010101010101010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 1qM0 11c0 mp0 xA0 mn0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e5","Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|21e5","Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|19e5","Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 17b0 1op0 1tb0 Q2m0 3Ne0 WM0 1fA0 1cM0 1cM0 1oJ0 1dc0 1030 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5","Europe/Zurich|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e4","Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|012323232323232323234545467676767676767676767323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 gL0 WO0 1cM0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4","Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|30e3","Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Europe/Kaliningrad|CET CEST EET EEST MSK MSD +03|-10 -20 -20 -30 -30 -40 -30|01010101010101232454545454545454543232323232323232323232323232323232323232323262|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 390 7A0 1en0 12N0 1pbb0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|44e4","Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|34e5","Europe/Kirov|LMT +03 +04 +05|-3i.M -30 -40 -50|01232323232323232321212121212121212121212121212121212121212121|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|48e4","Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2le00 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5","Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4","Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|010101010101010101210343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-25Td0 19B0 1cL0 1dd0 b1z0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1in0 17d0 iIn0 Hd0 1cL0 bb0 1200 2s20 14n0 5aL0 Mp0 1vz0 17d0 1in0 17d0 1in0 17d0 1in0 17d0 6hX0 11B0 XHX0 1a10 1fz0 1a10 19X0 1cN0 1fz0 1a10 1fC0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e5","Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1co0 17c0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1co0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4","Europe/Minsk|MMT EET MSK CEST CET MSD EEST +03|-1O -20 -30 -20 -10 -40 -30 -30|01234343252525252525252525261616161616161616161616161616161616161617|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0|19e5","Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e3","Europe/Moscow|MMT MMT MST MDST MSD MSK +05 EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c4v.j ik0 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|16e6","Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6","Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|64e4","Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1cM0 16M0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1C00 LA0 1zc0 Oo0 1C00 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|39e5","Europe/Samara|LMT +03 +04 +05|-3k.k -30 -40 -50|0123232323232323232121232323232323232323232323232323232323212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2y10 14m0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|12e5","Europe/Saratov|LMT +03 +04 +05|-34.i -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 5810","Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4","Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|15e5","Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e4","Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4","Europe/Ulyanovsk|LMT +03 +04 +05 +02|-3d.A -30 -40 -50 -20|01232323232323232321214121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|13e5","Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e4","Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1ao0 1co0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5","Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646473737373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4","Europe/Volgograd|LMT +03 +04 +05|-2V.E -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-21IqV.E psLV.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 9Jd0|10e5","Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5","Europe/Zaporozhye|+0220 EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|77e4","HST|HST|a0|0|","Indian/Chagos|LMT +05 +06|-4N.E -50 -60|012|-2xosN.E 3AGLN.E|30e2","Indian/Cocos|+0630|-6u|0||596","Indian/Kerguelen|-00 +05|0 -50|01|-MG00|130","Indian/Mahe|LMT +04|-3F.M -40|01|-2yO3F.M|79e3","Indian/Maldives|MMT +05|-4S -50|01|-olgS|35e4","Indian/Mauritius|LMT +04 +05|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4","Indian/Reunion|LMT +04|-3F.Q -40|01|-2mDDF.Q|84e4","Pacific/Kwajalein|+11 +10 +09 -12 +12|-b0 -a0 -90 c0 -c0|012034|-1kln0 akp0 6Up0 12ry0 Wan0|14e3","MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","MST|MST|70|0|","MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","Pacific/Chatham|+1215 +1245 +1345|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600","Pacific/Apia|LMT -1130 -11 -10 +14 +13|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3","Pacific/Bougainville|+10 +09 +11|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0|18e4","Pacific/Chuuk|+10 +09|-a0 -90|01010|-2ewy0 axB0 RVX0 axd0|49e3","Pacific/Efate|LMT +11 +12|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0|66e3","Pacific/Enderbury|-12 -11 +13|c0 b0 -d0|012|nIc0 B7X0|1","Pacific/Fakaofo|-11 +13|b0 -d0|01|1Gfn0|483","Pacific/Fiji|LMT +12 +13|-bT.I -c0 -d0|0121212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 20o0 pc0 20o0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 1VA0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 1VA0 s00|88e4","Pacific/Galapagos|LMT -05 -06|5W.o 50 60|01212|-1yVS1.A 2dTz1.A gNd0 rz0|25e3","Pacific/Gambier|LMT -09|8X.M 90|01|-2jof0.c|125","Pacific/Guadalcanal|LMT +11|-aD.M -b0|01|-2joyD.M|11e4","Pacific/Guam|GST +09 GDT ChST|-a0 -90 -b0 -a0|01020202020202020203|-18jK0 6pB0 AhB0 3QL0 g2p0 3p91 WOX rX0 1zd0 Rb0 1wp0 Rb0 5xd0 rX0 5sN0 zb1 1C0X On0 ULb0|17e4","Pacific/Honolulu|HST HDT HWT HPT HST|au 9u 9u 9u a0|0102304|-1thLu 8x0 lef0 8wWu iAu 46p0|37e4","Pacific/Kiritimati|-1040 -10 +14|aE a0 -e0|012|nIaE B7Xk|51e2","Pacific/Kosrae|+11 +09 +10 +12|-b0 -90 -a0 -c0|01021030|-2ewz0 axC0 HBy0 akp0 axd0 WOK0 1bdz0|66e2","Pacific/Majuro|+11 +09 +10 +12|-b0 -90 -a0 -c0|0102103|-2ewz0 axC0 HBy0 akp0 6RB0 12um0|28e3","Pacific/Marquesas|LMT -0930|9i 9u|01|-2joeG|86e2","Pacific/Pago_Pago|LMT SST|bm.M b0|01|-2nDMB.c|37e2","Pacific/Nauru|LMT +1130 +09 +12|-b7.E -bu -90 -c0|01213|-1Xdn7.E QCnB.E 7mqu 1lnbu|10e3","Pacific/Niue|-1120 -1130 -11|bk bu b0|012|-KfME 17y0a|12e2","Pacific/Norfolk|+1112 +1130 +1230 +11 +12|-bc -bu -cu -b0 -c0|012134343434343434343434343434343434343434|-Kgbc W01G Oo0 1COo0 9Jcu 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|25e4","Pacific/Noumea|LMT +11 +12|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0|98e3","Pacific/Pitcairn|-0830 -08|8u 80|01|18Vku|56","Pacific/Pohnpei|+11 +09 +10|-b0 -90 -a0|010210|-2ewz0 axC0 HBy0 akp0 axd0|34e3","Pacific/Rarotonga|-1030 -0930 -10|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu|13e3","Pacific/Tahiti|LMT -10|9W.g a0|01|-2joe1.I|18e4","Pacific/Tongatapu|+1220 +13 +14|-ck -d0 -e0|0121212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0 zWN0 s00|75e3","PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00"],"links":["Africa/Abidjan|Africa/Bamako","Africa/Abidjan|Africa/Banjul","Africa/Abidjan|Africa/Conakry","Africa/Abidjan|Africa/Dakar","Africa/Abidjan|Africa/Freetown","Africa/Abidjan|Africa/Lome","Africa/Abidjan|Africa/Nouakchott","Africa/Abidjan|Africa/Ouagadougou","Africa/Abidjan|Africa/Timbuktu","Africa/Abidjan|Atlantic/St_Helena","Africa/Cairo|Egypt","Africa/Johannesburg|Africa/Maseru","Africa/Johannesburg|Africa/Mbabane","Africa/Lagos|Africa/Bangui","Africa/Lagos|Africa/Brazzaville","Africa/Lagos|Africa/Douala","Africa/Lagos|Africa/Kinshasa","Africa/Lagos|Africa/Libreville","Africa/Lagos|Africa/Luanda","Africa/Lagos|Africa/Malabo","Africa/Lagos|Africa/Niamey","Africa/Lagos|Africa/Porto-Novo","Africa/Maputo|Africa/Blantyre","Africa/Maputo|Africa/Bujumbura","Africa/Maputo|Africa/Gaborone","Africa/Maputo|Africa/Harare","Africa/Maputo|Africa/Kigali","Africa/Maputo|Africa/Lubumbashi","Africa/Maputo|Africa/Lusaka","Africa/Nairobi|Africa/Addis_Ababa","Africa/Nairobi|Africa/Asmara","Africa/Nairobi|Africa/Asmera","Africa/Nairobi|Africa/Dar_es_Salaam","Africa/Nairobi|Africa/Djibouti","Africa/Nairobi|Africa/Kampala","Africa/Nairobi|Africa/Mogadishu","Africa/Nairobi|Indian/Antananarivo","Africa/Nairobi|Indian/Comoro","Africa/Nairobi|Indian/Mayotte","Africa/Tripoli|Libya","America/Adak|America/Atka","America/Adak|US/Aleutian","America/Anchorage|US/Alaska","America/Argentina/Buenos_Aires|America/Buenos_Aires","America/Argentina/Catamarca|America/Argentina/ComodRivadavia","America/Argentina/Catamarca|America/Catamarca","America/Argentina/Cordoba|America/Cordoba","America/Argentina/Cordoba|America/Rosario","America/Argentina/Jujuy|America/Jujuy","America/Argentina/Mendoza|America/Mendoza","America/Atikokan|America/Coral_Harbour","America/Chicago|US/Central","America/Curacao|America/Aruba","America/Curacao|America/Kralendijk","America/Curacao|America/Lower_Princes","America/Denver|America/Shiprock","America/Denver|Navajo","America/Denver|US/Mountain","America/Detroit|US/Michigan","America/Edmonton|Canada/Mountain","America/Fort_Wayne|America/Indiana/Indianapolis","America/Fort_Wayne|America/Indianapolis","America/Fort_Wayne|US/East-Indiana","America/Halifax|Canada/Atlantic","America/Havana|Cuba","America/Indiana/Knox|America/Knox_IN","America/Indiana/Knox|US/Indiana-Starke","America/Jamaica|Jamaica","America/Kentucky/Louisville|America/Louisville","America/Los_Angeles|US/Pacific","America/Los_Angeles|US/Pacific-New","America/Manaus|Brazil/West","America/Mazatlan|Mexico/BajaSur","America/Mexico_City|Mexico/General","America/New_York|US/Eastern","America/Noronha|Brazil/DeNoronha","America/Panama|America/Cayman","America/Phoenix|US/Arizona","America/Port_of_Spain|America/Anguilla","America/Port_of_Spain|America/Antigua","America/Port_of_Spain|America/Dominica","America/Port_of_Spain|America/Grenada","America/Port_of_Spain|America/Guadeloupe","America/Port_of_Spain|America/Marigot","America/Port_of_Spain|America/Montserrat","America/Port_of_Spain|America/St_Barthelemy","America/Port_of_Spain|America/St_Kitts","America/Port_of_Spain|America/St_Lucia","America/Port_of_Spain|America/St_Thomas","America/Port_of_Spain|America/St_Vincent","America/Port_of_Spain|America/Tortola","America/Port_of_Spain|America/Virgin","America/Regina|Canada/Saskatchewan","America/Rio_Branco|America/Porto_Acre","America/Rio_Branco|Brazil/Acre","America/Santiago|Chile/Continental","America/Sao_Paulo|Brazil/East","America/St_Johns|Canada/Newfoundland","America/Tijuana|America/Ensenada","America/Tijuana|America/Santa_Isabel","America/Tijuana|Mexico/BajaNorte","America/Toronto|America/Montreal","America/Toronto|Canada/Eastern","America/Vancouver|Canada/Pacific","America/Whitehorse|Canada/Yukon","America/Winnipeg|Canada/Central","Asia/Ashgabat|Asia/Ashkhabad","Asia/Bangkok|Asia/Phnom_Penh","Asia/Bangkok|Asia/Vientiane","Asia/Dhaka|Asia/Dacca","Asia/Dubai|Asia/Muscat","Asia/Ho_Chi_Minh|Asia/Saigon","Asia/Hong_Kong|Hongkong","Asia/Jerusalem|Asia/Tel_Aviv","Asia/Jerusalem|Israel","Asia/Kathmandu|Asia/Katmandu","Asia/Kolkata|Asia/Calcutta","Asia/Kuala_Lumpur|Asia/Singapore","Asia/Kuala_Lumpur|Singapore","Asia/Macau|Asia/Macao","Asia/Makassar|Asia/Ujung_Pandang","Asia/Nicosia|Europe/Nicosia","Asia/Qatar|Asia/Bahrain","Asia/Rangoon|Asia/Yangon","Asia/Riyadh|Asia/Aden","Asia/Riyadh|Asia/Kuwait","Asia/Seoul|ROK","Asia/Shanghai|Asia/Chongqing","Asia/Shanghai|Asia/Chungking","Asia/Shanghai|Asia/Harbin","Asia/Shanghai|PRC","Asia/Taipei|ROC","Asia/Tehran|Iran","Asia/Thimphu|Asia/Thimbu","Asia/Tokyo|Japan","Asia/Ulaanbaatar|Asia/Ulan_Bator","Asia/Urumqi|Asia/Kashgar","Atlantic/Faroe|Atlantic/Faeroe","Atlantic/Reykjavik|Iceland","Atlantic/South_Georgia|Etc/GMT+2","Australia/Adelaide|Australia/South","Australia/Brisbane|Australia/Queensland","Australia/Broken_Hill|Australia/Yancowinna","Australia/Darwin|Australia/North","Australia/Hobart|Australia/Tasmania","Australia/Lord_Howe|Australia/LHI","Australia/Melbourne|Australia/Victoria","Australia/Perth|Australia/West","Australia/Sydney|Australia/ACT","Australia/Sydney|Australia/Canberra","Australia/Sydney|Australia/NSW","Etc/GMT-0|Etc/GMT","Etc/GMT-0|Etc/GMT+0","Etc/GMT-0|Etc/GMT0","Etc/GMT-0|Etc/Greenwich","Etc/GMT-0|GMT","Etc/GMT-0|GMT+0","Etc/GMT-0|GMT-0","Etc/GMT-0|GMT0","Etc/GMT-0|Greenwich","Etc/UTC|Etc/UCT","Etc/UTC|Etc/Universal","Etc/UTC|Etc/Zulu","Etc/UTC|UCT","Etc/UTC|UTC","Etc/UTC|Universal","Etc/UTC|Zulu","Europe/Belgrade|Europe/Ljubljana","Europe/Belgrade|Europe/Podgorica","Europe/Belgrade|Europe/Sarajevo","Europe/Belgrade|Europe/Skopje","Europe/Belgrade|Europe/Zagreb","Europe/Chisinau|Europe/Tiraspol","Europe/Dublin|Eire","Europe/Helsinki|Europe/Mariehamn","Europe/Istanbul|Asia/Istanbul","Europe/Istanbul|Turkey","Europe/Lisbon|Portugal","Europe/London|Europe/Belfast","Europe/London|Europe/Guernsey","Europe/London|Europe/Isle_of_Man","Europe/London|Europe/Jersey","Europe/London|GB","Europe/London|GB-Eire","Europe/Moscow|W-SU","Europe/Oslo|Arctic/Longyearbyen","Europe/Oslo|Atlantic/Jan_Mayen","Europe/Prague|Europe/Bratislava","Europe/Rome|Europe/San_Marino","Europe/Rome|Europe/Vatican","Europe/Warsaw|Poland","Europe/Zurich|Europe/Busingen","Europe/Zurich|Europe/Vaduz","Indian/Christmas|Etc/GMT-7","Pacific/Auckland|Antarctica/McMurdo","Pacific/Auckland|Antarctica/South_Pole","Pacific/Auckland|NZ","Pacific/Chatham|NZ-CHAT","Pacific/Chuuk|Pacific/Truk","Pacific/Chuuk|Pacific/Yap","Pacific/Easter|Chile/EasterIsland","Pacific/Guam|Pacific/Saipan","Pacific/Honolulu|Pacific/Johnston","Pacific/Honolulu|US/Hawaii","Pacific/Kwajalein|Kwajalein","Pacific/Pago_Pago|Pacific/Midway","Pacific/Pago_Pago|Pacific/Samoa","Pacific/Pago_Pago|US/Samoa","Pacific/Palau|Etc/GMT-9","Pacific/Pohnpei|Pacific/Ponape","Pacific/Port_Moresby|Etc/GMT-10","Pacific/Tarawa|Etc/GMT-12","Pacific/Tarawa|Pacific/Funafuti","Pacific/Tarawa|Pacific/Wake","Pacific/Tarawa|Pacific/Wallis"]}

/***/ }),
/* 900 */
/***/ (function(module, exports) {

	(function() {
		'use strict';
	
		var constants = {
			/*
			 * This object contains application wide constants.
			 * - Capitalized data type names
			 */
	
			/* Data types */
			'boolean': 'BOOLEAN',
			'string': 'STRING',
			'datetime': 'DATETIME',
			'date': 'DATE',
			'double': 'DOUBLE',
			'quantity': 'QUANTITY',
			'percent': 'PERCENT',
			'currency': 'CURRENCY',
			'picklist': 'PICKLIST',
			'multipicklist': 'MULTIPICKLIST',
			'textarea': 'TEXTAREA',
	        'reference': 'REFERENCE',
			'url': 'URL',
	
			/* Sorting */
			'ASCENDING': 'ASC',
			'DESCENDING': 'DESC',
	
			/* Product*/
			'NEW': 'new',
			'PDF': 'pdf',
			'ICON_ID': 'IconId__c',
			'IMAGE_SIZE': 1000000,
	
			/* User Message Types */
			'SUCCESS': 'success',
			'DANGER': 'danger',
	
			/* Global constants */
			'MAX_CHUNK_SIZE': 1000//considering this as the max size to remove chunking in some cases
		};
	
		module.exports = constants;
	
	})();

/***/ }),
/* 901 */
/***/ (function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = function() {
	    'use strict';
	
	    var priceRulesetSubMenuController = function($stateParams, systemConstants, i18nService) {
	        var vm = this;
	
	        vm.$stateParams = $stateParams;
	        vm.labels = i18nService.CustomLabel;
	        vm.prefix = systemConstants.nsPrefix || '';
	
	    };
	
	    priceRulesetSubMenuController.$inject = [
	        '$stateParams',
	        'systemConstants',
	        'i18nService'
	    ];
	
	    return {
	        restrict: 'E',
	        scope: {},
	        controller: priceRulesetSubMenuController,
	        controllerAs: 'vm',
	        bindToController: true,
	        template: __webpack_require__(__webpack_module_template_argument_0__),
	    };
	};


/***/ })
]);
//# sourceMappingURL=app.js.map
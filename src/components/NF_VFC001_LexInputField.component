<!--
@name       NF_VFC001_LexInputField
@author     
@since      Jan 10, 2017
@desc       This Code is designed to solve the data binding and dynamic rendering via SobjectField type
The Code Logic is inspired from (https://justinyue.wordpress.com/2016/01/23/migrating-visualforce-component-into-lightning-experience-world/)

@history    
-->
<apex:component controller="NF_CT001_LexForceComponent">
    <apex:attribute name="sObject" description="" type="SObject" assignTo="{!inputObject}" />
    <apex:attribute name="field" description="" type="String" assignTo="{!fieldName}" />
    <apex:attribute name="isRequired" description="" type="boolean" />
    <apex:attribute name="isReadOnly" description="" type="boolean" />
    <apex:outputPanel >
        <!-- Render the None Read-Only Field -->
        <apex:outputPanel layout="none">
            <!-- Render Input Field -->
            <apex:outputPanel layout="block" styleClass="slds-form-element" id="divTextInput" rendered="{!isInput}">
                <label class="slds-form-element__label" for="txtInput">{!$ObjectType[objectName].Fields[field].Label}</label>
                <div class="slds-form-element__control">
                    <apex:inputField id="txtInput" rendered="!{!isReadOnly}" value="{!sObject[field]}" styleclass="slds-input" required="{!isRequired}"/>
                    <apex:outputField id="txtOutput" rendered="{!isReadOnly}" value="{!sObject[field]}" styleclass="slds-input"/>
                </div>
            </apex:outputPanel>
            
            <!-- Render Textarea Field -->
            <apex:outputPanel layout="block" styleClass="slds-form-element" id="divTextArea" rendered="{!isTextarea}">
                <label class="slds-form-element__label" for="txtArea">{!$ObjectType[objectName].Fields[field].Label}</label>
                <div class="slds-form-element__control">
                    <apex:inputField id="txtArea" rendered="{!NOT(isReadOnly)}"  value="{!sObject[field]}" styleclass="slds-textarea" required="{!isRequired}"/>
                    <apex:outputField id="outTxtArea" rendered="{!isReadOnly}"  value="{!sObject[field]}" styleclass="slds-textarea" />
                </div>
            </apex:outputPanel>
            
            <!-- Render Checkbox Field -->
            <apex:outputPanel layout="block" styleClass="slds-form-element" id="divCheckbox" rendered="{!isCheckbox}">
                <label class="slds-checkbox" for="{!$Component.checkBox}">
                    <apex:inputField id="checkBox" rendered="{!NOT(isReadOnly)}" value="{!sObject[field]}" required="{!isRequired}"/>
                    <apex:outputField id="outCheckBox" rendered="{!isReadOnly}" value="{!sObject[field]}" />
                    <span class="slds-checkbox--faux"></span>
                    <span class="slds-form-element__label">{!$ObjectType[objectName].Fields[field].Label}</span>
                </label>
            </apex:outputPanel>
            
            <!-- Render Date/Datetime Field -->
            <apex:outputPanel layout="block" styleClass="slds-form-element" id="divDatetime" rendered="{!isDatetime}">
                <label class="slds-form-element__label" for="txtDatetime">{!$ObjectType[objectName].Fields[field].Label}</label>
                <div class="slds-form-element__control">
                    <apex:inputField id="txtDatetime" rendered="{!NOT(isReadOnly)}" value="{!sObject[field]}" styleclass="slds-input" style="width:50%;" required="{!isRequired}"/>
                    <apex:outputField id="OuttxtDatetime" rendered="{!isReadOnly}" value="{!sObject[field]}" styleclass="slds-input" style="width:50%;" />
                </div>
                <script type="text/javascript">
                // Wrap the datePicker control within slds div to stylish it 
                var datePickerLexWrapper;
                if (datePickerLexWrapper == null) {
                    datePickerLexWrapper = document.createElement('div');
                    datePickerLexWrapper.className = 'slds';
                    datePickerLexWrapper.id = 'datePicker_slds_wrapper';
                    document.addEventListener("DOMContentLoaded", function(event) { 
                        var dtp = document.getElementById('datePicker');
                        if (dtp != null) {
                            var dtpParent = dtp.parentElement;
                            dtpParent.appendChild(datePickerLexWrapper);
                            datePickerLexWrapper.appendChild(dtp);
                        }
                    });
                }
                </script>
            </apex:outputPanel>
            
            <!-- Render Lookup Field -->
            <apex:outputPanel layout="block" styleClass="slds-lookup" id="divLookup" rendered="{!isLookup}" html-data-select="single" html-data-scope="single" html-data-typeahead="true">
                <div class="slds-form-element">
                    <label class="slds-form-element__label" for="lookup">{!$ObjectType[objectName].Fields[field].Label}</label>
                    <div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right">
                        <apex:inputField id="lookup" rendered="{!NOT(isReadOnly)}"  value="{!sObject[field]}" styleclass="slds-input" style=""  required="{!isRequired}"/>
                        <apex:outputField id="outLookup" rendered="{!isReadOnly}"  value="{!sObject[field]}" styleclass="slds-input" style=""  />
                    </div>
                </div>
                <script>
                var lkInput = document.getElementById("{!$Component.lookup}");
                lkInput.style.visibility = "";
                var lkSpan = lkInput.parentElement;
                var lkLink = lkSpan.querySelector("a");
                lkLink.style.visibility = "";
                lkLink.className = "";
                lkLink.innerHTML = "<svg aria-hidden=\"true\" class=\"slds-input__icon\"><use xlink:href=\"/resource/NF_SLDS_Spring/assets/icons/utility-sprite/svg/symbols.svg#search" + "\"></use></svg>";
                </script>
            </apex:outputPanel>
            
            <!-- Render Picklist Field -->
            <apex:outputPanel layout="block" styleClass="slds-form-element" id="divPicklist" rendered="{!isPicklist}">
                <label class="slds-form-element__label" for="selPicklist">{!$ObjectType[objectName].Fields[field].Label}</label>
                <div class="slds-form-element__control">
                    <apex:inputField id="selPicklist" rendered="{!NOT(isReadOnly)}" value="{!sObject[field]}" styleclass="slds-select" required="{!isRequired}"/>
                    <apex:outputField id="outselPicklist" rendered="{!isReadOnly}" value="{!sObject[field]}" styleclass="slds-select" />
                </div>
                <apex:outputPanel layout="none" rendered="{!isDependentPicklist}">
                    <script>
                    window.lexpl = window.lexpl || {};
                    
                    if (lexpl.deppicklists == null) {
                        lexpl.deppicklists = [];
                        var winOnload = window.onload;
                        window.onload = function() {
                            // register lexpl events
                            for (var i = 0; i < lexpl.deppicklists.length; i++) {
                                var depplId = lexpl.deppicklists[i];
                                var deppl = picklist.picklists[depplId];
                                var controller = document.getElementById(deppl.controller_id);
                                var ctrlTagName = controller.tagName;
                                if (ctrlTagName == "SELECT") {
                                    controller.addEventListener("change", function(evt) {
                                        lexpl.updateDepPicklistStyle(evt);
                                    });
                                } else { // Checkbox
                                    controller.addEventListener("click", function(evt) {
                                        lexpl.updateDepPicklistStyle(evt);
                                    });
                                }
                                
                                var dpl = document.getElementById(depplId);
                                dpl.className += " slds-select";    
                            }
                            
                            if (winOnload != null)
                                winOnload();
                        }
                    }
                    
                    if (lexpl.updateDepPicklistStyle == null) {
                        lexpl.updateDepPicklistStyle = function(evt) {
                            for (var i = 0; i < lexpl.deppicklists.length; i++) {
                                var depplId = lexpl.deppicklists[i];
                                var deppl = picklist.picklists[depplId];
                                if (deppl.controller_id == evt.target.id) {
                                    var dpl = document.getElementById(depplId);
                                    if (dpl.className == null || dpl.className.indexOf("slds-select") == -1)
                                        dpl.className += " slds-select";                                
                                }
                            }
                        }
                    }
                    
                    lexpl.deppicklists.push("{!$Component.selPicklist}");                   
                    </script>
                </apex:outputPanel>
            </apex:outputPanel>
            
            <!-- Render MultiplePicklist Field -->
            <apex:outputPanel layout="block" styleClass="slds-form-element" id="divMultiPicklist" rendered="{!isMultiPicklist}">
                <label class="slds-form-element__label" for="divMSPWrapper">{!$ObjectType[objectName].Fields[field].Label}</label>
                <div class="slds-picklist--draggable slds-grid" id="divMSPWrapper" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" >
                    <apex:outputPanel layout="block" styleClass="slds-form-element__control" id="divMspLeft">
                    </apex:outputPanel>
                    <apex:outputPanel layout="block" styleClass="slds-grid slds-grid--vertical" id="divMspButtons">
                        <button class="slds-button slds-button--icon-container">
                            <svg aria-hidden="true" class="slds-button__icon">
                                <use xlink:href="{!URLFOR($Resource.NF_SLDS_Spring, '/assets/icons/utility-sprite/svg/symbols.svg#right')}"></use>
                            </svg>
                            <span class="slds-assistive-text">Arrow up</span>
                        </button>
                        <button class="slds-button slds-button--icon-container">
                            <svg aria-hidden="true" class="slds-button__icon">
                                <use xlink:href="{!URLFOR($Resource.NF_SLDS_Spring, '/assets/icons/utility-sprite/svg/symbols.svg#left')}"></use>
                            </svg>
                            <span class="slds-assistive-text">Arrow down</span>
                        </button>
                    </apex:outputPanel>
                    <apex:outputPanel layout="block" styleClass="slds-form-element__control" id="divMspRight">
                    </apex:outputPanel>
                </div>
                
                <apex:outputPanel layout="block" styleClass="slds-form-element__control" id="divVfcWrapper">
                    <apex:inputField id="Picklist" rendered="{!NOT(isReadOnly)}" value="{!sObject[field]}" styleclass="slds-select"/>
                    <apex:outputField id="outPicklist" rendered="{!isReadOnly}" value="{!sObject[field]}" styleclass="slds-select"/>
                </apex:outputPanel>
                
                <script type="text/javascript">
                var divSelWrapper = document.getElementById("{!$Component.divVfcWrapper}");
                var selList = divSelWrapper.getElementsByTagName("select");
                var selId = selList[0].id;
                
                var selLeft = selList[1];
                var selRight = selList[2];
                
                // Re-parent select controls for LEX support
                document.getElementById("{!$Component.divMspLeft}").appendChild(selLeft);
                document.getElementById("{!$Component.divMspRight}").appendChild(selRight);
                
                // Take away the "optgroup" because the VF render issue
                selLeft.innerHTML = selLeft.getElementsByTagName("optgroup")[0].innerHTML;
                selRight.innerHTML = selRight.getElementsByTagName("optgroup")[0].innerHTML;
                
                // Hook button event
                var btns = document.getElementById("{!$Component.divMspButtons}").getElementsByTagName("button");
                btns[0].onclick = function() {
                    MultiSelectPicklist.handleMSPSelect(selId);
                    return false;
                };
                btns[1].onclick = function() {
                    MultiSelectPicklist.handleMSPUnSelect(selId);
                    return false;
                };
                
                // Remove unused HTML elments
                divSelWrapper.removeChild(divSelWrapper.getElementsByTagName("table")[0]);
                </script>
            </apex:outputPanel>
        </apex:outputPanel>
    </apex:outputPanel>
</apex:component>